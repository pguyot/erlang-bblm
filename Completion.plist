<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ErlangAttributesForCompletion</key>
	<array>
		<string>-author</string>
		<string>-author(&lt;#Name#&gt;).</string>
		<string>-author(Name).</string>
		<string>-behaviour</string>
		<string>-behaviour(&lt;#Behaviour#&gt;).</string>
		<string>-behaviour(Behaviour).</string>
		<string>-callback</string>
		<string>-callback &lt;#Function#&gt;(&lt;#Params#&gt;) -&gt; &lt;#Type#&gt;.</string>
		<string>-callback Function(Params) -&gt; Type.</string>
		<string>-compile</string>
		<string>-compile([&lt;#Options#&gt;]).</string>
		<string>-compile([Options]).</string>
		<string>-compile</string>
		<string>-compile([native]).</string>
		<string>-compile([native]).</string>
		<string>-compile</string>
		<string>-compile([export_all]).</string>
		<string>-compile([export_all]).</string>
		<string>-define</string>
		<string>-define(&lt;#Name#&gt;, &lt;#Value#&gt;).</string>
		<string>-define(Name, Value).</string>
		<string>-define</string>
		<string>-define(&lt;#Name#&gt;(&lt;#Args#&gt;), &lt;#Value#&gt;).</string>
		<string>-define(Name(Args), Value).</string>
		<string>-else</string>
		<string>-else.</string>
		<string>-else.</string>
		<string>-endif</string>
		<string>-endif.</string>
		<string>-endif.</string>
		<string>-export</string>
		<string>-export([&lt;#Function/Arity#&gt;]).</string>
		<string>-export([Function/Arity]).</string>
		<string>-export_type</string>
		<string>-export_type([&lt;#Type/Arity#&gt;]).</string>
		<string>-export_type([Type/Arity]).</string>
		<string>-ifdef</string>
		<string>-ifdef(&lt;#Something#&gt;).</string>
		<string>-ifdef(Something).</string>
		<string>-ifndef</string>
		<string>-ifndef(&lt;#Something#&gt;).</string>
		<string>-ifndef(Something).</string>
		<string>-include</string>
		<string>-include("&lt;#Path#&gt;").</string>
		<string>-include("Path").</string>
		<string>-include_lib</string>
		<string>-include_lib("&lt;#Path#&gt;").</string>
		<string>-include_lib("Path").</string>
		<string>-mode</string>
		<string>-mode(compile).</string>
		<string>-mode(compile).</string>
		<string>-module</string>
		<string>-module(&lt;#Name#&gt;).</string>
		<string>-module(&lt;#Name#&gt;).</string>
		<string>-on_load</string>
		<string>-on_load(&lt;#Function#&gt;/0).</string>
		<string>-on_load(&lt;#Function#&gt;/0).</string>
		<string>-opaque</string>
		<string>-opaque &lt;#Name#&gt; :: &lt;#Definition#&gt;.</string>
		<string>-opaque Name :: Definition.</string>
		<string>-record</string>
		<string>-record(&lt;#Name#&gt;, {
&lt;#Key#&gt;
}).</string>
		<string>-record(Name, {}).</string>
		<string>-spec</string>
		<string>-spec &lt;#Function#&gt;(&lt;#Params#&gt;) -&gt; &lt;#Type#&gt;.</string>
		<string>-spec Function(Params) -&gt; Type.</string>
		<string>-type</string>
		<string>-type &lt;#Name#&gt; :: &lt;#Definition#&gt;.</string>
		<string>-type Name :: Definition.</string>
		<string>-undef</string>
		<string>-undef(&lt;#Something#&gt;).</string>
		<string>-undef(Something).</string>
		<string>-vsn</string>
		<string>-vsn("&lt;#0.1#&gt;").</string>
		<string>-vsn("0.1").</string>
	</array>
	<key>ErlangDocTagsForCompletion</key>
	<array>
		<string>@author</string>
		<string>@author </string>
		<string>@author</string>
		<string>@clear</string>
		<string>@clear</string>
		<string>@clear</string>
		<string>@copyright</string>
		<string>@copyright </string>
		<string>@copyright</string>
		<string>@deprecated</string>
		<string>@deprecated </string>
		<string>@deprecated</string>
		<string>@doc</string>
		<string>@doc </string>
		<string>@doc</string>
		<string>@docfile</string>
		<string>@docfile </string>
		<string>@docfile</string>
		<string>@end</string>
		<string>@end</string>
		<string>@end</string>
		<string>@equiv</string>
		<string>@equiv </string>
		<string>@equiv</string>
		<string>@headerfile</string>
		<string>@headerfile </string>
		<string>@headerfile</string>
		<string>@hidden</string>
		<string>@hidden </string>
		<string>@hidden</string>
		<string>@private</string>
		<string>@private </string>
		<string>@private</string>
		<string>@reference</string>
		<string>@reference </string>
		<string>@reference</string>
		<string>@see</string>
		<string>@see </string>
		<string>@see</string>
		<string>@since</string>
		<string>@since </string>
		<string>@since</string>
		<string>@spec</string>
		<string>@spec </string>
		<string>@spec</string>
		<string>@throws</string>
		<string>@throws </string>
		<string>@throws</string>
		<string>@title</string>
		<string>@title </string>
		<string>@title</string>
		<string>@todo</string>
		<string>@todo </string>
		<string>@todo</string>
		<string>@version</string>
		<string>@version </string>
		<string>@version</string>
	</array>
	<key>ErlangFunctionsForCompletion</key>
	<array>
	    <!-- exported and documented fucntions -->
		<string>alarm_handler:clear_alarm</string>
		<string>alarm_handler:clear_alarm(&lt;#AlarmId#&gt;)</string>
		<string>alarm_handler:clear_alarm(AlarmId) -&gt; void()</string>
		<string>alarm_handler:get_alarms</string>
		<string>alarm_handler:get_alarms()</string>
		<string>alarm_handler:get_alarms() -&gt; [alarm()]</string>
		<string>alarm_handler:set_alarm</string>
		<string>alarm_handler:set_alarm(&lt;#alarm()#&gt;)</string>
		<string>alarm_handler:set_alarm(alarm())</string>
		<string>any:create</string>
		<string>any:create()</string>
		<string>any:create() -&gt; Result</string>
		<string>any:create</string>
		<string>any:create(&lt;#Typecode#&gt;, &lt;#Value#&gt;)</string>
		<string>any:create(Typecode, Value) -&gt; Result</string>
		<string>any:set_typecode</string>
		<string>any:set_typecode(&lt;#A#&gt;, &lt;#Typecode#&gt;)</string>
		<string>any:set_typecode(A, Typecode) -&gt; Result</string>
		<string>any:get_typecode</string>
		<string>any:get_typecode(&lt;#A#&gt;)</string>
		<string>any:get_typecode(A) -&gt; Result</string>
		<string>any:set_value</string>
		<string>any:set_value(&lt;#A#&gt;, &lt;#Value#&gt;)</string>
		<string>any:set_value(A, Value) -&gt; Result</string>
		<string>any:get_value</string>
		<string>any:get_value(&lt;#A#&gt;)</string>
		<string>any:get_value(A) -&gt; Result</string>
		<string>application:ensure_all_started</string>
		<string>application:ensure_all_started(&lt;#Application#&gt;)</string>
		<string>application:ensure_all_started(Application) -&gt; {ok, Started} | {error, Reason}</string>
		<string>application:ensure_all_started</string>
		<string>application:ensure_all_started(&lt;#Application#&gt;, &lt;#Type#&gt;)</string>
		<string>application:ensure_all_started(Application, Type) -&gt; {ok, Started} | {error, Reason}</string>
		<string>application:ensure_started</string>
		<string>application:ensure_started(&lt;#Application#&gt;)</string>
		<string>application:ensure_started(Application) -&gt; ok | {error, Reason}</string>
		<string>application:ensure_started</string>
		<string>application:ensure_started(&lt;#Application#&gt;, &lt;#Type#&gt;)</string>
		<string>application:ensure_started(Application, Type) -&gt; ok | {error, Reason}</string>
		<string>application:get_all_env</string>
		<string>application:get_all_env()</string>
		<string>application:get_all_env() -&gt; Env</string>
		<string>application:get_all_env</string>
		<string>application:get_all_env(&lt;#Application#&gt;)</string>
		<string>application:get_all_env(Application) -&gt; Env</string>
		<string>application:get_all_key</string>
		<string>application:get_all_key()</string>
		<string>application:get_all_key() -&gt; [] | {ok, Keys}</string>
		<string>application:get_all_key</string>
		<string>application:get_all_key(&lt;#Application#&gt;)</string>
		<string>application:get_all_key(Application) -&gt; undefined | Keys</string>
		<string>application:get_application</string>
		<string>application:get_application()</string>
		<string>application:get_application() -&gt; undefined | {ok, Application}</string>
		<string>application:get_application</string>
		<string>application:get_application(&lt;#PidOrModule#&gt;)</string>
		<string>application:get_application(PidOrModule) -&gt; undefined | {ok, Application}</string>
		<string>application:get_env</string>
		<string>application:get_env(&lt;#Par#&gt;)</string>
		<string>application:get_env(Par) -&gt; undefined | {ok, Val}</string>
		<string>application:get_env</string>
		<string>application:get_env(&lt;#Application#&gt;, &lt;#Par#&gt;)</string>
		<string>application:get_env(Application, Par) -&gt; undefined | {ok, Val}</string>
		<string>application:get_env</string>
		<string>application:get_env(&lt;#Application#&gt;, &lt;#Par#&gt;, &lt;#Def#&gt;)</string>
		<string>application:get_env(Application, Par, Def) -&gt; Val</string>
		<string>application:get_key</string>
		<string>application:get_key(&lt;#Key#&gt;)</string>
		<string>application:get_key(Key) -&gt; undefined | {ok, Val}</string>
		<string>application:get_key</string>
		<string>application:get_key(&lt;#Application#&gt;, &lt;#Key#&gt;)</string>
		<string>application:get_key(Application, Key) -&gt; undefined | {ok, Val}</string>
		<string>application:info</string>
		<string>application:info()</string>
		<string>application:info() -&gt; term()</string>
		<string>application:load</string>
		<string>application:load(&lt;#AppDescr#&gt;)</string>
		<string>application:load(AppDescr) -&gt; ok | {error, Reason}</string>
		<string>application:load</string>
		<string>application:load(&lt;#AppDescr#&gt;, &lt;#Distributed#&gt;)</string>
		<string>application:load(AppDescr, Distributed) -&gt; ok | {error, Reason}</string>
		<string>application:loaded_applications</string>
		<string>application:loaded_applications()</string>
		<string>application:loaded_applications() -&gt; [{Application, Description, Vsn}]</string>
		<string>application:permit</string>
		<string>application:permit(&lt;#Application#&gt;, &lt;#Permission#&gt;)</string>
		<string>application:permit(Application, Permission) -&gt; ok | {error, Reason}</string>
		<string>application:set_env</string>
		<string>application:set_env(&lt;#Application#&gt;, &lt;#Par#&gt;, &lt;#Val#&gt;)</string>
		<string>application:set_env(Application, Par, Val) -&gt; ok</string>
		<string>application:set_env</string>
		<string>application:set_env(&lt;#Application#&gt;, &lt;#Par#&gt;, &lt;#Val#&gt;, &lt;#Opts#&gt;)</string>
		<string>application:set_env(Application, Par, Val, Opts) -&gt; ok</string>
		<string>application:start</string>
		<string>application:start(&lt;#Application#&gt;)</string>
		<string>application:start(Application) -&gt; ok | {error, Reason}</string>
		<string>application:start</string>
		<string>application:start(&lt;#Application#&gt;, &lt;#Type#&gt;)</string>
		<string>application:start(Application, Type) -&gt; ok | {error, Reason}</string>
		<string>application:start_boot</string>
		<string>application:start_boot(&lt;#Application :: atom()#&gt;)</string>
		<string>application:start_boot(Application :: atom()) -&gt; ok | {error, term()}</string>
		<string>application:start_boot</string>
		<string>application:start_boot(&lt;#Application :: atom()#&gt;, &lt;#RestartType :: restart_type()#&gt;)</string>
		<string>application:start_boot(Application :: atom(), RestartType :: restart_type()) -&gt; ok | {error, term()}</string>
		<string>application:start_type</string>
		<string>application:start_type()</string>
		<string>application:start_type() -&gt; StartType | undefined | local</string>
		<string>application:stop</string>
		<string>application:stop(&lt;#Application#&gt;)</string>
		<string>application:stop(Application) -&gt; ok | {error, Reason}</string>
		<string>application:takeover</string>
		<string>application:takeover(&lt;#Application#&gt;, &lt;#Type#&gt;)</string>
		<string>application:takeover(Application, Type) -&gt; ok | {error, Reason}</string>
		<string>application:unload</string>
		<string>application:unload(&lt;#Application#&gt;)</string>
		<string>application:unload(Application) -&gt; ok | {error, Reason}</string>
		<string>application:unset_env</string>
		<string>application:unset_env(&lt;#Application#&gt;, &lt;#Par#&gt;)</string>
		<string>application:unset_env(Application, Par) -&gt; ok</string>
		<string>application:unset_env</string>
		<string>application:unset_env(&lt;#Application#&gt;, &lt;#Par#&gt;, &lt;#Opts#&gt;)</string>
		<string>application:unset_env(Application, Par, Opts) -&gt; ok</string>
		<string>application:which_applications</string>
		<string>application:which_applications()</string>
		<string>application:which_applications() -&gt; [{Application, Description, Vsn}]</string>
		<string>application:which_applications</string>
		<string>application:which_applications(&lt;#Timeout#&gt;)</string>
		<string>application:which_applications(Timeout) -&gt; [{Application, Description, Vsn}]</string>
		<string>array:default</string>
		<string>array:default(&lt;#Array :: array(Type)#&gt;)</string>
		<string>array:default(Array :: array(Type)) -&gt; Value :: Type</string>
		<string>array:fix</string>
		<string>array:fix(&lt;#Array :: array(Type)#&gt;)</string>
		<string>array:fix(Array :: array(Type)) -&gt; array(Type)</string>
		<string>array:foldl</string>
		<string>array:foldl(&lt;#Function#&gt;, &lt;#InitialAcc :: A#&gt;, &lt;#Array :: array(Type)#&gt;)</string>
		<string>array:foldl(Function, InitialAcc :: A, Array :: array(Type)) -&gt; B</string>
		<string>array:foldr</string>
		<string>array:foldr(&lt;#Function#&gt;, &lt;#InitialAcc :: A#&gt;, &lt;#Array :: array(Type)#&gt;)</string>
		<string>array:foldr(Function, InitialAcc :: A, Array :: array(Type)) -&gt; B</string>
		<string>array:from_list</string>
		<string>array:from_list(&lt;#List :: [Value :: Type]#&gt;)</string>
		<string>array:from_list(List :: [Value :: Type]) -&gt; array(Type)</string>
		<string>array:from_list</string>
		<string>array:from_list(&lt;#List :: [Value :: Type]#&gt;, &lt;#Default :: term()#&gt;)</string>
		<string>array:from_list(List :: [Value :: Type], Default :: term()) -&gt; array(Type)</string>
		<string>array:from_orddict</string>
		<string>array:from_orddict(&lt;#Orddict :: indx_pairs(Value :: Type)#&gt;)</string>
		<string>array:from_orddict(Orddict :: indx_pairs(Value :: Type)) -&gt; array(Type)</string>
		<string>array:from_orddict</string>
		<string>array:from_orddict(&lt;#Orddict :: indx_pairs(Value :: Type)#&gt;, &lt;#Default :: Type#&gt;)</string>
		<string>array:from_orddict(Orddict :: indx_pairs(Value :: Type), Default :: Type) -&gt; array(Type)</string>
		<string>array:get</string>
		<string>array:get(&lt;#I :: array_indx()#&gt;, &lt;#Array :: array(Type)#&gt;)</string>
		<string>array:get(I :: array_indx(), Array :: array(Type)) -&gt; Value :: Type</string>
		<string>array:is_array</string>
		<string>array:is_array(&lt;#X :: term()#&gt;)</string>
		<string>array:is_array(X :: term()) -&gt; boolean()</string>
		<string>array:is_fix</string>
		<string>array:is_fix(&lt;#Array :: array()#&gt;)</string>
		<string>array:is_fix(Array :: array()) -&gt; boolean()</string>
		<string>array:map</string>
		<string>array:map(&lt;#Function#&gt;, &lt;#Array :: array(Type1)#&gt;)</string>
		<string>array:map(Function, Array :: array(Type1)) -&gt; array(Type2)</string>
		<string>array:new</string>
		<string>array:new()</string>
		<string>array:new() -&gt; array()</string>
		<string>array:new</string>
		<string>array:new(&lt;#Options :: array_opts()#&gt;)</string>
		<string>array:new(Options :: array_opts()) -&gt; array()</string>
		<string>array:new</string>
		<string>array:new(&lt;#Size :: integer() &gt;= 0#&gt;, &lt;#Options :: array_opts()#&gt;)</string>
		<string>array:new(Size :: integer() &gt;= 0, Options :: array_opts()) -&gt; array()</string>
		<string>array:relax</string>
		<string>array:relax(&lt;#Array :: array(Type)#&gt;)</string>
		<string>array:relax(Array :: array(Type)) -&gt; array(Type)</string>
		<string>array:reset</string>
		<string>array:reset(&lt;#I :: array_indx()#&gt;, &lt;#Array :: array(Type)#&gt;)</string>
		<string>array:reset(I :: array_indx(), Array :: array(Type)) -&gt; array(Type)</string>
		<string>array:resize</string>
		<string>array:resize(&lt;#Array :: array(Type)#&gt;)</string>
		<string>array:resize(Array :: array(Type)) -&gt; array(Type)</string>
		<string>array:resize</string>
		<string>array:resize(&lt;#Size :: integer() &gt;= 0#&gt;, &lt;#Array :: array(Type)#&gt;)</string>
		<string>array:resize(Size :: integer() &gt;= 0, Array :: array(Type)) -&gt; array(Type)</string>
		<string>array:set</string>
		<string>array:set(&lt;#I :: array_indx()#&gt;, &lt;#Value :: Type#&gt;, &lt;#Array :: array(Type)#&gt;)</string>
		<string>array:set(I :: array_indx(), Value :: Type, Array :: array(Type)) -&gt; array(Type)</string>
		<string>array:size</string>
		<string>array:size(&lt;#Array :: array()#&gt;)</string>
		<string>array:size(Array :: array()) -&gt; integer() &gt;= 0</string>
		<string>array:sparse_foldl</string>
		<string>array:sparse_foldl(&lt;#Function#&gt;, &lt;#InitialAcc :: A#&gt;, &lt;#Array :: array(Type)#&gt;)</string>
		<string>array:sparse_foldl(Function, InitialAcc :: A, Array :: array(Type)) -&gt; B</string>
		<string>array:sparse_foldr</string>
		<string>array:sparse_foldr(&lt;#Function#&gt;, &lt;#InitialAcc :: A#&gt;, &lt;#Array :: array(Type)#&gt;)</string>
		<string>array:sparse_foldr(Function, InitialAcc :: A, Array :: array(Type)) -&gt; B</string>
		<string>array:sparse_map</string>
		<string>array:sparse_map(&lt;#Function#&gt;, &lt;#Array :: array(Type1)#&gt;)</string>
		<string>array:sparse_map(Function, Array :: array(Type1)) -&gt; array(Type2)</string>
		<string>array:sparse_size</string>
		<string>array:sparse_size(&lt;#Array :: array()#&gt;)</string>
		<string>array:sparse_size(Array :: array()) -&gt; integer() &gt;= 0</string>
		<string>array:sparse_to_list</string>
		<string>array:sparse_to_list(&lt;#Array :: array(Type)#&gt;)</string>
		<string>array:sparse_to_list(Array :: array(Type)) -&gt; [Value :: Type]</string>
		<string>array:sparse_to_orddict</string>
		<string>array:sparse_to_orddict(&lt;#Array :: array(Type)#&gt;)</string>
		<string>array:sparse_to_orddict(Array :: array(Type)) -&gt; indx_pairs(Value :: Type)</string>
		<string>array:to_list</string>
		<string>array:to_list(&lt;#Array :: array(Type)#&gt;)</string>
		<string>array:to_list(Array :: array(Type)) -&gt; [Value :: Type]</string>
		<string>array:to_orddict</string>
		<string>array:to_orddict(&lt;#Array :: array(Type)#&gt;)</string>
		<string>array:to_orddict(Array :: array(Type)) -&gt; indx_pairs(Value :: Type)</string>
		<string>asn1ct:compile</string>
		<string>asn1ct:compile(&lt;#Asn1module#&gt;)</string>
		<string>asn1ct:compile(Asn1module) -&gt; ok | {error, Reason}</string>
		<string>asn1ct:compile</string>
		<string>asn1ct:compile(&lt;#Asn1module#&gt;, &lt;#Options#&gt;)</string>
		<string>asn1ct:compile(Asn1module, Options) -&gt; ok | {error, Reason}</string>
		<string>asn1ct:encode</string>
		<string>asn1ct:encode(&lt;#Module#&gt;, &lt;#Type#&gt;, &lt;#Value#&gt;)</string>
		<string>asn1ct:encode(Module, Type, Value) -&gt; {ok, Bytes} | {error, Reason}</string>
		<string>asn1ct:decode</string>
		<string>asn1ct:decode(&lt;#Module#&gt;, &lt;#Type#&gt;, &lt;#Bytes#&gt;)</string>
		<string>asn1ct:decode(Module, Type, Bytes) -&gt; {ok, Value} | {error, Reason}</string>
		<string>asn1ct:value</string>
		<string>asn1ct:value(&lt;#Module#&gt;, &lt;#Type#&gt;)</string>
		<string>asn1ct:value(Module, Type) -&gt; {ok, Value} | {error, Reason}</string>
		<string>asn1ct:test</string>
		<string>asn1ct:test(&lt;#Module#&gt;)</string>
		<string>asn1ct:test(Module) -&gt; ok | {error, Reason}</string>
		<string>asn1ct:test</string>
		<string>asn1ct:test(&lt;#Module#&gt;, &lt;#Type | Options#&gt;)</string>
		<string>asn1ct:test(Module, Type | Options) -&gt; ok | {error, Reason}</string>
		<string>asn1ct:test</string>
		<string>asn1ct:test(&lt;#Module#&gt;, &lt;#Type#&gt;, &lt;#Value | Options#&gt;)</string>
		<string>asn1ct:test(Module, Type, Value | Options) -&gt; ok | {error, Reason}</string>
		<string>asn1rt:decode</string>
		<string>asn1rt:decode(&lt;#Module#&gt;, &lt;#Type#&gt;, &lt;#Bytes#&gt;)</string>
		<string>asn1rt:decode(Module, Type, Bytes) -&gt; {ok, Value} | {error, Reason}</string>
		<string>asn1rt:encode</string>
		<string>asn1rt:encode(&lt;#Module#&gt;, &lt;#Type#&gt;, &lt;#Value#&gt;)</string>
		<string>asn1rt:encode(Module, Type, Value) -&gt; {ok, Bytes} | {error, Reason}</string>
		<string>asn1rt:info</string>
		<string>asn1rt:info(&lt;#Module#&gt;)</string>
		<string>asn1rt:info(Module) -&gt; {ok, Info} | {error, Reason}</string>
		<string>asn1rt:utf8_binary_to_list</string>
		<string>asn1rt:utf8_binary_to_list(&lt;#UTF8Binary#&gt;)</string>
		<string>asn1rt:utf8_binary_to_list(UTF8Binary) -&gt; {ok, UnicodeList} | {error, Reason}</string>
		<string>asn1rt:utf8_list_to_binary</string>
		<string>asn1rt:utf8_list_to_binary(&lt;#UnicodeList#&gt;)</string>
		<string>asn1rt:utf8_list_to_binary(UnicodeList) -&gt; {ok, UTF8Binary} | {error, Reason}</string>
		<string>auth:code_change</string>
		<string>auth:code_change(&lt;#OldVsn :: term()#&gt;, &lt;#State :: state()#&gt;, &lt;#Extra :: term()#&gt;)</string>
		<string>auth:code_change(OldVsn :: term(), State :: state(), Extra :: term()) -&gt; {ok, state()}</string>
		<string>auth:cookie</string>
		<string>auth:cookie()</string>
		<string>auth:cookie() -&gt; Cookie</string>
		<string>auth:cookie</string>
		<string>auth:cookie(&lt;#TheCookie#&gt;)</string>
		<string>auth:cookie(TheCookie) -&gt; true</string>
		<string>auth:get_cookie</string>
		<string>auth:get_cookie()</string>
		<string>auth:get_cookie() -&gt; nocookie | cookie()</string>
		<string>auth:get_cookie</string>
		<string>auth:get_cookie(&lt;#Node :: node()#&gt;)</string>
		<string>auth:get_cookie(Node :: node()) -&gt; nocookie | cookie()</string>
		<string>auth:handle_call</string>
		<string>auth:handle_call(&lt;#X1 :: calls()#&gt;, &lt;#From :: {pid()#&gt;, &lt;#term()}#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>auth:handle_call(X1 :: calls(), From :: {pid(), term()}, State :: state()) -&gt; {reply, hello | true | nocookie | cookie(), state()}</string>
		<string>auth:handle_cast</string>
		<string>auth:handle_cast(&lt;#X1 :: {print#&gt;, &lt;#string()#&gt;, &lt;#[term()]}#&gt;, &lt;#O :: state()#&gt;)</string>
		<string>auth:handle_cast(X1 :: {print, string(), [term()]}, O :: state()) -&gt; {noreply, state()}</string>
		<string>auth:handle_info</string>
		<string>auth:handle_info(&lt;#X1 :: term()#&gt;, &lt;#O :: state()#&gt;)</string>
		<string>auth:handle_info(X1 :: term(), O :: state()) -&gt; {noreply, state()}</string>
		<string>auth:init</string>
		<string>auth:init(&lt;#X1 :: []#&gt;)</string>
		<string>auth:init(X1 :: []) -&gt; {ok, state()}</string>
		<string>auth:is_auth</string>
		<string>auth:is_auth(&lt;#Node#&gt;)</string>
		<string>auth:is_auth(Node) -&gt; yes | no</string>
		<string>auth:node_cookie</string>
		<string>auth:node_cookie(&lt;#Cookies :: [node() | cookie()#&gt;, &lt;#...]#&gt;)</string>
		<string>auth:node_cookie(Cookies :: [node() | cookie(), ...]) -&gt; yes | no</string>
		<string>auth:node_cookie</string>
		<string>auth:node_cookie(&lt;#Node#&gt;, &lt;#Cookie#&gt;)</string>
		<string>auth:node_cookie(Node, Cookie) -&gt; yes | no</string>
		<string>auth:print</string>
		<string>auth:print(&lt;#Node :: node()#&gt;, &lt;#Format :: string()#&gt;, &lt;#Args :: [term()]#&gt;)</string>
		<string>auth:print(Node :: node(), Format :: string(), Args :: [term()]) -&gt; ok</string>
		<string>auth:set_cookie</string>
		<string>auth:set_cookie(&lt;#Cookie :: cookie()#&gt;)</string>
		<string>auth:set_cookie(Cookie :: cookie()) -&gt; true</string>
		<string>auth:set_cookie</string>
		<string>auth:set_cookie(&lt;#Node :: node()#&gt;, &lt;#Cookie :: cookie()#&gt;)</string>
		<string>auth:set_cookie(Node :: node(), Cookie :: cookie()) -&gt; true</string>
		<string>auth:start_link</string>
		<string>auth:start_link()</string>
		<string>auth:start_link() -&gt; {ok, pid()} | {error, term()} | ignore</string>
		<string>auth:sync_cookie</string>
		<string>auth:sync_cookie()</string>
		<string>auth:sync_cookie() -&gt; any()</string>
		<string>auth:terminate</string>
		<string>auth:terminate(&lt;#Reason :: term()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>auth:terminate(Reason :: term(), State :: state()) -&gt; ok</string>
		<string>base64:decode</string>
		<string>base64:decode(&lt;#Base64#&gt;)</string>
		<string>base64:decode(Base64) -&gt; Data</string>
		<string>base64:decode_to_string</string>
		<string>base64:decode_to_string(&lt;#Base64#&gt;)</string>
		<string>base64:decode_to_string(Base64) -&gt; DataString</string>
		<string>base64:encode</string>
		<string>base64:encode(&lt;#Data#&gt;)</string>
		<string>base64:encode(Data) -&gt; Base64</string>
		<string>base64:encode_to_string</string>
		<string>base64:encode_to_string(&lt;#Data#&gt;)</string>
		<string>base64:encode_to_string(Data) -&gt; Base64String</string>
		<string>base64:mime_decode</string>
		<string>base64:mime_decode(&lt;#Base64#&gt;)</string>
		<string>base64:mime_decode(Base64) -&gt; Data</string>
		<string>base64:mime_decode_to_string</string>
		<string>base64:mime_decode_to_string(&lt;#Base64#&gt;)</string>
		<string>base64:mime_decode_to_string(Base64) -&gt; DataString</string>
		<string>beam_lib:all_chunks</string>
		<string>beam_lib:all_chunks(&lt;#File :: beam()#&gt;)</string>
		<string>beam_lib:all_chunks(File :: beam()) -&gt; {ok, beam_lib, [{chunkid(), dataB()}]}</string>
		<string>beam_lib:chunks</string>
		<string>beam_lib:chunks(&lt;#Beam#&gt;, &lt;#ChunkRefs#&gt;)</string>
		<string>beam_lib:chunks(Beam, ChunkRefs) -&gt; {ok, {module(), [chunkdata()]}} | {error, beam_lib, chnk_rsn()}</string>
		<string>beam_lib:chunks</string>
		<string>beam_lib:chunks(&lt;#Beam#&gt;, &lt;#ChunkRefs#&gt;, &lt;#Options#&gt;)</string>
		<string>beam_lib:chunks(Beam, ChunkRefs, Options) -&gt; {ok, {module(), [ChunkResult]}} | {error, beam_lib, chnk_rsn()}</string>
		<string>beam_lib:clear_crypto_key_fun</string>
		<string>beam_lib:clear_crypto_key_fun()</string>
		<string>beam_lib:clear_crypto_key_fun() -&gt; undefined | {ok, Result}</string>
		<string>beam_lib:cmp</string>
		<string>beam_lib:cmp(&lt;#Beam1#&gt;, &lt;#Beam2#&gt;)</string>
		<string>beam_lib:cmp(Beam1, Beam2) -&gt; ok | {error, beam_lib, cmp_rsn()}</string>
		<string>beam_lib:cmp_dirs</string>
		<string>beam_lib:cmp_dirs(&lt;#Dir1#&gt;, &lt;#Dir2#&gt;)</string>
		<string>beam_lib:cmp_dirs(Dir1, Dir2) -&gt; {Only1, Only2, Different} | {error, beam_lib, Reason}</string>
		<string>beam_lib:code_change</string>
		<string>beam_lib:code_change(&lt;#OldVsn :: term()#&gt;, &lt;#State ::#state{crypto_key_f = undefined | crypto_fun()}#&gt;, &lt;#Extra :: term()#&gt;)</string>
		<string>beam_lib:code_change(OldVsn :: term(), State ::#state{crypto_key_f = undefined | crypto_fun()}, Extra :: term()) -&gt; {ok, #state{crypto_key_f = undefined | crypto_fun()}}</string>
		<string>beam_lib:crypto_key_fun</string>
		<string>beam_lib:crypto_key_fun(&lt;#CryptoKeyFun#&gt;)</string>
		<string>beam_lib:crypto_key_fun(CryptoKeyFun) -&gt; ok | {error, Reason}</string>
		<string>beam_lib:diff_dirs</string>
		<string>beam_lib:diff_dirs(&lt;#Dir1#&gt;, &lt;#Dir2#&gt;)</string>
		<string>beam_lib:diff_dirs(Dir1, Dir2) -&gt; ok | {error, beam_lib, Reason}</string>
		<string>beam_lib:format_error</string>
		<string>beam_lib:format_error(&lt;#Reason#&gt;)</string>
		<string>beam_lib:format_error(Reason) -&gt; io_lib:chars()</string>
		<string>beam_lib:handle_call</string>
		<string>beam_lib:handle_call(&lt;#R :: calls()#&gt;, &lt;#From :: {pid()#&gt;, &lt;#term()}#&gt;, &lt;#State ::#state{crypto_key_f = undefined | crypto_fun()}#&gt;)</string>
		<string>beam_lib:handle_call(R :: calls(), From :: {pid(), term()}, State ::#state{crypto_key_f = undefined | crypto_fun()}) -&gt; {noreply, #state{crypto_key_f = undefined | crypto_fun()}} | {reply, error | {error, badfun | exists}, #state{crypto_key_f = undefined | crypto_fun()}} | {stop, normal, undefined | {ok, term()}, #state{crypto_key_f = undefined | crypto_fun()}}</string>
		<string>beam_lib:handle_cast</string>
		<string>beam_lib:handle_cast(&lt;#X1 :: term()#&gt;, &lt;#State ::#state{crypto_key_f = undefined | crypto_fun()}#&gt;)</string>
		<string>beam_lib:handle_cast(X1 :: term(), State ::#state{crypto_key_f = undefined | crypto_fun()}) -&gt; {noreply, #state{crypto_key_f = undefined | crypto_fun()}}</string>
		<string>beam_lib:handle_info</string>
		<string>beam_lib:handle_info(&lt;#X1 :: term()#&gt;, &lt;#State ::#state{crypto_key_f = undefined | crypto_fun()}#&gt;)</string>
		<string>beam_lib:handle_info(X1 :: term(), State ::#state{crypto_key_f = undefined | crypto_fun()}) -&gt; {noreply, #state{crypto_key_f = undefined | crypto_fun()}}</string>
		<string>beam_lib:info</string>
		<string>beam_lib:info(&lt;#Beam#&gt;)</string>
		<string>beam_lib:info(Beam) -&gt; [InfoPair] | {error, beam_lib, info_rsn()}</string>
		<string>beam_lib:init</string>
		<string>beam_lib:init(&lt;#X1 :: []#&gt;)</string>
		<string>beam_lib:init(X1 :: []) -&gt; {ok, #state{crypto_key_f = undefined | crypto_fun()}}</string>
		<string>beam_lib:make_crypto_key</string>
		<string>beam_lib:make_crypto_key(&lt;#Type :: mode()#&gt;, &lt;#String :: string()#&gt;)</string>
		<string>beam_lib:make_crypto_key(Type :: mode(), String :: string()) -&gt; {mode(), [binary()], binary(), integer()}</string>
		<string>beam_lib:md5</string>
		<string>beam_lib:md5(&lt;#Beam#&gt;)</string>
		<string>beam_lib:md5(Beam) -&gt; {ok, {module(), MD5}} | {error, beam_lib, chnk_rsn()}</string>
		<string>beam_lib:strip</string>
		<string>beam_lib:strip(&lt;#Beam1#&gt;)</string>
		<string>beam_lib:strip(Beam1) -&gt; {ok, {module(), Beam2}} | {error, beam_lib, info_rsn()}</string>
		<string>beam_lib:strip_files</string>
		<string>beam_lib:strip_files(&lt;#Files#&gt;)</string>
		<string>beam_lib:strip_files(Files) -&gt; {ok, [{module(), Beam}]} | {error, beam_lib, info_rsn()}</string>
		<string>beam_lib:strip_release</string>
		<string>beam_lib:strip_release(&lt;#Dir#&gt;)</string>
		<string>beam_lib:strip_release(Dir) -&gt; {ok, [{module(), file:filename()}]} | {error, beam_lib, Reason}</string>
		<string>beam_lib:terminate</string>
		<string>beam_lib:terminate(&lt;#Reason :: term()#&gt;, &lt;#State ::#state{crypto_key_f = undefined | crypto_fun()}#&gt;)</string>
		<string>beam_lib:terminate(Reason :: term(), State ::#state{crypto_key_f = undefined | crypto_fun()}) -&gt; ok</string>
		<string>beam_lib:version</string>
		<string>beam_lib:version(&lt;#Beam#&gt;)</string>
		<string>beam_lib:version(Beam) -&gt; {ok, {module(), [Version :: term()]}} | {error, beam_lib, chnk_rsn()}</string>
		<string>binary:at</string>
		<string>binary:at(&lt;#Subject#&gt;, &lt;#Pos#&gt;)</string>
		<string>binary:at(Subject, Pos) -&gt; byte()</string>
		<string>binary:bin_to_list</string>
		<string>binary:bin_to_list(&lt;#Subject#&gt;)</string>
		<string>binary:bin_to_list(Subject) -&gt; [byte()]</string>
		<string>binary:bin_to_list</string>
		<string>binary:bin_to_list(&lt;#Subject#&gt;, &lt;#PosLen#&gt;)</string>
		<string>binary:bin_to_list(Subject, PosLen) -&gt; [byte()]</string>
		<string>binary:bin_to_list</string>
		<string>binary:bin_to_list(&lt;#Subject#&gt;, &lt;#Pos#&gt;, &lt;#Len#&gt;)</string>
		<string>binary:bin_to_list(Subject, Pos, Len) -&gt; [byte()]</string>
		<string>binary:compile_pattern</string>
		<string>binary:compile_pattern(&lt;#Pattern#&gt;)</string>
		<string>binary:compile_pattern(Pattern) -&gt; cp()</string>
		<string>binary:copy</string>
		<string>binary:copy(&lt;#Subject#&gt;)</string>
		<string>binary:copy(Subject) -&gt; binary()</string>
		<string>binary:copy</string>
		<string>binary:copy(&lt;#Subject#&gt;, &lt;#N#&gt;)</string>
		<string>binary:copy(Subject, N) -&gt; binary()</string>
		<string>binary:decode_unsigned</string>
		<string>binary:decode_unsigned(&lt;#Subject#&gt;)</string>
		<string>binary:decode_unsigned(Subject) -&gt; Unsigned</string>
		<string>binary:decode_unsigned</string>
		<string>binary:decode_unsigned(&lt;#Subject#&gt;, &lt;#Endianess#&gt;)</string>
		<string>binary:decode_unsigned(Subject, Endianess) -&gt; Unsigned</string>
		<string>binary:encode_unsigned</string>
		<string>binary:encode_unsigned(&lt;#Unsigned#&gt;)</string>
		<string>binary:encode_unsigned(Unsigned) -&gt; binary()</string>
		<string>binary:encode_unsigned</string>
		<string>binary:encode_unsigned(&lt;#Unsigned#&gt;, &lt;#Endianess#&gt;)</string>
		<string>binary:encode_unsigned(Unsigned, Endianess) -&gt; binary()</string>
		<string>binary:first</string>
		<string>binary:first(&lt;#Subject#&gt;)</string>
		<string>binary:first(Subject) -&gt; byte()</string>
		<string>binary:last</string>
		<string>binary:last(&lt;#Subject#&gt;)</string>
		<string>binary:last(Subject) -&gt; byte()</string>
		<string>binary:list_to_bin</string>
		<string>binary:list_to_bin(&lt;#ByteList#&gt;)</string>
		<string>binary:list_to_bin(ByteList) -&gt; binary()</string>
		<string>binary:longest_common_prefix</string>
		<string>binary:longest_common_prefix(&lt;#Binaries#&gt;)</string>
		<string>binary:longest_common_prefix(Binaries) -&gt; integer() &gt;= 0</string>
		<string>binary:longest_common_suffix</string>
		<string>binary:longest_common_suffix(&lt;#Binaries#&gt;)</string>
		<string>binary:longest_common_suffix(Binaries) -&gt; integer() &gt;= 0</string>
		<string>binary:match</string>
		<string>binary:match(&lt;#Subject#&gt;, &lt;#Pattern#&gt;)</string>
		<string>binary:match(Subject, Pattern) -&gt; Found | nomatch</string>
		<string>binary:match</string>
		<string>binary:match(&lt;#Subject#&gt;, &lt;#Pattern#&gt;, &lt;#Options#&gt;)</string>
		<string>binary:match(Subject, Pattern, Options) -&gt; Found | nomatch</string>
		<string>binary:matches</string>
		<string>binary:matches(&lt;#Subject#&gt;, &lt;#Pattern#&gt;)</string>
		<string>binary:matches(Subject, Pattern) -&gt; Found</string>
		<string>binary:matches</string>
		<string>binary:matches(&lt;#Subject#&gt;, &lt;#Pattern#&gt;, &lt;#Options#&gt;)</string>
		<string>binary:matches(Subject, Pattern, Options) -&gt; Found</string>
		<string>binary:part</string>
		<string>binary:part(&lt;#Subject#&gt;, &lt;#PosLen#&gt;)</string>
		<string>binary:part(Subject, PosLen) -&gt; binary()</string>
		<string>binary:part</string>
		<string>binary:part(&lt;#Subject#&gt;, &lt;#Pos#&gt;, &lt;#Len#&gt;)</string>
		<string>binary:part(Subject, Pos, Len) -&gt; binary()</string>
		<string>binary:referenced_byte_size</string>
		<string>binary:referenced_byte_size(&lt;#Binary#&gt;)</string>
		<string>binary:referenced_byte_size(Binary) -&gt; integer() &gt;= 0</string>
		<string>binary:replace</string>
		<string>binary:replace(&lt;#Subject#&gt;, &lt;#Pattern#&gt;, &lt;#Replacement#&gt;)</string>
		<string>binary:replace(Subject, Pattern, Replacement) -&gt; Result</string>
		<string>binary:replace</string>
		<string>binary:replace(&lt;#Subject#&gt;, &lt;#Pattern#&gt;, &lt;#Replacement#&gt;, &lt;#Options#&gt;)</string>
		<string>binary:replace(Subject, Pattern, Replacement, Options) -&gt; Result</string>
		<string>binary:split</string>
		<string>binary:split(&lt;#Subject#&gt;, &lt;#Pattern#&gt;)</string>
		<string>binary:split(Subject, Pattern) -&gt; Parts</string>
		<string>binary:split</string>
		<string>binary:split(&lt;#Subject#&gt;, &lt;#Pattern#&gt;, &lt;#Options#&gt;)</string>
		<string>binary:split(Subject, Pattern, Options) -&gt; Parts</string>
		<string>c:bt</string>
		<string>c:bt(&lt;#Pid#&gt;)</string>
		<string>c:bt(Pid) -&gt; ok | undefined</string>
		<string>c:c</string>
		<string>c:c(&lt;#File#&gt;)</string>
		<string>c:c(File) -&gt; {ok, Module} | error</string>
		<string>c:c</string>
		<string>c:c(&lt;#File#&gt;, &lt;#Options#&gt;)</string>
		<string>c:c(File, Options) -&gt; {ok, Module} | error</string>
		<string>c:cd</string>
		<string>c:cd(&lt;#Dir#&gt;)</string>
		<string>c:cd(Dir) -&gt; ok</string>
		<string>c:flush</string>
		<string>c:flush()</string>
		<string>c:flush() -&gt; ok</string>
		<string>c:help</string>
		<string>c:help()</string>
		<string>c:help() -&gt; ok</string>
		<string>c:i</string>
		<string>c:i()</string>
		<string>c:i() -&gt; ok</string>
		<string>c:i</string>
		<string>c:i(&lt;#Ps :: [pid()]#&gt;)</string>
		<string>c:i(Ps :: [pid()]) -&gt; ok</string>
		<string>c:i</string>
		<string>c:i(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>c:i(X, Y, Z) -&gt; [{atom(), term()}]</string>
		<string>c:l</string>
		<string>c:l(&lt;#Module#&gt;)</string>
		<string>c:l(Module) -&gt; code:load_ret()</string>
		<string>c:lc</string>
		<string>c:lc(&lt;#Files#&gt;)</string>
		<string>c:lc(Files) -&gt; ok | error</string>
		<string>c:lc_batch</string>
		<string>c:lc_batch()</string>
		<string>c:lc_batch() -&gt; no_return()</string>
		<string>c:lc_batch</string>
		<string>c:lc_batch(&lt;#Args :: [erl_compile:cmd_line_arg()]#&gt;)</string>
		<string>c:lc_batch(Args :: [erl_compile:cmd_line_arg()]) -&gt; no_return()</string>
		<string>c:ls</string>
		<string>c:ls()</string>
		<string>c:ls() -&gt; ok</string>
		<string>c:ls</string>
		<string>c:ls(&lt;#Dir#&gt;)</string>
		<string>c:ls(Dir) -&gt; ok</string>
		<string>c:m</string>
		<string>c:m()</string>
		<string>c:m() -&gt; ok</string>
		<string>c:m</string>
		<string>c:m(&lt;#Module#&gt;)</string>
		<string>c:m(Module) -&gt; ok</string>
		<string>c:memory</string>
		<string>c:memory()</string>
		<string>c:memory() -&gt; [{Type, Size}]</string>
		<string>c:memory</string>
		<string>c:memory(&lt;#Type#&gt;)</string>
		<string>c:memory(Type) -&gt; Size</string>
		<string>c:memory</string>
		<string>c:memory(&lt;#Types#&gt;)</string>
		<string>c:memory(Types) -&gt; [{Type, Size}]</string>
		<string>c:nc</string>
		<string>c:nc(&lt;#File#&gt;)</string>
		<string>c:nc(File) -&gt; {ok, Module} | error</string>
		<string>c:nc</string>
		<string>c:nc(&lt;#File#&gt;, &lt;#Options#&gt;)</string>
		<string>c:nc(File, Options) -&gt; {ok, Module} | error</string>
		<string>c:ni</string>
		<string>c:ni()</string>
		<string>c:ni() -&gt; ok</string>
		<string>c:nl</string>
		<string>c:nl(&lt;#Module#&gt;)</string>
		<string>c:nl(Module) -&gt; abcast | error</string>
		<string>c:nregs</string>
		<string>c:nregs()</string>
		<string>c:nregs() -&gt; ok</string>
		<string>c:pid</string>
		<string>c:pid(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>c:pid(X, Y, Z) -&gt; pid()</string>
		<string>c:pwd</string>
		<string>c:pwd()</string>
		<string>c:pwd() -&gt; ok</string>
		<string>c:q</string>
		<string>c:q()</string>
		<string>c:q() -&gt; no_return()</string>
		<string>c:regs</string>
		<string>c:regs()</string>
		<string>c:regs() -&gt; ok</string>
		<string>calendar:date_to_gregorian_days</string>
		<string>calendar:date_to_gregorian_days(&lt;#Date#&gt;)</string>
		<string>calendar:date_to_gregorian_days(Date) -&gt; Days</string>
		<string>calendar:date_to_gregorian_days</string>
		<string>calendar:date_to_gregorian_days(&lt;#Year#&gt;, &lt;#Month#&gt;, &lt;#Day#&gt;)</string>
		<string>calendar:date_to_gregorian_days(Year, Month, Day) -&gt; Days</string>
		<string>calendar:datetime_to_gregorian_seconds</string>
		<string>calendar:datetime_to_gregorian_seconds(&lt;#DateTime#&gt;)</string>
		<string>calendar:datetime_to_gregorian_seconds(DateTime) -&gt; Seconds</string>
		<string>calendar:day_of_the_week</string>
		<string>calendar:day_of_the_week(&lt;#Date#&gt;)</string>
		<string>calendar:day_of_the_week(Date) -&gt; daynum()</string>
		<string>calendar:day_of_the_week</string>
		<string>calendar:day_of_the_week(&lt;#Year#&gt;, &lt;#Month#&gt;, &lt;#Day#&gt;)</string>
		<string>calendar:day_of_the_week(Year, Month, Day) -&gt; daynum()</string>
		<string>calendar:gregorian_days_to_date</string>
		<string>calendar:gregorian_days_to_date(&lt;#Days#&gt;)</string>
		<string>calendar:gregorian_days_to_date(Days) -&gt; date()</string>
		<string>calendar:gregorian_seconds_to_datetime</string>
		<string>calendar:gregorian_seconds_to_datetime(&lt;#Seconds#&gt;)</string>
		<string>calendar:gregorian_seconds_to_datetime(Seconds) -&gt; datetime()</string>
		<string>calendar:is_leap_year</string>
		<string>calendar:is_leap_year(&lt;#Year#&gt;)</string>
		<string>calendar:is_leap_year(Year) -&gt; boolean()</string>
		<string>calendar:iso_week_number</string>
		<string>calendar:iso_week_number()</string>
		<string>calendar:iso_week_number() -&gt; yearweeknum()</string>
		<string>calendar:iso_week_number</string>
		<string>calendar:iso_week_number(&lt;#Date#&gt;)</string>
		<string>calendar:iso_week_number(Date) -&gt; yearweeknum()</string>
		<string>calendar:last_day_of_the_month</string>
		<string>calendar:last_day_of_the_month(&lt;#Year#&gt;, &lt;#Month#&gt;)</string>
		<string>calendar:last_day_of_the_month(Year, Month) -&gt; LastDay</string>
		<string>calendar:local_time</string>
		<string>calendar:local_time()</string>
		<string>calendar:local_time() -&gt; datetime()</string>
		<string>calendar:local_time_to_universal_time</string>
		<string>calendar:local_time_to_universal_time(&lt;#DateTime1#&gt;)</string>
		<string>calendar:local_time_to_universal_time(DateTime1) -&gt; DateTime2</string>
		<string>calendar:local_time_to_universal_time</string>
		<string>calendar:local_time_to_universal_time(&lt;#DateTime :: datetime1970()#&gt;, &lt;#IsDst :: true | false | undefined#&gt;)</string>
		<string>calendar:local_time_to_universal_time(DateTime :: datetime1970(), IsDst :: true | false | undefined) -&gt; datetime1970()</string>
		<string>calendar:local_time_to_universal_time_dst</string>
		<string>calendar:local_time_to_universal_time_dst(&lt;#DateTime1#&gt;)</string>
		<string>calendar:local_time_to_universal_time_dst(DateTime1) -&gt; [DateTime]</string>
		<string>calendar:now_to_datetime</string>
		<string>calendar:now_to_datetime(&lt;#Now#&gt;)</string>
		<string>calendar:now_to_datetime(Now) -&gt; datetime1970()</string>
		<string>calendar:now_to_local_time</string>
		<string>calendar:now_to_local_time(&lt;#Now#&gt;)</string>
		<string>calendar:now_to_local_time(Now) -&gt; datetime1970()</string>
		<string>calendar:now_to_universal_time</string>
		<string>calendar:now_to_universal_time(&lt;#Now#&gt;)</string>
		<string>calendar:now_to_universal_time(Now) -&gt; datetime1970()</string>
		<string>calendar:seconds_to_daystime</string>
		<string>calendar:seconds_to_daystime(&lt;#Seconds#&gt;)</string>
		<string>calendar:seconds_to_daystime(Seconds) -&gt; {Days, Time}</string>
		<string>calendar:seconds_to_time</string>
		<string>calendar:seconds_to_time(&lt;#Seconds#&gt;)</string>
		<string>calendar:seconds_to_time(Seconds) -&gt; time()</string>
		<string>calendar:time_difference</string>
		<string>calendar:time_difference(&lt;#T1#&gt;, &lt;#T2#&gt;)</string>
		<string>calendar:time_difference(T1, T2) -&gt; {Days, Time}</string>
		<string>calendar:time_to_seconds</string>
		<string>calendar:time_to_seconds(&lt;#Time#&gt;)</string>
		<string>calendar:time_to_seconds(Time) -&gt; secs_per_day()</string>
		<string>calendar:universal_time</string>
		<string>calendar:universal_time()</string>
		<string>calendar:universal_time() -&gt; datetime()</string>
		<string>calendar:universal_time_to_local_time</string>
		<string>calendar:universal_time_to_local_time(&lt;#DateTime#&gt;)</string>
		<string>calendar:universal_time_to_local_time(DateTime) -&gt; datetime()</string>
		<string>calendar:valid_date</string>
		<string>calendar:valid_date(&lt;#Date#&gt;)</string>
		<string>calendar:valid_date(Date) -&gt; boolean()</string>
		<string>calendar:valid_date</string>
		<string>calendar:valid_date(&lt;#Year#&gt;, &lt;#Month#&gt;, &lt;#Day#&gt;)</string>
		<string>calendar:valid_date(Year, Month, Day) -&gt; boolean()</string>
		<string>code:add_path</string>
		<string>code:add_path(&lt;#Dir#&gt;)</string>
		<string>code:add_path(Dir) -&gt; add_path_ret()</string>
		<string>code:add_patha</string>
		<string>code:add_patha(&lt;#Dir#&gt;)</string>
		<string>code:add_patha(Dir) -&gt; add_path_ret()</string>
		<string>code:add_paths</string>
		<string>code:add_paths(&lt;#Dirs#&gt;)</string>
		<string>code:add_paths(Dirs) -&gt; ok</string>
		<string>code:add_pathsa</string>
		<string>code:add_pathsa(&lt;#Dirs#&gt;)</string>
		<string>code:add_pathsa(Dirs) -&gt; ok</string>
		<string>code:add_pathsz</string>
		<string>code:add_pathsz(&lt;#Dirs#&gt;)</string>
		<string>code:add_pathsz(Dirs) -&gt; ok</string>
		<string>code:add_pathz</string>
		<string>code:add_pathz(&lt;#Dir#&gt;)</string>
		<string>code:add_pathz(Dir) -&gt; add_path_ret()</string>
		<string>code:all_loaded</string>
		<string>code:all_loaded()</string>
		<string>code:all_loaded() -&gt; [{Module, Loaded}]</string>
		<string>code:clash</string>
		<string>code:clash()</string>
		<string>code:clash() -&gt; ok</string>
		<string>code:compiler_dir</string>
		<string>code:compiler_dir()</string>
		<string>code:compiler_dir() -&gt; file:filename()</string>
		<string>code:del_path</string>
		<string>code:del_path(&lt;#NameOrDir#&gt;)</string>
		<string>code:del_path(NameOrDir) -&gt; boolean() | {error, What}</string>
		<string>code:delete</string>
		<string>code:delete(&lt;#Module#&gt;)</string>
		<string>code:delete(Module) -&gt; boolean()</string>
		<string>code:ensure_loaded</string>
		<string>code:ensure_loaded(&lt;#Module#&gt;)</string>
		<string>code:ensure_loaded(Module) -&gt; {module, Module} | {error, What}</string>
		<string>code:get_chunk</string>
		<string>code:get_chunk(&lt;#Bin#&gt;, &lt;#Chunk#&gt;)</string>
		<string>code:get_chunk(Bin, Chunk) -&gt; binary() | undefined</string>
		<string>code:get_mode</string>
		<string>code:get_mode()</string>
		<string>code:get_mode() -&gt; embedded | interactive</string>
		<string>code:get_object_code</string>
		<string>code:get_object_code(&lt;#Module#&gt;)</string>
		<string>code:get_object_code(Module) -&gt; {Module, Binary, Filename} | error</string>
		<string>code:get_path</string>
		<string>code:get_path()</string>
		<string>code:get_path() -&gt; Path</string>
		<string>code:is_loaded</string>
		<string>code:is_loaded(&lt;#Module#&gt;)</string>
		<string>code:is_loaded(Module) -&gt; {file, Loaded} | false</string>
		<string>code:is_module_native</string>
		<string>code:is_module_native(&lt;#Module#&gt;)</string>
		<string>code:is_module_native(Module) -&gt; true | false | undefined</string>
		<string>code:is_sticky</string>
		<string>code:is_sticky(&lt;#Module#&gt;)</string>
		<string>code:is_sticky(Module) -&gt; boolean()</string>
		<string>code:lib_dir</string>
		<string>code:lib_dir()</string>
		<string>code:lib_dir() -&gt; file:filename()</string>
		<string>code:lib_dir</string>
		<string>code:lib_dir(&lt;#Name#&gt;)</string>
		<string>code:lib_dir(Name) -&gt; file:filename() | {error, bad_name}</string>
		<string>code:lib_dir</string>
		<string>code:lib_dir(&lt;#Name#&gt;, &lt;#SubDir#&gt;)</string>
		<string>code:lib_dir(Name, SubDir) -&gt; file:filename() | {error, bad_name}</string>
		<string>code:load_abs</string>
		<string>code:load_abs(&lt;#Filename#&gt;)</string>
		<string>code:load_abs(Filename) -&gt; load_ret()</string>
		<string>code:load_abs</string>
		<string>code:load_abs(&lt;#Filename :: loaded_filename()#&gt;, &lt;#Module :: module()#&gt;)</string>
		<string>code:load_abs(Filename :: loaded_filename(), Module :: module()) -&gt; load_ret()</string>
		<string>code:load_binary</string>
		<string>code:load_binary(&lt;#Module#&gt;, &lt;#Filename#&gt;, &lt;#Binary#&gt;)</string>
		<string>code:load_binary(Module, Filename, Binary) -&gt; {module, Module} | {error, What}</string>
		<string>code:load_file</string>
		<string>code:load_file(&lt;#Module#&gt;)</string>
		<string>code:load_file(Module) -&gt; load_ret()</string>
		<string>code:load_native_partial</string>
		<string>code:load_native_partial(&lt;#Module :: module()#&gt;, &lt;#Binary :: binary()#&gt;)</string>
		<string>code:load_native_partial(Module :: module(), Binary :: binary()) -&gt; load_ret()</string>
		<string>code:load_native_sticky</string>
		<string>code:load_native_sticky(&lt;#Module :: module()#&gt;, &lt;#Binary :: binary()#&gt;, &lt;#WholeModule :: false | binary()#&gt;)</string>
		<string>code:load_native_sticky(Module :: module(), Binary :: binary(), WholeModule :: false | binary()) -&gt; load_ret()</string>
		<string>code:make_stub_module</string>
		<string>code:make_stub_module(&lt;#Module#&gt;, &lt;#Beam#&gt;, &lt;#Info#&gt;)</string>
		<string>code:make_stub_module(Module, Beam, Info) -&gt; Module</string>
		<string>code:module_md5</string>
		<string>code:module_md5(&lt;#X1 :: binary()#&gt;)</string>
		<string>code:module_md5(X1 :: binary()) -&gt; binary() | undefined</string>
		<string>code:objfile_extension</string>
		<string>code:objfile_extension()</string>
		<string>code:objfile_extension() -&gt; nonempty_string()</string>
		<string>code:priv_dir</string>
		<string>code:priv_dir(&lt;#Name#&gt;)</string>
		<string>code:priv_dir(Name) -&gt; file:filename() | {error, bad_name}</string>
		<string>code:purge</string>
		<string>code:purge(&lt;#Module#&gt;)</string>
		<string>code:purge(Module) -&gt; boolean()</string>
		<string>code:rehash</string>
		<string>code:rehash()</string>
		<string>code:rehash() -&gt; ok</string>
		<string>code:replace_path</string>
		<string>code:replace_path(&lt;#Name#&gt;, &lt;#Dir#&gt;)</string>
		<string>code:replace_path(Name, Dir) -&gt; true | {error, What}</string>
		<string>code:root_dir</string>
		<string>code:root_dir()</string>
		<string>code:root_dir() -&gt; file:filename()</string>
		<string>code:set_path</string>
		<string>code:set_path(&lt;#Path#&gt;)</string>
		<string>code:set_path(Path) -&gt; true | {error, What}</string>
		<string>code:set_primary_archive</string>
		<string>code:set_primary_archive(&lt;#ArchiveFile :: file:filename()#&gt;, &lt;#ArchiveBin :: binary()#&gt;, &lt;#FileInfo :: file:file_info()#&gt;, &lt;#ParserFun :: function()#&gt;)</string>
		<string>code:set_primary_archive(ArchiveFile :: file:filename(), ArchiveBin :: binary(), FileInfo :: file:file_info(), ParserFun :: function()) -&gt; ok | {error, atom()}</string>
		<string>code:soft_purge</string>
		<string>code:soft_purge(&lt;#Module#&gt;)</string>
		<string>code:soft_purge(Module) -&gt; boolean()</string>
		<string>code:start_link</string>
		<string>code:start_link()</string>
		<string>code:start_link() -&gt; {ok, pid()} | {error, crash}</string>
		<string>code:start_link</string>
		<string>code:start_link(&lt;#Flags :: [atom()]#&gt;)</string>
		<string>code:start_link(Flags :: [atom()]) -&gt; {ok, pid()} | {error, crash}</string>
		<string>code:stick_dir</string>
		<string>code:stick_dir(&lt;#Dir#&gt;)</string>
		<string>code:stick_dir(Dir) -&gt; ok | error</string>
		<string>code:stick_mod</string>
		<string>code:stick_mod(&lt;#Module :: module()#&gt;)</string>
		<string>code:stick_mod(Module :: module()) -&gt; true</string>
		<string>code:stop</string>
		<string>code:stop()</string>
		<string>code:stop() -&gt; no_return()</string>
		<string>code:unstick_dir</string>
		<string>code:unstick_dir(&lt;#Dir#&gt;)</string>
		<string>code:unstick_dir(Dir) -&gt; ok | error</string>
		<string>code:unstick_mod</string>
		<string>code:unstick_mod(&lt;#Module :: module()#&gt;)</string>
		<string>code:unstick_mod(Module :: module()) -&gt; true</string>
		<string>code:where_is_file</string>
		<string>code:where_is_file(&lt;#Filename#&gt;)</string>
		<string>code:where_is_file(Filename) -&gt; non_existing | Absname</string>
		<string>code:where_is_file</string>
		<string>code:where_is_file(&lt;#Path :: file:filename()#&gt;, &lt;#Filename :: file:filename()#&gt;)</string>
		<string>code:where_is_file(Path :: file:filename(), Filename :: file:filename()) -&gt; file:filename() | non_existing</string>
		<string>code:which</string>
		<string>code:which(&lt;#Module#&gt;)</string>
		<string>code:which(Module) -&gt; Which</string>
		<string>common_test:Module:all</string>
		<string>common_test:Module:all()</string>
		<string>common_test:Module:all() -&gt; Tests | {skip, Reason} </string>
		<string>common_test:Module:groups</string>
		<string>common_test:Module:groups()</string>
		<string>common_test:Module:groups() -&gt; GroupDefs</string>
		<string>common_test:Module:suite</string>
		<string>common_test:Module:suite()</string>
		<string>common_test:Module:suite() -&gt; [Info] </string>
		<string>common_test:Module:init_per_suite</string>
		<string>common_test:Module:init_per_suite(&lt;#Config#&gt;)</string>
		<string>common_test:Module:init_per_suite(Config) -&gt; NewConfig | {skip, Reason} | {skip_and_save, Reason, SaveConfig}</string>
		<string>common_test:Module:end_per_suite</string>
		<string>common_test:Module:end_per_suite(&lt;#Config#&gt;)</string>
		<string>common_test:Module:end_per_suite(Config) -&gt; void() | {save_config, SaveConfig}</string>
		<string>common_test:Module:group</string>
		<string>common_test:Module:group(&lt;#GroupName#&gt;)</string>
		<string>common_test:Module:group(GroupName) -&gt; [Info] </string>
		<string>common_test:Module:init_per_group</string>
		<string>common_test:Module:init_per_group(&lt;#GroupName#&gt;, &lt;#Config#&gt;)</string>
		<string>common_test:Module:init_per_group(GroupName, Config) -&gt; NewConfig | {skip, Reason}</string>
		<string>common_test:Module:end_per_group</string>
		<string>common_test:Module:end_per_group(&lt;#GroupName#&gt;, &lt;#Config#&gt;)</string>
		<string>common_test:Module:end_per_group(GroupName, Config) -&gt; void() | {return_group_result, Status}</string>
		<string>common_test:Module:init_per_testcase</string>
		<string>common_test:Module:init_per_testcase(&lt;#TestCase#&gt;, &lt;#Config#&gt;)</string>
		<string>common_test:Module:init_per_testcase(TestCase, Config) -&gt; NewConfig | {fail, Reason} | {skip, Reason}</string>
		<string>common_test:Module:end_per_testcase</string>
		<string>common_test:Module:end_per_testcase(&lt;#TestCase#&gt;, &lt;#Config#&gt;)</string>
		<string>common_test:Module:end_per_testcase(TestCase, Config) -&gt; void() | {fail, Reason} | {save_config, SaveConfig}</string>
		<string>common_test:Module:Testcase</string>
		<string>common_test:Module:Testcase()</string>
		<string>common_test:Module:Testcase() -&gt; [Info] </string>
		<string>common_test:Module:Testcase</string>
		<string>common_test:Module:Testcase(&lt;#Config#&gt;)</string>
		<string>common_test:Module:Testcase(Config) -&gt; void() | {skip, Reason} | {comment, Comment} | {save_config, SaveConfig} | {skip_and_save, Reason, SaveConfig} | exit() </string>
		<string>compile:file</string>
		<string>compile:file(&lt;#File#&gt;)</string>
		<string>compile:file(File)</string>
		<string>compile:file</string>
		<string>compile:file(&lt;#File#&gt;, &lt;#Options#&gt;)</string>
		<string>compile:file(File, Options) -&gt; CompRet</string>
		<string>compile:forms</string>
		<string>compile:forms(&lt;#Forms#&gt;)</string>
		<string>compile:forms(Forms)</string>
		<string>compile:forms</string>
		<string>compile:forms(&lt;#Forms#&gt;, &lt;#Options#&gt;)</string>
		<string>compile:forms(Forms, Options) -&gt; CompRet</string>
		<string>compile:format_error</string>
		<string>compile:format_error(&lt;#ErrorDescriptor#&gt;)</string>
		<string>compile:format_error(ErrorDescriptor) -&gt; chars()</string>
		<string>compile:output_generated</string>
		<string>compile:output_generated(&lt;#Options#&gt;)</string>
		<string>compile:output_generated(Options) -&gt; true | false</string>
		<string>compile:noenv_file</string>
		<string>compile:noenv_file(&lt;#File#&gt;, &lt;#Options#&gt;)</string>
		<string>compile:noenv_file(File, Options) -&gt; CompRet</string>
		<string>compile:noenv_forms</string>
		<string>compile:noenv_forms(&lt;#Forms#&gt;, &lt;#Options#&gt;)</string>
		<string>compile:noenv_forms(Forms, Options) -&gt; CompRet</string>
		<string>compile:noenv_output_generated</string>
		<string>compile:noenv_output_generated(&lt;#Options#&gt;)</string>
		<string>compile:noenv_output_generated(Options) -&gt; true | false</string>
		<string>corba:create</string>
		<string>corba:create(&lt;#Module#&gt;, &lt;#TypeID#&gt;)</string>
		<string>corba:create(Module, TypeID) -&gt; Object</string>
		<string>corba:create</string>
		<string>corba:create(&lt;#Module#&gt;, &lt;#TypeID#&gt;, &lt;#Env#&gt;)</string>
		<string>corba:create(Module, TypeID, Env) -&gt; Object</string>
		<string>corba:create</string>
		<string>corba:create(&lt;#Module#&gt;, &lt;#TypeID#&gt;, &lt;#Env#&gt;, &lt;#Optons1#&gt;)</string>
		<string>corba:create(Module, TypeID, Env, Optons1) -&gt; Object</string>
		<string>corba:create_link</string>
		<string>corba:create_link(&lt;#Module#&gt;, &lt;#TypeID#&gt;)</string>
		<string>corba:create_link(Module, TypeID) -&gt; Object</string>
		<string>corba:create_link</string>
		<string>corba:create_link(&lt;#Module#&gt;, &lt;#TypeID#&gt;, &lt;#Env#&gt;)</string>
		<string>corba:create_link(Module, TypeID, Env) -&gt; Object</string>
		<string>corba:create_link</string>
		<string>corba:create_link(&lt;#Module#&gt;, &lt;#TypeID#&gt;, &lt;#Env#&gt;, &lt;#Options2#&gt;)</string>
		<string>corba:create_link(Module, TypeID, Env, Options2) -&gt; Reply</string>
		<string>corba:dispose</string>
		<string>corba:dispose(&lt;#Object#&gt;)</string>
		<string>corba:dispose(Object) -&gt; ok</string>
		<string>corba:create_nil_objref</string>
		<string>corba:create_nil_objref()</string>
		<string>corba:create_nil_objref() -&gt; Object</string>
		<string>corba:create_subobject_key</string>
		<string>corba:create_subobject_key(&lt;#Object#&gt;, &lt;#Key#&gt;)</string>
		<string>corba:create_subobject_key(Object, Key) -&gt; Result</string>
		<string>corba:get_subobject_key</string>
		<string>corba:get_subobject_key(&lt;#Object#&gt;)</string>
		<string>corba:get_subobject_key(Object) -&gt; Result</string>
		<string>corba:get_pid</string>
		<string>corba:get_pid(&lt;#Object#&gt;)</string>
		<string>corba:get_pid(Object) -&gt; Result</string>
		<string>corba:raise</string>
		<string>corba:raise(&lt;#Exception#&gt;)</string>
		<string>corba:raise(Exception)</string>
		<string>corba:reply</string>
		<string>corba:reply(&lt;#To#&gt;, &lt;#Reply#&gt;)</string>
		<string>corba:reply(To, Reply) -&gt; true</string>
		<string>corba:resolve_initial_references</string>
		<string>corba:resolve_initial_references(&lt;#ObjectId#&gt;)</string>
		<string>corba:resolve_initial_references(ObjectId) -&gt; Object</string>
		<string>corba:resolve_initial_references</string>
		<string>corba:resolve_initial_references(&lt;#ObjectId#&gt;, &lt;#Contexts#&gt;)</string>
		<string>corba:resolve_initial_references(ObjectId, Contexts) -&gt; Object</string>
		<string>corba:add_initial_service</string>
		<string>corba:add_initial_service(&lt;#ObjectId#&gt;, &lt;#Object#&gt;)</string>
		<string>corba:add_initial_service(ObjectId, Object) -&gt; boolean()</string>
		<string>corba:remove_initial_service</string>
		<string>corba:remove_initial_service(&lt;#ObjectId#&gt;)</string>
		<string>corba:remove_initial_service(ObjectId) -&gt; boolean()</string>
		<string>corba:list_initial_services</string>
		<string>corba:list_initial_services()</string>
		<string>corba:list_initial_services() -&gt; [ObjectId]</string>
		<string>corba:resolve_initial_references_remote</string>
		<string>corba:resolve_initial_references_remote(&lt;#ObjectId#&gt;, &lt;#Address#&gt;)</string>
		<string>corba:resolve_initial_references_remote(ObjectId, Address) -&gt; Object</string>
		<string>corba:resolve_initial_references_remote</string>
		<string>corba:resolve_initial_references_remote(&lt;#ObjectId#&gt;, &lt;#Address#&gt;, &lt;#Contexts#&gt;)</string>
		<string>corba:resolve_initial_references_remote(ObjectId, Address, Contexts) -&gt; Object</string>
		<string>corba:list_initial_services_remote</string>
		<string>corba:list_initial_services_remote(&lt;#Address#&gt;)</string>
		<string>corba:list_initial_services_remote(Address) -&gt; [ObjectId]</string>
		<string>corba:list_initial_services_remote</string>
		<string>corba:list_initial_services_remote(&lt;#Address#&gt;, &lt;#Contexts#&gt;)</string>
		<string>corba:list_initial_services_remote(Address, Contexts) -&gt; [ObjectId]</string>
		<string>corba:object_to_string</string>
		<string>corba:object_to_string(&lt;#Object#&gt;)</string>
		<string>corba:object_to_string(Object) -&gt; IOR_string</string>
		<string>corba:string_to_object</string>
		<string>corba:string_to_object(&lt;#IOR_string#&gt;)</string>
		<string>corba:string_to_object(IOR_string) -&gt; Object</string>
		<string>corba:string_to_object</string>
		<string>corba:string_to_object(&lt;#IOR_string#&gt;, &lt;#Contexts#&gt;)</string>
		<string>corba:string_to_object(IOR_string, Contexts) -&gt; Object</string>
		<string>corba:print_object</string>
		<string>corba:print_object(&lt;#Data [#&gt;, &lt;#Type]#&gt;)</string>
		<string>corba:print_object(Data [, Type]) -&gt; ok | {'EXCEPTION', E} | {'EXIT', R} | string()</string>
		<string>corba:add_alternate_iiop_address</string>
		<string>corba:add_alternate_iiop_address(&lt;#Object#&gt;, &lt;#Host#&gt;, &lt;#Port#&gt;)</string>
		<string>corba:add_alternate_iiop_address(Object, Host, Port) -&gt; NewObject | {'EXCEPTION', E}</string>
		<string>corba:orb_init</string>
		<string>corba:orb_init(&lt;#KeyValueList#&gt;)</string>
		<string>corba:orb_init(KeyValueList) -&gt; ok | {'EXIT', Reason}</string>
		<string>corba_object:get_interface</string>
		<string>corba_object:get_interface(&lt;#Object#&gt;)</string>
		<string>corba_object:get_interface(Object) -&gt; InterfaceDef</string>
		<string>corba_object:is_nil</string>
		<string>corba_object:is_nil(&lt;#Object#&gt;)</string>
		<string>corba_object:is_nil(Object) -&gt; boolean()</string>
		<string>corba_object:is_a</string>
		<string>corba_object:is_a(&lt;#Object#&gt;, &lt;#Logical_type_id#&gt;)</string>
		<string>corba_object:is_a(Object, Logical_type_id) -&gt; Return</string>
		<string>corba_object:is_a</string>
		<string>corba_object:is_a(&lt;#Object#&gt;, &lt;#Logical_type_id#&gt;, &lt;#Contexts#&gt;)</string>
		<string>corba_object:is_a(Object, Logical_type_id, Contexts) -&gt; Return</string>
		<string>corba_object:is_remote</string>
		<string>corba_object:is_remote(&lt;#Object#&gt;)</string>
		<string>corba_object:is_remote(Object) -&gt; boolean()</string>
		<string>corba_object:non_existent</string>
		<string>corba_object:non_existent(&lt;#Object#&gt;)</string>
		<string>corba_object:non_existent(Object) -&gt; Return</string>
		<string>corba_object:non_existent</string>
		<string>corba_object:non_existent(&lt;#Object#&gt;, &lt;#Contexts#&gt;)</string>
		<string>corba_object:non_existent(Object, Contexts) -&gt; Return</string>
		<string>corba_object:not_existent</string>
		<string>corba_object:not_existent(&lt;#Object#&gt;)</string>
		<string>corba_object:not_existent(Object) -&gt; Return</string>
		<string>corba_object:not_existent</string>
		<string>corba_object:not_existent(&lt;#Object#&gt;, &lt;#Contexts#&gt;)</string>
		<string>corba_object:not_existent(Object, Contexts) -&gt; Return</string>
		<string>corba_object:is_equivalent</string>
		<string>corba_object:is_equivalent(&lt;#Object#&gt;, &lt;#OtherObject#&gt;)</string>
		<string>corba_object:is_equivalent(Object, OtherObject) -&gt; boolean()</string>
		<string>corba_object:hash</string>
		<string>corba_object:hash(&lt;#Object#&gt;, &lt;#Maximum#&gt;)</string>
		<string>corba_object:hash(Object, Maximum) -&gt; int()</string>
		<string>cosEventApp:install</string>
		<string>cosEventApp:install()</string>
		<string>cosEventApp:install() -&gt; Return</string>
		<string>cosEventApp:uninstall</string>
		<string>cosEventApp:uninstall()</string>
		<string>cosEventApp:uninstall() -&gt; Return</string>
		<string>cosEventApp:start</string>
		<string>cosEventApp:start()</string>
		<string>cosEventApp:start() -&gt; Return</string>
		<string>cosEventApp:stop</string>
		<string>cosEventApp:stop()</string>
		<string>cosEventApp:stop() -&gt; Return</string>
		<string>cosEventApp:start_channel</string>
		<string>cosEventApp:start_channel()</string>
		<string>cosEventApp:start_channel() -&gt; Channel</string>
		<string>cosEventApp:start_channel</string>
		<string>cosEventApp:start_channel(&lt;#Options#&gt;)</string>
		<string>cosEventApp:start_channel(Options) -&gt; Channel</string>
		<string>cosEventApp:start_channel_link</string>
		<string>cosEventApp:start_channel_link()</string>
		<string>cosEventApp:start_channel_link() -&gt; Channel</string>
		<string>cosEventApp:start_channel_link</string>
		<string>cosEventApp:start_channel_link(&lt;#Options#&gt;)</string>
		<string>cosEventApp:start_channel_link(Options) -&gt; Channel</string>
		<string>cosEventApp:stop_channel</string>
		<string>cosEventApp:stop_channel(&lt;#Channel#&gt;)</string>
		<string>cosEventApp:stop_channel(Channel) -&gt; Reply</string>
		<string>CosEventChannelAdmin_ConsumerAdmin:obtain_push_supplier</string>
		<string>CosEventChannelAdmin_ConsumerAdmin:obtain_push_supplier(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_ConsumerAdmin:obtain_push_supplier(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_ConsumerAdmin:obtain_pull_supplier</string>
		<string>CosEventChannelAdmin_ConsumerAdmin:obtain_pull_supplier(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_ConsumerAdmin:obtain_pull_supplier(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_EventChannel:for_consumers</string>
		<string>CosEventChannelAdmin_EventChannel:for_consumers(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_EventChannel:for_consumers(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_EventChannel:for_suppliers</string>
		<string>CosEventChannelAdmin_EventChannel:for_suppliers(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_EventChannel:for_suppliers(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_EventChannel:destroy</string>
		<string>CosEventChannelAdmin_EventChannel:destroy(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_EventChannel:destroy(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPullConsumer:connect_pull_supplier</string>
		<string>CosEventChannelAdmin_ProxyPullConsumer:connect_pull_supplier(&lt;#Object#&gt;, &lt;#PullSupplier#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPullConsumer:connect_pull_supplier(Object, PullSupplier) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPullConsumer:disconnect_pull_consumer</string>
		<string>CosEventChannelAdmin_ProxyPullConsumer:disconnect_pull_consumer(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPullConsumer:disconnect_pull_consumer(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:connect_pull_consumer</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:connect_pull_consumer(&lt;#Object#&gt;, &lt;#PullConsumer#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:connect_pull_consumer(Object, PullConsumer) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:disconnect_pull_supplier</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:disconnect_pull_supplier(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:disconnect_pull_supplier(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:pull</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:pull(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:pull(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:try_pull</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:try_pull(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPullSupplier:try_pull(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:connect_push_supplier</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:connect_push_supplier(&lt;#Object#&gt;, &lt;#PushSupplier#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:connect_push_supplier(Object, PushSupplier) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:disconnect_push_consumer</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:disconnect_push_consumer(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:disconnect_push_consumer(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:push</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:push(&lt;#Object#&gt;, &lt;#Data#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPushConsumer:push(Object, Data) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPushSupplier:connect_push_consumer</string>
		<string>CosEventChannelAdmin_ProxyPushSupplier:connect_push_consumer(&lt;#Object#&gt;, &lt;#PushConsumer#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPushSupplier:connect_push_consumer(Object, PushConsumer) -&gt; Return</string>
		<string>CosEventChannelAdmin_ProxyPushSupplier:disconnect_push_supplier</string>
		<string>CosEventChannelAdmin_ProxyPushSupplier:disconnect_push_supplier(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_ProxyPushSupplier:disconnect_push_supplier(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_SupplierAdmin:obtain_push_consumer</string>
		<string>CosEventChannelAdmin_SupplierAdmin:obtain_push_consumer(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_SupplierAdmin:obtain_push_consumer(Object) -&gt; Return</string>
		<string>CosEventChannelAdmin_SupplierAdmin:obtain_pull_consumer</string>
		<string>CosEventChannelAdmin_SupplierAdmin:obtain_pull_consumer(&lt;#Object#&gt;)</string>
		<string>CosEventChannelAdmin_SupplierAdmin:obtain_pull_consumer(Object) -&gt; Return</string>
		<string>CosEventDomainAdmin:'CycleDetection'</string>
		<string>CosEventDomainAdmin:'CycleDetection'()</string>
		<string>CosEventDomainAdmin:'CycleDetection'() -&gt; string()</string>
		<string>CosEventDomainAdmin:'AuthorizeCycles'</string>
		<string>CosEventDomainAdmin:'AuthorizeCycles'()</string>
		<string>CosEventDomainAdmin:'AuthorizeCycles'() -&gt; short()</string>
		<string>CosEventDomainAdmin:'ForbidCycles'</string>
		<string>CosEventDomainAdmin:'ForbidCycles'()</string>
		<string>CosEventDomainAdmin:'ForbidCycles'() -&gt; short()</string>
		<string>CosEventDomainAdmin:'DiamondDetection'</string>
		<string>CosEventDomainAdmin:'DiamondDetection'()</string>
		<string>CosEventDomainAdmin:'DiamondDetection'() -&gt; string()</string>
		<string>CosEventDomainAdmin:'AuthorizeDiamonds'</string>
		<string>CosEventDomainAdmin:'AuthorizeDiamonds'()</string>
		<string>CosEventDomainAdmin:'AuthorizeDiamonds'() -&gt; short()</string>
		<string>CosEventDomainAdmin:'ForbidDiamonds'</string>
		<string>CosEventDomainAdmin:'ForbidDiamonds'()</string>
		<string>CosEventDomainAdmin:'ForbidDiamonds'() -&gt; short()</string>
		<string>CosEventDomainAdmin_EventDomain:add_channel</string>
		<string>CosEventDomainAdmin_EventDomain:add_channel(&lt;#EventDomain#&gt;, &lt;#Channel#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:add_channel(EventDomain, Channel) -&gt; MemberID</string>
		<string>CosEventDomainAdmin_EventDomain:get_all_channels</string>
		<string>CosEventDomainAdmin_EventDomain:get_all_channels(&lt;#EventDomain#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:get_all_channels(EventDomain) -&gt; MemberIDSeq</string>
		<string>CosEventDomainAdmin_EventDomain:get_channel</string>
		<string>CosEventDomainAdmin_EventDomain:get_channel(&lt;#EventDomain#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:get_channel(EventDomain, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:remove_channel</string>
		<string>CosEventDomainAdmin_EventDomain:remove_channel(&lt;#EventDomain#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:remove_channel(EventDomain, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:add_connection</string>
		<string>CosEventDomainAdmin_EventDomain:add_connection(&lt;#EventDomain#&gt;, &lt;#Connection#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:add_connection(EventDomain, Connection) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:get_all_connections</string>
		<string>CosEventDomainAdmin_EventDomain:get_all_connections(&lt;#EventDomain#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:get_all_connections(EventDomain) -&gt; ConnectionIDSeq</string>
		<string>CosEventDomainAdmin_EventDomain:get_connection</string>
		<string>CosEventDomainAdmin_EventDomain:get_connection(&lt;#EventDomain#&gt;, &lt;#ConnectionID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:get_connection(EventDomain, ConnectionID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:remove_connection</string>
		<string>CosEventDomainAdmin_EventDomain:remove_connection(&lt;#EventDomain#&gt;, &lt;#ConnectionID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:remove_connection(EventDomain, ConnectionID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:get_offer_channels</string>
		<string>CosEventDomainAdmin_EventDomain:get_offer_channels(&lt;#EventDomain#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:get_offer_channels(EventDomain, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:get_subscription_channels</string>
		<string>CosEventDomainAdmin_EventDomain:get_subscription_channels(&lt;#EventDomain#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:get_subscription_channels(EventDomain, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:destroy</string>
		<string>CosEventDomainAdmin_EventDomain:destroy(&lt;#EventDomain#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:destroy(EventDomain) -&gt; ok</string>
		<string>CosEventDomainAdmin_EventDomain:get_cycles</string>
		<string>CosEventDomainAdmin_EventDomain:get_cycles(&lt;#EventDomain#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:get_cycles(EventDomain) -&gt; RouteSeq</string>
		<string>CosEventDomainAdmin_EventDomain:get_diamonds</string>
		<string>CosEventDomainAdmin_EventDomain:get_diamonds(&lt;#EventDomain#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:get_diamonds(EventDomain) -&gt; DiamondSeq</string>
		<string>CosEventDomainAdmin_EventDomain:set_default_consumer_channel</string>
		<string>CosEventDomainAdmin_EventDomain:set_default_consumer_channel(&lt;#EventDomain#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:set_default_consumer_channel(EventDomain, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:set_default_supplier_channel</string>
		<string>CosEventDomainAdmin_EventDomain:set_default_supplier_channel(&lt;#EventDomain#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:set_default_supplier_channel(EventDomain, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_consumer</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_consumer(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_consumer(EventDomain, Consumer) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_consumer</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_consumer(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_consumer(EventDomain, Consumer) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_supplier</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_supplier(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_supplier(EventDomain, Supplier) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_supplier</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_supplier(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_supplier(EventDomain, Supplier) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_consumer</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_consumer(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_consumer(EventDomain, Consumer) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_consumer</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_consumer(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_consumer(EventDomain, Consumer) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_supplier</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_supplier(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_supplier(EventDomain, Supplier) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_supplier</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_supplier(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_supplier(EventDomain, Supplier) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_consumer</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_consumer(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_consumer(EventDomain, Consumer) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_consumer</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_consumer(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_consumer(EventDomain, Consumer) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_supplier</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_supplier(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_supplier(EventDomain, Supplier) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_supplier</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_supplier(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_supplier(EventDomain, Supplier) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_consumer_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_consumer_with_id(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_consumer_with_id(EventDomain, Consumer, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_consumer_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_consumer_with_id(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_consumer_with_id(EventDomain, Consumer, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_supplier_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_supplier_with_id(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_push_supplier_with_id(EventDomain, Supplier, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_supplier_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_supplier_with_id(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_pull_supplier_with_id(EventDomain, Supplier, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_consumer_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_consumer_with_id(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_consumer_with_id(EventDomain, Consumer, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_consumer_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_consumer_with_id(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_consumer_with_id(EventDomain, Consumer, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_supplier_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_supplier_with_id(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_push_supplier_with_id(EventDomain, Supplier, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_supplier_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_supplier_with_id(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_structured_pull_supplier_with_id(EventDomain, Supplier, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_consumer_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_consumer_with_id(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_consumer_with_id(EventDomain, Consumer, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_consumer_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_consumer_with_id(&lt;#EventDomain#&gt;, &lt;#Consumer#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_consumer_with_id(EventDomain, Consumer, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_supplier_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_supplier_with_id(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_push_supplier_with_id(EventDomain, Supplier, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_supplier_with_id</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_supplier_with_id(&lt;#EventDomain#&gt;, &lt;#Supplier#&gt;, &lt;#MemberID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomain:connect_sequence_pull_supplier_with_id(EventDomain, Supplier, MemberID) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomainFactory:create_event_domain</string>
		<string>CosEventDomainAdmin_EventDomainFactory:create_event_domain(&lt;#Factory#&gt;, &lt;#QoS#&gt;, &lt;#Admin#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomainFactory:create_event_domain(Factory, QoS, Admin) -&gt; Reply</string>
		<string>CosEventDomainAdmin_EventDomainFactory:get_all_domains</string>
		<string>CosEventDomainAdmin_EventDomainFactory:get_all_domains(&lt;#Factory#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomainFactory:get_all_domains(Factory) -&gt; DomainIDSeq</string>
		<string>CosEventDomainAdmin_EventDomainFactory:get_event_domain</string>
		<string>CosEventDomainAdmin_EventDomainFactory:get_event_domain(&lt;#Factory#&gt;, &lt;#DomainID#&gt;)</string>
		<string>CosEventDomainAdmin_EventDomainFactory:get_event_domain(Factory, DomainID) -&gt; Reply</string>
		<string>cosEventDomainApp:install</string>
		<string>cosEventDomainApp:install()</string>
		<string>cosEventDomainApp:install() -&gt; Return</string>
		<string>cosEventDomainApp:uninstall</string>
		<string>cosEventDomainApp:uninstall()</string>
		<string>cosEventDomainApp:uninstall() -&gt; Return</string>
		<string>cosEventDomainApp:start</string>
		<string>cosEventDomainApp:start()</string>
		<string>cosEventDomainApp:start() -&gt; Return</string>
		<string>cosEventDomainApp:stop</string>
		<string>cosEventDomainApp:stop()</string>
		<string>cosEventDomainApp:stop() -&gt; Return</string>
		<string>cosEventDomainApp:start_factory</string>
		<string>cosEventDomainApp:start_factory()</string>
		<string>cosEventDomainApp:start_factory() -&gt; Factory</string>
		<string>cosEventDomainApp:start_factory</string>
		<string>cosEventDomainApp:start_factory(&lt;#Options#&gt;)</string>
		<string>cosEventDomainApp:start_factory(Options) -&gt; Factory</string>
		<string>cosEventDomainApp:start_factory_link</string>
		<string>cosEventDomainApp:start_factory_link()</string>
		<string>cosEventDomainApp:start_factory_link() -&gt; Factory</string>
		<string>cosEventDomainApp:start_factory_link</string>
		<string>cosEventDomainApp:start_factory_link(&lt;#Options#&gt;)</string>
		<string>cosEventDomainApp:start_factory_link(Options) -&gt; Factory</string>
		<string>cosEventDomainApp:stop_factory</string>
		<string>cosEventDomainApp:stop_factory(&lt;#Factory#&gt;)</string>
		<string>cosEventDomainApp:stop_factory(Factory) -&gt; Reply</string>
		<string>CosFileTransfer_Directory:list</string>
		<string>CosFileTransfer_Directory:list(&lt;#Directory#&gt;, &lt;#Max#&gt;)</string>
		<string>CosFileTransfer_Directory:list(Directory, Max) -&gt; Return</string>
		<string>CosFileTransfer_File:'_get_name'</string>
		<string>CosFileTransfer_File:'_get_name'(&lt;#File#&gt;)</string>
		<string>CosFileTransfer_File:'_get_name'(File) -&gt; string()</string>
		<string>CosFileTransfer_File:'_get_complete_file_name'</string>
		<string>CosFileTransfer_File:'_get_complete_file_name'(&lt;#File#&gt;)</string>
		<string>CosFileTransfer_File:'_get_complete_file_name'(File) -&gt; string()</string>
		<string>CosFileTransfer_File:'_get_parent'</string>
		<string>CosFileTransfer_File:'_get_parent'(&lt;#File#&gt;)</string>
		<string>CosFileTransfer_File:'_get_parent'(File) -&gt; Directory</string>
		<string>CosFileTransfer_File:'_get_associated_session'</string>
		<string>CosFileTransfer_File:'_get_associated_session'(&lt;#File#&gt;)</string>
		<string>CosFileTransfer_File:'_get_associated_session'(File) -&gt; FileTransferSession</string>
		<string>CosFileTransfer_FileIterator:next_one</string>
		<string>CosFileTransfer_FileIterator:next_one(&lt;#Iterator#&gt;)</string>
		<string>CosFileTransfer_FileIterator:next_one(Iterator) -&gt; Return</string>
		<string>CosFileTransfer_FileIterator:next_n</string>
		<string>CosFileTransfer_FileIterator:next_n(&lt;#Iterator#&gt;, &lt;#Max#&gt;)</string>
		<string>CosFileTransfer_FileIterator:next_n(Iterator, Max) -&gt; Return</string>
		<string>CosFileTransfer_FileIterator:destroy</string>
		<string>CosFileTransfer_FileIterator:destroy(&lt;#Iterator#&gt;)</string>
		<string>CosFileTransfer_FileIterator:destroy(Iterator) -&gt; ok</string>
		<string>CosFileTransfer_FileTransferSession:'_get_protocols_supported'</string>
		<string>CosFileTransfer_FileTransferSession:'_get_protocols_supported'(&lt;#FTS#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:'_get_protocols_supported'(FTS) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:set_directory</string>
		<string>CosFileTransfer_FileTransferSession:set_directory(&lt;#FTS#&gt;, &lt;#Directory#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:set_directory(FTS, Directory) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:create_file</string>
		<string>CosFileTransfer_FileTransferSession:create_file(&lt;#FTS#&gt;, &lt;#FileNameList#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:create_file(FTS, FileNameList) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:create_directory</string>
		<string>CosFileTransfer_FileTransferSession:create_directory(&lt;#FTS#&gt;, &lt;#FileNameList#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:create_directory(FTS, FileNameList) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:get_file</string>
		<string>CosFileTransfer_FileTransferSession:get_file(&lt;#FTS#&gt;, &lt;#FileNameList#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:get_file(FTS, FileNameList) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:delete</string>
		<string>CosFileTransfer_FileTransferSession:delete(&lt;#FTS#&gt;, &lt;#File#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:delete(FTS, File) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:transfer</string>
		<string>CosFileTransfer_FileTransferSession:transfer(&lt;#FTS#&gt;, &lt;#SourceFile#&gt;, &lt;#DestinationFile#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:transfer(FTS, SourceFile, DestinationFile) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:append</string>
		<string>CosFileTransfer_FileTransferSession:append(&lt;#FTS#&gt;, &lt;#SourceFile#&gt;, &lt;#DestinationFile#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:append(FTS, SourceFile, DestinationFile) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:insert</string>
		<string>CosFileTransfer_FileTransferSession:insert(&lt;#FTS#&gt;, &lt;#SourceFile#&gt;, &lt;#DestinationFile#&gt;, &lt;#Offset#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:insert(FTS, SourceFile, DestinationFile, Offset) -&gt; Return</string>
		<string>CosFileTransfer_FileTransferSession:logout</string>
		<string>CosFileTransfer_FileTransferSession:logout(&lt;#FTS#&gt;)</string>
		<string>CosFileTransfer_FileTransferSession:logout(FTS) -&gt; ok</string>
		<string>CosFileTransfer_VirtualFileSystem:'_get_file_system_type'</string>
		<string>CosFileTransfer_VirtualFileSystem:'_get_file_system_type'(&lt;#VFS#&gt;)</string>
		<string>CosFileTransfer_VirtualFileSystem:'_get_file_system_type'(VFS) -&gt; Return</string>
		<string>CosFileTransfer_VirtualFileSystem:'_get_supported_content_types'</string>
		<string>CosFileTransfer_VirtualFileSystem:'_get_supported_content_types'(&lt;#VFS#&gt;)</string>
		<string>CosFileTransfer_VirtualFileSystem:'_get_supported_content_types'(VFS) -&gt; Return</string>
		<string>CosFileTransfer_VirtualFileSystem:login</string>
		<string>CosFileTransfer_VirtualFileSystem:login(&lt;#VFS#&gt;, &lt;#User#&gt;, &lt;#Password#&gt;, &lt;#Account#&gt;)</string>
		<string>CosFileTransfer_VirtualFileSystem:login(VFS, User, Password, Account) -&gt; Return</string>
		<string>cosFileTransferApp:install</string>
		<string>cosFileTransferApp:install()</string>
		<string>cosFileTransferApp:install() -&gt; Return</string>
		<string>cosFileTransferApp:uninstall</string>
		<string>cosFileTransferApp:uninstall()</string>
		<string>cosFileTransferApp:uninstall() -&gt; Return</string>
		<string>cosFileTransferApp:start</string>
		<string>cosFileTransferApp:start()</string>
		<string>cosFileTransferApp:start() -&gt; Return</string>
		<string>cosFileTransferApp:stop</string>
		<string>cosFileTransferApp:stop()</string>
		<string>cosFileTransferApp:stop() -&gt; Return</string>
		<string>cosFileTransferApp:create_VFS</string>
		<string>cosFileTransferApp:create_VFS(&lt;#Type#&gt;, &lt;#Content#&gt;, &lt;#Host#&gt;, &lt;#Port [#&gt;, &lt;#Options]#&gt;)</string>
		<string>cosFileTransferApp:create_VFS(Type, Content, Host, Port [, Options]) -&gt; Return</string>
		<string>cosFileTransferApp:ssl_server_certfile</string>
		<string>cosFileTransferApp:ssl_server_certfile()</string>
		<string>cosFileTransferApp:ssl_server_certfile() -&gt; string()</string>
		<string>cosFileTransferApp:ssl_client_certfile</string>
		<string>cosFileTransferApp:ssl_client_certfile()</string>
		<string>cosFileTransferApp:ssl_client_certfile() -&gt; string()</string>
		<string>cosFileTransferApp:ssl_server_verify</string>
		<string>cosFileTransferApp:ssl_server_verify()</string>
		<string>cosFileTransferApp:ssl_server_verify() -&gt; 0 | 1 | 2</string>
		<string>cosFileTransferApp:ssl_client_verify</string>
		<string>cosFileTransferApp:ssl_client_verify()</string>
		<string>cosFileTransferApp:ssl_client_verify() -&gt; 0 | 1 | 2</string>
		<string>cosFileTransferApp:ssl_server_depth</string>
		<string>cosFileTransferApp:ssl_server_depth()</string>
		<string>cosFileTransferApp:ssl_server_depth() -&gt; int()</string>
		<string>cosFileTransferApp:ssl_client_depth</string>
		<string>cosFileTransferApp:ssl_client_depth()</string>
		<string>cosFileTransferApp:ssl_client_depth() -&gt; int()</string>
		<string>CosNaming_BindingIterator:next_one</string>
		<string>CosNaming_BindingIterator:next_one(&lt;#BindinIterator#&gt;)</string>
		<string>CosNaming_BindingIterator:next_one(BindinIterator) -&gt; Return</string>
		<string>CosNaming_BindingIterator:next_n</string>
		<string>CosNaming_BindingIterator:next_n(&lt;#BindinIterator#&gt;, &lt;#HowMany#&gt;)</string>
		<string>CosNaming_BindingIterator:next_n(BindinIterator, HowMany) -&gt; Return</string>
		<string>CosNaming_BindingIterator:destroy</string>
		<string>CosNaming_BindingIterator:destroy(&lt;#BindingIterator#&gt;)</string>
		<string>CosNaming_BindingIterator:destroy(BindingIterator) -&gt; Return</string>
		<string>CosNaming_NamingContext:bind</string>
		<string>CosNaming_NamingContext:bind(&lt;#NamingContext#&gt;, &lt;#Name#&gt;, &lt;#Object#&gt;)</string>
		<string>CosNaming_NamingContext:bind(NamingContext, Name, Object) -&gt; Return</string>
		<string>CosNaming_NamingContext:rebind</string>
		<string>CosNaming_NamingContext:rebind(&lt;#NamingContext#&gt;, &lt;#Name#&gt;, &lt;#Object#&gt;)</string>
		<string>CosNaming_NamingContext:rebind(NamingContext, Name, Object) -&gt; Return</string>
		<string>CosNaming_NamingContext:bind_context</string>
		<string>CosNaming_NamingContext:bind_context(&lt;#NamingContext1#&gt;, &lt;#Name#&gt;, &lt;#NamingContex2#&gt;)</string>
		<string>CosNaming_NamingContext:bind_context(NamingContext1, Name, NamingContex2) -&gt; Return</string>
		<string>CosNaming_NamingContext:rebind_context</string>
		<string>CosNaming_NamingContext:rebind_context(&lt;#NamingContext1#&gt;, &lt;#Name#&gt;, &lt;#NamingContex2#&gt;)</string>
		<string>CosNaming_NamingContext:rebind_context(NamingContext1, Name, NamingContex2) -&gt; Return</string>
		<string>CosNaming_NamingContext:resolve</string>
		<string>CosNaming_NamingContext:resolve(&lt;#NamingContext#&gt;, &lt;#Name#&gt;)</string>
		<string>CosNaming_NamingContext:resolve(NamingContext, Name) -&gt; Return</string>
		<string>CosNaming_NamingContext:unbind</string>
		<string>CosNaming_NamingContext:unbind(&lt;#NamingContext#&gt;, &lt;#Name#&gt;)</string>
		<string>CosNaming_NamingContext:unbind(NamingContext, Name) -&gt; Return</string>
		<string>CosNaming_NamingContext:new_context</string>
		<string>CosNaming_NamingContext:new_context(&lt;#NamingContext#&gt;)</string>
		<string>CosNaming_NamingContext:new_context(NamingContext) -&gt; Return</string>
		<string>CosNaming_NamingContext:bind_new_context</string>
		<string>CosNaming_NamingContext:bind_new_context(&lt;#NamingContext#&gt;, &lt;#Name#&gt;)</string>
		<string>CosNaming_NamingContext:bind_new_context(NamingContext, Name) -&gt; Return</string>
		<string>CosNaming_NamingContext:destroy</string>
		<string>CosNaming_NamingContext:destroy(&lt;#NamingContext#&gt;)</string>
		<string>CosNaming_NamingContext:destroy(NamingContext) -&gt; Return</string>
		<string>CosNaming_NamingContext:list</string>
		<string>CosNaming_NamingContext:list(&lt;#NamingContext#&gt;, &lt;#HowMany#&gt;)</string>
		<string>CosNaming_NamingContext:list(NamingContext, HowMany) -&gt; Return</string>
		<string>CosNaming_NamingContextExt:to_string</string>
		<string>CosNaming_NamingContextExt:to_string(&lt;#NamingContext#&gt;, &lt;#Name#&gt;)</string>
		<string>CosNaming_NamingContextExt:to_string(NamingContext, Name) -&gt; Return</string>
		<string>CosNaming_NamingContextExt:to_name</string>
		<string>CosNaming_NamingContextExt:to_name(&lt;#NamingContext#&gt;, &lt;#NameString#&gt;)</string>
		<string>CosNaming_NamingContextExt:to_name(NamingContext, NameString) -&gt; Return</string>
		<string>CosNaming_NamingContextExt:to_url</string>
		<string>CosNaming_NamingContextExt:to_url(&lt;#NamingContext#&gt;, &lt;#AddressString#&gt;, &lt;#NameString#&gt;)</string>
		<string>CosNaming_NamingContextExt:to_url(NamingContext, AddressString, NameString) -&gt; Return</string>
		<string>CosNaming_NamingContextExt:resolve_str</string>
		<string>CosNaming_NamingContextExt:resolve_str(&lt;#NamingContext#&gt;, &lt;#NameString#&gt;)</string>
		<string>CosNaming_NamingContextExt:resolve_str(NamingContext, NameString) -&gt; Return</string>
		<string>CosNotification:'EventReliability'</string>
		<string>CosNotification:'EventReliability'()</string>
		<string>CosNotification:'EventReliability'() -&gt; string()</string>
		<string>CosNotification:'BestEffort'</string>
		<string>CosNotification:'BestEffort'()</string>
		<string>CosNotification:'BestEffort'() -&gt; short()</string>
		<string>CosNotification:'Persistent'</string>
		<string>CosNotification:'Persistent'()</string>
		<string>CosNotification:'Persistent'() -&gt; short()</string>
		<string>CosNotification:'ConnectionReliability'</string>
		<string>CosNotification:'ConnectionReliability'()</string>
		<string>CosNotification:'ConnectionReliability'() -&gt; string()</string>
		<string>CosNotification:'Priority'</string>
		<string>CosNotification:'Priority'()</string>
		<string>CosNotification:'Priority'() -&gt; string()</string>
		<string>CosNotification:'LowestPriority'</string>
		<string>CosNotification:'LowestPriority'()</string>
		<string>CosNotification:'LowestPriority'() -&gt; short()</string>
		<string>CosNotification:'HighestPriority'</string>
		<string>CosNotification:'HighestPriority'()</string>
		<string>CosNotification:'HighestPriority'() -&gt; short()</string>
		<string>CosNotification:'DefaultPriority'</string>
		<string>CosNotification:'DefaultPriority'()</string>
		<string>CosNotification:'DefaultPriority'() -&gt; short()</string>
		<string>CosNotification:'StartTime'</string>
		<string>CosNotification:'StartTime'()</string>
		<string>CosNotification:'StartTime'() -&gt; string()</string>
		<string>CosNotification:'StopTime'</string>
		<string>CosNotification:'StopTime'()</string>
		<string>CosNotification:'StopTime'() -&gt; string()</string>
		<string>CosNotification:'Timeout'</string>
		<string>CosNotification:'Timeout'()</string>
		<string>CosNotification:'Timeout'() -&gt; string()</string>
		<string>CosNotification:'OrderPolicy'</string>
		<string>CosNotification:'OrderPolicy'()</string>
		<string>CosNotification:'OrderPolicy'() -&gt; string()</string>
		<string>CosNotification:'AnyOrder'</string>
		<string>CosNotification:'AnyOrder'()</string>
		<string>CosNotification:'AnyOrder'() -&gt; short()</string>
		<string>CosNotification:'FifoOrder'</string>
		<string>CosNotification:'FifoOrder'()</string>
		<string>CosNotification:'FifoOrder'() -&gt; short()</string>
		<string>CosNotification:'PriorityOrder'</string>
		<string>CosNotification:'PriorityOrder'()</string>
		<string>CosNotification:'PriorityOrder'() -&gt; short()</string>
		<string>CosNotification:'DeadlineOrder'</string>
		<string>CosNotification:'DeadlineOrder'()</string>
		<string>CosNotification:'DeadlineOrder'() -&gt; short()</string>
		<string>CosNotification:'DiscardPolicy'</string>
		<string>CosNotification:'DiscardPolicy'()</string>
		<string>CosNotification:'DiscardPolicy'() -&gt; string()</string>
		<string>CosNotification:'LifoOrder'</string>
		<string>CosNotification:'LifoOrder'()</string>
		<string>CosNotification:'LifoOrder'() -&gt; short()</string>
		<string>CosNotification:'RejectNewEvents'</string>
		<string>CosNotification:'RejectNewEvents'()</string>
		<string>CosNotification:'RejectNewEvents'() -&gt; short()</string>
		<string>CosNotification:'MaximumBatchSize'</string>
		<string>CosNotification:'MaximumBatchSize'()</string>
		<string>CosNotification:'MaximumBatchSize'() -&gt; string()</string>
		<string>CosNotification:'PacingInterval'</string>
		<string>CosNotification:'PacingInterval'()</string>
		<string>CosNotification:'PacingInterval'() -&gt; string()</string>
		<string>CosNotification:'StartTimeSupported'</string>
		<string>CosNotification:'StartTimeSupported'()</string>
		<string>CosNotification:'StartTimeSupported'() -&gt; string()</string>
		<string>CosNotification:'StopTimeSupported'</string>
		<string>CosNotification:'StopTimeSupported'()</string>
		<string>CosNotification:'StopTimeSupported'() -&gt; string()</string>
		<string>CosNotification:'MaxEventsPerConsumer'</string>
		<string>CosNotification:'MaxEventsPerConsumer'()</string>
		<string>CosNotification:'MaxEventsPerConsumer'() -&gt; string()</string>
		<string>CosNotification:'MaxQueueLength'</string>
		<string>CosNotification:'MaxQueueLength'()</string>
		<string>CosNotification:'MaxQueueLength'() -&gt; string()</string>
		<string>CosNotification:'MaxConsumers'</string>
		<string>CosNotification:'MaxConsumers'()</string>
		<string>CosNotification:'MaxConsumers'() -&gt; string()</string>
		<string>CosNotification:'MaxSuppliers'</string>
		<string>CosNotification:'MaxSuppliers'()</string>
		<string>CosNotification:'MaxSuppliers'() -&gt; string()</string>
		<string>CosNotification_AdminPropertiesAdmin:get_admin</string>
		<string>CosNotification_AdminPropertiesAdmin:get_admin(&lt;#Object#&gt;)</string>
		<string>CosNotification_AdminPropertiesAdmin:get_admin(Object) -&gt; AdminProperties</string>
		<string>CosNotification_AdminPropertiesAdmin:set_admin</string>
		<string>CosNotification_AdminPropertiesAdmin:set_admin(&lt;#Object#&gt;, &lt;#AdminProperties#&gt;)</string>
		<string>CosNotification_AdminPropertiesAdmin:set_admin(Object, AdminProperties) -&gt; Reply</string>
		<string>CosNotification_QoSAdmin:get_qos</string>
		<string>CosNotification_QoSAdmin:get_qos(&lt;#Object#&gt;)</string>
		<string>CosNotification_QoSAdmin:get_qos(Object) -&gt; Reply</string>
		<string>CosNotification_QoSAdmin:set_qos</string>
		<string>CosNotification_QoSAdmin:set_qos(&lt;#Object#&gt;, &lt;#QoS#&gt;)</string>
		<string>CosNotification_QoSAdmin:set_qos(Object, QoS) -&gt; Reply</string>
		<string>CosNotification_QoSAdmin:validate_qos</string>
		<string>CosNotification_QoSAdmin:validate_qos(&lt;#Object#&gt;, &lt;#QoS#&gt;)</string>
		<string>CosNotification_QoSAdmin:validate_qos(Object, QoS) -&gt; Reply</string>
		<string>cosNotificationApp:install</string>
		<string>cosNotificationApp:install()</string>
		<string>cosNotificationApp:install() -&gt; Return</string>
		<string>cosNotificationApp:install</string>
		<string>cosNotificationApp:install(&lt;#Seconds#&gt;)</string>
		<string>cosNotificationApp:install(Seconds) -&gt; Return</string>
		<string>cosNotificationApp:install_event</string>
		<string>cosNotificationApp:install_event()</string>
		<string>cosNotificationApp:install_event() -&gt; Return</string>
		<string>cosNotificationApp:install_event</string>
		<string>cosNotificationApp:install_event(&lt;#Seconds#&gt;)</string>
		<string>cosNotificationApp:install_event(Seconds) -&gt; Return</string>
		<string>cosNotificationApp:uninstall</string>
		<string>cosNotificationApp:uninstall()</string>
		<string>cosNotificationApp:uninstall() -&gt; Return</string>
		<string>cosNotificationApp:uninstall</string>
		<string>cosNotificationApp:uninstall(&lt;#Seconds#&gt;)</string>
		<string>cosNotificationApp:uninstall(Seconds) -&gt; Return</string>
		<string>cosNotificationApp:uninstall_event</string>
		<string>cosNotificationApp:uninstall_event()</string>
		<string>cosNotificationApp:uninstall_event() -&gt; Return</string>
		<string>cosNotificationApp:uninstall_event</string>
		<string>cosNotificationApp:uninstall_event(&lt;#Seconds#&gt;)</string>
		<string>cosNotificationApp:uninstall_event(Seconds) -&gt; Return</string>
		<string>cosNotificationApp:start</string>
		<string>cosNotificationApp:start()</string>
		<string>cosNotificationApp:start() -&gt; Return</string>
		<string>cosNotificationApp:stop</string>
		<string>cosNotificationApp:stop()</string>
		<string>cosNotificationApp:stop() -&gt; Return</string>
		<string>cosNotificationApp:start_global_factory</string>
		<string>cosNotificationApp:start_global_factory()</string>
		<string>cosNotificationApp:start_global_factory() -&gt; ChannelFactory</string>
		<string>cosNotificationApp:start_global_factory</string>
		<string>cosNotificationApp:start_global_factory(&lt;#Options#&gt;)</string>
		<string>cosNotificationApp:start_global_factory(Options) -&gt; ChannelFactory</string>
		<string>cosNotificationApp:start_factory</string>
		<string>cosNotificationApp:start_factory()</string>
		<string>cosNotificationApp:start_factory() -&gt; ChannelFactory</string>
		<string>cosNotificationApp:start_factory</string>
		<string>cosNotificationApp:start_factory(&lt;#Options#&gt;)</string>
		<string>cosNotificationApp:start_factory(Options) -&gt; ChannelFactory</string>
		<string>cosNotificationApp:stop_factory</string>
		<string>cosNotificationApp:stop_factory(&lt;#ChannelFactory#&gt;)</string>
		<string>cosNotificationApp:stop_factory(ChannelFactory) -&gt; Reply</string>
		<string>cosNotificationApp:start_filter_factory</string>
		<string>cosNotificationApp:start_filter_factory()</string>
		<string>cosNotificationApp:start_filter_factory() -&gt; FilterFactory</string>
		<string>cosNotificationApp:stop_filter_factory</string>
		<string>cosNotificationApp:stop_filter_factory(&lt;#FilterFactory#&gt;)</string>
		<string>cosNotificationApp:stop_filter_factory(FilterFactory) -&gt; Reply</string>
		<string>cosNotificationApp:create_structured_event</string>
		<string>cosNotificationApp:create_structured_event(&lt;#Domain#&gt;, &lt;#Type#&gt;, &lt;#Event#&gt;, &lt;#VariableHeader#&gt;, &lt;#FilterableBody#&gt;, &lt;#BodyRemainder#&gt;)</string>
		<string>cosNotificationApp:create_structured_event(Domain, Type, Event, VariableHeader, FilterableBody, BodyRemainder) -&gt; Reply</string>
		<string>cosNotificationApp:type_check</string>
		<string>cosNotificationApp:type_check()</string>
		<string>cosNotificationApp:type_check() -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyID</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyID(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyID(ConsumerAdmin) -&gt; AdminID</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyChannel</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyChannel(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyChannel(ConsumerAdmin) -&gt; Channel</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyOperator</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyOperator(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_MyOperator(ConsumerAdmin) -&gt; OpType</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_priority_filter</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_priority_filter(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_priority_filter(ConsumerAdmin) -&gt; MappingFilter</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_set_priority_filter</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_set_priority_filter(&lt;#ConsumerAdmin#&gt;, &lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_set_priority_filter(ConsumerAdmin, MappingFilter) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_lifetime_filter</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_lifetime_filter(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_lifetime_filter(ConsumerAdmin) -&gt; MappingFilter</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_set_lifetime_filter</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_set_lifetime_filter(&lt;#ConsumerAdmin#&gt;, &lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_set_lifetime_filter(ConsumerAdmin, MappingFilter) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_pull_suppliers</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_pull_suppliers(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_pull_suppliers(ConsumerAdmin) -&gt; ProxyIDSeq</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_push_suppliers</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_push_suppliers(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:_get_push_suppliers(ConsumerAdmin) -&gt; ProxyIDSeq</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:get_proxy_supplier</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:get_proxy_supplier(&lt;#ConsumerAdmin#&gt;, &lt;#ProxyID#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:get_proxy_supplier(ConsumerAdmin, ProxyID) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_notification_pull_supplier</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_notification_pull_supplier(&lt;#ConsumerAdmin#&gt;, &lt;#ConsumerType#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_notification_pull_supplier(ConsumerAdmin, ConsumerType) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_pull_supplier</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_pull_supplier(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_pull_supplier(ConsumerAdmin) -&gt; Proxy</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_notification_push_supplier</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_notification_push_supplier(&lt;#ConsumerAdmin#&gt;, &lt;#ConsumerType#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_notification_push_supplier(ConsumerAdmin, ConsumerType) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_push_supplier</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_push_supplier(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:obtain_push_supplier(ConsumerAdmin) -&gt; Proxy</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:destroy</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:destroy(&lt;#ConsumerAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_ConsumerAdmin:destroy(ConsumerAdmin) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_MyFactory</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_MyFactory(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_MyFactory(Channel) -&gt; ChannelFactory</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_consumer_admin</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_consumer_admin(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_consumer_admin(Channel) -&gt; ConsumerAdmin</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_supplier_admin</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_supplier_admin(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_supplier_admin(Channel) -&gt; SupplierAdmin</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_filter_factory</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_filter_factory(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:_get_default_filter_factory(Channel) -&gt; FilterFactory</string>
		<string>CosNotifyChannelAdmin_EventChannel:new_for_consumers</string>
		<string>CosNotifyChannelAdmin_EventChannel:new_for_consumers(&lt;#Channel#&gt;, &lt;#OpType#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:new_for_consumers(Channel, OpType) -&gt; Return</string>
		<string>CosNotifyChannelAdmin_EventChannel:for_consumers</string>
		<string>CosNotifyChannelAdmin_EventChannel:for_consumers(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:for_consumers(Channel) -&gt; ConsumerAdmin</string>
		<string>CosNotifyChannelAdmin_EventChannel:new_for_suppliers</string>
		<string>CosNotifyChannelAdmin_EventChannel:new_for_suppliers(&lt;#Channel#&gt;, &lt;#OpType#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:new_for_suppliers(Channel, OpType) -&gt; Return</string>
		<string>CosNotifyChannelAdmin_EventChannel:for_suppliers</string>
		<string>CosNotifyChannelAdmin_EventChannel:for_suppliers(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:for_suppliers(Channel) -&gt; SupplierAdmin</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_consumeradmin</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_consumeradmin(&lt;#Channel#&gt;, &lt;#AdminID#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_consumeradmin(Channel, AdminID) -&gt; ConsumerAdmin</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_supplieradmin</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_supplieradmin(&lt;#Channel#&gt;, &lt;#AdminID#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_supplieradmin(Channel, AdminID) -&gt; SupplierAdmin</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_all_consumeradmins</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_all_consumeradmins(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_all_consumeradmins(Channel) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_all_supplieradmins</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_all_supplieradmins(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:get_all_supplieradmins(Channel) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_EventChannel:destroy</string>
		<string>CosNotifyChannelAdmin_EventChannel:destroy(&lt;#Channel#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannel:destroy(Channel) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:create_channel</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:create_channel(&lt;#ChannelFactory#&gt;, &lt;#InitialQoS#&gt;, &lt;#InitialAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:create_channel(ChannelFactory, InitialQoS, InitialAdmin) -&gt; Return</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:get_all_channels</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:get_all_channels(&lt;#ChannelFactory#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:get_all_channels(ChannelFactory) -&gt; ChannelIDSeq</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:get_event_channel</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:get_event_channel(&lt;#ChannelFactory#&gt;, &lt;#ChannelID#&gt;)</string>
		<string>CosNotifyChannelAdmin_EventChannelFactory:get_event_channel(ChannelFactory, ChannelID) -&gt; Return</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:_get_MyType</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:_get_MyType(&lt;#ProxyConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:_get_MyType(ProxyConsumer) -&gt; ProxyType</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:_get_MyAdmin</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:_get_MyAdmin(&lt;#ProxyConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:_get_MyAdmin(ProxyConsumer) -&gt; AdminObject</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:obtain_subscription_types</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:obtain_subscription_types(&lt;#ProxyConsumer#&gt;, &lt;#ObtainInfoMode#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:obtain_subscription_types(ProxyConsumer, ObtainInfoMode) -&gt; EventTypeSeq</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:validate_event_qos</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:validate_event_qos(&lt;#ProxyConsumer#&gt;, &lt;#QoSProperties#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyConsumer:validate_event_qos(ProxyConsumer, QoSProperties) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:connect_any_pull_supplier</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:connect_any_pull_supplier(&lt;#ProxyPullConsumer#&gt;, &lt;#PullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:connect_any_pull_supplier(ProxyPullConsumer, PullSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:suspend_connection</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:suspend_connection(&lt;#ProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:suspend_connection(ProxyPullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:resume_connection</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:resume_connection(&lt;#ProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:resume_connection(ProxyPullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:disconnect_pull_consumer</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:disconnect_pull_consumer(&lt;#ProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPullConsumer:disconnect_pull_consumer(ProxyPullConsumer) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:connect_any_pull_consumer</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:connect_any_pull_consumer(&lt;#ProxyPullSupplier#&gt;, &lt;#PullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:connect_any_pull_consumer(ProxyPullSupplier, PullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:pull</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:pull(&lt;#ProxyPullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:pull(ProxyPullSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:try_pull</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:try_pull(&lt;#ProxyPullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:try_pull(ProxyPullSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:disconnect_pull_supplier</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:disconnect_pull_supplier(&lt;#ProxyPullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPullSupplier:disconnect_pull_supplier(ProxyPullSupplier) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:connect_any_push_supplier</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:connect_any_push_supplier(&lt;#ProxyPushConsumer#&gt;, &lt;#PushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:connect_any_push_supplier(ProxyPushConsumer, PushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:push</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:push(&lt;#ProxyPushConsumer#&gt;, &lt;#Event#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:push(ProxyPushConsumer, Event) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:disconnect_push_consumer</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:disconnect_push_consumer(&lt;#ProxyPushConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPushConsumer:disconnect_push_consumer(ProxyPushConsumer) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:connect_any_push_consumer</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:connect_any_push_consumer(&lt;#ProxyPushSupplier#&gt;, &lt;#PushConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:connect_any_push_consumer(ProxyPushSupplier, PushConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:suspend_connection</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:suspend_connection(&lt;#ProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:suspend_connection(ProxyPushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:resume_connection</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:resume_connection(&lt;#ProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:resume_connection(ProxyPushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:disconnect_push_supplier</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:disconnect_push_supplier(&lt;#ProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxyPushSupplier:disconnect_push_supplier(ProxyPushSupplier) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_MyType</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_MyType(&lt;#ProxySupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_MyType(ProxySupplier) -&gt; ProxyType</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_MyAdmin</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_MyAdmin(&lt;#ProxySupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_MyAdmin(ProxySupplier) -&gt; AdminObject</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_priority_filter</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_priority_filter(&lt;#ProxySupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_priority_filter(ProxySupplier) -&gt; MappingFilter</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_set_priority_filter</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_set_priority_filter(&lt;#ProxySupplier#&gt;, &lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_set_priority_filter(ProxySupplier, MappingFilter) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_lifetime_filter</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_lifetime_filter(&lt;#ProxySupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_get_lifetime_filter(ProxySupplier) -&gt; MappingFilter</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_set_lifetime_filter</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_set_lifetime_filter(&lt;#ProxySupplier#&gt;, &lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:_set_lifetime_filter(ProxySupplier, MappingFilter) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:obtain_offered_types</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:obtain_offered_types(&lt;#ProxySupplier#&gt;, &lt;#ObtainInfoMode#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:obtain_offered_types(ProxySupplier, ObtainInfoMode) -&gt; EventTypeSeq</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:validate_event_qos</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:validate_event_qos(&lt;#ProxySupplier#&gt;, &lt;#QoSProperties#&gt;)</string>
		<string>CosNotifyChannelAdmin_ProxySupplier:validate_event_qos(ProxySupplier, QoSProperties) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:connect_sequence_pull_supplier</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:connect_sequence_pull_supplier(&lt;#SequenceProxyPullConsumer#&gt;, &lt;#PullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:connect_sequence_pull_supplier(SequenceProxyPullConsumer, PullSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:suspend_connection</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:suspend_connection(&lt;#SequenceProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:suspend_connection(SequenceProxyPullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:resume_connection</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:resume_connection(&lt;#SequenceProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:resume_connection(SequenceProxyPullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:disconnect_sequence_pull_consumer</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:disconnect_sequence_pull_consumer(&lt;#SequenceProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullConsumer:disconnect_sequence_pull_consumer(SequenceProxyPullConsumer) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:connect_sequence_pull_consumer</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:connect_sequence_pull_consumer(&lt;#SequenceProxyPullSupplier#&gt;, &lt;#PullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:connect_sequence_pull_consumer(SequenceProxyPullSupplier, PullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:pull_structured_events</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:pull_structured_events(&lt;#SequenceProxyPullSupplier#&gt;, &lt;#MaxEvents#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:pull_structured_events(SequenceProxyPullSupplier, MaxEvents) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:try_pull_structured_events</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:try_pull_structured_events(&lt;#SequenceProxyPullSupplier#&gt;, &lt;#MaxEvents#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:try_pull_structured_events(SequenceProxyPullSupplier, MaxEvents) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:disconnect_sequence_pull_supplier</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:disconnect_sequence_pull_supplier(&lt;#SequenceProxyPullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPullSupplier:disconnect_sequence_pull_supplier(SequenceProxyPullSupplier) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:connect_sequence_push_supplier</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:connect_sequence_push_supplier(&lt;#SequenceProxyPushConsumer#&gt;, &lt;#PushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:connect_sequence_push_supplier(SequenceProxyPushConsumer, PushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:push_structured_events</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:push_structured_events(&lt;#SequenceProxyPushConsumer#&gt;, &lt;#EventBatch#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:push_structured_events(SequenceProxyPushConsumer, EventBatch) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:disconnect_sequence_push_consumer</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:disconnect_sequence_push_consumer(&lt;#SequenceProxyPushConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushConsumer:disconnect_sequence_push_consumer(SequenceProxyPushConsumer) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:connect_sequence_push_consumer</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:connect_sequence_push_consumer(&lt;#SequenceProxyPushSupplier#&gt;, &lt;#PushConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:connect_sequence_push_consumer(SequenceProxyPushSupplier, PushConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:suspend_connection</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:suspend_connection(&lt;#SequenceProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:suspend_connection(SequenceProxyPushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:resume_connection</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:resume_connection(&lt;#SequenceProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:resume_connection(SequenceProxyPushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:disconnect_sequence_push_supplier</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:disconnect_sequence_push_supplier(&lt;#SequenceProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_SequenceProxyPushSupplier:disconnect_sequence_push_supplier(SequenceProxyPushSupplier) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:connect_structured_pull_supplier</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:connect_structured_pull_supplier(&lt;#StructuredProxyPullConsumer#&gt;, &lt;#PullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:connect_structured_pull_supplier(StructuredProxyPullConsumer, PullSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:suspend_connection</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:suspend_connection(&lt;#StructuredProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:suspend_connection(StructuredProxyPullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:resume_connection</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:resume_connection(&lt;#StructuredProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:resume_connection(StructuredProxyPullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:disconnect_structured_pull_consumer</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:disconnect_structured_pull_consumer(&lt;#StructuredProxyPullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullConsumer:disconnect_structured_pull_consumer(StructuredProxyPullConsumer) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:connect_structured_pull_consumer</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:connect_structured_pull_consumer(&lt;#StructuredProxyPullSupplier#&gt;, &lt;#PullConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:connect_structured_pull_consumer(StructuredProxyPullSupplier, PullConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:pull_structured_event</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:pull_structured_event(&lt;#StructuredProxyPullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:pull_structured_event(StructuredProxyPullSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:try_pull_structured_event</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:try_pull_structured_event(&lt;#StructuredProxyPullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:try_pull_structured_event(StructuredProxyPullSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:disconnect_structured_pull_supplier</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:disconnect_structured_pull_supplier(&lt;#StructuredProxyPullSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPullSupplier:disconnect_structured_pull_supplier(StructuredProxyPullSupplier) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:connect_structured_push_supplier</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:connect_structured_push_supplier(&lt;#StructuredProxyPushConsumer#&gt;, &lt;#PushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:connect_structured_push_supplier(StructuredProxyPushConsumer, PushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:push_structured_event</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:push_structured_event(&lt;#StructuredProxyPushConsumer#&gt;, &lt;#StructuredEvent#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:push_structured_event(StructuredProxyPushConsumer, StructuredEvent) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:disconnect_structured_push_consumer</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:disconnect_structured_push_consumer(&lt;#StructuredProxyPushConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushConsumer:disconnect_structured_push_consumer(StructuredProxyPushConsumer) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:connect_structured_push_consumer</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:connect_structured_push_consumer(&lt;#StructuredProxyPushSupplier#&gt;, &lt;#PushConsumer#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:connect_structured_push_consumer(StructuredProxyPushSupplier, PushConsumer) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:suspend_connection</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:suspend_connection(&lt;#StructuredProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:suspend_connection(StructuredProxyPushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:resume_connection</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:resume_connection(&lt;#StructuredProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:resume_connection(StructuredProxyPushSupplier) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:disconnect_structured_push_supplier</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:disconnect_structured_push_supplier(&lt;#StructuredProxyPushSupplier#&gt;)</string>
		<string>CosNotifyChannelAdmin_StructuredProxyPushSupplier:disconnect_structured_push_supplier(StructuredProxyPushSupplier) -&gt; ok</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyID</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyID(&lt;#SupplierAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyID(SupplierAdmin) -&gt; AdminID</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyChannel</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyChannel(&lt;#SupplierAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyChannel(SupplierAdmin) -&gt; Channel</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyOperator</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyOperator(&lt;#SupplierAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_MyOperator(SupplierAdmin) -&gt; OpType</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_pull_consumers</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_pull_consumers(&lt;#SupplierAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_pull_consumers(SupplierAdmin) -&gt; ProxyIDSeq</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_push_consumers</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_push_consumers(&lt;#SupplierAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:_get_push_consumers(SupplierAdmin) -&gt; ProxyIDSeq</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:get_proxy_consumer</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:get_proxy_consumer(&lt;#SupplierAdmin#&gt;, &lt;#ProxyID#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:get_proxy_consumer(SupplierAdmin, ProxyID) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_notification_pull_consumer</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_notification_pull_consumer(&lt;#SupplierAdmin#&gt;, &lt;#SupplierType#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_notification_pull_consumer(SupplierAdmin, SupplierType) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_pull_consumer</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_pull_consumer(&lt;#SupplierAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_pull_consumer(SupplierAdmin) -&gt; Proxy</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_notification_push_consumer</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_notification_push_consumer(&lt;#SupplierAdmin#&gt;, &lt;#SupplierType#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_notification_push_consumer(SupplierAdmin, SupplierType) -&gt; Reply</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_push_consumer</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_push_consumer(&lt;#SupplierAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:obtain_push_consumer(SupplierAdmin) -&gt; Proxy</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:destroy</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:destroy(&lt;#SupplierAdmin#&gt;)</string>
		<string>CosNotifyChannelAdmin_SupplierAdmin:destroy(SupplierAdmin) -&gt; ok</string>
		<string>CosNotifyComm_NotifyPublish:offer_change</string>
		<string>CosNotifyComm_NotifyPublish:offer_change(&lt;#Object#&gt;, &lt;#Added#&gt;, &lt;#Removed#&gt;)</string>
		<string>CosNotifyComm_NotifyPublish:offer_change(Object, Added, Removed) -&gt; Reply</string>
		<string>CosNotifyComm_NotifySubscribe:subscription_change</string>
		<string>CosNotifyComm_NotifySubscribe:subscription_change(&lt;#Object#&gt;, &lt;#Added#&gt;, &lt;#Removed#&gt;)</string>
		<string>CosNotifyComm_NotifySubscribe:subscription_change(Object, Added, Removed) -&gt; Reply</string>
		<string>CosNotifyFilter_Filter:_get_constraint_grammar</string>
		<string>CosNotifyFilter_Filter:_get_constraint_grammar(&lt;#Filter#&gt;)</string>
		<string>CosNotifyFilter_Filter:_get_constraint_grammar(Filter) -&gt; Grammar</string>
		<string>CosNotifyFilter_Filter:add_constraints</string>
		<string>CosNotifyFilter_Filter:add_constraints(&lt;#Filter#&gt;, &lt;#ConstraintExpSeq#&gt;)</string>
		<string>CosNotifyFilter_Filter:add_constraints(Filter, ConstraintExpSeq) -&gt; Reply</string>
		<string>CosNotifyFilter_Filter:modify_constraints</string>
		<string>CosNotifyFilter_Filter:modify_constraints(&lt;#Filter#&gt;, &lt;#ConstraintIDSeq#&gt;, &lt;#ConstraintInfoSeq#&gt;)</string>
		<string>CosNotifyFilter_Filter:modify_constraints(Filter, ConstraintIDSeq, ConstraintInfoSeq) -&gt; Reply</string>
		<string>CosNotifyFilter_Filter:get_constraints</string>
		<string>CosNotifyFilter_Filter:get_constraints(&lt;#Filter#&gt;, &lt;#ConstraintIDSeq#&gt;)</string>
		<string>CosNotifyFilter_Filter:get_constraints(Filter, ConstraintIDSeq) -&gt; Reply</string>
		<string>CosNotifyFilter_Filter:get_all_constraints</string>
		<string>CosNotifyFilter_Filter:get_all_constraints(&lt;#Filter#&gt;)</string>
		<string>CosNotifyFilter_Filter:get_all_constraints(Filter) -&gt; ConstraintInfoSeq</string>
		<string>CosNotifyFilter_Filter:remove_all_constraints</string>
		<string>CosNotifyFilter_Filter:remove_all_constraints(&lt;#Filter#&gt;)</string>
		<string>CosNotifyFilter_Filter:remove_all_constraints(Filter) -&gt; ok</string>
		<string>CosNotifyFilter_Filter:destroy</string>
		<string>CosNotifyFilter_Filter:destroy(&lt;#Filter#&gt;)</string>
		<string>CosNotifyFilter_Filter:destroy(Filter) -&gt; ok</string>
		<string>CosNotifyFilter_Filter:match</string>
		<string>CosNotifyFilter_Filter:match(&lt;#Filter#&gt;, &lt;#Event#&gt;)</string>
		<string>CosNotifyFilter_Filter:match(Filter, Event) -&gt; Reply</string>
		<string>CosNotifyFilter_Filter:match_structured</string>
		<string>CosNotifyFilter_Filter:match_structured(&lt;#Filter#&gt;, &lt;#Event#&gt;)</string>
		<string>CosNotifyFilter_Filter:match_structured(Filter, Event) -&gt; Reply</string>
		<string>CosNotifyFilter_Filter:attach_callback</string>
		<string>CosNotifyFilter_Filter:attach_callback(&lt;#Filter#&gt;, &lt;#NotifySubscribe#&gt;)</string>
		<string>CosNotifyFilter_Filter:attach_callback(Filter, NotifySubscribe) -&gt; CallbackID</string>
		<string>CosNotifyFilter_Filter:detach_callback</string>
		<string>CosNotifyFilter_Filter:detach_callback(&lt;#Filter#&gt;, &lt;#CallbackID#&gt;)</string>
		<string>CosNotifyFilter_Filter:detach_callback(Filter, CallbackID) -&gt; Reply</string>
		<string>CosNotifyFilter_Filter:get_callbacks</string>
		<string>CosNotifyFilter_Filter:get_callbacks(&lt;#Filter#&gt;)</string>
		<string>CosNotifyFilter_Filter:get_callbacks(Filter) -&gt; CallbackIDSeq</string>
		<string>CosNotifyFilter_FilterAdmin:add_filter</string>
		<string>CosNotifyFilter_FilterAdmin:add_filter(&lt;#Object#&gt;, &lt;#Filter#&gt;)</string>
		<string>CosNotifyFilter_FilterAdmin:add_filter(Object, Filter) -&gt; FilterID</string>
		<string>CosNotifyFilter_FilterAdmin:remove_filter</string>
		<string>CosNotifyFilter_FilterAdmin:remove_filter(&lt;#Object#&gt;, &lt;#FilterID#&gt;)</string>
		<string>CosNotifyFilter_FilterAdmin:remove_filter(Object, FilterID) -&gt; ok</string>
		<string>CosNotifyFilter_FilterAdmin:get_filter</string>
		<string>CosNotifyFilter_FilterAdmin:get_filter(&lt;#Object#&gt;, &lt;#FilterID#&gt;)</string>
		<string>CosNotifyFilter_FilterAdmin:get_filter(Object, FilterID) -&gt; Reply</string>
		<string>CosNotifyFilter_FilterAdmin:get_all_filters</string>
		<string>CosNotifyFilter_FilterAdmin:get_all_filters(&lt;#Object#&gt;)</string>
		<string>CosNotifyFilter_FilterAdmin:get_all_filters(Object) -&gt; FilterIDSeq</string>
		<string>CosNotifyFilter_FilterAdmin:remove_all_filters</string>
		<string>CosNotifyFilter_FilterAdmin:remove_all_filters(&lt;#Object#&gt;)</string>
		<string>CosNotifyFilter_FilterAdmin:remove_all_filters(Object) -&gt; ok</string>
		<string>CosNotifyFilter_FilterFactory:create_filter</string>
		<string>CosNotifyFilter_FilterFactory:create_filter(&lt;#FilterFactory#&gt;, &lt;#Grammar#&gt;)</string>
		<string>CosNotifyFilter_FilterFactory:create_filter(FilterFactory, Grammar) -&gt; Reply</string>
		<string>CosNotifyFilter_FilterFactory:create_mapping_filter</string>
		<string>CosNotifyFilter_FilterFactory:create_mapping_filter(&lt;#FilterFactory#&gt;, &lt;#Grammar#&gt;)</string>
		<string>CosNotifyFilter_FilterFactory:create_mapping_filter(FilterFactory, Grammar) -&gt; Reply</string>
		<string>CosNotifyFilter_MappingFilter:_get_constraint_grammar</string>
		<string>CosNotifyFilter_MappingFilter:_get_constraint_grammar(&lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:_get_constraint_grammar(MappingFilter) -&gt; Grammar</string>
		<string>CosNotifyFilter_MappingFilter:_get_value_type</string>
		<string>CosNotifyFilter_MappingFilter:_get_value_type(&lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:_get_value_type(MappingFilter) -&gt; CORBA::TypeCode</string>
		<string>CosNotifyFilter_MappingFilter:_get_default_value</string>
		<string>CosNotifyFilter_MappingFilter:_get_default_value(&lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:_get_default_value(MappingFilter) -&gt; #any</string>
		<string>CosNotifyFilter_MappingFilter:add_mapping_constraints</string>
		<string>CosNotifyFilter_MappingFilter:add_mapping_constraints(&lt;#MappingFilter#&gt;, &lt;#MappingConstraintPairSeq#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:add_mapping_constraints(MappingFilter, MappingConstraintPairSeq) -&gt; Reply</string>
		<string>CosNotifyFilter_MappingFilter:modify_constraints</string>
		<string>CosNotifyFilter_MappingFilter:modify_constraints(&lt;#MappingFilter#&gt;, &lt;#ConstraintIDSeq#&gt;, &lt;#MappingConstraintInfoSeq#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:modify_constraints(MappingFilter, ConstraintIDSeq, MappingConstraintInfoSeq) -&gt; Reply</string>
		<string>CosNotifyFilter_MappingFilter:get_mapping_constraints</string>
		<string>CosNotifyFilter_MappingFilter:get_mapping_constraints(&lt;#MappingFilter#&gt;, &lt;#ConstraintIDSeq#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:get_mapping_constraints(MappingFilter, ConstraintIDSeq) -&gt; Reply</string>
		<string>CosNotifyFilter_MappingFilter:get_all_mapping_constraints</string>
		<string>CosNotifyFilter_MappingFilter:get_all_mapping_constraints(&lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:get_all_mapping_constraints(MappingFilter) -&gt; MappingConstraintInfoSeq</string>
		<string>CosNotifyFilter_MappingFilter:remove_all_mapping_constraints</string>
		<string>CosNotifyFilter_MappingFilter:remove_all_mapping_constraints(&lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:remove_all_mapping_constraints(MappingFilter) -&gt; ok</string>
		<string>CosNotifyFilter_MappingFilter:destroy</string>
		<string>CosNotifyFilter_MappingFilter:destroy(&lt;#MappingFilter#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:destroy(MappingFilter) -&gt; ok</string>
		<string>CosNotifyFilter_MappingFilter:match</string>
		<string>CosNotifyFilter_MappingFilter:match(&lt;#MappingFilter#&gt;, &lt;#Event#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:match(MappingFilter, Event) -&gt; Reply</string>
		<string>CosNotifyFilter_MappingFilter:match_structured</string>
		<string>CosNotifyFilter_MappingFilter:match_structured(&lt;#MappingFilter#&gt;, &lt;#Event#&gt;)</string>
		<string>CosNotifyFilter_MappingFilter:match_structured(MappingFilter, Event) -&gt; Reply</string>
		<string>cosProperty:install</string>
		<string>cosProperty:install()</string>
		<string>cosProperty:install() -&gt; Return</string>
		<string>cosProperty:install_db</string>
		<string>cosProperty:install_db()</string>
		<string>cosProperty:install_db() -&gt; Return</string>
		<string>cosProperty:uninstall</string>
		<string>cosProperty:uninstall()</string>
		<string>cosProperty:uninstall() -&gt; Return</string>
		<string>cosProperty:uninstall_db</string>
		<string>cosProperty:uninstall_db()</string>
		<string>cosProperty:uninstall_db() -&gt; Return</string>
		<string>cosProperty:start</string>
		<string>cosProperty:start()</string>
		<string>cosProperty:start() -&gt; Return</string>
		<string>cosProperty:start_SetDefFactory</string>
		<string>cosProperty:start_SetDefFactory()</string>
		<string>cosProperty:start_SetDefFactory() -&gt; Return</string>
		<string>cosProperty:start_SetFactory</string>
		<string>cosProperty:start_SetFactory()</string>
		<string>cosProperty:start_SetFactory() -&gt; Return</string>
		<string>cosProperty:stop_SetDefFactory</string>
		<string>cosProperty:stop_SetDefFactory(&lt;#Factory#&gt;)</string>
		<string>cosProperty:stop_SetDefFactory(Factory) -&gt; Return</string>
		<string>cosProperty:stop_SetFactory</string>
		<string>cosProperty:stop_SetFactory(&lt;#Factory#&gt;)</string>
		<string>cosProperty:stop_SetFactory(Factory) -&gt; Return</string>
		<string>cosProperty:stop</string>
		<string>cosProperty:stop()</string>
		<string>cosProperty:stop() -&gt; Return</string>
		<string>CosPropertyService_PropertiesIterator:reset</string>
		<string>CosPropertyService_PropertiesIterator:reset(&lt;#Iterator#&gt;)</string>
		<string>CosPropertyService_PropertiesIterator:reset(Iterator) -&gt; ok</string>
		<string>CosPropertyService_PropertiesIterator:next_one</string>
		<string>CosPropertyService_PropertiesIterator:next_one(&lt;#Iterator#&gt;)</string>
		<string>CosPropertyService_PropertiesIterator:next_one(Iterator) -&gt; Reply</string>
		<string>CosPropertyService_PropertiesIterator:next_n</string>
		<string>CosPropertyService_PropertiesIterator:next_n(&lt;#Iterator#&gt;, &lt;#HowMany#&gt;)</string>
		<string>CosPropertyService_PropertiesIterator:next_n(Iterator, HowMany) -&gt; Reply</string>
		<string>CosPropertyService_PropertiesIterator:destroy</string>
		<string>CosPropertyService_PropertiesIterator:destroy(&lt;#Iterator#&gt;)</string>
		<string>CosPropertyService_PropertiesIterator:destroy(Iterator) -&gt; ok</string>
		<string>CosPropertyService_PropertyNamesIterator:reset</string>
		<string>CosPropertyService_PropertyNamesIterator:reset(&lt;#Iterator#&gt;)</string>
		<string>CosPropertyService_PropertyNamesIterator:reset(Iterator) -&gt; ok</string>
		<string>CosPropertyService_PropertyNamesIterator:next_one</string>
		<string>CosPropertyService_PropertyNamesIterator:next_one(&lt;#Iterator#&gt;)</string>
		<string>CosPropertyService_PropertyNamesIterator:next_one(Iterator) -&gt; Reply</string>
		<string>CosPropertyService_PropertyNamesIterator:next_n</string>
		<string>CosPropertyService_PropertyNamesIterator:next_n(&lt;#Iterator#&gt;, &lt;#HowMany#&gt;)</string>
		<string>CosPropertyService_PropertyNamesIterator:next_n(Iterator, HowMany) -&gt; Reply</string>
		<string>CosPropertyService_PropertyNamesIterator:destroy</string>
		<string>CosPropertyService_PropertyNamesIterator:destroy(&lt;#Iterator#&gt;)</string>
		<string>CosPropertyService_PropertyNamesIterator:destroy(Iterator) -&gt; ok</string>
		<string>CosPropertyService_PropertySet:define_property</string>
		<string>CosPropertyService_PropertySet:define_property(&lt;#PropertySet#&gt;, &lt;#Name#&gt;, &lt;#Value#&gt;)</string>
		<string>CosPropertyService_PropertySet:define_property(PropertySet, Name, Value) -&gt; Reply</string>
		<string>CosPropertyService_PropertySet:define_properties</string>
		<string>CosPropertyService_PropertySet:define_properties(&lt;#PropertySet#&gt;, &lt;#Properties#&gt;)</string>
		<string>CosPropertyService_PropertySet:define_properties(PropertySet, Properties) -&gt; Reply</string>
		<string>CosPropertyService_PropertySet:get_number_of_properties</string>
		<string>CosPropertyService_PropertySet:get_number_of_properties(&lt;#PropertySet#&gt;)</string>
		<string>CosPropertyService_PropertySet:get_number_of_properties(PropertySet) -&gt; ulong()</string>
		<string>CosPropertyService_PropertySet:get_all_property_names</string>
		<string>CosPropertyService_PropertySet:get_all_property_names(&lt;#PropertySet#&gt;, &lt;#Max#&gt;)</string>
		<string>CosPropertyService_PropertySet:get_all_property_names(PropertySet, Max) -&gt; Reply</string>
		<string>CosPropertyService_PropertySet:get_property_value</string>
		<string>CosPropertyService_PropertySet:get_property_value(&lt;#PropertySet#&gt;, &lt;#Name#&gt;)</string>
		<string>CosPropertyService_PropertySet:get_property_value(PropertySet, Name) -&gt; Reply</string>
		<string>CosPropertyService_PropertySet:get_properties</string>
		<string>CosPropertyService_PropertySet:get_properties(&lt;#PropertySet#&gt;, &lt;#Names#&gt;)</string>
		<string>CosPropertyService_PropertySet:get_properties(PropertySet, Names) -&gt; Reply</string>
		<string>CosPropertyService_PropertySet:get_all_properties</string>
		<string>CosPropertyService_PropertySet:get_all_properties(&lt;#PropertySet#&gt;, &lt;#Max#&gt;)</string>
		<string>CosPropertyService_PropertySet:get_all_properties(PropertySet, Max) -&gt; Reply</string>
		<string>CosPropertyService_PropertySet:delete_property</string>
		<string>CosPropertyService_PropertySet:delete_property(&lt;#PropertySet#&gt;, &lt;#Name#&gt;)</string>
		<string>CosPropertyService_PropertySet:delete_property(PropertySet, Name) -&gt; Reply</string>
		<string>CosPropertyService_PropertySet:delete_properties</string>
		<string>CosPropertyService_PropertySet:delete_properties(&lt;#PropertySet#&gt;, &lt;#Names#&gt;)</string>
		<string>CosPropertyService_PropertySet:delete_properties(PropertySet, Names) -&gt; Reply</string>
		<string>CosPropertyService_PropertySet:delete_all_properties</string>
		<string>CosPropertyService_PropertySet:delete_all_properties(&lt;#PropertySet#&gt;)</string>
		<string>CosPropertyService_PropertySet:delete_all_properties(PropertySet) -&gt; boolean()</string>
		<string>CosPropertyService_PropertySet:is_property_defined</string>
		<string>CosPropertyService_PropertySet:is_property_defined(&lt;#PropertySet#&gt;, &lt;#Name#&gt;)</string>
		<string>CosPropertyService_PropertySet:is_property_defined(PropertySet, Name) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDef:get_allowed_property_types</string>
		<string>CosPropertyService_PropertySetDef:get_allowed_property_types(&lt;#PropertySetDef#&gt;)</string>
		<string>CosPropertyService_PropertySetDef:get_allowed_property_types(PropertySetDef) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDef:get_allowed_properties</string>
		<string>CosPropertyService_PropertySetDef:get_allowed_properties(&lt;#PropertySetDef#&gt;)</string>
		<string>CosPropertyService_PropertySetDef:get_allowed_properties(PropertySetDef) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDef:define_property_with_mode</string>
		<string>CosPropertyService_PropertySetDef:define_property_with_mode(&lt;#PropertySetDef#&gt;, &lt;#Name#&gt;, &lt;#Value#&gt;, &lt;#Mode#&gt;)</string>
		<string>CosPropertyService_PropertySetDef:define_property_with_mode(PropertySetDef, Name, Value, Mode) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDef:define_properties_with_modes</string>
		<string>CosPropertyService_PropertySetDef:define_properties_with_modes(&lt;#PropertySetDef#&gt;, &lt;#PropertyDefs#&gt;)</string>
		<string>CosPropertyService_PropertySetDef:define_properties_with_modes(PropertySetDef, PropertyDefs) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDef:get_property_mode</string>
		<string>CosPropertyService_PropertySetDef:get_property_mode(&lt;#PropertySetDef#&gt;, &lt;#Name#&gt;)</string>
		<string>CosPropertyService_PropertySetDef:get_property_mode(PropertySetDef, Name) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDef:get_property_modes</string>
		<string>CosPropertyService_PropertySetDef:get_property_modes(&lt;#PropertySetDef#&gt;, &lt;#Names#&gt;)</string>
		<string>CosPropertyService_PropertySetDef:get_property_modes(PropertySetDef, Names) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDef:set_property_mode</string>
		<string>CosPropertyService_PropertySetDef:set_property_mode(&lt;#PropertySetDef#&gt;, &lt;#Name#&gt;, &lt;#Mode#&gt;)</string>
		<string>CosPropertyService_PropertySetDef:set_property_mode(PropertySetDef, Name, Mode) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDef:set_property_modes</string>
		<string>CosPropertyService_PropertySetDef:set_property_modes(&lt;#PropertySetDef#&gt;, &lt;#PropertyModes#&gt;)</string>
		<string>CosPropertyService_PropertySetDef:set_property_modes(PropertySetDef, PropertyModes) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDefFactory:create_propertysetdef</string>
		<string>CosPropertyService_PropertySetDefFactory:create_propertysetdef(&lt;#Factory#&gt;)</string>
		<string>CosPropertyService_PropertySetDefFactory:create_propertysetdef(Factory)</string>
		<string>CosPropertyService_PropertySetDefFactory:create_constrained_propertysetdef</string>
		<string>CosPropertyService_PropertySetDefFactory:create_constrained_propertysetdef(&lt;#Factory#&gt;, &lt;#PropertyTypes#&gt;, &lt;#PropertyDefs#&gt;)</string>
		<string>CosPropertyService_PropertySetDefFactory:create_constrained_propertysetdef(Factory, PropertyTypes, PropertyDefs) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetDefFactory:create_initial_propertysetdef</string>
		<string>CosPropertyService_PropertySetDefFactory:create_initial_propertysetdef(&lt;#Factory#&gt;, &lt;#PropertyDefs#&gt;)</string>
		<string>CosPropertyService_PropertySetDefFactory:create_initial_propertysetdef(Factory, PropertyDefs) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetFactory:create_propertyset</string>
		<string>CosPropertyService_PropertySetFactory:create_propertyset(&lt;#Factory#&gt;)</string>
		<string>CosPropertyService_PropertySetFactory:create_propertyset(Factory) -&gt; PropertySet</string>
		<string>CosPropertyService_PropertySetFactory:create_constrained_propertyset</string>
		<string>CosPropertyService_PropertySetFactory:create_constrained_propertyset(&lt;#Factory#&gt;, &lt;#PropertyTypes#&gt;, &lt;#Properties#&gt;)</string>
		<string>CosPropertyService_PropertySetFactory:create_constrained_propertyset(Factory, PropertyTypes, Properties) -&gt; Reply</string>
		<string>CosPropertyService_PropertySetFactory:create_initial_propertyset</string>
		<string>CosPropertyService_PropertySetFactory:create_initial_propertyset(&lt;#Factory#&gt;, &lt;#Properties#&gt;)</string>
		<string>CosPropertyService_PropertySetFactory:create_initial_propertyset(Factory, Properties) -&gt; Reply</string>
		<string>cosTime:install_time</string>
		<string>cosTime:install_time()</string>
		<string>cosTime:install_time() -&gt; Return</string>
		<string>cosTime:uninstall_time</string>
		<string>cosTime:uninstall_time()</string>
		<string>cosTime:uninstall_time() -&gt; Return</string>
		<string>cosTime:install_timerevent</string>
		<string>cosTime:install_timerevent()</string>
		<string>cosTime:install_timerevent() -&gt; Return</string>
		<string>cosTime:uninstall_timerevent</string>
		<string>cosTime:uninstall_timerevent()</string>
		<string>cosTime:uninstall_timerevent() -&gt; Return</string>
		<string>cosTime:start</string>
		<string>cosTime:start()</string>
		<string>cosTime:start() -&gt; Return</string>
		<string>cosTime:stop</string>
		<string>cosTime:stop()</string>
		<string>cosTime:stop() -&gt; Return</string>
		<string>cosTime:start_time_service</string>
		<string>cosTime:start_time_service(&lt;#Tdf#&gt;, &lt;#Inaccuracy#&gt;)</string>
		<string>cosTime:start_time_service(Tdf, Inaccuracy) -&gt; Return</string>
		<string>cosTime:stop_time_service</string>
		<string>cosTime:stop_time_service(&lt;#TimeService#&gt;)</string>
		<string>cosTime:stop_time_service(TimeService) -&gt; ok</string>
		<string>cosTime:start_timerevent_service</string>
		<string>cosTime:start_timerevent_service(&lt;#TimeService#&gt;)</string>
		<string>cosTime:start_timerevent_service(TimeService) -&gt; ok</string>
		<string>cosTime:stop_timerevent_service</string>
		<string>cosTime:stop_timerevent_service(&lt;#TimerEventService#&gt;)</string>
		<string>cosTime:stop_timerevent_service(TimerEventService) -&gt; ok</string>
		<string>CosTime_TimeService:universal_time</string>
		<string>CosTime_TimeService:universal_time(&lt;#TimeService#&gt;)</string>
		<string>CosTime_TimeService:universal_time(TimeService) -&gt; Reply</string>
		<string>CosTime_TimeService:new_universal_time</string>
		<string>CosTime_TimeService:new_universal_time(&lt;#TimeService#&gt;, &lt;#Time#&gt;, &lt;#Inaccuracy#&gt;, &lt;#Tdf#&gt;)</string>
		<string>CosTime_TimeService:new_universal_time(TimeService, Time, Inaccuracy, Tdf) -&gt; UTO</string>
		<string>CosTime_TimeService:uto_from_utc</string>
		<string>CosTime_TimeService:uto_from_utc(&lt;#TimeService#&gt;, &lt;#Utc#&gt;)</string>
		<string>CosTime_TimeService:uto_from_utc(TimeService, Utc) -&gt; UTO</string>
		<string>CosTime_TimeService:new_interval</string>
		<string>CosTime_TimeService:new_interval(&lt;#TimeService#&gt;, &lt;#Lower#&gt;, &lt;#Upper#&gt;)</string>
		<string>CosTime_TimeService:new_interval(TimeService, Lower, Upper) -&gt; TIO</string>
		<string>CosTime_TIO:'_get_time_interval'</string>
		<string>CosTime_TIO:'_get_time_interval'(&lt;#TIO#&gt;)</string>
		<string>CosTime_TIO:'_get_time_interval'(TIO) -&gt; TimeInterval</string>
		<string>CosTime_TIO:spans</string>
		<string>CosTime_TIO:spans(&lt;#TIO#&gt;, &lt;#UTO#&gt;)</string>
		<string>CosTime_TIO:spans(TIO, UTO) -&gt; Reply</string>
		<string>CosTime_TIO:overlaps</string>
		<string>CosTime_TIO:overlaps(&lt;#TIO#&gt;, &lt;#OtherTIO#&gt;)</string>
		<string>CosTime_TIO:overlaps(TIO, OtherTIO) -&gt; Reply</string>
		<string>CosTime_TIO:time</string>
		<string>CosTime_TIO:time(&lt;#TIO#&gt;)</string>
		<string>CosTime_TIO:time(TIO) -&gt; UTO</string>
		<string>CosTime_UTO:'_get_time'</string>
		<string>CosTime_UTO:'_get_time'(&lt;#UTO#&gt;)</string>
		<string>CosTime_UTO:'_get_time'(UTO) -&gt; ulonglong()</string>
		<string>CosTime_UTO:'_get_inaccuracy'</string>
		<string>CosTime_UTO:'_get_inaccuracy'(&lt;#UTO#&gt;)</string>
		<string>CosTime_UTO:'_get_inaccuracy'(UTO) -&gt; ulonglong()</string>
		<string>CosTime_UTO:'_get_tdf'</string>
		<string>CosTime_UTO:'_get_tdf'(&lt;#UTO#&gt;)</string>
		<string>CosTime_UTO:'_get_tdf'(UTO) -&gt; short()</string>
		<string>CosTime_UTO:'_get_utc_time'</string>
		<string>CosTime_UTO:'_get_utc_time'(&lt;#UTO#&gt;)</string>
		<string>CosTime_UTO:'_get_utc_time'(UTO) -&gt; UtcT</string>
		<string>CosTime_UTO:absolute_time</string>
		<string>CosTime_UTO:absolute_time(&lt;#UTO#&gt;)</string>
		<string>CosTime_UTO:absolute_time(UTO) -&gt; OtherUTO</string>
		<string>CosTime_UTO:compare_time</string>
		<string>CosTime_UTO:compare_time(&lt;#UTO#&gt;, &lt;#ComparisonType#&gt;, &lt;#OtherUTO#&gt;)</string>
		<string>CosTime_UTO:compare_time(UTO, ComparisonType, OtherUTO) -&gt; Reply</string>
		<string>CosTime_UTO:time_to_interval</string>
		<string>CosTime_UTO:time_to_interval(&lt;#UTO#&gt;, &lt;#OtherUTO#&gt;)</string>
		<string>CosTime_UTO:time_to_interval(UTO, OtherUTO) -&gt; TIO</string>
		<string>CosTime_UTO:interval</string>
		<string>CosTime_UTO:interval(&lt;#UTO#&gt;)</string>
		<string>CosTime_UTO:interval(UTO) -&gt; TIO</string>
		<string>CosTimerEvent_TimerEventHandler:'_get_status'</string>
		<string>CosTimerEvent_TimerEventHandler:'_get_status'(&lt;#TimerEventHandler#&gt;)</string>
		<string>CosTimerEvent_TimerEventHandler:'_get_status'(TimerEventHandler) -&gt; Reply</string>
		<string>CosTimerEvent_TimerEventHandler:time_set</string>
		<string>CosTimerEvent_TimerEventHandler:time_set(&lt;#TimerEventHandler#&gt;)</string>
		<string>CosTimerEvent_TimerEventHandler:time_set(TimerEventHandler) -&gt; Reply</string>
		<string>CosTimerEvent_TimerEventHandler:set_timer</string>
		<string>CosTimerEvent_TimerEventHandler:set_timer(&lt;#TimerEventHandler#&gt;, &lt;#TimeType#&gt;, &lt;#TriggerTime#&gt;)</string>
		<string>CosTimerEvent_TimerEventHandler:set_timer(TimerEventHandler, TimeType, TriggerTime) -&gt; void()</string>
		<string>CosTimerEvent_TimerEventHandler:cancel_timer</string>
		<string>CosTimerEvent_TimerEventHandler:cancel_timer(&lt;#TimerEventHandler#&gt;)</string>
		<string>CosTimerEvent_TimerEventHandler:cancel_timer(TimerEventHandler) -&gt; boolean()</string>
		<string>CosTimerEvent_TimerEventHandler:set_data</string>
		<string>CosTimerEvent_TimerEventHandler:set_data(&lt;#TimerEventHandler#&gt;, &lt;#EventData#&gt;)</string>
		<string>CosTimerEvent_TimerEventHandler:set_data(TimerEventHandler, EventData) -&gt; ok</string>
		<string>CosTimerEvent_TimerEventService:register</string>
		<string>CosTimerEvent_TimerEventService:register(&lt;#TimerEventService#&gt;, &lt;#CosEventCommPushConsumer#&gt;, &lt;#Data#&gt;)</string>
		<string>CosTimerEvent_TimerEventService:register(TimerEventService, CosEventCommPushConsumer, Data) -&gt; TimerEventHandler</string>
		<string>CosTimerEvent_TimerEventService:unregister</string>
		<string>CosTimerEvent_TimerEventService:unregister(&lt;#TimerEventService#&gt;, &lt;#TimerEventHandler#&gt;)</string>
		<string>CosTimerEvent_TimerEventService:unregister(TimerEventService, TimerEventHandler) -&gt; ok</string>
		<string>CosTimerEvent_TimerEventService:event_time</string>
		<string>CosTimerEvent_TimerEventService:event_time(&lt;#TimerEventService#&gt;, &lt;#TimerEvent#&gt;)</string>
		<string>CosTimerEvent_TimerEventService:event_time(TimerEventService, TimerEvent) -&gt; UTO</string>
		<string>cosTransactions:start</string>
		<string>cosTransactions:start()</string>
		<string>cosTransactions:start() -&gt; Return</string>
		<string>cosTransactions:stop</string>
		<string>cosTransactions:stop()</string>
		<string>cosTransactions:stop() -&gt; Return</string>
		<string>cosTransactions:start_factory</string>
		<string>cosTransactions:start_factory()</string>
		<string>cosTransactions:start_factory() -&gt; TransactionFactory</string>
		<string>cosTransactions:start_factory</string>
		<string>cosTransactions:start_factory(&lt;#FacDef#&gt;)</string>
		<string>cosTransactions:start_factory(FacDef) -&gt; TransactionFactory</string>
		<string>cosTransactions:stop_factory</string>
		<string>cosTransactions:stop_factory(&lt;#TransactionFactory#&gt;)</string>
		<string>cosTransactions:stop_factory(TransactionFactory) -&gt; Reply</string>
		<string>CosTransactions_Control:get_coordinator</string>
		<string>CosTransactions_Control:get_coordinator(&lt;#Control#&gt;)</string>
		<string>CosTransactions_Control:get_coordinator(Control) -&gt; Return</string>
		<string>CosTransactions_Control:get_terminator</string>
		<string>CosTransactions_Control:get_terminator(&lt;#Control#&gt;)</string>
		<string>CosTransactions_Control:get_terminator(Control) -&gt; Return</string>
		<string>CosTransactions_Coordinator:create_subtransaction</string>
		<string>CosTransactions_Coordinator:create_subtransaction(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:create_subtransaction(Coordinator) -&gt; Control</string>
		<string>CosTransactions_Coordinator:get_transaction_name</string>
		<string>CosTransactions_Coordinator:get_transaction_name(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:get_transaction_name(Coordinator) -&gt; Name</string>
		<string>CosTransactions_Coordinator:get_parent_status</string>
		<string>CosTransactions_Coordinator:get_parent_status(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:get_parent_status(Coordinator) -&gt; Status</string>
		<string>CosTransactions_Coordinator:get_status</string>
		<string>CosTransactions_Coordinator:get_status(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:get_status(Coordinator) -&gt; Status</string>
		<string>CosTransactions_Coordinator:get_top_level_status</string>
		<string>CosTransactions_Coordinator:get_top_level_status(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:get_top_level_status(Coordinator) -&gt; Status</string>
		<string>CosTransactions_Coordinator:hash_top_level_tran</string>
		<string>CosTransactions_Coordinator:hash_top_level_tran(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:hash_top_level_tran(Coordinator) -&gt; Return</string>
		<string>CosTransactions_Coordinator:hash_transaction</string>
		<string>CosTransactions_Coordinator:hash_transaction(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:hash_transaction(Coordinator) -&gt; Return</string>
		<string>CosTransactions_Coordinator:is_descendant_transaction</string>
		<string>CosTransactions_Coordinator:is_descendant_transaction(&lt;#Coordinator#&gt;, &lt;#OtherCoordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:is_descendant_transaction(Coordinator, OtherCoordinator) -&gt; Return</string>
		<string>CosTransactions_Coordinator:is_same_transaction</string>
		<string>CosTransactions_Coordinator:is_same_transaction(&lt;#Coordinator#&gt;, &lt;#OtherCoordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:is_same_transaction(Coordinator, OtherCoordinator) -&gt; Return</string>
		<string>CosTransactions_Coordinator:is_top_level_transaction</string>
		<string>CosTransactions_Coordinator:is_top_level_transaction(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:is_top_level_transaction(Coordinator) -&gt; Return</string>
		<string>CosTransactions_Coordinator:register_resource</string>
		<string>CosTransactions_Coordinator:register_resource(&lt;#Coordinator#&gt;, &lt;#Resource#&gt;)</string>
		<string>CosTransactions_Coordinator:register_resource(Coordinator, Resource) -&gt; RecoveryCoordinator</string>
		<string>CosTransactions_Coordinator:register_subtran_aware</string>
		<string>CosTransactions_Coordinator:register_subtran_aware(&lt;#Coordinator#&gt;, &lt;#SubtransactionAwareResource#&gt;)</string>
		<string>CosTransactions_Coordinator:register_subtran_aware(Coordinator, SubtransactionAwareResource) -&gt; Return</string>
		<string>CosTransactions_Coordinator:rollback_only</string>
		<string>CosTransactions_Coordinator:rollback_only(&lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_Coordinator:rollback_only(Coordinator) -&gt; Return</string>
		<string>CosTransactions_RecoveryCoordinator:replay_completion</string>
		<string>CosTransactions_RecoveryCoordinator:replay_completion(&lt;#RecoveryCoordinator#&gt;, &lt;#Timeout#&gt;, &lt;#Resource#&gt;)</string>
		<string>CosTransactions_RecoveryCoordinator:replay_completion(RecoveryCoordinator, Timeout, Resource) -&gt; Return</string>
		<string>CosTransactions_Resource:commit</string>
		<string>CosTransactions_Resource:commit(&lt;#Resource#&gt;)</string>
		<string>CosTransactions_Resource:commit(Resource) -&gt; Return</string>
		<string>CosTransactions_Resource:commit_one_phase</string>
		<string>CosTransactions_Resource:commit_one_phase(&lt;#Resource#&gt;)</string>
		<string>CosTransactions_Resource:commit_one_phase(Resource) -&gt; Return</string>
		<string>CosTransactions_Resource:forget</string>
		<string>CosTransactions_Resource:forget(&lt;#Resource#&gt;)</string>
		<string>CosTransactions_Resource:forget(Resource) -&gt; Return</string>
		<string>CosTransactions_Resource:prepare</string>
		<string>CosTransactions_Resource:prepare(&lt;#Resource#&gt;)</string>
		<string>CosTransactions_Resource:prepare(Resource) -&gt; Return</string>
		<string>CosTransactions_Resource:rollback</string>
		<string>CosTransactions_Resource:rollback(&lt;#Resource#&gt;)</string>
		<string>CosTransactions_Resource:rollback(Resource) -&gt; Return</string>
		<string>CosTransactions_SubtransactionAwareResource:commit_subtransaction</string>
		<string>CosTransactions_SubtransactionAwareResource:commit_subtransaction(&lt;#SubtransactionAwareResource#&gt;, &lt;#Coordinator#&gt;)</string>
		<string>CosTransactions_SubtransactionAwareResource:commit_subtransaction(SubtransactionAwareResource, Coordinator) -&gt; Return</string>
		<string>CosTransactions_SubtransactionAwareResource:rollback_subtransaction</string>
		<string>CosTransactions_SubtransactionAwareResource:rollback_subtransaction(&lt;#SubtransactionAwareResource#&gt;)</string>
		<string>CosTransactions_SubtransactionAwareResource:rollback_subtransaction(SubtransactionAwareResource) -&gt; Return</string>
		<string>CosTransactions_Synchronization:before_completion</string>
		<string>CosTransactions_Synchronization:before_completion(&lt;#Synchronization#&gt;)</string>
		<string>CosTransactions_Synchronization:before_completion(Synchronization) -&gt; Return</string>
		<string>CosTransactions_Synchronization:after_completion</string>
		<string>CosTransactions_Synchronization:after_completion(&lt;#Synchronization#&gt;)</string>
		<string>CosTransactions_Synchronization:after_completion(Synchronization) -&gt; Return</string>
		<string>CosTransactions_Terminator:commit</string>
		<string>CosTransactions_Terminator:commit(&lt;#Terminator#&gt;, &lt;#ReportHeuristics#&gt;)</string>
		<string>CosTransactions_Terminator:commit(Terminator, ReportHeuristics) -&gt; Return</string>
		<string>CosTransactions_Terminator:rollback</string>
		<string>CosTransactions_Terminator:rollback(&lt;#Terminator#&gt;)</string>
		<string>CosTransactions_Terminator:rollback(Terminator) -&gt; Return</string>
		<string>CosTransactions_TransactionFactory:create</string>
		<string>CosTransactions_TransactionFactory:create(&lt;#TransactionFactory#&gt;, &lt;#Timeout#&gt;)</string>
		<string>CosTransactions_TransactionFactory:create(TransactionFactory, Timeout) -&gt; Control</string>
		<string>cover:start</string>
		<string>cover:start()</string>
		<string>cover:start() -&gt; {ok, Pid} | {error, Reason}</string>
		<string>cover:start</string>
		<string>cover:start(&lt;#Nodes#&gt;)</string>
		<string>cover:start(Nodes) -&gt; {ok, StartedNodes} | {error, not_main_node}</string>
		<string>cover:compile</string>
		<string>cover:compile(&lt;#ModFile#&gt;)</string>
		<string>cover:compile(ModFile) -&gt; Result</string>
		<string>cover:compile</string>
		<string>cover:compile(&lt;#ModFile#&gt;, &lt;#Options#&gt;)</string>
		<string>cover:compile(ModFile, Options) -&gt; Result</string>
		<string>cover:compile_module</string>
		<string>cover:compile_module(&lt;#ModFile#&gt;)</string>
		<string>cover:compile_module(ModFile) -&gt; Result</string>
		<string>cover:compile_module</string>
		<string>cover:compile_module(&lt;#ModFile#&gt;, &lt;#Options#&gt;)</string>
		<string>cover:compile_module(ModFile, Options) -&gt; Result</string>
		<string>cover:compile_directory</string>
		<string>cover:compile_directory()</string>
		<string>cover:compile_directory() -&gt; [Result] | {error, Reason}</string>
		<string>cover:compile_directory</string>
		<string>cover:compile_directory(&lt;#Dir#&gt;)</string>
		<string>cover:compile_directory(Dir) -&gt; [Result] | {error, Reason}</string>
		<string>cover:compile_directory</string>
		<string>cover:compile_directory(&lt;#Dir#&gt;, &lt;#Options#&gt;)</string>
		<string>cover:compile_directory(Dir, Options) -&gt; [Result] | {error, Reason}</string>
		<string>cover:compile_beam</string>
		<string>cover:compile_beam(&lt;#ModFile#&gt;)</string>
		<string>cover:compile_beam(ModFile) -&gt; Result</string>
		<string>cover:compile_beam_directory</string>
		<string>cover:compile_beam_directory()</string>
		<string>cover:compile_beam_directory() -&gt; [Result] | {error, Reason}</string>
		<string>cover:compile_beam_directory</string>
		<string>cover:compile_beam_directory(&lt;#Dir#&gt;)</string>
		<string>cover:compile_beam_directory(Dir) -&gt; [Result] | {error, Reason}</string>
		<string>cover:analyse</string>
		<string>cover:analyse(&lt;#Module#&gt;)</string>
		<string>cover:analyse(Module) -&gt; {ok, Answer} | {error, Error}</string>
		<string>cover:analyse</string>
		<string>cover:analyse(&lt;#Module#&gt;, &lt;#Analysis#&gt;)</string>
		<string>cover:analyse(Module, Analysis) -&gt; {ok, Answer} | {error, Error}</string>
		<string>cover:analyse</string>
		<string>cover:analyse(&lt;#Module#&gt;, &lt;#Level#&gt;)</string>
		<string>cover:analyse(Module, Level) -&gt; {ok, Answer} | {error, Error}</string>
		<string>cover:analyse</string>
		<string>cover:analyse(&lt;#Module#&gt;, &lt;#Analysis#&gt;, &lt;#Level#&gt;)</string>
		<string>cover:analyse(Module, Analysis, Level) -&gt; {ok, Answer} | {error, Error}</string>
		<string>cover:analyse_to_file</string>
		<string>cover:analyse_to_file(&lt;#Module#&gt;)</string>
		<string>cover:analyse_to_file(Module) -&gt; {ok, OutFile} | {error, Error}</string>
		<string>cover:analyse_to_file</string>
		<string>cover:analyse_to_file(&lt;#Module#&gt;, &lt;#Options#&gt;)</string>
		<string>cover:analyse_to_file(Module, Options) -&gt; {ok, OutFile} | {error, Error}</string>
		<string>cover:analyse_to_file</string>
		<string>cover:analyse_to_file(&lt;#Module#&gt;, &lt;#OutFile#&gt;)</string>
		<string>cover:analyse_to_file(Module, OutFile) -&gt; {ok, OutFile} | {error, Error}</string>
		<string>cover:analyse_to_file</string>
		<string>cover:analyse_to_file(&lt;#Module#&gt;, &lt;#OutFile#&gt;, &lt;#Options#&gt;)</string>
		<string>cover:analyse_to_file(Module, OutFile, Options) -&gt; {ok, OutFile} | {error, Error}</string>
		<string>cover:async_analyse_to_file</string>
		<string>cover:async_analyse_to_file(&lt;#Module#&gt;)</string>
		<string>cover:async_analyse_to_file(Module) -&gt; pid()</string>
		<string>cover:async_analyse_to_file</string>
		<string>cover:async_analyse_to_file(&lt;#Module#&gt;, &lt;#Options#&gt;)</string>
		<string>cover:async_analyse_to_file(Module, Options) -&gt; pid()</string>
		<string>cover:async_analyse_to_file</string>
		<string>cover:async_analyse_to_file(&lt;#Module#&gt;, &lt;#OutFile#&gt;)</string>
		<string>cover:async_analyse_to_file(Module, OutFile) -&gt; pid()</string>
		<string>cover:async_analyse_to_file</string>
		<string>cover:async_analyse_to_file(&lt;#Module#&gt;, &lt;#OutFile#&gt;, &lt;#Options#&gt;)</string>
		<string>cover:async_analyse_to_file(Module, OutFile, Options) -&gt; pid()</string>
		<string>cover:modules</string>
		<string>cover:modules()</string>
		<string>cover:modules() -&gt; [Module] | {error, not_main_node}</string>
		<string>cover:imported_modules</string>
		<string>cover:imported_modules()</string>
		<string>cover:imported_modules() -&gt; [Module] | {error, not_main_node}</string>
		<string>cover:imported</string>
		<string>cover:imported()</string>
		<string>cover:imported() -&gt; [File] | {error, not_main_node}</string>
		<string>cover:which_nodes</string>
		<string>cover:which_nodes()</string>
		<string>cover:which_nodes() -&gt; [Node] | {error, not_main_node}</string>
		<string>cover:is_compiled</string>
		<string>cover:is_compiled(&lt;#Module#&gt;)</string>
		<string>cover:is_compiled(Module) -&gt; {file, File} | false | {error, not_main_node}</string>
		<string>cover:reset</string>
		<string>cover:reset(&lt;#Module#&gt;)</string>
		<string>cover:reset(Module) -&gt; ok | {error, not_main_node}</string>
		<string>cover:reset</string>
		<string>cover:reset()</string>
		<string>cover:reset() -&gt; ok | {error, not_main_node}</string>
		<string>cover:export</string>
		<string>cover:export(&lt;#ExportFile#&gt;)</string>
		<string>cover:export(ExportFile) -&gt; ok | {error, Reason}</string>
		<string>cover:export</string>
		<string>cover:export(&lt;#ExportFile#&gt;, &lt;#Module#&gt;)</string>
		<string>cover:export(ExportFile, Module) -&gt; ok | {error, Reason}</string>
		<string>cover:import</string>
		<string>cover:import(&lt;#ExportFile#&gt;)</string>
		<string>cover:import(ExportFile) -&gt; ok | {error, Reason}</string>
		<string>cover:stop</string>
		<string>cover:stop()</string>
		<string>cover:stop() -&gt; ok | {error, not_main_node}</string>
		<string>cover:stop</string>
		<string>cover:stop(&lt;#Nodes#&gt;)</string>
		<string>cover:stop(Nodes) -&gt; ok | {error, not_main_node}</string>
		<string>cover:flush</string>
		<string>cover:flush(&lt;#Nodes#&gt;)</string>
		<string>cover:flush(Nodes) -&gt; ok | {error, not_main_node}</string>
		<string>cprof:analyse</string>
		<string>cprof:analyse()</string>
		<string>cprof:analyse() -&gt; {AllCallCount, ModAnalysisList}</string>
		<string>cprof:analyse</string>
		<string>cprof:analyse(&lt;#Limit#&gt;)</string>
		<string>cprof:analyse(Limit) -&gt; {AllCallCount, ModAnalysisList}</string>
		<string>cprof:analyse</string>
		<string>cprof:analyse(&lt;#Mod#&gt;)</string>
		<string>cprof:analyse(Mod) -&gt; ModAnlysis</string>
		<string>cprof:analyse</string>
		<string>cprof:analyse(&lt;#Mod#&gt;, &lt;#Limit#&gt;)</string>
		<string>cprof:analyse(Mod, Limit) -&gt; ModAnalysis</string>
		<string>cprof:pause</string>
		<string>cprof:pause()</string>
		<string>cprof:pause() -&gt; integer()</string>
		<string>cprof:pause</string>
		<string>cprof:pause(&lt;#FuncSpec#&gt;)</string>
		<string>cprof:pause(FuncSpec) -&gt; integer()</string>
		<string>cprof:pause</string>
		<string>cprof:pause(&lt;#Mod#&gt;, &lt;#Func#&gt;)</string>
		<string>cprof:pause(Mod, Func) -&gt; integer()</string>
		<string>cprof:pause</string>
		<string>cprof:pause(&lt;#Mod#&gt;, &lt;#Func#&gt;, &lt;#Arity#&gt;)</string>
		<string>cprof:pause(Mod, Func, Arity) -&gt; integer()</string>
		<string>cprof:restart</string>
		<string>cprof:restart()</string>
		<string>cprof:restart() -&gt; integer()</string>
		<string>cprof:restart</string>
		<string>cprof:restart(&lt;#FuncSpec#&gt;)</string>
		<string>cprof:restart(FuncSpec) -&gt; integer()</string>
		<string>cprof:restart</string>
		<string>cprof:restart(&lt;#Mod#&gt;, &lt;#Func#&gt;)</string>
		<string>cprof:restart(Mod, Func) -&gt; integer()</string>
		<string>cprof:restart</string>
		<string>cprof:restart(&lt;#Mod#&gt;, &lt;#Func#&gt;, &lt;#Arity#&gt;)</string>
		<string>cprof:restart(Mod, Func, Arity) -&gt; integer()</string>
		<string>cprof:start</string>
		<string>cprof:start()</string>
		<string>cprof:start() -&gt; integer()</string>
		<string>cprof:start</string>
		<string>cprof:start(&lt;#FuncSpec#&gt;)</string>
		<string>cprof:start(FuncSpec) -&gt; integer()</string>
		<string>cprof:start</string>
		<string>cprof:start(&lt;#Mod#&gt;, &lt;#Func#&gt;)</string>
		<string>cprof:start(Mod, Func) -&gt; integer()</string>
		<string>cprof:start</string>
		<string>cprof:start(&lt;#Mod#&gt;, &lt;#Func#&gt;, &lt;#Arity#&gt;)</string>
		<string>cprof:start(Mod, Func, Arity) -&gt; integer()</string>
		<string>cprof:stop</string>
		<string>cprof:stop()</string>
		<string>cprof:stop() -&gt; integer()</string>
		<string>cprof:stop</string>
		<string>cprof:stop(&lt;#FuncSpec#&gt;)</string>
		<string>cprof:stop(FuncSpec) -&gt; integer()</string>
		<string>cprof:stop</string>
		<string>cprof:stop(&lt;#Mod#&gt;, &lt;#Func#&gt;)</string>
		<string>cprof:stop(Mod, Func) -&gt; integer()</string>
		<string>cprof:stop</string>
		<string>cprof:stop(&lt;#Mod#&gt;, &lt;#Func#&gt;, &lt;#Arity#&gt;)</string>
		<string>cprof:stop(Mod, Func, Arity) -&gt; integer()</string>
		<string>cpu_sup:nprocs</string>
		<string>cpu_sup:nprocs()</string>
		<string>cpu_sup:nprocs() -&gt; UnixProcesses | {error, Reason}</string>
		<string>cpu_sup:avg1</string>
		<string>cpu_sup:avg1()</string>
		<string>cpu_sup:avg1() -&gt; SystemLoad | {error, Reason}</string>
		<string>cpu_sup:avg5</string>
		<string>cpu_sup:avg5()</string>
		<string>cpu_sup:avg5() -&gt; SystemLoad | {error, Reason}</string>
		<string>cpu_sup:avg15</string>
		<string>cpu_sup:avg15()</string>
		<string>cpu_sup:avg15() -&gt; SystemLoad | {error, Reason}</string>
		<string>cpu_sup:util</string>
		<string>cpu_sup:util()</string>
		<string>cpu_sup:util() -&gt; CpuUtil | {error, Reason}</string>
		<string>cpu_sup:util</string>
		<string>cpu_sup:util(&lt;#Opts#&gt;)</string>
		<string>cpu_sup:util(Opts) -&gt; UtilSpec | {error, Reason}</string>
		<string>crashdump_viewer:start</string>
		<string>crashdump_viewer:start()</string>
		<string>crashdump_viewer:start() -&gt; ok</string>
		<string>crashdump_viewer:start</string>
		<string>crashdump_viewer:start(&lt;#File#&gt;)</string>
		<string>crashdump_viewer:start(File) -&gt; ok</string>
		<string>crashdump_viewer:stop</string>
		<string>crashdump_viewer:stop()</string>
		<string>crashdump_viewer:stop() -&gt; ok</string>
		<string>crypto:block_encrypt</string>
		<string>crypto:block_encrypt(&lt;#Type#&gt;, &lt;#Key#&gt;, &lt;#Ivec#&gt;, &lt;#PlainText#&gt;)</string>
		<string>crypto:block_encrypt(Type, Key, Ivec, PlainText) -&gt; CipherText</string>
		<string>crypto:block_decrypt</string>
		<string>crypto:block_decrypt(&lt;#Type#&gt;, &lt;#Key#&gt;, &lt;#Ivec#&gt;, &lt;#CipherText#&gt;)</string>
		<string>crypto:block_decrypt(Type, Key, Ivec, CipherText) -&gt; PlainText</string>
		<string>crypto:bytes_to_integer</string>
		<string>crypto:bytes_to_integer(&lt;#Bin#&gt;)</string>
		<string>crypto:bytes_to_integer(Bin) -&gt; Integer </string>
		<string>crypto:compute_key</string>
		<string>crypto:compute_key(&lt;#Type#&gt;, &lt;#OthersPublicKey#&gt;, &lt;#MyKey#&gt;, &lt;#Params#&gt;)</string>
		<string>crypto:compute_key(Type, OthersPublicKey, MyKey, Params) -&gt; SharedSecret</string>
		<string>crypto:exor</string>
		<string>crypto:exor(&lt;#Data1#&gt;, &lt;#Data2#&gt;)</string>
		<string>crypto:exor(Data1, Data2) -&gt; Result</string>
		<string>crypto:generate_key</string>
		<string>crypto:generate_key(&lt;#Type#&gt;, &lt;#Params#&gt;)</string>
		<string>crypto:generate_key(Type, Params) -&gt; {PublicKey, PrivKeyOut} </string>
		<string>crypto:generate_key</string>
		<string>crypto:generate_key(&lt;#Type#&gt;, &lt;#Params#&gt;, &lt;#PrivKeyIn#&gt;)</string>
		<string>crypto:generate_key(Type, Params, PrivKeyIn) -&gt; {PublicKey, PrivKeyOut} </string>
		<string>crypto:hash</string>
		<string>crypto:hash(&lt;#Type#&gt;, &lt;#Data#&gt;)</string>
		<string>crypto:hash(Type, Data) -&gt; Digest</string>
		<string>crypto:hash_init</string>
		<string>crypto:hash_init(&lt;#Type#&gt;)</string>
		<string>crypto:hash_init(Type) -&gt; Context</string>
		<string>crypto:hash_update</string>
		<string>crypto:hash_update(&lt;#Context#&gt;, &lt;#Data#&gt;)</string>
		<string>crypto:hash_update(Context, Data) -&gt; NewContext</string>
		<string>crypto:hash_final</string>
		<string>crypto:hash_final(&lt;#Context#&gt;)</string>
		<string>crypto:hash_final(Context) -&gt; Digest</string>
		<string>crypto:hmac</string>
		<string>crypto:hmac(&lt;#Type#&gt;, &lt;#Key#&gt;, &lt;#Data#&gt;)</string>
		<string>crypto:hmac(Type, Key, Data) -&gt; Mac</string>
		<string>crypto:hmac</string>
		<string>crypto:hmac(&lt;#Type#&gt;, &lt;#Key#&gt;, &lt;#Data#&gt;, &lt;#MacLength#&gt;)</string>
		<string>crypto:hmac(Type, Key, Data, MacLength) -&gt; Mac</string>
		<string>crypto:hmac_init</string>
		<string>crypto:hmac_init(&lt;#Type#&gt;, &lt;#Key#&gt;)</string>
		<string>crypto:hmac_init(Type, Key) -&gt; Context</string>
		<string>crypto:hmac_update</string>
		<string>crypto:hmac_update(&lt;#Context#&gt;, &lt;#Data#&gt;)</string>
		<string>crypto:hmac_update(Context, Data) -&gt; NewContext</string>
		<string>crypto:hmac_final</string>
		<string>crypto:hmac_final(&lt;#Context#&gt;)</string>
		<string>crypto:hmac_final(Context) -&gt; Mac</string>
		<string>crypto:hmac_final_n</string>
		<string>crypto:hmac_final_n(&lt;#Context#&gt;, &lt;#HashLen#&gt;)</string>
		<string>crypto:hmac_final_n(Context, HashLen) -&gt; Mac</string>
		<string>crypto:info_lib</string>
		<string>crypto:info_lib()</string>
		<string>crypto:info_lib() -&gt; [{Name, VerNum, VerStr}]</string>
		<string>crypto:mod_pow</string>
		<string>crypto:mod_pow(&lt;#N#&gt;, &lt;#P#&gt;, &lt;#M#&gt;)</string>
		<string>crypto:mod_pow(N, P, M) -&gt; Result</string>
		<string>crypto:next_iv</string>
		<string>crypto:next_iv(&lt;#Type#&gt;, &lt;#Data#&gt;)</string>
		<string>crypto:next_iv(Type, Data) -&gt; NextIVec</string>
		<string>crypto:next_iv</string>
		<string>crypto:next_iv(&lt;#Type#&gt;, &lt;#Data#&gt;, &lt;#IVec#&gt;)</string>
		<string>crypto:next_iv(Type, Data, IVec) -&gt; NextIVec</string>
		<string>crypto:private_decrypt</string>
		<string>crypto:private_decrypt(&lt;#Type#&gt;, &lt;#CipherText#&gt;, &lt;#PrivateKey#&gt;, &lt;#Padding#&gt;)</string>
		<string>crypto:private_decrypt(Type, CipherText, PrivateKey, Padding) -&gt; PlainText</string>
		<string>crypto:private_encrypt</string>
		<string>crypto:private_encrypt(&lt;#Type#&gt;, &lt;#PlainText#&gt;, &lt;#PrivateKey#&gt;, &lt;#Padding#&gt;)</string>
		<string>crypto:private_encrypt(Type, PlainText, PrivateKey, Padding) -&gt; CipherText</string>
		<string>crypto:public_decrypt</string>
		<string>crypto:public_decrypt(&lt;#Type#&gt;, &lt;#CipherText#&gt;, &lt;#PublicKey#&gt;, &lt;#Padding#&gt;)</string>
		<string>crypto:public_decrypt(Type, CipherText, PublicKey, Padding) -&gt; PlainText</string>
		<string>crypto:public_encrypt</string>
		<string>crypto:public_encrypt(&lt;#Type#&gt;, &lt;#PlainText#&gt;, &lt;#PublicKey#&gt;, &lt;#Padding#&gt;)</string>
		<string>crypto:public_encrypt(Type, PlainText, PublicKey, Padding) -&gt; CipherText</string>
		<string>crypto:rand_bytes</string>
		<string>crypto:rand_bytes(&lt;#N#&gt;)</string>
		<string>crypto:rand_bytes(N) -&gt; binary()</string>
		<string>crypto:rand_seed</string>
		<string>crypto:rand_seed(&lt;#Seed#&gt;)</string>
		<string>crypto:rand_seed(Seed) -&gt; ok</string>
		<string>crypto:rand_uniform</string>
		<string>crypto:rand_uniform(&lt;#Lo#&gt;, &lt;#Hi#&gt;)</string>
		<string>crypto:rand_uniform(Lo, Hi) -&gt; N</string>
		<string>crypto:sign</string>
		<string>crypto:sign(&lt;#Algorithm#&gt;, &lt;#DigestType#&gt;, &lt;#Msg#&gt;, &lt;#Key#&gt;)</string>
		<string>crypto:sign(Algorithm, DigestType, Msg, Key) -&gt; binary()</string>
		<string>crypto:start</string>
		<string>crypto:start()</string>
		<string>crypto:start() -&gt; ok</string>
		<string>crypto:stop</string>
		<string>crypto:stop()</string>
		<string>crypto:stop() -&gt; ok</string>
		<string>crypto:strong_rand_bytes</string>
		<string>crypto:strong_rand_bytes(&lt;#N#&gt;)</string>
		<string>crypto:strong_rand_bytes(N) -&gt; binary()</string>
		<string>crypto:stream_init</string>
		<string>crypto:stream_init(&lt;#Type#&gt;, &lt;#Key#&gt;)</string>
		<string>crypto:stream_init(Type, Key) -&gt; State</string>
		<string>crypto:stream_init</string>
		<string>crypto:stream_init(&lt;#Type#&gt;, &lt;#Key#&gt;, &lt;#IVec#&gt;)</string>
		<string>crypto:stream_init(Type, Key, IVec) -&gt; State</string>
		<string>crypto:stream_encrypt</string>
		<string>crypto:stream_encrypt(&lt;#State#&gt;, &lt;#PlainText#&gt;)</string>
		<string>crypto:stream_encrypt(State, PlainText) -&gt; { NewState, CipherText}</string>
		<string>crypto:stream_decrypt</string>
		<string>crypto:stream_decrypt(&lt;#State#&gt;, &lt;#CipherText#&gt;)</string>
		<string>crypto:stream_decrypt(State, CipherText) -&gt; { NewState, PlainText }</string>
		<string>crypto:supports</string>
		<string>crypto:supports()</string>
		<string>crypto:supports() -&gt; AlgorithmList </string>
		<string>crypto:ec_curves</string>
		<string>crypto:ec_curves()</string>
		<string>crypto:ec_curves() -&gt; EllipticCurveList </string>
		<string>crypto:ec_curve</string>
		<string>crypto:ec_curve(&lt;#NamedCurve#&gt;)</string>
		<string>crypto:ec_curve(NamedCurve) -&gt; EllipticCurve </string>
		<string>crypto:verify</string>
		<string>crypto:verify(&lt;#Algorithm#&gt;, &lt;#DigestType#&gt;, &lt;#Msg#&gt;, &lt;#Signature#&gt;, &lt;#Key#&gt;)</string>
		<string>crypto:verify(Algorithm, DigestType, Msg, Signature, Key) -&gt; boolean()</string>
		<string>ct:abort_current_testcase</string>
		<string>ct:abort_current_testcase(&lt;#Reason#&gt;)</string>
		<string>ct:abort_current_testcase(Reason) -&gt; ok | {error, ErrorReason}</string>
		<string>ct:add_config</string>
		<string>ct:add_config(&lt;#Callback#&gt;, &lt;#Config#&gt;)</string>
		<string>ct:add_config(Callback, Config) -&gt; ok | {error, Reason}</string>
		<string>ct:break</string>
		<string>ct:break(&lt;#Comment#&gt;)</string>
		<string>ct:break(Comment) -&gt; ok | {error, Reason}</string>
		<string>ct:break</string>
		<string>ct:break(&lt;#TestCase#&gt;, &lt;#Comment#&gt;)</string>
		<string>ct:break(TestCase, Comment) -&gt; ok | {error, Reason}</string>
		<string>ct:capture_get</string>
		<string>ct:capture_get()</string>
		<string>ct:capture_get() -&gt; ListOfStrings</string>
		<string>ct:capture_get</string>
		<string>ct:capture_get(&lt;#ExclCategories#&gt;)</string>
		<string>ct:capture_get(ExclCategories) -&gt; ListOfStrings</string>
		<string>ct:capture_start</string>
		<string>ct:capture_start()</string>
		<string>ct:capture_start() -&gt; ok</string>
		<string>ct:capture_stop</string>
		<string>ct:capture_stop()</string>
		<string>ct:capture_stop() -&gt; ok</string>
		<string>ct:comment</string>
		<string>ct:comment(&lt;#Comment#&gt;)</string>
		<string>ct:comment(Comment) -&gt; void()</string>
		<string>ct:comment</string>
		<string>ct:comment(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>ct:comment(Format, Args) -&gt; void()</string>
		<string>ct:continue</string>
		<string>ct:continue()</string>
		<string>ct:continue() -&gt; ok</string>
		<string>ct:continue</string>
		<string>ct:continue(&lt;#TestCase#&gt;)</string>
		<string>ct:continue(TestCase) -&gt; ok</string>
		<string>ct:decrypt_config_file</string>
		<string>ct:decrypt_config_file(&lt;#EncryptFileName#&gt;, &lt;#TargetFileName#&gt;)</string>
		<string>ct:decrypt_config_file(EncryptFileName, TargetFileName) -&gt; ok | {error, Reason}</string>
		<string>ct:decrypt_config_file</string>
		<string>ct:decrypt_config_file(&lt;#EncryptFileName#&gt;, &lt;#TargetFileName#&gt;, &lt;#KeyOrFile#&gt;)</string>
		<string>ct:decrypt_config_file(EncryptFileName, TargetFileName, KeyOrFile) -&gt; ok | {error, Reason}</string>
		<string>ct:encrypt_config_file</string>
		<string>ct:encrypt_config_file(&lt;#SrcFileName#&gt;, &lt;#EncryptFileName#&gt;)</string>
		<string>ct:encrypt_config_file(SrcFileName, EncryptFileName) -&gt; ok | {error, Reason}</string>
		<string>ct:encrypt_config_file</string>
		<string>ct:encrypt_config_file(&lt;#SrcFileName#&gt;, &lt;#EncryptFileName#&gt;, &lt;#KeyOrFile#&gt;)</string>
		<string>ct:encrypt_config_file(SrcFileName, EncryptFileName, KeyOrFile) -&gt; ok | {error, Reason}</string>
		<string>ct:fail</string>
		<string>ct:fail(&lt;#Reason#&gt;)</string>
		<string>ct:fail(Reason) -&gt; void()</string>
		<string>ct:fail</string>
		<string>ct:fail(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>ct:fail(Format, Args) -&gt; void()</string>
		<string>ct:get_config</string>
		<string>ct:get_config(&lt;#Required#&gt;)</string>
		<string>ct:get_config(Required) -&gt; Value</string>
		<string>ct:get_config</string>
		<string>ct:get_config(&lt;#Required#&gt;, &lt;#Default#&gt;)</string>
		<string>ct:get_config(Required, Default) -&gt; Value</string>
		<string>ct:get_config</string>
		<string>ct:get_config(&lt;#Required#&gt;, &lt;#Default#&gt;, &lt;#Opts#&gt;)</string>
		<string>ct:get_config(Required, Default, Opts) -&gt; ValueOrElement</string>
		<string>ct:get_status</string>
		<string>ct:get_status()</string>
		<string>ct:get_status() -&gt; TestStatus | {error, Reason} | no_tests_running</string>
		<string>ct:get_target_name</string>
		<string>ct:get_target_name(&lt;#Handle#&gt;)</string>
		<string>ct:get_target_name(Handle) -&gt; {ok, TargetName} | {error, Reason}</string>
		<string>ct:get_timetrap_info</string>
		<string>ct:get_timetrap_info()</string>
		<string>ct:get_timetrap_info() -&gt; {Time, Scale}</string>
		<string>ct:install</string>
		<string>ct:install(&lt;#Opts#&gt;)</string>
		<string>ct:install(Opts) -&gt; ok | {error, Reason}</string>
		<string>ct:listenv</string>
		<string>ct:listenv(&lt;#Telnet#&gt;)</string>
		<string>ct:listenv(Telnet) -&gt; [Env]</string>
		<string>ct:log</string>
		<string>ct:log(&lt;#Format#&gt;)</string>
		<string>ct:log(Format) -&gt; ok</string>
		<string>ct:log</string>
		<string>ct:log(&lt;#X1#&gt;, &lt;#X2#&gt;)</string>
		<string>ct:log(X1, X2) -&gt; ok</string>
		<string>ct:log</string>
		<string>ct:log(&lt;#X1#&gt;, &lt;#X2#&gt;, &lt;#X3#&gt;)</string>
		<string>ct:log(X1, X2, X3) -&gt; ok</string>
		<string>ct:log</string>
		<string>ct:log(&lt;#Category#&gt;, &lt;#Importance#&gt;, &lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>ct:log(Category, Importance, Format, Args) -&gt; ok</string>
		<string>ct:make_priv_dir</string>
		<string>ct:make_priv_dir()</string>
		<string>ct:make_priv_dir() -&gt; ok | {error, Reason}</string>
		<string>ct:notify</string>
		<string>ct:notify(&lt;#Name#&gt;, &lt;#Data#&gt;)</string>
		<string>ct:notify(Name, Data) -&gt; ok</string>
		<string>ct:pal</string>
		<string>ct:pal(&lt;#Format#&gt;)</string>
		<string>ct:pal(Format) -&gt; ok</string>
		<string>ct:pal</string>
		<string>ct:pal(&lt;#X1#&gt;, &lt;#X2#&gt;)</string>
		<string>ct:pal(X1, X2) -&gt; ok</string>
		<string>ct:pal</string>
		<string>ct:pal(&lt;#X1#&gt;, &lt;#X2#&gt;, &lt;#X3#&gt;)</string>
		<string>ct:pal(X1, X2, X3) -&gt; ok</string>
		<string>ct:pal</string>
		<string>ct:pal(&lt;#Category#&gt;, &lt;#Importance#&gt;, &lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>ct:pal(Category, Importance, Format, Args) -&gt; ok</string>
		<string>ct:parse_table</string>
		<string>ct:parse_table(&lt;#Data#&gt;)</string>
		<string>ct:parse_table(Data) -&gt; {Heading, Table}</string>
		<string>ct:print</string>
		<string>ct:print(&lt;#Format#&gt;)</string>
		<string>ct:print(Format) -&gt; ok</string>
		<string>ct:print</string>
		<string>ct:print(&lt;#X1#&gt;, &lt;#X2#&gt;)</string>
		<string>ct:print(X1, X2) -&gt; ok</string>
		<string>ct:print</string>
		<string>ct:print(&lt;#X1#&gt;, &lt;#X2#&gt;, &lt;#X3#&gt;)</string>
		<string>ct:print(X1, X2, X3) -&gt; ok</string>
		<string>ct:print</string>
		<string>ct:print(&lt;#Category#&gt;, &lt;#Importance#&gt;, &lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>ct:print(Category, Importance, Format, Args) -&gt; ok</string>
		<string>ct:reload_config</string>
		<string>ct:reload_config(&lt;#Required#&gt;)</string>
		<string>ct:reload_config(Required) -&gt; ValueOrElement</string>
		<string>ct:remove_config</string>
		<string>ct:remove_config(&lt;#Callback#&gt;, &lt;#Config#&gt;)</string>
		<string>ct:remove_config(Callback, Config) -&gt; ok</string>
		<string>ct:require</string>
		<string>ct:require(&lt;#Required#&gt;)</string>
		<string>ct:require(Required) -&gt; ok | {error, Reason}</string>
		<string>ct:require</string>
		<string>ct:require(&lt;#Name#&gt;, &lt;#Required#&gt;)</string>
		<string>ct:require(Name, Required) -&gt; ok | {error, Reason}</string>
		<string>ct:run</string>
		<string>ct:run(&lt;#TestDirs#&gt;)</string>
		<string>ct:run(TestDirs) -&gt; Result</string>
		<string>ct:run</string>
		<string>ct:run(&lt;#TestDir#&gt;, &lt;#Suite#&gt;)</string>
		<string>ct:run(TestDir, Suite) -&gt; Result</string>
		<string>ct:run</string>
		<string>ct:run(&lt;#TestDir#&gt;, &lt;#Suite#&gt;, &lt;#Cases#&gt;)</string>
		<string>ct:run(TestDir, Suite, Cases) -&gt; Result</string>
		<string>ct:run_test</string>
		<string>ct:run_test(&lt;#Opts#&gt;)</string>
		<string>ct:run_test(Opts) -&gt; Result</string>
		<string>ct:run_testspec</string>
		<string>ct:run_testspec(&lt;#TestSpec#&gt;)</string>
		<string>ct:run_testspec(TestSpec) -&gt; Result</string>
		<string>ct:sleep</string>
		<string>ct:sleep(&lt;#Time#&gt;)</string>
		<string>ct:sleep(Time) -&gt; ok</string>
		<string>ct:start_interactive</string>
		<string>ct:start_interactive()</string>
		<string>ct:start_interactive() -&gt; ok</string>
		<string>ct:step</string>
		<string>ct:step(&lt;#TestDir#&gt;, &lt;#Suite#&gt;, &lt;#Case#&gt;)</string>
		<string>ct:step(TestDir, Suite, Case) -&gt; Result</string>
		<string>ct:step</string>
		<string>ct:step(&lt;#TestDir#&gt;, &lt;#Suite#&gt;, &lt;#Case#&gt;, &lt;#Opts#&gt;)</string>
		<string>ct:step(TestDir, Suite, Case, Opts) -&gt; Result</string>
		<string>ct:stop_interactive</string>
		<string>ct:stop_interactive()</string>
		<string>ct:stop_interactive() -&gt; ok</string>
		<string>ct:sync_notify</string>
		<string>ct:sync_notify(&lt;#Name#&gt;, &lt;#Data#&gt;)</string>
		<string>ct:sync_notify(Name, Data) -&gt; ok</string>
		<string>ct:testcases</string>
		<string>ct:testcases(&lt;#TestDir#&gt;, &lt;#Suite#&gt;)</string>
		<string>ct:testcases(TestDir, Suite) -&gt; Testcases | {error, Reason}</string>
		<string>ct:timetrap</string>
		<string>ct:timetrap(&lt;#Time#&gt;)</string>
		<string>ct:timetrap(Time) -&gt; ok</string>
		<string>ct:userdata</string>
		<string>ct:userdata(&lt;#TestDir#&gt;, &lt;#Suite#&gt;)</string>
		<string>ct:userdata(TestDir, Suite) -&gt; SuiteUserData | {error, Reason}</string>
		<string>ct:userdata</string>
		<string>ct:userdata(&lt;#TestDir#&gt;, &lt;#Suite#&gt;, &lt;#Case::GroupOrCase#&gt;)</string>
		<string>ct:userdata(TestDir, Suite, Case::GroupOrCase) -&gt; TCUserData | {error, Reason}</string>
		<string>ct_cover:add_nodes</string>
		<string>ct_cover:add_nodes(&lt;#Nodes#&gt;)</string>
		<string>ct_cover:add_nodes(Nodes) -&gt; {ok, StartedNodes} | {error, Reason}</string>
		<string>ct_cover:cross_cover_analyse</string>
		<string>ct_cover:cross_cover_analyse(&lt;#Level#&gt;, &lt;#Tests#&gt;)</string>
		<string>ct_cover:cross_cover_analyse(Level, Tests) -&gt; ok</string>
		<string>ct_cover:remove_nodes</string>
		<string>ct_cover:remove_nodes(&lt;#Nodes#&gt;)</string>
		<string>ct_cover:remove_nodes(Nodes) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:cd</string>
		<string>ct_ftp:cd(&lt;#Connection#&gt;, &lt;#Dir#&gt;)</string>
		<string>ct_ftp:cd(Connection, Dir) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:close</string>
		<string>ct_ftp:close(&lt;#Connection#&gt;)</string>
		<string>ct_ftp:close(Connection) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:delete</string>
		<string>ct_ftp:delete(&lt;#Connection#&gt;, &lt;#File#&gt;)</string>
		<string>ct_ftp:delete(Connection, File) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:get</string>
		<string>ct_ftp:get(&lt;#KeyOrName#&gt;, &lt;#RemoteFile#&gt;, &lt;#LocalFile#&gt;)</string>
		<string>ct_ftp:get(KeyOrName, RemoteFile, LocalFile) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:ls</string>
		<string>ct_ftp:ls(&lt;#Connection#&gt;, &lt;#Dir#&gt;)</string>
		<string>ct_ftp:ls(Connection, Dir) -&gt; {ok, Listing} | {error, Reason}</string>
		<string>ct_ftp:open</string>
		<string>ct_ftp:open(&lt;#KeyOrName#&gt;)</string>
		<string>ct_ftp:open(KeyOrName) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ct_ftp:put</string>
		<string>ct_ftp:put(&lt;#KeyOrName#&gt;, &lt;#LocalFile#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ct_ftp:put(KeyOrName, LocalFile, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:recv</string>
		<string>ct_ftp:recv(&lt;#Connection#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ct_ftp:recv(Connection, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:recv</string>
		<string>ct_ftp:recv(&lt;#Connection#&gt;, &lt;#RemoteFile#&gt;, &lt;#LocalFile#&gt;)</string>
		<string>ct_ftp:recv(Connection, RemoteFile, LocalFile) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:send</string>
		<string>ct_ftp:send(&lt;#Connection#&gt;, &lt;#LocalFile#&gt;)</string>
		<string>ct_ftp:send(Connection, LocalFile) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:send</string>
		<string>ct_ftp:send(&lt;#Connection#&gt;, &lt;#LocalFile#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ct_ftp:send(Connection, LocalFile, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ct_ftp:type</string>
		<string>ct_ftp:type(&lt;#Connection#&gt;, &lt;#Type#&gt;)</string>
		<string>ct_ftp:type(Connection, Type) -&gt; ok | {error, Reason}</string>
		<string>ct_hooks:Module:init</string>
		<string>ct_hooks:Module:init(&lt;#Id#&gt;, &lt;#Opts#&gt;)</string>
		<string>ct_hooks:Module:init(Id, Opts) -&gt; {ok, State} | {ok, State, Priority}</string>
		<string>ct_hooks:Module:pre_init_per_suite</string>
		<string>ct_hooks:Module:pre_init_per_suite(&lt;#SuiteName#&gt;, &lt;#InitData#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:pre_init_per_suite(SuiteName, InitData, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:post_init_per_suite</string>
		<string>ct_hooks:Module:post_init_per_suite(&lt;#SuiteName#&gt;, &lt;#Config#&gt;, &lt;#Return#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:post_init_per_suite(SuiteName, Config, Return, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:pre_init_per_group</string>
		<string>ct_hooks:Module:pre_init_per_group(&lt;#GroupName#&gt;, &lt;#InitData#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:pre_init_per_group(GroupName, InitData, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:post_init_per_group</string>
		<string>ct_hooks:Module:post_init_per_group(&lt;#GroupName#&gt;, &lt;#Config#&gt;, &lt;#Return#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:post_init_per_group(GroupName, Config, Return, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:pre_init_per_testcase</string>
		<string>ct_hooks:Module:pre_init_per_testcase(&lt;#TestcaseName#&gt;, &lt;#InitData#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:pre_init_per_testcase(TestcaseName, InitData, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:post_end_per_testcase</string>
		<string>ct_hooks:Module:post_end_per_testcase(&lt;#TestcaseName#&gt;, &lt;#Config#&gt;, &lt;#Return#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:post_end_per_testcase(TestcaseName, Config, Return, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:pre_end_per_group</string>
		<string>ct_hooks:Module:pre_end_per_group(&lt;#GroupName#&gt;, &lt;#EndData#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:pre_end_per_group(GroupName, EndData, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:post_end_per_group</string>
		<string>ct_hooks:Module:post_end_per_group(&lt;#GroupName#&gt;, &lt;#Config#&gt;, &lt;#Return#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:post_end_per_group(GroupName, Config, Return, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:pre_end_per_suite</string>
		<string>ct_hooks:Module:pre_end_per_suite(&lt;#SuiteName#&gt;, &lt;#EndData#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:pre_end_per_suite(SuiteName, EndData, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:post_end_per_suite</string>
		<string>ct_hooks:Module:post_end_per_suite(&lt;#SuiteName#&gt;, &lt;#Config#&gt;, &lt;#Return#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:post_end_per_suite(SuiteName, Config, Return, CTHState) -&gt; Result</string>
		<string>ct_hooks:Module:on_tc_fail</string>
		<string>ct_hooks:Module:on_tc_fail(&lt;#TestName#&gt;, &lt;#Reason#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:on_tc_fail(TestName, Reason, CTHState) -&gt; NewCTHState</string>
		<string>ct_hooks:Module:on_tc_skip</string>
		<string>ct_hooks:Module:on_tc_skip(&lt;#TestName#&gt;, &lt;#Reason#&gt;, &lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:on_tc_skip(TestName, Reason, CTHState) -&gt; NewCTHState</string>
		<string>ct_hooks:Module:terminate</string>
		<string>ct_hooks:Module:terminate(&lt;#CTHState#&gt;)</string>
		<string>ct_hooks:Module:terminate(CTHState)</string>
		<string>ct_hooks:Module:id</string>
		<string>ct_hooks:Module:id(&lt;#Opts#&gt;)</string>
		<string>ct_hooks:Module:id(Opts) -&gt; Id</string>
		<string>ct_master:abort</string>
		<string>ct_master:abort()</string>
		<string>ct_master:abort() -&gt; ok</string>
		<string>ct_master:abort</string>
		<string>ct_master:abort(&lt;#Nodes#&gt;)</string>
		<string>ct_master:abort(Nodes) -&gt; ok</string>
		<string>ct_master:basic_html</string>
		<string>ct_master:basic_html(&lt;#Bool#&gt;)</string>
		<string>ct_master:basic_html(Bool) -&gt; ok</string>
		<string>ct_master:progress</string>
		<string>ct_master:progress()</string>
		<string>ct_master:progress() -&gt; [{Node, Status}]</string>
		<string>ct_master:run</string>
		<string>ct_master:run(&lt;#TestSpecs#&gt;)</string>
		<string>ct_master:run(TestSpecs) -&gt; ok</string>
		<string>ct_master:run</string>
		<string>ct_master:run(&lt;#TestSpecs#&gt;, &lt;#InclNodes#&gt;, &lt;#ExclNodes#&gt;)</string>
		<string>ct_master:run(TestSpecs, InclNodes, ExclNodes) -&gt; ok</string>
		<string>ct_master:run</string>
		<string>ct_master:run(&lt;#TestSpecs#&gt;, &lt;#AllowUserTerms#&gt;, &lt;#InclNodes#&gt;, &lt;#ExclNodes#&gt;)</string>
		<string>ct_master:run(TestSpecs, AllowUserTerms, InclNodes, ExclNodes) -&gt; ok</string>
		<string>ct_master:run_on_node</string>
		<string>ct_master:run_on_node(&lt;#TestSpecs#&gt;, &lt;#Node#&gt;)</string>
		<string>ct_master:run_on_node(TestSpecs, Node) -&gt; ok</string>
		<string>ct_master:run_on_node</string>
		<string>ct_master:run_on_node(&lt;#TestSpecs#&gt;, &lt;#AllowUserTerms#&gt;, &lt;#Node#&gt;)</string>
		<string>ct_master:run_on_node(TestSpecs, AllowUserTerms, Node) -&gt; ok</string>
		<string>ct_master:run_test</string>
		<string>ct_master:run_test(&lt;#Node#&gt;, &lt;#Opts#&gt;)</string>
		<string>ct_master:run_test(Node, Opts) -&gt; ok</string>
		<string>ct_netconfc:action</string>
		<string>ct_netconfc:action(&lt;#Client#&gt;, &lt;#Action#&gt;)</string>
		<string>ct_netconfc:action(Client, Action) -&gt; Result</string>
		<string>ct_netconfc:action</string>
		<string>ct_netconfc:action(&lt;#Client#&gt;, &lt;#Action#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:action(Client, Action, Timeout) -&gt; Result</string>
		<string>ct_netconfc:close_session</string>
		<string>ct_netconfc:close_session(&lt;#Client#&gt;)</string>
		<string>ct_netconfc:close_session(Client) -&gt; Result</string>
		<string>ct_netconfc:close_session</string>
		<string>ct_netconfc:close_session(&lt;#Client#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:close_session(Client, Timeout) -&gt; Result</string>
		<string>ct_netconfc:copy_config</string>
		<string>ct_netconfc:copy_config(&lt;#Client#&gt;, &lt;#Source#&gt;, &lt;#Target#&gt;)</string>
		<string>ct_netconfc:copy_config(Client, Source, Target) -&gt; Result</string>
		<string>ct_netconfc:copy_config</string>
		<string>ct_netconfc:copy_config(&lt;#Client#&gt;, &lt;#Target#&gt;, &lt;#Source#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:copy_config(Client, Target, Source, Timeout) -&gt; Result</string>
		<string>ct_netconfc:create_subscription</string>
		<string>ct_netconfc:create_subscription(&lt;#Client#&gt;)</string>
		<string>ct_netconfc:create_subscription(Client) -&gt; term()</string>
		<string>ct_netconfc:create_subscription</string>
		<string>ct_netconfc:create_subscription(&lt;#Client#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:create_subscription(Client, Timeout) -&gt; term()</string>
		<string>ct_netconfc:create_subscription</string>
		<string>ct_netconfc:create_subscription(&lt;#Client#&gt;, &lt;#Stream#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:create_subscription(Client, Stream, Timeout) -&gt; term()</string>
		<string>ct_netconfc:create_subscription</string>
		<string>ct_netconfc:create_subscription(&lt;#Client#&gt;, &lt;#StartTime#&gt;, &lt;#StopTime#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:create_subscription(Client, StartTime, StopTime, Timeout) -&gt; term()</string>
		<string>ct_netconfc:create_subscription</string>
		<string>ct_netconfc:create_subscription(&lt;#Client#&gt;, &lt;#Stream#&gt;, &lt;#StartTime#&gt;, &lt;#StopTime#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:create_subscription(Client, Stream, StartTime, StopTime, Timeout) -&gt; term()</string>
		<string>ct_netconfc:create_subscription</string>
		<string>ct_netconfc:create_subscription(&lt;#Client#&gt;, &lt;#Stream#&gt;, &lt;#Filter#&gt;, &lt;#StartTime#&gt;, &lt;#StopTime#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:create_subscription(Client, Stream, Filter, StartTime, StopTime, Timeout) -&gt; Result</string>
		<string>ct_netconfc:delete_config</string>
		<string>ct_netconfc:delete_config(&lt;#Client#&gt;, &lt;#Target#&gt;)</string>
		<string>ct_netconfc:delete_config(Client, Target) -&gt; Result</string>
		<string>ct_netconfc:delete_config</string>
		<string>ct_netconfc:delete_config(&lt;#Client#&gt;, &lt;#Target#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:delete_config(Client, Target, Timeout) -&gt; Result</string>
		<string>ct_netconfc:edit_config</string>
		<string>ct_netconfc:edit_config(&lt;#Client#&gt;, &lt;#Target#&gt;, &lt;#Config#&gt;)</string>
		<string>ct_netconfc:edit_config(Client, Target, Config) -&gt; Result</string>
		<string>ct_netconfc:edit_config</string>
		<string>ct_netconfc:edit_config(&lt;#Client#&gt;, &lt;#Target#&gt;, &lt;#Config#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:edit_config(Client, Target, Config, Timeout) -&gt; Result</string>
		<string>ct_netconfc:format_data</string>
		<string>ct_netconfc:format_data(&lt;#How#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_netconfc:format_data(How, Data) -&gt; term()</string>
		<string>ct_netconfc:get</string>
		<string>ct_netconfc:get(&lt;#Client#&gt;, &lt;#Filter#&gt;)</string>
		<string>ct_netconfc:get(Client, Filter) -&gt; Result</string>
		<string>ct_netconfc:get</string>
		<string>ct_netconfc:get(&lt;#Client#&gt;, &lt;#Filter#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:get(Client, Filter, Timeout) -&gt; Result</string>
		<string>ct_netconfc:get_capabilities</string>
		<string>ct_netconfc:get_capabilities(&lt;#Client#&gt;)</string>
		<string>ct_netconfc:get_capabilities(Client) -&gt; Result</string>
		<string>ct_netconfc:get_capabilities</string>
		<string>ct_netconfc:get_capabilities(&lt;#Client#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:get_capabilities(Client, Timeout) -&gt; Result</string>
		<string>ct_netconfc:get_config</string>
		<string>ct_netconfc:get_config(&lt;#Client#&gt;, &lt;#Source#&gt;, &lt;#Filter#&gt;)</string>
		<string>ct_netconfc:get_config(Client, Source, Filter) -&gt; Result</string>
		<string>ct_netconfc:get_config</string>
		<string>ct_netconfc:get_config(&lt;#Client#&gt;, &lt;#Source#&gt;, &lt;#Filter#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:get_config(Client, Source, Filter, Timeout) -&gt; Result</string>
		<string>ct_netconfc:get_event_streams</string>
		<string>ct_netconfc:get_event_streams(&lt;#Client#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:get_event_streams(Client, Timeout) -&gt; Result</string>
		<string>ct_netconfc:get_event_streams</string>
		<string>ct_netconfc:get_event_streams(&lt;#Client#&gt;, &lt;#Streams#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:get_event_streams(Client, Streams, Timeout) -&gt; Result</string>
		<string>ct_netconfc:get_session_id</string>
		<string>ct_netconfc:get_session_id(&lt;#Client#&gt;)</string>
		<string>ct_netconfc:get_session_id(Client) -&gt; Result</string>
		<string>ct_netconfc:get_session_id</string>
		<string>ct_netconfc:get_session_id(&lt;#Client#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:get_session_id(Client, Timeout) -&gt; Result</string>
		<string>ct_netconfc:handle_msg</string>
		<string>ct_netconfc:handle_msg(&lt;#X1#&gt;, &lt;#State#&gt;)</string>
		<string>ct_netconfc:handle_msg(X1, State) -&gt; term()</string>
		<string>ct_netconfc:hello</string>
		<string>ct_netconfc:hello(&lt;#Client#&gt;)</string>
		<string>ct_netconfc:hello(Client) -&gt; Result</string>
		<string>ct_netconfc:hello</string>
		<string>ct_netconfc:hello(&lt;#Client#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:hello(Client, Timeout) -&gt; Result</string>
		<string>ct_netconfc:kill_session</string>
		<string>ct_netconfc:kill_session(&lt;#Client#&gt;, &lt;#SessionId#&gt;)</string>
		<string>ct_netconfc:kill_session(Client, SessionId) -&gt; Result</string>
		<string>ct_netconfc:kill_session</string>
		<string>ct_netconfc:kill_session(&lt;#Client#&gt;, &lt;#SessionId#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:kill_session(Client, SessionId, Timeout) -&gt; Result</string>
		<string>ct_netconfc:lock</string>
		<string>ct_netconfc:lock(&lt;#Client#&gt;, &lt;#Target#&gt;)</string>
		<string>ct_netconfc:lock(Client, Target) -&gt; Result</string>
		<string>ct_netconfc:lock</string>
		<string>ct_netconfc:lock(&lt;#Client#&gt;, &lt;#Target#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:lock(Client, Target, Timeout) -&gt; Result</string>
		<string>ct_netconfc:only_open</string>
		<string>ct_netconfc:only_open(&lt;#Options#&gt;)</string>
		<string>ct_netconfc:only_open(Options) -&gt; Result</string>
		<string>ct_netconfc:only_open</string>
		<string>ct_netconfc:only_open(&lt;#KeyOrName#&gt;, &lt;#ExtraOptions#&gt;)</string>
		<string>ct_netconfc:only_open(KeyOrName, ExtraOptions) -&gt; Result</string>
		<string>ct_netconfc:open</string>
		<string>ct_netconfc:open(&lt;#Options#&gt;)</string>
		<string>ct_netconfc:open(Options) -&gt; Result</string>
		<string>ct_netconfc:open</string>
		<string>ct_netconfc:open(&lt;#KeyOrName#&gt;, &lt;#ExtraOptions#&gt;)</string>
		<string>ct_netconfc:open(KeyOrName, ExtraOptions) -&gt; Result</string>
		<string>ct_netconfc:send</string>
		<string>ct_netconfc:send(&lt;#Client#&gt;, &lt;#SimpleXml#&gt;)</string>
		<string>ct_netconfc:send(Client, SimpleXml) -&gt; Result</string>
		<string>ct_netconfc:send</string>
		<string>ct_netconfc:send(&lt;#Client#&gt;, &lt;#SimpleXml#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:send(Client, SimpleXml, Timeout) -&gt; Result</string>
		<string>ct_netconfc:send_rpc</string>
		<string>ct_netconfc:send_rpc(&lt;#Client#&gt;, &lt;#SimpleXml#&gt;)</string>
		<string>ct_netconfc:send_rpc(Client, SimpleXml) -&gt; Result</string>
		<string>ct_netconfc:send_rpc</string>
		<string>ct_netconfc:send_rpc(&lt;#Client#&gt;, &lt;#SimpleXml#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:send_rpc(Client, SimpleXml, Timeout) -&gt; Result</string>
		<string>ct_netconfc:unlock</string>
		<string>ct_netconfc:unlock(&lt;#Client#&gt;, &lt;#Target#&gt;)</string>
		<string>ct_netconfc:unlock(Client, Target) -&gt; Result</string>
		<string>ct_netconfc:unlock</string>
		<string>ct_netconfc:unlock(&lt;#Client#&gt;, &lt;#Target#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_netconfc:unlock(Client, Target, Timeout) -&gt; Result</string>
		<string>ct_property_test:init_per_suite</string>
		<string>ct_property_test:init_per_suite(&lt;#Config#&gt;)</string>
		<string>ct_property_test:init_per_suite(Config) -&gt; Config | {skip, Reason}</string>
		<string>ct_property_test:quickcheck</string>
		<string>ct_property_test:quickcheck(&lt;#Property#&gt;, &lt;#Config#&gt;)</string>
		<string>ct_property_test:quickcheck(Property, Config) -&gt; true | {fail, Reason}</string>
		<string>ct_rpc:app_node</string>
		<string>ct_rpc:app_node(&lt;#App#&gt;, &lt;#Candidates#&gt;)</string>
		<string>ct_rpc:app_node(App, Candidates) -&gt; NodeName</string>
		<string>ct_rpc:app_node</string>
		<string>ct_rpc:app_node(&lt;#App#&gt;, &lt;#Candidates#&gt;, &lt;#FailOnBadRPC#&gt;)</string>
		<string>ct_rpc:app_node(App, Candidates, FailOnBadRPC) -&gt; NodeName</string>
		<string>ct_rpc:app_node</string>
		<string>ct_rpc:app_node(&lt;#App#&gt;, &lt;#Candidates#&gt;, &lt;#FailOnBadRPC#&gt;, &lt;#Cookie#&gt;)</string>
		<string>ct_rpc:app_node(App, Candidates, FailOnBadRPC, Cookie) -&gt; NodeName</string>
		<string>ct_rpc:call</string>
		<string>ct_rpc:call(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>ct_rpc:call(Node, Module, Function, Args) -&gt; term() | {badrpc, Reason}</string>
		<string>ct_rpc:call</string>
		<string>ct_rpc:call(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>ct_rpc:call(Node, Module, Function, Args, TimeOut) -&gt; term() | {badrpc, Reason}</string>
		<string>ct_rpc:call</string>
		<string>ct_rpc:call(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#TimeOut#&gt;, &lt;#Cookie#&gt;)</string>
		<string>ct_rpc:call(Node, Module, Function, Args, TimeOut, Cookie) -&gt; term() | {badrpc, Reason}</string>
		<string>ct_rpc:cast</string>
		<string>ct_rpc:cast(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>ct_rpc:cast(Node, Module, Function, Args) -&gt; ok</string>
		<string>ct_rpc:cast</string>
		<string>ct_rpc:cast(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Cookie#&gt;)</string>
		<string>ct_rpc:cast(Node, Module, Function, Args, Cookie) -&gt; ok</string>
		<string>ct_slave:start</string>
		<string>ct_slave:start(&lt;#Node#&gt;)</string>
		<string>ct_slave:start(Node) -&gt; Result</string>
		<string>ct_slave:start</string>
		<string>ct_slave:start(&lt;#HostOrNode#&gt;, &lt;#NodeOrOpts#&gt;)</string>
		<string>ct_slave:start(HostOrNode, NodeOrOpts) -&gt; Result</string>
		<string>ct_slave:start</string>
		<string>ct_slave:start(&lt;#Host#&gt;, &lt;#Node#&gt;, &lt;#Opts#&gt;)</string>
		<string>ct_slave:start(Host, Node, Opts) -&gt; Result</string>
		<string>ct_slave:stop</string>
		<string>ct_slave:stop(&lt;#Node#&gt;)</string>
		<string>ct_slave:stop(Node) -&gt; Result</string>
		<string>ct_slave:stop</string>
		<string>ct_slave:stop(&lt;#Host#&gt;, &lt;#Node#&gt;)</string>
		<string>ct_slave:stop(Host, Node) -&gt; Result</string>
		<string>ct_snmp:get_next_values</string>
		<string>ct_snmp:get_next_values(&lt;#Agent#&gt;, &lt;#Oids#&gt;, &lt;#MgrAgentConfName#&gt;)</string>
		<string>ct_snmp:get_next_values(Agent, Oids, MgrAgentConfName) -&gt; SnmpReply</string>
		<string>ct_snmp:get_values</string>
		<string>ct_snmp:get_values(&lt;#Agent#&gt;, &lt;#Oids#&gt;, &lt;#MgrAgentConfName#&gt;)</string>
		<string>ct_snmp:get_values(Agent, Oids, MgrAgentConfName) -&gt; SnmpReply</string>
		<string>ct_snmp:load_mibs</string>
		<string>ct_snmp:load_mibs(&lt;#Mibs#&gt;)</string>
		<string>ct_snmp:load_mibs(Mibs) -&gt; ok | {error, Reason}</string>
		<string>ct_snmp:register_agents</string>
		<string>ct_snmp:register_agents(&lt;#MgrAgentConfName#&gt;, &lt;#ManagedAgents#&gt;)</string>
		<string>ct_snmp:register_agents(MgrAgentConfName, ManagedAgents) -&gt; ok | {error, Reason}</string>
		<string>ct_snmp:register_users</string>
		<string>ct_snmp:register_users(&lt;#MgrAgentConfName#&gt;, &lt;#Users#&gt;)</string>
		<string>ct_snmp:register_users(MgrAgentConfName, Users) -&gt; ok | {error, Reason}</string>
		<string>ct_snmp:register_usm_users</string>
		<string>ct_snmp:register_usm_users(&lt;#MgrAgentConfName#&gt;, &lt;#UsmUsers#&gt;)</string>
		<string>ct_snmp:register_usm_users(MgrAgentConfName, UsmUsers) -&gt; ok | {error, Reason}</string>
		<string>ct_snmp:set_info</string>
		<string>ct_snmp:set_info(&lt;#Config#&gt;)</string>
		<string>ct_snmp:set_info(Config) -&gt; [{Agent, OldVarsAndVals, NewVarsAndVals}]</string>
		<string>ct_snmp:set_values</string>
		<string>ct_snmp:set_values(&lt;#Agent#&gt;, &lt;#VarsAndVals#&gt;, &lt;#MgrAgentConfName#&gt;, &lt;#Config#&gt;)</string>
		<string>ct_snmp:set_values(Agent, VarsAndVals, MgrAgentConfName, Config) -&gt; SnmpReply</string>
		<string>ct_snmp:start</string>
		<string>ct_snmp:start(&lt;#Config#&gt;, &lt;#MgrAgentConfName#&gt;)</string>
		<string>ct_snmp:start(Config, MgrAgentConfName) -&gt; ok</string>
		<string>ct_snmp:start</string>
		<string>ct_snmp:start(&lt;#Config#&gt;, &lt;#MgrAgentConfName#&gt;, &lt;#SnmpAppConfName#&gt;)</string>
		<string>ct_snmp:start(Config, MgrAgentConfName, SnmpAppConfName) -&gt; ok</string>
		<string>ct_snmp:stop</string>
		<string>ct_snmp:stop(&lt;#Config#&gt;)</string>
		<string>ct_snmp:stop(Config) -&gt; ok</string>
		<string>ct_snmp:unload_mibs</string>
		<string>ct_snmp:unload_mibs(&lt;#Mibs#&gt;)</string>
		<string>ct_snmp:unload_mibs(Mibs) -&gt; ok | {error, Reason}</string>
		<string>ct_snmp:unregister_agents</string>
		<string>ct_snmp:unregister_agents(&lt;#MgrAgentConfName#&gt;)</string>
		<string>ct_snmp:unregister_agents(MgrAgentConfName) -&gt; ok</string>
		<string>ct_snmp:unregister_agents</string>
		<string>ct_snmp:unregister_agents(&lt;#MgrAgentConfName#&gt;, &lt;#ManagedAgents#&gt;)</string>
		<string>ct_snmp:unregister_agents(MgrAgentConfName, ManagedAgents) -&gt; ok</string>
		<string>ct_snmp:unregister_users</string>
		<string>ct_snmp:unregister_users(&lt;#MgrAgentConfName#&gt;)</string>
		<string>ct_snmp:unregister_users(MgrAgentConfName) -&gt; ok</string>
		<string>ct_snmp:unregister_users</string>
		<string>ct_snmp:unregister_users(&lt;#MgrAgentConfName#&gt;, &lt;#Users#&gt;)</string>
		<string>ct_snmp:unregister_users(MgrAgentConfName, Users) -&gt; ok</string>
		<string>ct_snmp:unregister_usm_users</string>
		<string>ct_snmp:unregister_usm_users(&lt;#MgrAgentConfName#&gt;)</string>
		<string>ct_snmp:unregister_usm_users(MgrAgentConfName) -&gt; ok</string>
		<string>ct_snmp:unregister_usm_users</string>
		<string>ct_snmp:unregister_usm_users(&lt;#MgrAgentConfName#&gt;, &lt;#UsmUsers#&gt;)</string>
		<string>ct_snmp:unregister_usm_users(MgrAgentConfName, UsmUsers) -&gt; ok</string>
		<string>ct_ssh:apread</string>
		<string>ct_ssh:apread(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Length#&gt;)</string>
		<string>ct_ssh:apread(SSH, Handle, Position, Length) -&gt; Result</string>
		<string>ct_ssh:apread</string>
		<string>ct_ssh:apread(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Length#&gt;)</string>
		<string>ct_ssh:apread(SSH, Server, Handle, Position, Length) -&gt; Result</string>
		<string>ct_ssh:apwrite</string>
		<string>ct_ssh:apwrite(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:apwrite(SSH, Handle, Position, Data) -&gt; Result</string>
		<string>ct_ssh:apwrite</string>
		<string>ct_ssh:apwrite(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:apwrite(SSH, Server, Handle, Position, Data) -&gt; Result</string>
		<string>ct_ssh:aread</string>
		<string>ct_ssh:aread(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Len#&gt;)</string>
		<string>ct_ssh:aread(SSH, Handle, Len) -&gt; Result</string>
		<string>ct_ssh:aread</string>
		<string>ct_ssh:aread(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Len#&gt;)</string>
		<string>ct_ssh:aread(SSH, Server, Handle, Len) -&gt; Result</string>
		<string>ct_ssh:awrite</string>
		<string>ct_ssh:awrite(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:awrite(SSH, Handle, Data) -&gt; Result</string>
		<string>ct_ssh:awrite</string>
		<string>ct_ssh:awrite(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:awrite(SSH, Server, Handle, Data) -&gt; Result</string>
		<string>ct_ssh:close</string>
		<string>ct_ssh:close(&lt;#SSH#&gt;, &lt;#Handle#&gt;)</string>
		<string>ct_ssh:close(SSH, Handle) -&gt; Result</string>
		<string>ct_ssh:close</string>
		<string>ct_ssh:close(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;)</string>
		<string>ct_ssh:close(SSH, Server, Handle) -&gt; Result</string>
		<string>ct_ssh:connect</string>
		<string>ct_ssh:connect(&lt;#KeyOrName#&gt;)</string>
		<string>ct_ssh:connect(KeyOrName) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ct_ssh:connect</string>
		<string>ct_ssh:connect(&lt;#KeyOrName#&gt;, &lt;#ConnType#&gt;)</string>
		<string>ct_ssh:connect(KeyOrName, ConnType) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ct_ssh:connect</string>
		<string>ct_ssh:connect(&lt;#KeyOrName#&gt;, &lt;#ConnType#&gt;, &lt;#ExtraOpts#&gt;)</string>
		<string>ct_ssh:connect(KeyOrName, ConnType, ExtraOpts) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ct_ssh:del_dir</string>
		<string>ct_ssh:del_dir(&lt;#SSH#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:del_dir(SSH, Name) -&gt; Result</string>
		<string>ct_ssh:del_dir</string>
		<string>ct_ssh:del_dir(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:del_dir(SSH, Server, Name) -&gt; Result</string>
		<string>ct_ssh:delete</string>
		<string>ct_ssh:delete(&lt;#SSH#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:delete(SSH, Name) -&gt; Result</string>
		<string>ct_ssh:delete</string>
		<string>ct_ssh:delete(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:delete(SSH, Server, Name) -&gt; Result</string>
		<string>ct_ssh:disconnect</string>
		<string>ct_ssh:disconnect(&lt;#SSH#&gt;)</string>
		<string>ct_ssh:disconnect(SSH) -&gt; ok | {error, Reason}</string>
		<string>ct_ssh:exec</string>
		<string>ct_ssh:exec(&lt;#SSH#&gt;, &lt;#Command#&gt;)</string>
		<string>ct_ssh:exec(SSH, Command) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:exec</string>
		<string>ct_ssh:exec(&lt;#SSH#&gt;, &lt;#Command#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:exec(SSH, Command, Timeout) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:exec</string>
		<string>ct_ssh:exec(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Command#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:exec(SSH, ChannelId, Command, Timeout) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:get_file_info</string>
		<string>ct_ssh:get_file_info(&lt;#SSH#&gt;, &lt;#Handle#&gt;)</string>
		<string>ct_ssh:get_file_info(SSH, Handle) -&gt; Result</string>
		<string>ct_ssh:get_file_info</string>
		<string>ct_ssh:get_file_info(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;)</string>
		<string>ct_ssh:get_file_info(SSH, Server, Handle) -&gt; Result</string>
		<string>ct_ssh:list_dir</string>
		<string>ct_ssh:list_dir(&lt;#SSH#&gt;, &lt;#Path#&gt;)</string>
		<string>ct_ssh:list_dir(SSH, Path) -&gt; Result</string>
		<string>ct_ssh:list_dir</string>
		<string>ct_ssh:list_dir(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Path#&gt;)</string>
		<string>ct_ssh:list_dir(SSH, Server, Path) -&gt; Result</string>
		<string>ct_ssh:make_dir</string>
		<string>ct_ssh:make_dir(&lt;#SSH#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:make_dir(SSH, Name) -&gt; Result</string>
		<string>ct_ssh:make_dir</string>
		<string>ct_ssh:make_dir(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:make_dir(SSH, Server, Name) -&gt; Result</string>
		<string>ct_ssh:make_symlink</string>
		<string>ct_ssh:make_symlink(&lt;#SSH#&gt;, &lt;#Name#&gt;, &lt;#Target#&gt;)</string>
		<string>ct_ssh:make_symlink(SSH, Name, Target) -&gt; Result</string>
		<string>ct_ssh:make_symlink</string>
		<string>ct_ssh:make_symlink(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Name#&gt;, &lt;#Target#&gt;)</string>
		<string>ct_ssh:make_symlink(SSH, Server, Name, Target) -&gt; Result</string>
		<string>ct_ssh:open</string>
		<string>ct_ssh:open(&lt;#SSH#&gt;, &lt;#File#&gt;, &lt;#Mode#&gt;)</string>
		<string>ct_ssh:open(SSH, File, Mode) -&gt; Result</string>
		<string>ct_ssh:open</string>
		<string>ct_ssh:open(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#File#&gt;, &lt;#Mode#&gt;)</string>
		<string>ct_ssh:open(SSH, Server, File, Mode) -&gt; Result</string>
		<string>ct_ssh:opendir</string>
		<string>ct_ssh:opendir(&lt;#SSH#&gt;, &lt;#Path#&gt;)</string>
		<string>ct_ssh:opendir(SSH, Path) -&gt; Result</string>
		<string>ct_ssh:opendir</string>
		<string>ct_ssh:opendir(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Path#&gt;)</string>
		<string>ct_ssh:opendir(SSH, Server, Path) -&gt; Result</string>
		<string>ct_ssh:position</string>
		<string>ct_ssh:position(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Location#&gt;)</string>
		<string>ct_ssh:position(SSH, Handle, Location) -&gt; Result</string>
		<string>ct_ssh:position</string>
		<string>ct_ssh:position(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Location#&gt;)</string>
		<string>ct_ssh:position(SSH, Server, Handle, Location) -&gt; Result</string>
		<string>ct_ssh:pread</string>
		<string>ct_ssh:pread(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Length#&gt;)</string>
		<string>ct_ssh:pread(SSH, Handle, Position, Length) -&gt; Result</string>
		<string>ct_ssh:pread</string>
		<string>ct_ssh:pread(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Length#&gt;)</string>
		<string>ct_ssh:pread(SSH, Server, Handle, Position, Length) -&gt; Result</string>
		<string>ct_ssh:pwrite</string>
		<string>ct_ssh:pwrite(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:pwrite(SSH, Handle, Position, Data) -&gt; Result</string>
		<string>ct_ssh:pwrite</string>
		<string>ct_ssh:pwrite(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:pwrite(SSH, Server, Handle, Position, Data) -&gt; Result</string>
		<string>ct_ssh:read</string>
		<string>ct_ssh:read(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Len#&gt;)</string>
		<string>ct_ssh:read(SSH, Handle, Len) -&gt; Result</string>
		<string>ct_ssh:read</string>
		<string>ct_ssh:read(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Len#&gt;)</string>
		<string>ct_ssh:read(SSH, Server, Handle, Len) -&gt; Result</string>
		<string>ct_ssh:read_file</string>
		<string>ct_ssh:read_file(&lt;#SSH#&gt;, &lt;#File#&gt;)</string>
		<string>ct_ssh:read_file(SSH, File) -&gt; Result</string>
		<string>ct_ssh:read_file</string>
		<string>ct_ssh:read_file(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#File#&gt;)</string>
		<string>ct_ssh:read_file(SSH, Server, File) -&gt; Result</string>
		<string>ct_ssh:read_file_info</string>
		<string>ct_ssh:read_file_info(&lt;#SSH#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:read_file_info(SSH, Name) -&gt; Result</string>
		<string>ct_ssh:read_file_info</string>
		<string>ct_ssh:read_file_info(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:read_file_info(SSH, Server, Name) -&gt; Result</string>
		<string>ct_ssh:read_link</string>
		<string>ct_ssh:read_link(&lt;#SSH#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:read_link(SSH, Name) -&gt; Result</string>
		<string>ct_ssh:read_link</string>
		<string>ct_ssh:read_link(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:read_link(SSH, Server, Name) -&gt; Result</string>
		<string>ct_ssh:read_link_info</string>
		<string>ct_ssh:read_link_info(&lt;#SSH#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:read_link_info(SSH, Name) -&gt; Result</string>
		<string>ct_ssh:read_link_info</string>
		<string>ct_ssh:read_link_info(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Name#&gt;)</string>
		<string>ct_ssh:read_link_info(SSH, Server, Name) -&gt; Result</string>
		<string>ct_ssh:receive_response</string>
		<string>ct_ssh:receive_response(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;)</string>
		<string>ct_ssh:receive_response(SSH, ChannelId) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:receive_response</string>
		<string>ct_ssh:receive_response(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#End#&gt;)</string>
		<string>ct_ssh:receive_response(SSH, ChannelId, End) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:receive_response</string>
		<string>ct_ssh:receive_response(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#End#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:receive_response(SSH, ChannelId, End, Timeout) -&gt; {ok, Data} | {timeout, Data} | {error, Reason}</string>
		<string>ct_ssh:rename</string>
		<string>ct_ssh:rename(&lt;#SSH#&gt;, &lt;#OldName#&gt;, &lt;#NewName#&gt;)</string>
		<string>ct_ssh:rename(SSH, OldName, NewName) -&gt; Result</string>
		<string>ct_ssh:rename</string>
		<string>ct_ssh:rename(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#OldName#&gt;, &lt;#NewName#&gt;)</string>
		<string>ct_ssh:rename(SSH, Server, OldName, NewName) -&gt; Result</string>
		<string>ct_ssh:send</string>
		<string>ct_ssh:send(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:send(SSH, ChannelId, Data) -&gt; ok | {error, Reason}</string>
		<string>ct_ssh:send</string>
		<string>ct_ssh:send(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Data#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:send(SSH, ChannelId, Data, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ct_ssh:send</string>
		<string>ct_ssh:send(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Type#&gt;, &lt;#Data#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:send(SSH, ChannelId, Type, Data, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ct_ssh:send_and_receive</string>
		<string>ct_ssh:send_and_receive(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:send_and_receive(SSH, ChannelId, Data) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:send_and_receive</string>
		<string>ct_ssh:send_and_receive(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Data#&gt;, &lt;#End#&gt;)</string>
		<string>ct_ssh:send_and_receive(SSH, ChannelId, Data, End) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:send_and_receive</string>
		<string>ct_ssh:send_and_receive(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Data#&gt;, &lt;#End#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:send_and_receive(SSH, ChannelId, Data, End, Timeout) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:send_and_receive</string>
		<string>ct_ssh:send_and_receive(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Type#&gt;, &lt;#Data#&gt;, &lt;#End#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:send_and_receive(SSH, ChannelId, Type, Data, End, Timeout) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_ssh:session_close</string>
		<string>ct_ssh:session_close(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;)</string>
		<string>ct_ssh:session_close(SSH, ChannelId) -&gt; ok | {error, Reason}</string>
		<string>ct_ssh:session_open</string>
		<string>ct_ssh:session_open(&lt;#SSH#&gt;)</string>
		<string>ct_ssh:session_open(SSH) -&gt; {ok, ChannelId} | {error, Reason}</string>
		<string>ct_ssh:session_open</string>
		<string>ct_ssh:session_open(&lt;#SSH#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:session_open(SSH, Timeout) -&gt; {ok, ChannelId} | {error, Reason}</string>
		<string>ct_ssh:sftp_connect</string>
		<string>ct_ssh:sftp_connect(&lt;#SSH#&gt;)</string>
		<string>ct_ssh:sftp_connect(SSH) -&gt; {ok, Server} | {error, Reason}</string>
		<string>ct_ssh:subsystem</string>
		<string>ct_ssh:subsystem(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Subsystem#&gt;)</string>
		<string>ct_ssh:subsystem(SSH, ChannelId, Subsystem) -&gt; Status | {error, Reason}</string>
		<string>ct_ssh:subsystem</string>
		<string>ct_ssh:subsystem(&lt;#SSH#&gt;, &lt;#ChannelId#&gt;, &lt;#Subsystem#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_ssh:subsystem(SSH, ChannelId, Subsystem, Timeout) -&gt; Status | {error, Reason}</string>
		<string>ct_ssh:write</string>
		<string>ct_ssh:write(&lt;#SSH#&gt;, &lt;#Handle#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:write(SSH, Handle, Data) -&gt; Result</string>
		<string>ct_ssh:write</string>
		<string>ct_ssh:write(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Handle#&gt;, &lt;#Data#&gt;)</string>
		<string>ct_ssh:write(SSH, Server, Handle, Data) -&gt; Result</string>
		<string>ct_ssh:write_file</string>
		<string>ct_ssh:write_file(&lt;#SSH#&gt;, &lt;#File#&gt;, &lt;#Iolist#&gt;)</string>
		<string>ct_ssh:write_file(SSH, File, Iolist) -&gt; Result</string>
		<string>ct_ssh:write_file</string>
		<string>ct_ssh:write_file(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#File#&gt;, &lt;#Iolist#&gt;)</string>
		<string>ct_ssh:write_file(SSH, Server, File, Iolist) -&gt; Result</string>
		<string>ct_ssh:write_file_info</string>
		<string>ct_ssh:write_file_info(&lt;#SSH#&gt;, &lt;#Name#&gt;, &lt;#Info#&gt;)</string>
		<string>ct_ssh:write_file_info(SSH, Name, Info) -&gt; Result</string>
		<string>ct_ssh:write_file_info</string>
		<string>ct_ssh:write_file_info(&lt;#SSH#&gt;, &lt;#Server#&gt;, &lt;#Name#&gt;, &lt;#Info#&gt;)</string>
		<string>ct_ssh:write_file_info(SSH, Server, Name, Info) -&gt; Result</string>
		<string>ct_telnet:close</string>
		<string>ct_telnet:close(&lt;#Connection#&gt;)</string>
		<string>ct_telnet:close(Connection) -&gt; ok | {error, Reason}</string>
		<string>ct_telnet:cmd</string>
		<string>ct_telnet:cmd(&lt;#Connection#&gt;, &lt;#Cmd#&gt;)</string>
		<string>ct_telnet:cmd(Connection, Cmd) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_telnet:cmd</string>
		<string>ct_telnet:cmd(&lt;#Connection#&gt;, &lt;#Cmd#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_telnet:cmd(Connection, Cmd, Timeout) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_telnet:cmdf</string>
		<string>ct_telnet:cmdf(&lt;#Connection#&gt;, &lt;#CmdFormat#&gt;, &lt;#Args#&gt;)</string>
		<string>ct_telnet:cmdf(Connection, CmdFormat, Args) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_telnet:cmdf</string>
		<string>ct_telnet:cmdf(&lt;#Connection#&gt;, &lt;#CmdFormat#&gt;, &lt;#Args#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ct_telnet:cmdf(Connection, CmdFormat, Args, Timeout) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_telnet:expect</string>
		<string>ct_telnet:expect(&lt;#Connection#&gt;, &lt;#Patterns#&gt;)</string>
		<string>ct_telnet:expect(Connection, Patterns) -&gt; term()</string>
		<string>ct_telnet:expect</string>
		<string>ct_telnet:expect(&lt;#Connection#&gt;, &lt;#Patterns#&gt;, &lt;#Opts#&gt;)</string>
		<string>ct_telnet:expect(Connection, Patterns, Opts) -&gt; {ok, Match} | {ok, MatchList, HaltReason} | {error, Reason}</string>
		<string>ct_telnet:format_data</string>
		<string>ct_telnet:format_data(&lt;#How#&gt;, &lt;#X2#&gt;)</string>
		<string>ct_telnet:format_data(How, X2) -&gt; term()</string>
		<string>ct_telnet:get_data</string>
		<string>ct_telnet:get_data(&lt;#Connection#&gt;)</string>
		<string>ct_telnet:get_data(Connection) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ct_telnet:open</string>
		<string>ct_telnet:open(&lt;#Name#&gt;)</string>
		<string>ct_telnet:open(Name) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ct_telnet:open</string>
		<string>ct_telnet:open(&lt;#Name#&gt;, &lt;#ConnType#&gt;)</string>
		<string>ct_telnet:open(Name, ConnType) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ct_telnet:open</string>
		<string>ct_telnet:open(&lt;#KeyOrName#&gt;, &lt;#ConnType#&gt;, &lt;#TargetMod#&gt;)</string>
		<string>ct_telnet:open(KeyOrName, ConnType, TargetMod) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ct_telnet:open</string>
		<string>ct_telnet:open(&lt;#KeyOrName#&gt;, &lt;#ConnType#&gt;, &lt;#TargetMod#&gt;, &lt;#Extra#&gt;)</string>
		<string>ct_telnet:open(KeyOrName, ConnType, TargetMod, Extra) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ct_telnet:send</string>
		<string>ct_telnet:send(&lt;#Connection#&gt;, &lt;#Cmd#&gt;)</string>
		<string>ct_telnet:send(Connection, Cmd) -&gt; ok | {error, Reason}</string>
		<string>ct_telnet:sendf</string>
		<string>ct_telnet:sendf(&lt;#Connection#&gt;, &lt;#CmdFormat#&gt;, &lt;#Args#&gt;)</string>
		<string>ct_telnet:sendf(Connection, CmdFormat, Args) -&gt; ok | {error, Reason}</string>
		<string>debugger:start</string>
		<string>debugger:start()</string>
		<string>debugger:start()</string>
		<string>debugger:start</string>
		<string>debugger:start(&lt;#File#&gt;)</string>
		<string>debugger:start(File)</string>
		<string>debugger:start</string>
		<string>debugger:start(&lt;#Mode#&gt;)</string>
		<string>debugger:start(Mode)</string>
		<string>debugger:start</string>
		<string>debugger:start(&lt;#Mode#&gt;, &lt;#File#&gt;)</string>
		<string>debugger:start(Mode, File)</string>
		<string>debugger:quick</string>
		<string>debugger:quick(&lt;#Module#&gt;, &lt;#Name#&gt;, &lt;#Args#&gt;)</string>
		<string>debugger:quick(Module, Name, Args)</string>
		<string>dets:all</string>
		<string>dets:all()</string>
		<string>dets:all() -&gt; [tab_name()]</string>
		<string>dets:bchunk</string>
		<string>dets:bchunk(&lt;#Name#&gt;, &lt;#Continuation#&gt;)</string>
		<string>dets:bchunk(Name, Continuation) -&gt; {Continuation2, Data} | '$end_of_table' | {error, Reason}</string>
		<string>dets:close</string>
		<string>dets:close(&lt;#Name#&gt;)</string>
		<string>dets:close(Name) -&gt; ok | {error, Reason}</string>
		<string>dets:delete</string>
		<string>dets:delete(&lt;#Name#&gt;, &lt;#Key#&gt;)</string>
		<string>dets:delete(Name, Key) -&gt; ok | {error, Reason}</string>
		<string>dets:delete_all_objects</string>
		<string>dets:delete_all_objects(&lt;#Name#&gt;)</string>
		<string>dets:delete_all_objects(Name) -&gt; ok | {error, Reason}</string>
		<string>dets:delete_object</string>
		<string>dets:delete_object(&lt;#Name#&gt;, &lt;#Object#&gt;)</string>
		<string>dets:delete_object(Name, Object) -&gt; ok | {error, Reason}</string>
		<string>dets:first</string>
		<string>dets:first(&lt;#Name#&gt;)</string>
		<string>dets:first(Name) -&gt; Key | '$end_of_table'</string>
		<string>dets:foldl</string>
		<string>dets:foldl(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#Name#&gt;)</string>
		<string>dets:foldl(Function, Acc0, Name) -&gt; Acc | {error, Reason}</string>
		<string>dets:foldr</string>
		<string>dets:foldr(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#Name#&gt;)</string>
		<string>dets:foldr(Function, Acc0, Name) -&gt; Acc | {error, Reason}</string>
		<string>dets:from_ets</string>
		<string>dets:from_ets(&lt;#Name#&gt;, &lt;#EtsTab#&gt;)</string>
		<string>dets:from_ets(Name, EtsTab) -&gt; ok | {error, Reason}</string>
		<string>dets:info</string>
		<string>dets:info(&lt;#Name#&gt;)</string>
		<string>dets:info(Name) -&gt; InfoList | undefined</string>
		<string>dets:info</string>
		<string>dets:info(&lt;#Name#&gt;, &lt;#Item#&gt;)</string>
		<string>dets:info(Name, Item) -&gt; Value | undefined</string>
		<string>dets:init_table</string>
		<string>dets:init_table(&lt;#Name#&gt;, &lt;#InitFun#&gt;)</string>
		<string>dets:init_table(Name, InitFun) -&gt; ok | {error, Reason}</string>
		<string>dets:init_table</string>
		<string>dets:init_table(&lt;#Name#&gt;, &lt;#InitFun#&gt;, &lt;#Options#&gt;)</string>
		<string>dets:init_table(Name, InitFun, Options) -&gt; ok | {error, Reason}</string>
		<string>dets:insert</string>
		<string>dets:insert(&lt;#Name#&gt;, &lt;#Objects#&gt;)</string>
		<string>dets:insert(Name, Objects) -&gt; ok | {error, Reason}</string>
		<string>dets:insert_new</string>
		<string>dets:insert_new(&lt;#Name#&gt;, &lt;#Objects#&gt;)</string>
		<string>dets:insert_new(Name, Objects) -&gt; boolean() | {error, Reason}</string>
		<string>dets:is_compatible_bchunk_format</string>
		<string>dets:is_compatible_bchunk_format(&lt;#Name#&gt;, &lt;#BchunkFormat#&gt;)</string>
		<string>dets:is_compatible_bchunk_format(Name, BchunkFormat) -&gt; boolean()</string>
		<string>dets:is_dets_file</string>
		<string>dets:is_dets_file(&lt;#Filename#&gt;)</string>
		<string>dets:is_dets_file(Filename) -&gt; boolean() | {error, Reason}</string>
		<string>dets:lookup</string>
		<string>dets:lookup(&lt;#Name#&gt;, &lt;#Key#&gt;)</string>
		<string>dets:lookup(Name, Key) -&gt; Objects | {error, Reason}</string>
		<string>dets:match</string>
		<string>dets:match(&lt;#Continuation#&gt;)</string>
		<string>dets:match(Continuation) -&gt; {[Match], Continuation2} | '$end_of_table' | {error, Reason}</string>
		<string>dets:match</string>
		<string>dets:match(&lt;#Name#&gt;, &lt;#Pattern#&gt;)</string>
		<string>dets:match(Name, Pattern) -&gt; [Match] | {error, Reason}</string>
		<string>dets:match</string>
		<string>dets:match(&lt;#Name#&gt;, &lt;#Pattern#&gt;, &lt;#N#&gt;)</string>
		<string>dets:match(Name, Pattern, N) -&gt; {[Match], Continuation} | '$end_of_table' | {error, Reason}</string>
		<string>dets:match_delete</string>
		<string>dets:match_delete(&lt;#Name#&gt;, &lt;#Pattern#&gt;)</string>
		<string>dets:match_delete(Name, Pattern) -&gt; ok | {error, Reason}</string>
		<string>dets:match_object</string>
		<string>dets:match_object(&lt;#Continuation#&gt;)</string>
		<string>dets:match_object(Continuation) -&gt; {Objects, Continuation2} | '$end_of_table' | {error, Reason}</string>
		<string>dets:match_object</string>
		<string>dets:match_object(&lt;#Name#&gt;, &lt;#Pattern#&gt;)</string>
		<string>dets:match_object(Name, Pattern) -&gt; Objects | {error, Reason}</string>
		<string>dets:match_object</string>
		<string>dets:match_object(&lt;#Name#&gt;, &lt;#Pattern#&gt;, &lt;#N#&gt;)</string>
		<string>dets:match_object(Name, Pattern, N) -&gt; {Objects, Continuation} | '$end_of_table' | {error, Reason}</string>
		<string>dets:member</string>
		<string>dets:member(&lt;#Name#&gt;, &lt;#Key#&gt;)</string>
		<string>dets:member(Name, Key) -&gt; boolean() | {error, Reason}</string>
		<string>dets:next</string>
		<string>dets:next(&lt;#Name#&gt;, &lt;#Key1#&gt;)</string>
		<string>dets:next(Name, Key1) -&gt; Key2 | '$end_of_table'</string>
		<string>dets:open_file</string>
		<string>dets:open_file(&lt;#Filename#&gt;)</string>
		<string>dets:open_file(Filename) -&gt; {ok, Reference} | {error, Reason}</string>
		<string>dets:open_file</string>
		<string>dets:open_file(&lt;#Name#&gt;, &lt;#Args#&gt;)</string>
		<string>dets:open_file(Name, Args) -&gt; {ok, Name} | {error, Reason}</string>
		<string>dets:pid2name</string>
		<string>dets:pid2name(&lt;#Pid#&gt;)</string>
		<string>dets:pid2name(Pid) -&gt; {ok, Name} | undefined</string>
		<string>dets:repair_continuation</string>
		<string>dets:repair_continuation(&lt;#Continuation#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>dets:repair_continuation(Continuation, MatchSpec) -&gt; Continuation2</string>
		<string>dets:safe_fixtable</string>
		<string>dets:safe_fixtable(&lt;#Name#&gt;, &lt;#Fix#&gt;)</string>
		<string>dets:safe_fixtable(Name, Fix) -&gt; ok</string>
		<string>dets:select</string>
		<string>dets:select(&lt;#Continuation#&gt;)</string>
		<string>dets:select(Continuation) -&gt; {Selection, Continuation2} | '$end_of_table' | {error, Reason}</string>
		<string>dets:select</string>
		<string>dets:select(&lt;#Name#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>dets:select(Name, MatchSpec) -&gt; Selection | {error, Reason}</string>
		<string>dets:select</string>
		<string>dets:select(&lt;#Name#&gt;, &lt;#MatchSpec#&gt;, &lt;#N#&gt;)</string>
		<string>dets:select(Name, MatchSpec, N) -&gt; {Selection, Continuation} | '$end_of_table' | {error, Reason}</string>
		<string>dets:select_delete</string>
		<string>dets:select_delete(&lt;#Name#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>dets:select_delete(Name, MatchSpec) -&gt; N | {error, Reason}</string>
		<string>dets:slot</string>
		<string>dets:slot(&lt;#Name#&gt;, &lt;#I#&gt;)</string>
		<string>dets:slot(Name, I) -&gt; '$end_of_table' | Objects | {error, Reason}</string>
		<string>dets:sync</string>
		<string>dets:sync(&lt;#Name#&gt;)</string>
		<string>dets:sync(Name) -&gt; ok | {error, Reason}</string>
		<string>dets:table</string>
		<string>dets:table(&lt;#Name#&gt;)</string>
		<string>dets:table(Name) -&gt; QueryHandle</string>
		<string>dets:table</string>
		<string>dets:table(&lt;#Name#&gt;, &lt;#Options#&gt;)</string>
		<string>dets:table(Name, Options) -&gt; QueryHandle</string>
		<string>dets:to_ets</string>
		<string>dets:to_ets(&lt;#Name#&gt;, &lt;#EtsTab#&gt;)</string>
		<string>dets:to_ets(Name, EtsTab) -&gt; EtsTab | {error, Reason}</string>
		<string>dets:traverse</string>
		<string>dets:traverse(&lt;#Name#&gt;, &lt;#Fun#&gt;)</string>
		<string>dets:traverse(Name, Fun) -&gt; Return | {error, Reason}</string>
		<string>dets:update_counter</string>
		<string>dets:update_counter(&lt;#Name#&gt;, &lt;#Key#&gt;, &lt;#Increment#&gt;)</string>
		<string>dets:update_counter(Name, Key, Increment) -&gt; Result</string>
		<string>dialyzer:gui</string>
		<string>dialyzer:gui()</string>
		<string>dialyzer:gui() -&gt; ok | {error, Msg}</string>
		<string>dialyzer:gui</string>
		<string>dialyzer:gui(&lt;#OptList#&gt;)</string>
		<string>dialyzer:gui(OptList) -&gt; ok | {error, Msg}</string>
		<string>dialyzer:run</string>
		<string>dialyzer:run(&lt;#OptList#&gt;)</string>
		<string>dialyzer:run(OptList) -&gt; Warnings</string>
		<string>dialyzer:format_warning</string>
		<string>dialyzer:format_warning(&lt;#Msg#&gt;)</string>
		<string>dialyzer:format_warning(Msg) -&gt; string()</string>
		<string>dialyzer:plt_info</string>
		<string>dialyzer:plt_info(&lt;#string()#&gt;)</string>
		<string>dialyzer:plt_info(string()) -&gt; {'ok', [{atom(), any()}]} | {'error', atom()}</string>
		<string>diameter:add_transport</string>
		<string>diameter:add_transport(&lt;#SvcName#&gt;, &lt;#{connect | listen#&gt;, &lt;#[Opt]}#&gt;)</string>
		<string>diameter:add_transport(SvcName, {connect | listen, [Opt]}) -&gt; {ok, Ref} | {error, Reason}</string>
		<string>diameter:call</string>
		<string>diameter:call(&lt;#SvcName#&gt;, &lt;#App#&gt;, &lt;#Request#&gt;, &lt;#[Opt]#&gt;)</string>
		<string>diameter:call(SvcName, App, Request, [Opt]) -&gt; Answer | ok | {error, Reason}</string>
		<string>diameter:origin_state_id</string>
		<string>diameter:origin_state_id()</string>
		<string>diameter:origin_state_id() -&gt; Unsigned32()</string>
		<string>diameter:remove_transport</string>
		<string>diameter:remove_transport(&lt;#SvcName#&gt;, &lt;#Pred#&gt;)</string>
		<string>diameter:remove_transport(SvcName, Pred) -&gt; ok | {error, Reason}</string>
		<string>diameter:service_info</string>
		<string>diameter:service_info(&lt;#SvcName#&gt;, &lt;#Info#&gt;)</string>
		<string>diameter:service_info(SvcName, Info) -&gt; term()</string>
		<string>diameter:services</string>
		<string>diameter:services()</string>
		<string>diameter:services() -&gt; [SvcName]</string>
		<string>diameter:session_id</string>
		<string>diameter:session_id(&lt;#Ident#&gt;)</string>
		<string>diameter:session_id(Ident) -&gt; OctetString()</string>
		<string>diameter:start</string>
		<string>diameter:start()</string>
		<string>diameter:start() -&gt; ok | {error, Reason}</string>
		<string>diameter:start_service</string>
		<string>diameter:start_service(&lt;#SvcName#&gt;, &lt;#Options#&gt;)</string>
		<string>diameter:start_service(SvcName, Options) -&gt; ok | {error, Reason}</string>
		<string>diameter:stop</string>
		<string>diameter:stop()</string>
		<string>diameter:stop() -&gt; ok | {error, Reason}</string>
		<string>diameter:stop_service</string>
		<string>diameter:stop_service(&lt;#SvcName#&gt;)</string>
		<string>diameter:stop_service(SvcName) -&gt; ok | {error, Reason}</string>
		<string>diameter:subscribe</string>
		<string>diameter:subscribe(&lt;#SvcName#&gt;)</string>
		<string>diameter:subscribe(SvcName) -&gt; true</string>
		<string>diameter:unsubscribe</string>
		<string>diameter:unsubscribe(&lt;#SvcName#&gt;)</string>
		<string>diameter:unsubscribe(SvcName) -&gt; true</string>
		<string>diameter_app:Mod:peer_up</string>
		<string>diameter_app:Mod:peer_up(&lt;#SvcName#&gt;, &lt;#Peer#&gt;, &lt;#State#&gt;)</string>
		<string>diameter_app:Mod:peer_up(SvcName, Peer, State) -&gt; NewState</string>
		<string>diameter_app:Mod:peer_down</string>
		<string>diameter_app:Mod:peer_down(&lt;#SvcName#&gt;, &lt;#Peer#&gt;, &lt;#State#&gt;)</string>
		<string>diameter_app:Mod:peer_down(SvcName, Peer, State) -&gt; NewState</string>
		<string>diameter_app:Mod:pick_peer</string>
		<string>diameter_app:Mod:pick_peer(&lt;#LocalCandidates#&gt;, &lt;#RemoteCandidates#&gt;, &lt;#SvcName#&gt;, &lt;#State#&gt;)</string>
		<string>diameter_app:Mod:pick_peer(LocalCandidates, RemoteCandidates, SvcName, State) -&gt; Selection | false</string>
		<string>diameter_app:Mod:prepare_request</string>
		<string>diameter_app:Mod:prepare_request(&lt;#Packet#&gt;, &lt;#SvcName#&gt;, &lt;#Peer#&gt;)</string>
		<string>diameter_app:Mod:prepare_request(Packet, SvcName, Peer) -&gt; Action</string>
		<string>diameter_app:Mod:prepare_retransmit</string>
		<string>diameter_app:Mod:prepare_retransmit(&lt;#Packet#&gt;, &lt;#SvcName#&gt;, &lt;#Peer#&gt;)</string>
		<string>diameter_app:Mod:prepare_retransmit(Packet, SvcName, Peer) -&gt; Action</string>
		<string>diameter_app:Mod:handle_answer</string>
		<string>diameter_app:Mod:handle_answer(&lt;#Packet#&gt;, &lt;#Request#&gt;, &lt;#SvcName#&gt;, &lt;#Peer#&gt;)</string>
		<string>diameter_app:Mod:handle_answer(Packet, Request, SvcName, Peer) -&gt; Result</string>
		<string>diameter_app:Mod:handle_error</string>
		<string>diameter_app:Mod:handle_error(&lt;#Reason#&gt;, &lt;#Request#&gt;, &lt;#SvcName#&gt;, &lt;#Peer#&gt;)</string>
		<string>diameter_app:Mod:handle_error(Reason, Request, SvcName, Peer) -&gt; Result</string>
		<string>diameter_app:Mod:handle_request</string>
		<string>diameter_app:Mod:handle_request(&lt;#Packet#&gt;, &lt;#SvcName#&gt;, &lt;#Peer#&gt;)</string>
		<string>diameter_app:Mod:handle_request(Packet, SvcName, Peer) -&gt; Action</string>
		<string>diameter_codec:decode</string>
		<string>diameter_codec:decode(&lt;#Mod#&gt;, &lt;#Bin#&gt;)</string>
		<string>diameter_codec:decode(Mod, Bin) -&gt; Pkt</string>
		<string>diameter_codec:encode</string>
		<string>diameter_codec:encode(&lt;#Mod#&gt;, &lt;#Msg#&gt;)</string>
		<string>diameter_codec:encode(Mod, Msg) -&gt; Pkt</string>
		<string>diameter_make:codec</string>
		<string>diameter_make:codec(&lt;#File :: iolist() | binary()#&gt;, &lt;#[Opt]#&gt;)</string>
		<string>diameter_make:codec(File :: iolist() | binary(), [Opt]) -&gt; ok | {ok, [Out]} | {error, Reason}</string>
		<string>diameter_make:format</string>
		<string>diameter_make:format(&lt;#Parsed#&gt;)</string>
		<string>diameter_make:format(Parsed) -&gt; iolist()</string>
		<string>diameter_make:flatten</string>
		<string>diameter_make:flatten(&lt;#Parsed#&gt;)</string>
		<string>diameter_make:flatten(Parsed) -&gt; term()</string>
		<string>diameter_make:format_error</string>
		<string>diameter_make:format_error(&lt;#Reason#&gt;)</string>
		<string>diameter_make:format_error(Reason) -&gt; string()</string>
		<string>diameter_sctp:start</string>
		<string>diameter_sctp:start(&lt;#{Type#&gt;, &lt;#Ref}#&gt;, &lt;#Svc#&gt;, &lt;#[Opt]#&gt;)</string>
		<string>diameter_sctp:start({Type, Ref}, Svc, [Opt]) -&gt; {ok, Pid, [LAddr]} | {error, Reason}</string>
		<string>diameter_tcp:start</string>
		<string>diameter_tcp:start(&lt;#{Type#&gt;, &lt;#Ref}#&gt;, &lt;#Svc#&gt;, &lt;#[Opt]#&gt;)</string>
		<string>diameter_tcp:start({Type, Ref}, Svc, [Opt]) -&gt; {ok, Pid} | {ok, Pid, [LAddr]} | {error, Reason}</string>
		<string>diameter_transport:Mod:start</string>
		<string>diameter_transport:Mod:start(&lt;#{Type#&gt;, &lt;#Ref}#&gt;, &lt;#Svc#&gt;, &lt;#Config#&gt;)</string>
		<string>diameter_transport:Mod:start({Type, Ref}, Svc, Config) -&gt; {ok, Pid} | {ok, Pid, LAddrs} | {error, Reason}</string>
		<string>dict:append</string>
		<string>dict:append(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:append(Key, Value, Dict1) -&gt; Dict2</string>
		<string>dict:append_list</string>
		<string>dict:append_list(&lt;#Key#&gt;, &lt;#ValList#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:append_list(Key, ValList, Dict1) -&gt; Dict2</string>
		<string>dict:erase</string>
		<string>dict:erase(&lt;#Key#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:erase(Key, Dict1) -&gt; Dict2</string>
		<string>dict:fetch</string>
		<string>dict:fetch(&lt;#Key#&gt;, &lt;#Dict#&gt;)</string>
		<string>dict:fetch(Key, Dict) -&gt; Value</string>
		<string>dict:fetch_keys</string>
		<string>dict:fetch_keys(&lt;#Dict#&gt;)</string>
		<string>dict:fetch_keys(Dict) -&gt; Keys</string>
		<string>dict:filter</string>
		<string>dict:filter(&lt;#Pred#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:filter(Pred, Dict1) -&gt; Dict2</string>
		<string>dict:find</string>
		<string>dict:find(&lt;#Key#&gt;, &lt;#Dict#&gt;)</string>
		<string>dict:find(Key, Dict) -&gt; {ok, Value} | error</string>
		<string>dict:fold</string>
		<string>dict:fold(&lt;#Fun#&gt;, &lt;#Acc0#&gt;, &lt;#Dict#&gt;)</string>
		<string>dict:fold(Fun, Acc0, Dict) -&gt; Acc1</string>
		<string>dict:from_list</string>
		<string>dict:from_list(&lt;#List#&gt;)</string>
		<string>dict:from_list(List) -&gt; Dict</string>
		<string>dict:is_empty</string>
		<string>dict:is_empty(&lt;#Dict#&gt;)</string>
		<string>dict:is_empty(Dict) -&gt; boolean()</string>
		<string>dict:is_key</string>
		<string>dict:is_key(&lt;#Key#&gt;, &lt;#Dict#&gt;)</string>
		<string>dict:is_key(Key, Dict) -&gt; boolean()</string>
		<string>dict:map</string>
		<string>dict:map(&lt;#Fun#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:map(Fun, Dict1) -&gt; Dict2</string>
		<string>dict:merge</string>
		<string>dict:merge(&lt;#Fun#&gt;, &lt;#Dict1#&gt;, &lt;#Dict2#&gt;)</string>
		<string>dict:merge(Fun, Dict1, Dict2) -&gt; Dict3</string>
		<string>dict:new</string>
		<string>dict:new()</string>
		<string>dict:new() -&gt; dict()</string>
		<string>dict:size</string>
		<string>dict:size(&lt;#Dict#&gt;)</string>
		<string>dict:size(Dict) -&gt; integer() &gt;= 0</string>
		<string>dict:store</string>
		<string>dict:store(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:store(Key, Value, Dict1) -&gt; Dict2</string>
		<string>dict:to_list</string>
		<string>dict:to_list(&lt;#Dict#&gt;)</string>
		<string>dict:to_list(Dict) -&gt; List</string>
		<string>dict:update</string>
		<string>dict:update(&lt;#Key#&gt;, &lt;#Fun#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:update(Key, Fun, Dict1) -&gt; Dict2</string>
		<string>dict:update</string>
		<string>dict:update(&lt;#Key#&gt;, &lt;#Fun#&gt;, &lt;#Initial#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:update(Key, Fun, Initial, Dict1) -&gt; Dict2</string>
		<string>dict:update_counter</string>
		<string>dict:update_counter(&lt;#Key#&gt;, &lt;#Increment#&gt;, &lt;#Dict1#&gt;)</string>
		<string>dict:update_counter(Key, Increment, Dict1) -&gt; Dict2</string>
		<string>digraph:add_edge</string>
		<string>digraph:add_edge(&lt;#G#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>digraph:add_edge(G, V1, V2) -&gt; edge() | {error, add_edge_err_rsn()}</string>
		<string>digraph:add_edge</string>
		<string>digraph:add_edge(&lt;#G#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#Label#&gt;)</string>
		<string>digraph:add_edge(G, V1, V2, Label) -&gt; edge() | {error, add_edge_err_rsn()}</string>
		<string>digraph:add_edge</string>
		<string>digraph:add_edge(&lt;#G#&gt;, &lt;#E#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#Label#&gt;)</string>
		<string>digraph:add_edge(G, E, V1, V2, Label) -&gt; edge() | {error, add_edge_err_rsn()}</string>
		<string>digraph:add_vertex</string>
		<string>digraph:add_vertex(&lt;#G#&gt;)</string>
		<string>digraph:add_vertex(G) -&gt; vertex()</string>
		<string>digraph:add_vertex</string>
		<string>digraph:add_vertex(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:add_vertex(G, V) -&gt; vertex()</string>
		<string>digraph:add_vertex</string>
		<string>digraph:add_vertex(&lt;#G#&gt;, &lt;#V#&gt;, &lt;#Label#&gt;)</string>
		<string>digraph:add_vertex(G, V, Label) -&gt; vertex()</string>
		<string>digraph:del_edge</string>
		<string>digraph:del_edge(&lt;#G#&gt;, &lt;#E#&gt;)</string>
		<string>digraph:del_edge(G, E) -&gt; true</string>
		<string>digraph:del_edges</string>
		<string>digraph:del_edges(&lt;#G#&gt;, &lt;#Edges#&gt;)</string>
		<string>digraph:del_edges(G, Edges) -&gt; true</string>
		<string>digraph:del_path</string>
		<string>digraph:del_path(&lt;#G#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>digraph:del_path(G, V1, V2) -&gt; true</string>
		<string>digraph:del_vertex</string>
		<string>digraph:del_vertex(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:del_vertex(G, V) -&gt; true</string>
		<string>digraph:del_vertices</string>
		<string>digraph:del_vertices(&lt;#G#&gt;, &lt;#Vertices#&gt;)</string>
		<string>digraph:del_vertices(G, Vertices) -&gt; true</string>
		<string>digraph:delete</string>
		<string>digraph:delete(&lt;#G#&gt;)</string>
		<string>digraph:delete(G) -&gt; true</string>
		<string>digraph:edge</string>
		<string>digraph:edge(&lt;#G#&gt;, &lt;#E#&gt;)</string>
		<string>digraph:edge(G, E) -&gt; {E, V1, V2, Label} | false</string>
		<string>digraph:edges</string>
		<string>digraph:edges(&lt;#G#&gt;)</string>
		<string>digraph:edges(G) -&gt; Edges</string>
		<string>digraph:edges</string>
		<string>digraph:edges(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:edges(G, V) -&gt; Edges</string>
		<string>digraph:get_cycle</string>
		<string>digraph:get_cycle(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:get_cycle(G, V) -&gt; Vertices | false</string>
		<string>digraph:get_path</string>
		<string>digraph:get_path(&lt;#G#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>digraph:get_path(G, V1, V2) -&gt; Vertices | false</string>
		<string>digraph:get_short_cycle</string>
		<string>digraph:get_short_cycle(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:get_short_cycle(G, V) -&gt; Vertices | false</string>
		<string>digraph:get_short_path</string>
		<string>digraph:get_short_path(&lt;#G#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>digraph:get_short_path(G, V1, V2) -&gt; Vertices | false</string>
		<string>digraph:in_degree</string>
		<string>digraph:in_degree(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:in_degree(G, V) -&gt; integer() &gt;= 0</string>
		<string>digraph:in_edges</string>
		<string>digraph:in_edges(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:in_edges(G, V) -&gt; Edges</string>
		<string>digraph:in_neighbours</string>
		<string>digraph:in_neighbours(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:in_neighbours(G, V) -&gt; Vertex</string>
		<string>digraph:info</string>
		<string>digraph:info(&lt;#G#&gt;)</string>
		<string>digraph:info(G) -&gt; InfoList</string>
		<string>digraph:new</string>
		<string>digraph:new()</string>
		<string>digraph:new() -&gt; graph()</string>
		<string>digraph:new</string>
		<string>digraph:new(&lt;#Type#&gt;)</string>
		<string>digraph:new(Type) -&gt; graph()</string>
		<string>digraph:no_edges</string>
		<string>digraph:no_edges(&lt;#G#&gt;)</string>
		<string>digraph:no_edges(G) -&gt; integer() &gt;= 0</string>
		<string>digraph:no_vertices</string>
		<string>digraph:no_vertices(&lt;#G#&gt;)</string>
		<string>digraph:no_vertices(G) -&gt; integer() &gt;= 0</string>
		<string>digraph:out_degree</string>
		<string>digraph:out_degree(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:out_degree(G, V) -&gt; integer() &gt;= 0</string>
		<string>digraph:out_edges</string>
		<string>digraph:out_edges(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:out_edges(G, V) -&gt; Edges</string>
		<string>digraph:out_neighbours</string>
		<string>digraph:out_neighbours(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:out_neighbours(G, V) -&gt; Vertices</string>
		<string>digraph:sink_vertices</string>
		<string>digraph:sink_vertices(&lt;#G :: graph()#&gt;)</string>
		<string>digraph:sink_vertices(G :: graph()) -&gt; [vertex()]</string>
		<string>digraph:source_vertices</string>
		<string>digraph:source_vertices(&lt;#G :: graph()#&gt;)</string>
		<string>digraph:source_vertices(G :: graph()) -&gt; [vertex()]</string>
		<string>digraph:vertex</string>
		<string>digraph:vertex(&lt;#G#&gt;, &lt;#V#&gt;)</string>
		<string>digraph:vertex(G, V) -&gt; {V, Label} | false</string>
		<string>digraph:vertices</string>
		<string>digraph:vertices(&lt;#G#&gt;)</string>
		<string>digraph:vertices(G) -&gt; Vertices</string>
		<string>digraph_utils:arborescence_root</string>
		<string>digraph_utils:arborescence_root(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:arborescence_root(Digraph) -&gt; no | {yes, Root}</string>
		<string>digraph_utils:components</string>
		<string>digraph_utils:components(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:components(Digraph) -&gt; [Component]</string>
		<string>digraph_utils:condensation</string>
		<string>digraph_utils:condensation(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:condensation(Digraph) -&gt; CondensedDigraph</string>
		<string>digraph_utils:cyclic_strong_components</string>
		<string>digraph_utils:cyclic_strong_components(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:cyclic_strong_components(Digraph) -&gt; [StrongComponent]</string>
		<string>digraph_utils:is_acyclic</string>
		<string>digraph_utils:is_acyclic(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:is_acyclic(Digraph) -&gt; boolean()</string>
		<string>digraph_utils:is_arborescence</string>
		<string>digraph_utils:is_arborescence(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:is_arborescence(Digraph) -&gt; boolean()</string>
		<string>digraph_utils:is_tree</string>
		<string>digraph_utils:is_tree(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:is_tree(Digraph) -&gt; boolean()</string>
		<string>digraph_utils:loop_vertices</string>
		<string>digraph_utils:loop_vertices(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:loop_vertices(Digraph) -&gt; Vertices</string>
		<string>digraph_utils:postorder</string>
		<string>digraph_utils:postorder(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:postorder(Digraph) -&gt; Vertices</string>
		<string>digraph_utils:preorder</string>
		<string>digraph_utils:preorder(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:preorder(Digraph) -&gt; Vertices</string>
		<string>digraph_utils:reachable</string>
		<string>digraph_utils:reachable(&lt;#Vertices#&gt;, &lt;#Digraph#&gt;)</string>
		<string>digraph_utils:reachable(Vertices, Digraph) -&gt; Reachable</string>
		<string>digraph_utils:reachable_neighbours</string>
		<string>digraph_utils:reachable_neighbours(&lt;#Vertices#&gt;, &lt;#Digraph#&gt;)</string>
		<string>digraph_utils:reachable_neighbours(Vertices, Digraph) -&gt; Reachable</string>
		<string>digraph_utils:reaching</string>
		<string>digraph_utils:reaching(&lt;#Vertices#&gt;, &lt;#Digraph#&gt;)</string>
		<string>digraph_utils:reaching(Vertices, Digraph) -&gt; Reaching</string>
		<string>digraph_utils:reaching_neighbours</string>
		<string>digraph_utils:reaching_neighbours(&lt;#Vertices#&gt;, &lt;#Digraph#&gt;)</string>
		<string>digraph_utils:reaching_neighbours(Vertices, Digraph) -&gt; Reaching</string>
		<string>digraph_utils:strong_components</string>
		<string>digraph_utils:strong_components(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:strong_components(Digraph) -&gt; [StrongComponent]</string>
		<string>digraph_utils:subgraph</string>
		<string>digraph_utils:subgraph(&lt;#Digraph#&gt;, &lt;#Vertices#&gt;)</string>
		<string>digraph_utils:subgraph(Digraph, Vertices) -&gt; SubGraph</string>
		<string>digraph_utils:subgraph</string>
		<string>digraph_utils:subgraph(&lt;#Digraph#&gt;, &lt;#Vertices#&gt;, &lt;#Options#&gt;)</string>
		<string>digraph_utils:subgraph(Digraph, Vertices, Options) -&gt; SubGraph</string>
		<string>digraph_utils:topsort</string>
		<string>digraph_utils:topsort(&lt;#Digraph#&gt;)</string>
		<string>digraph_utils:topsort(Digraph) -&gt; Vertices | false</string>
		<string>disk_log:accessible_logs</string>
		<string>disk_log:accessible_logs()</string>
		<string>disk_log:accessible_logs() -&gt; {[LocalLog], [DistributedLog]}</string>
		<string>disk_log:alog</string>
		<string>disk_log:alog(&lt;#Log#&gt;, &lt;#Term#&gt;)</string>
		<string>disk_log:alog(Log, Term) -&gt; notify_ret()</string>
		<string>disk_log:alog_terms</string>
		<string>disk_log:alog_terms(&lt;#Log#&gt;, &lt;#TermList#&gt;)</string>
		<string>disk_log:alog_terms(Log, TermList) -&gt; notify_ret()</string>
		<string>disk_log:balog</string>
		<string>disk_log:balog(&lt;#Log#&gt;, &lt;#Bytes#&gt;)</string>
		<string>disk_log:balog(Log, Bytes) -&gt; notify_ret()</string>
		<string>disk_log:balog_terms</string>
		<string>disk_log:balog_terms(&lt;#Log#&gt;, &lt;#ByteList#&gt;)</string>
		<string>disk_log:balog_terms(Log, ByteList) -&gt; notify_ret()</string>
		<string>disk_log:bchunk</string>
		<string>disk_log:bchunk(&lt;#Log#&gt;, &lt;#Continuation#&gt;)</string>
		<string>disk_log:bchunk(Log, Continuation) -&gt; bchunk_ret()</string>
		<string>disk_log:bchunk</string>
		<string>disk_log:bchunk(&lt;#Log#&gt;, &lt;#Continuation#&gt;, &lt;#N#&gt;)</string>
		<string>disk_log:bchunk(Log, Continuation, N) -&gt; bchunk_ret()</string>
		<string>disk_log:block</string>
		<string>disk_log:block(&lt;#Log#&gt;)</string>
		<string>disk_log:block(Log) -&gt; ok | {error, block_error_rsn()}</string>
		<string>disk_log:block</string>
		<string>disk_log:block(&lt;#Log#&gt;, &lt;#QueueLogRecords#&gt;)</string>
		<string>disk_log:block(Log, QueueLogRecords) -&gt; ok | {error, block_error_rsn()}</string>
		<string>disk_log:blog</string>
		<string>disk_log:blog(&lt;#Log#&gt;, &lt;#Bytes#&gt;)</string>
		<string>disk_log:blog(Log, Bytes) -&gt; ok | {error, Reason :: log_error_rsn()}</string>
		<string>disk_log:blog_terms</string>
		<string>disk_log:blog_terms(&lt;#Log#&gt;, &lt;#BytesList#&gt;)</string>
		<string>disk_log:blog_terms(Log, BytesList) -&gt; ok | {error, Reason :: log_error_rsn()}</string>
		<string>disk_log:breopen</string>
		<string>disk_log:breopen(&lt;#Log#&gt;, &lt;#File#&gt;, &lt;#BHead#&gt;)</string>
		<string>disk_log:breopen(Log, File, BHead) -&gt; ok | {error, reopen_error_rsn()}</string>
		<string>disk_log:btruncate</string>
		<string>disk_log:btruncate(&lt;#Log#&gt;, &lt;#BHead#&gt;)</string>
		<string>disk_log:btruncate(Log, BHead) -&gt; ok | {error, trunc_error_rsn()}</string>
		<string>disk_log:change_header</string>
		<string>disk_log:change_header(&lt;#Log#&gt;, &lt;#Header#&gt;)</string>
		<string>disk_log:change_header(Log, Header) -&gt; ok | {error, Reason}</string>
		<string>disk_log:change_notify</string>
		<string>disk_log:change_notify(&lt;#Log#&gt;, &lt;#Owner#&gt;, &lt;#Notify#&gt;)</string>
		<string>disk_log:change_notify(Log, Owner, Notify) -&gt; ok | {error, Reason}</string>
		<string>disk_log:change_size</string>
		<string>disk_log:change_size(&lt;#Log#&gt;, &lt;#Size#&gt;)</string>
		<string>disk_log:change_size(Log, Size) -&gt; ok | {error, Reason}</string>
		<string>disk_log:chunk</string>
		<string>disk_log:chunk(&lt;#Log#&gt;, &lt;#Continuation#&gt;)</string>
		<string>disk_log:chunk(Log, Continuation) -&gt; chunk_ret()</string>
		<string>disk_log:chunk</string>
		<string>disk_log:chunk(&lt;#Log#&gt;, &lt;#Continuation#&gt;, &lt;#N#&gt;)</string>
		<string>disk_log:chunk(Log, Continuation, N) -&gt; chunk_ret()</string>
		<string>disk_log:chunk_info</string>
		<string>disk_log:chunk_info(&lt;#Continuation#&gt;)</string>
		<string>disk_log:chunk_info(Continuation) -&gt; InfoList | {error, Reason}</string>
		<string>disk_log:chunk_step</string>
		<string>disk_log:chunk_step(&lt;#Log#&gt;, &lt;#Continuation#&gt;, &lt;#Step#&gt;)</string>
		<string>disk_log:chunk_step(Log, Continuation, Step) -&gt; {ok, any()} | {error, Reason}</string>
		<string>disk_log:close</string>
		<string>disk_log:close(&lt;#Log#&gt;)</string>
		<string>disk_log:close(Log) -&gt; ok | {error, close_error_rsn()}</string>
		<string>disk_log:do_log</string>
		<string>disk_log:do_log(&lt;#Log ::#log{status = dlog_status()#&gt;, &lt;#name = undefined | dlog_name()#&gt;, &lt;#blocked_by = none | pid()#&gt;, &lt;#users = integer() &gt;= 0#&gt;, &lt;#filename = undefined | file:filename()#&gt;, &lt;#owners = [{pid()#&gt;, &lt;#boolean()}]#&gt;, &lt;#type = dlog_type()#&gt;, &lt;#format = dlog_format()#&gt;, &lt;#format_type = undefined | dlog_format_type()#&gt;, &lt;#head = any()#&gt;, &lt;#mode = undefined | dlog_mode()#&gt;, &lt;#size = any()#&gt;, &lt;#extra = undefined | #halt{fdc = undefined | #cache{fd = undefined | file:fd()#&gt;, &lt;#sz =integer() &gt;= 0#&gt;, &lt;#c = iodata()}#&gt;, &lt;#curB = undefined | integer() &gt;= 0#&gt;, &lt;#size = undefined | dlog_size()} | #handle{filename = undefined | file:filename()#&gt;, &lt;#maxB = undefined | integer() &gt;= 1#&gt;, &lt;#maxF = undefined | integer() &gt;= 1 | {integer() &gt;= 1#&gt;, &lt;#integer() &gt;= 1}#&gt;, &lt;#curB = undefined | integer() &gt;= 0#&gt;, &lt;#curF = undefined | integer()#&gt;, &lt;#cur_fdc = undefined | #cache{fd = undefined | file:fd()#&gt;, &lt;#sz =integer() &gt;= 0#&gt;, &lt;#c = iodata()}#&gt;, &lt;#cur_name = undefined | file:filename()#&gt;, &lt;#cur_cnt = undefined | integer() &gt;= 0#&gt;, &lt;#acc_cnt = undefined | integer() &gt;= 0#&gt;, &lt;#firstPos = undefined | integer() &gt;= 0#&gt;, &lt;#noFull = undefined | integer() &gt;= 0#&gt;, &lt;#accFull = undefined | integer() &gt;= 0}#&gt;, &lt;#version = undefined | integer()}#&gt;, &lt;#B :: [binary()]#&gt;)</string>
		<string>disk_log:do_log(Log ::#log{status = dlog_status(), name = undefined | dlog_name(), blocked_by = none | pid(), users = integer() &gt;= 0, filename = undefined | file:filename(), owners = [{pid(), boolean()}], type = dlog_type(), format = dlog_format(), format_type = undefined | dlog_format_type(), head = any(), mode = undefined | dlog_mode(), size = any(), extra = undefined | #halt{fdc = undefined | #cache{fd = undefined | file:fd(), sz =integer() &gt;= 0, c = iodata()}, curB = undefined | integer() &gt;= 0, size = undefined | dlog_size()} | #handle{filename = undefined | file:filename(), maxB = undefined | integer() &gt;= 1, maxF = undefined | integer() &gt;= 1 | {integer() &gt;= 1, integer() &gt;= 1}, curB = undefined | integer() &gt;= 0, curF = undefined | integer(), cur_fdc = undefined | #cache{fd = undefined | file:fd(), sz =integer() &gt;= 0, c = iodata()}, cur_name = undefined | file:filename(), cur_cnt = undefined | integer() &gt;= 0, acc_cnt = undefined | integer() &gt;= 0, firstPos = undefined | integer() &gt;= 0, noFull = undefined | integer() &gt;= 0, accFull = undefined | integer() &gt;= 0}, version = undefined | integer()}, B :: [binary()]) -&gt; integer() | {error, term(), integer()}</string>
		<string>disk_log:format_error</string>
		<string>disk_log:format_error(&lt;#Error#&gt;)</string>
		<string>disk_log:format_error(Error) -&gt; io_lib:chars()</string>
		<string>disk_log:inc_wrap_file</string>
		<string>disk_log:inc_wrap_file(&lt;#Log#&gt;)</string>
		<string>disk_log:inc_wrap_file(Log) -&gt; ok | {error, inc_wrap_error_rsn()}</string>
		<string>disk_log:info</string>
		<string>disk_log:info(&lt;#Log#&gt;)</string>
		<string>disk_log:info(Log) -&gt; InfoList | {error, no_such_log}</string>
		<string>disk_log:lclose</string>
		<string>disk_log:lclose(&lt;#Log#&gt;)</string>
		<string>disk_log:lclose(Log) -&gt; ok | {error, lclose_error_rsn()}</string>
		<string>disk_log:lclose</string>
		<string>disk_log:lclose(&lt;#Log#&gt;, &lt;#Node#&gt;)</string>
		<string>disk_log:lclose(Log, Node) -&gt; ok | {error, lclose_error_rsn()}</string>
		<string>disk_log:log</string>
		<string>disk_log:log(&lt;#Log#&gt;, &lt;#Term#&gt;)</string>
		<string>disk_log:log(Log, Term) -&gt; ok | {error, Reason :: log_error_rsn()}</string>
		<string>disk_log:log_terms</string>
		<string>disk_log:log_terms(&lt;#Log#&gt;, &lt;#TermList#&gt;)</string>
		<string>disk_log:log_terms(Log, TermList) -&gt; ok | {error, Resaon :: log_error_rsn()}</string>
		<string>disk_log:open</string>
		<string>disk_log:open(&lt;#ArgL#&gt;)</string>
		<string>disk_log:open(ArgL) -&gt; open_ret() | dist_open_ret()</string>
		<string>disk_log:pid2name</string>
		<string>disk_log:pid2name(&lt;#Pid#&gt;)</string>
		<string>disk_log:pid2name(Pid) -&gt; {ok, Log} | undefined</string>
		<string>disk_log:reopen</string>
		<string>disk_log:reopen(&lt;#Log#&gt;, &lt;#File#&gt;)</string>
		<string>disk_log:reopen(Log, File) -&gt; ok | {error, reopen_error_rsn()}</string>
		<string>disk_log:reopen</string>
		<string>disk_log:reopen(&lt;#Log#&gt;, &lt;#File#&gt;, &lt;#Head#&gt;)</string>
		<string>disk_log:reopen(Log, File, Head) -&gt; ok | {error, reopen_error_rsn()}</string>
		<string>disk_log:start</string>
		<string>disk_log:start()</string>
		<string>disk_log:start() -&gt; ok</string>
		<string>disk_log:sync</string>
		<string>disk_log:sync(&lt;#Log#&gt;)</string>
		<string>disk_log:sync(Log) -&gt; ok | {error, sync_error_rsn()}</string>
		<string>disk_log:system_terminate</string>
		<string>disk_log:system_terminate(&lt;#Reason :: term()#&gt;, &lt;#Parent :: term()#&gt;, &lt;#X3 :: term()#&gt;, &lt;#State ::#state{queue = any()#&gt;, &lt;#messages = any()#&gt;, &lt;#parent = any()#&gt;, &lt;#server = any()#&gt;, &lt;#cnt = integer() &gt;= 0#&gt;, &lt;#args = any()#&gt;, &lt;#error_status = dlog_state_error()#&gt;, &lt;#cache_error = any()}#&gt;)</string>
		<string>disk_log:system_terminate(Reason :: term(), Parent :: term(), X3 :: term(), State ::#state{queue = any(), messages = any(), parent = any(), server = any(), cnt = integer() &gt;= 0, args = any(), error_status = dlog_state_error(), cache_error = any()}) -&gt; no_return()</string>
		<string>disk_log:truncate</string>
		<string>disk_log:truncate(&lt;#Log#&gt;)</string>
		<string>disk_log:truncate(Log) -&gt; ok | {error, trunc_error_rsn()}</string>
		<string>disk_log:truncate</string>
		<string>disk_log:truncate(&lt;#Log#&gt;, &lt;#Head#&gt;)</string>
		<string>disk_log:truncate(Log, Head) -&gt; ok | {error, trunc_error_rsn()}</string>
		<string>disk_log:unblock</string>
		<string>disk_log:unblock(&lt;#Log#&gt;)</string>
		<string>disk_log:unblock(Log) -&gt; ok | {error, unblock_error_rsn()}</string>
		<string>disksup:get_disk_data</string>
		<string>disksup:get_disk_data()</string>
		<string>disksup:get_disk_data() -&gt; [DiskData]</string>
		<string>disksup:get_check_interval</string>
		<string>disksup:get_check_interval()</string>
		<string>disksup:get_check_interval() -&gt; MS</string>
		<string>disksup:set_check_interval</string>
		<string>disksup:set_check_interval(&lt;#Minutes#&gt;)</string>
		<string>disksup:set_check_interval(Minutes) -&gt; ok</string>
		<string>disksup:get_almost_full_threshold</string>
		<string>disksup:get_almost_full_threshold()</string>
		<string>disksup:get_almost_full_threshold() -&gt; Percent</string>
		<string>disksup:set_almost_full_threshold</string>
		<string>disksup:set_almost_full_threshold(&lt;#Float#&gt;)</string>
		<string>disksup:set_almost_full_threshold(Float) -&gt; ok</string>
		<string>docgen_xml_check:validate</string>
		<string>docgen_xml_check:validate(&lt;#File#&gt;)</string>
		<string>docgen_xml_check:validate(File) -&gt; ok | error | {error, badfile}</string>
		<string>dyntrace:available</string>
		<string>dyntrace:available()</string>
		<string>dyntrace:available() -&gt; true | false</string>
		<string>dyntrace:get_tag</string>
		<string>dyntrace:get_tag()</string>
		<string>dyntrace:get_tag() -&gt; binary() | undefined</string>
		<string>dyntrace:get_tag_data</string>
		<string>dyntrace:get_tag_data()</string>
		<string>dyntrace:get_tag_data() -&gt; binary() | undefined</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p()</string>
		<string>dyntrace:p() -&gt; true | false | error | badarg</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p(&lt;#I1 :: probe_arg()#&gt;)</string>
		<string>dyntrace:p(I1 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p(&lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;)</string>
		<string>dyntrace:p(I1 :: probe_arg(), I2 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p(&lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;)</string>
		<string>dyntrace:p(I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p(&lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;)</string>
		<string>dyntrace:p(I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p(&lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;, &lt;#S1 :: probe_arg()#&gt;)</string>
		<string>dyntrace:p(I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg(), S1 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p(&lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;, &lt;#S1 :: probe_arg()#&gt;, &lt;#S2 :: probe_arg()#&gt;)</string>
		<string>dyntrace:p(I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg(), S1 :: probe_arg(), S2 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p(&lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;, &lt;#S1 :: probe_arg()#&gt;, &lt;#S2 :: probe_arg()#&gt;, &lt;#S3 :: probe_arg()#&gt;)</string>
		<string>dyntrace:p(I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg(), S1 :: probe_arg(), S2 :: probe_arg(), S3 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:p</string>
		<string>dyntrace:p(&lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;, &lt;#S1 :: probe_arg()#&gt;, &lt;#S2 :: probe_arg()#&gt;, &lt;#S3 :: probe_arg()#&gt;, &lt;#S4 :: probe_arg()#&gt;)</string>
		<string>dyntrace:p(I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg(), S1 :: probe_arg(), S2 :: probe_arg(), S3 :: probe_arg(), S4 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;, &lt;#I1 :: probe_arg()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label(), I1 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;, &lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label(), I1 :: probe_arg(), I2 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;, &lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label(), I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;, &lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label(), I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;, &lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;, &lt;#S1 :: probe_arg()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label(), I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg(), S1 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;, &lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;, &lt;#S1 :: probe_arg()#&gt;, &lt;#S2 :: probe_arg()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label(), I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg(), S1 :: probe_arg(), S2 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;, &lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;, &lt;#S1 :: probe_arg()#&gt;, &lt;#S2 :: probe_arg()#&gt;, &lt;#S3 :: probe_arg()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label(), I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg(), S1 :: probe_arg(), S2 :: probe_arg(), S3 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:pn</string>
		<string>dyntrace:pn(&lt;#ProbeLabel :: n_probe_label()#&gt;, &lt;#I1 :: probe_arg()#&gt;, &lt;#I2 :: probe_arg()#&gt;, &lt;#I3 :: probe_arg()#&gt;, &lt;#I4 :: probe_arg()#&gt;, &lt;#S1 :: probe_arg()#&gt;, &lt;#S2 :: probe_arg()#&gt;, &lt;#S3 :: probe_arg()#&gt;, &lt;#S4 :: probe_arg()#&gt;)</string>
		<string>dyntrace:pn(ProbeLabel :: n_probe_label(), I1 :: probe_arg(), I2 :: probe_arg(), I3 :: probe_arg(), I4 :: probe_arg(), S1 :: probe_arg(), S2 :: probe_arg(), S3 :: probe_arg(), S4 :: probe_arg()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:put_tag</string>
		<string>dyntrace:put_tag(&lt;#Data :: undefined | iodata()#&gt;)</string>
		<string>dyntrace:put_tag(Data :: undefined | iodata()) -&gt; binary() | undefined</string>
		<string>dyntrace:restore_tag</string>
		<string>dyntrace:restore_tag(&lt;#T :: true | {integer() &gt;= 0#&gt;, &lt;#binary() | []}#&gt;)</string>
		<string>dyntrace:restore_tag(T :: true | {integer() &gt;= 0, binary() | []}) -&gt; true</string>
		<string>dyntrace:spread_tag</string>
		<string>dyntrace:spread_tag(&lt;#B :: boolean()#&gt;)</string>
		<string>dyntrace:spread_tag(B :: boolean()) -&gt; true | {integer() &gt;= 0, binary() | []}</string>
		<string>dyntrace:user_trace_i4s4</string>
		<string>dyntrace:user_trace_i4s4(&lt;#X1 :: binary() | undefined#&gt;, &lt;#X2 :: integer_maybe()#&gt;, &lt;#X3 :: integer_maybe()#&gt;, &lt;#X4 :: integer_maybe()#&gt;, &lt;#X5 :: integer_maybe()#&gt;, &lt;#X6 :: iolist_maybe()#&gt;, &lt;#X7 :: iolist_maybe()#&gt;, &lt;#X8 :: iolist_maybe()#&gt;, &lt;#X9 :: iolist_maybe()#&gt;)</string>
		<string>dyntrace:user_trace_i4s4(X1 :: binary() | undefined, X2 :: integer_maybe(), X3 :: integer_maybe(), X4 :: integer_maybe(), X5 :: integer_maybe(), X6 :: iolist_maybe(), X7 :: iolist_maybe(), X8 :: iolist_maybe(), X9 :: iolist_maybe()) -&gt; true | false | error | badarg</string>
		<string>dyntrace:user_trace_s1</string>
		<string>dyntrace:user_trace_s1(&lt;#Message :: iolist()#&gt;)</string>
		<string>dyntrace:user_trace_s1(Message :: iolist()) -&gt; true | false | error | badarg</string>
		<string>edoc:application</string>
		<string>edoc:application(&lt;#Application::atom()#&gt;)</string>
		<string>edoc:application(Application::atom()) -&gt; ok</string>
		<string>edoc:application</string>
		<string>edoc:application(&lt;#Application::atom()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:application(Application::atom(), Options::proplist()) -&gt; ok</string>
		<string>edoc:application</string>
		<string>edoc:application(&lt;#Application::atom()#&gt;, &lt;#Dir::filename()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:application(Application::atom(), Dir::filename(), Options::proplist()) -&gt; ok</string>
		<string>edoc:file</string>
		<string>edoc:file(&lt;#Name::filename()#&gt;)</string>
		<string>edoc:file(Name::filename()) -&gt; ok</string>
		<string>edoc:file</string>
		<string>edoc:file(&lt;#Name::filename()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:file(Name::filename(), Options::proplist()) -&gt; ok</string>
		<string>edoc:files</string>
		<string>edoc:files(&lt;#Files::[filename() | {package()#&gt;, &lt;#[filename()]}]#&gt;)</string>
		<string>edoc:files(Files::[filename() | {package(), [filename()]}]) -&gt; ok</string>
		<string>edoc:files</string>
		<string>edoc:files(&lt;#Files::[filename() | {package()#&gt;, &lt;#[filename()]}]#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:files(Files::[filename() | {package(), [filename()]}], Options::proplist()) -&gt; ok</string>
		<string>edoc:get_doc</string>
		<string>edoc:get_doc(&lt;#File::filename()#&gt;)</string>
		<string>edoc:get_doc(File::filename()) -&gt; {ModuleName, edoc_module()}</string>
		<string>edoc:get_doc</string>
		<string>edoc:get_doc(&lt;#File::filename()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:get_doc(File::filename(), Options::proplist()) -&gt; {ModuleName, edoc_module()}</string>
		<string>edoc:get_doc</string>
		<string>edoc:get_doc(&lt;#File::filename()#&gt;, &lt;#Env::edoc_env() (see module edoc_lib)#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:get_doc(File::filename(), Env::edoc_env() (see module edoc_lib), Options::proplist()) -&gt; {ModuleName, edoc_module()}</string>
		<string>edoc:layout</string>
		<string>edoc:layout(&lt;#Doc::edoc_module()#&gt;)</string>
		<string>edoc:layout(Doc::edoc_module()) -&gt; string()</string>
		<string>edoc:layout</string>
		<string>edoc:layout(&lt;#Doc::edoc_module()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:layout(Doc::edoc_module(), Options::proplist()) -&gt; string()</string>
		<string>edoc:packages</string>
		<string>edoc:packages(&lt;#Packages::[package()]#&gt;)</string>
		<string>edoc:packages(Packages::[package()]) -&gt; ok</string>
		<string>edoc:packages</string>
		<string>edoc:packages(&lt;#Packages::[package()]#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:packages(Packages::[package()], Options::proplist()) -&gt; ok</string>
		<string>edoc:read</string>
		<string>edoc:read(&lt;#File::filename()#&gt;)</string>
		<string>edoc:read(File::filename()) -&gt; string()</string>
		<string>edoc:read</string>
		<string>edoc:read(&lt;#File::filename()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:read(File::filename(), Options::proplist()) -&gt; string()</string>
		<string>edoc:read_comments</string>
		<string>edoc:read_comments(&lt;#File#&gt;)</string>
		<string>edoc:read_comments(File) -&gt; [comment()]</string>
		<string>edoc:read_comments</string>
		<string>edoc:read_comments(&lt;#File::filename()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:read_comments(File::filename(), Options::proplist()) -&gt; [comment()]</string>
		<string>edoc:read_source</string>
		<string>edoc:read_source(&lt;#Name::File#&gt;)</string>
		<string>edoc:read_source(Name::File) -&gt; [syntaxTree()]</string>
		<string>edoc:read_source</string>
		<string>edoc:read_source(&lt;#File::filename()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:read_source(File::filename(), Options::proplist()) -&gt; [syntaxTree()]</string>
		<string>edoc:run</string>
		<string>edoc:run(&lt;#Packages::[package()]#&gt;, &lt;#Files::[filename() | {package()#&gt;, &lt;#[filename()]}]#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc:run(Packages::[package()], Files::[filename() | {package(), [filename()]}], Options::proplist()) -&gt; ok</string>
		<string>edoc_doclet:run</string>
		<string>edoc_doclet:run(&lt;#Command::doclet_gen() | doclet_toc()#&gt;, &lt;#Ctxt::edoc_context()#&gt;)</string>
		<string>edoc_doclet:run(Command::doclet_gen() | doclet_toc(), Ctxt::edoc_context()) -&gt; ok</string>
		<string>edoc_extract:file</string>
		<string>edoc_extract:file(&lt;#File::filename()#&gt;, &lt;#Context#&gt;, &lt;#Env::edoc_env()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_extract:file(File::filename(), Context, Env::edoc_env(), Options::proplist()) -&gt; {ok, Tags} | {error, Reason}</string>
		<string>edoc_extract:header</string>
		<string>edoc_extract:header(&lt;#File::filename()#&gt;, &lt;#Env::edoc_env()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_extract:header(File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ok, Tags} | {error, Reason}</string>
		<string>edoc_extract:header</string>
		<string>edoc_extract:header(&lt;#Forms#&gt;, &lt;#File::filename()#&gt;, &lt;#Env::edoc_env()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_extract:header(Forms, File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ok, Tags} | {error, Reason}</string>
		<string>edoc_extract:header</string>
		<string>edoc_extract:header(&lt;#Forms#&gt;, &lt;#Comments::[comment() (see module edoc)]#&gt;, &lt;#File::filename()#&gt;, &lt;#Env::edoc_env()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_extract:header(Forms, Comments::[comment() (see module edoc)], File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ok, Tags} | {error, Reason}</string>
		<string>edoc_extract:source</string>
		<string>edoc_extract:source(&lt;#File::filename()#&gt;, &lt;#Env::edoc_env()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_extract:source(File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ModuleName, edoc_module() (see module edoc)}</string>
		<string>edoc_extract:source</string>
		<string>edoc_extract:source(&lt;#Forms#&gt;, &lt;#File::filename()#&gt;, &lt;#Env::edoc_env()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_extract:source(Forms, File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ModuleName, edoc_module() (see module edoc)}</string>
		<string>edoc_extract:source</string>
		<string>edoc_extract:source(&lt;#Forms#&gt;, &lt;#Comments::[comment() (see module edoc)]#&gt;, &lt;#File::filename()#&gt;, &lt;#Env::edoc_env()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_extract:source(Forms, Comments::[comment() (see module edoc)], File::filename(), Env::edoc_env(), Options::proplist()) -&gt; {ModuleName, edoc_module() (see module edoc)}</string>
		<string>edoc_extract:text</string>
		<string>edoc_extract:text(&lt;#Text::string()#&gt;, &lt;#Context#&gt;, &lt;#Env::edoc_env()#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_extract:text(Text::string(), Context, Env::edoc_env(), Options::proplist()) -&gt; Tags</string>
		<string>edoc_layout:module</string>
		<string>edoc_layout:module(&lt;#Element#&gt;, &lt;#Options#&gt;)</string>
		<string>edoc_layout:module(Element, Options) -&gt; term()</string>
		<string>edoc_layout:overview</string>
		<string>edoc_layout:overview(&lt;#E#&gt;, &lt;#Options#&gt;)</string>
		<string>edoc_layout:overview(E, Options) -&gt; term()</string>
		<string>edoc_layout:package</string>
		<string>edoc_layout:package(&lt;#E#&gt;, &lt;#Options#&gt;)</string>
		<string>edoc_layout:package(E, Options) -&gt; term()</string>
		<string>edoc_layout:type</string>
		<string>edoc_layout:type(&lt;#E#&gt;)</string>
		<string>edoc_layout:type(E) -&gt; term()</string>
		<string>edoc_lib:get_doc_env</string>
		<string>edoc_lib:get_doc_env(&lt;#App#&gt;, &lt;#Packages#&gt;, &lt;#Modules#&gt;, &lt;#Options::proplist()#&gt;)</string>
		<string>edoc_lib:get_doc_env(App, Packages, Modules, Options::proplist()) -&gt; edoc_env()</string>
		<string>edoc_lib:write_file</string>
		<string>edoc_lib:write_file(&lt;#Text#&gt;, &lt;#Dir#&gt;, &lt;#Name#&gt;, &lt;#Package#&gt;, &lt;#Options#&gt;)</string>
		<string>edoc_lib:write_file(Text, Dir, Name, Package, Options) -&gt; term()</string>
		<string>edoc_run:application</string>
		<string>edoc_run:application(&lt;#Args::[string()]#&gt;)</string>
		<string>edoc_run:application(Args::[string()]) -&gt; none()</string>
		<string>edoc_run:file</string>
		<string>edoc_run:file(&lt;#Args::[string()]#&gt;)</string>
		<string>edoc_run:file(Args::[string()]) -&gt; none()</string>
		<string>edoc_run:files</string>
		<string>edoc_run:files(&lt;#Args::[string()]#&gt;)</string>
		<string>edoc_run:files(Args::[string()]) -&gt; none()</string>
		<string>edoc_run:packages</string>
		<string>edoc_run:packages(&lt;#Args::[string()]#&gt;)</string>
		<string>edoc_run:packages(Args::[string()]) -&gt; none()</string>
		<string>egd:color</string>
		<string>egd:color(&lt;#Color::Value | Name#&gt;)</string>
		<string>egd:color(Color::Value | Name) -&gt; color()</string>
		<string>egd:create</string>
		<string>egd:create(&lt;#Width::integer()#&gt;, &lt;#Height::integer()#&gt;)</string>
		<string>egd:create(Width::integer(), Height::integer()) -&gt; egd_image()</string>
		<string>egd:destroy</string>
		<string>egd:destroy(&lt;#Image::egd_image()#&gt;)</string>
		<string>egd:destroy(Image::egd_image()) -&gt; ok</string>
		<string>egd:filledEllipse</string>
		<string>egd:filledEllipse(&lt;#Image::egd_image()#&gt;, &lt;#P1::point()#&gt;, &lt;#P2::point()#&gt;, &lt;#Color::color()#&gt;)</string>
		<string>egd:filledEllipse(Image::egd_image(), P1::point(), P2::point(), Color::color()) -&gt; ok</string>
		<string>egd:filledRectangle</string>
		<string>egd:filledRectangle(&lt;#Image::egd_image()#&gt;, &lt;#P1::point()#&gt;, &lt;#P2::point()#&gt;, &lt;#Color::color()#&gt;)</string>
		<string>egd:filledRectangle(Image::egd_image(), P1::point(), P2::point(), Color::color()) -&gt; ok</string>
		<string>egd:line</string>
		<string>egd:line(&lt;#Image::egd_image()#&gt;, &lt;#P1::point()#&gt;, &lt;#P2::point()#&gt;, &lt;#Color::color()#&gt;)</string>
		<string>egd:line(Image::egd_image(), P1::point(), P2::point(), Color::color()) -&gt; ok</string>
		<string>egd:rectangle</string>
		<string>egd:rectangle(&lt;#Image::egd_image()#&gt;, &lt;#P1::point()#&gt;, &lt;#P2::point()#&gt;, &lt;#Color::color()#&gt;)</string>
		<string>egd:rectangle(Image::egd_image(), P1::point(), P2::point(), Color::color()) -&gt; ok</string>
		<string>egd:render</string>
		<string>egd:render(&lt;#Image::egd_image()#&gt;)</string>
		<string>egd:render(Image::egd_image()) -&gt; binary()</string>
		<string>egd:render</string>
		<string>egd:render(&lt;#Image::egd_image()#&gt;, &lt;#Type::png | raw_bitmap#&gt;)</string>
		<string>egd:render(Image::egd_image(), Type::png | raw_bitmap) -&gt; binary()</string>
		<string>egd:render</string>
		<string>egd:render(&lt;#Image::egd_image()#&gt;, &lt;#Type::png | raw_bitmap#&gt;, &lt;#Options::[render_option()]#&gt;)</string>
		<string>egd:render(Image::egd_image(), Type::png | raw_bitmap, Options::[render_option()]) -&gt; binary()</string>
		<string>egd:save</string>
		<string>egd:save(&lt;#Binary::binary()#&gt;, &lt;#Filename::string()#&gt;)</string>
		<string>egd:save(Binary::binary(), Filename::string()) -&gt; ok</string>
		<string>egd:text</string>
		<string>egd:text(&lt;#Image::egd_image()#&gt;, &lt;#P::point()#&gt;, &lt;#Font::font()#&gt;, &lt;#Text::string()#&gt;, &lt;#Color::color()#&gt;)</string>
		<string>egd:text(Image::egd_image(), P::point(), Font::font(), Text::string(), Color::color()) -&gt; ok</string>
		<string>eldap:open</string>
		<string>eldap:open(&lt;#[Host]#&gt;)</string>
		<string>eldap:open([Host]) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>eldap:open</string>
		<string>eldap:open(&lt;#[Host]#&gt;, &lt;#[Option]#&gt;)</string>
		<string>eldap:open([Host], [Option]) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>eldap:close</string>
		<string>eldap:close(&lt;#Handle#&gt;)</string>
		<string>eldap:close(Handle) -&gt; ok</string>
		<string>eldap:start_tls</string>
		<string>eldap:start_tls(&lt;#Handle#&gt;, &lt;#Options#&gt;)</string>
		<string>eldap:start_tls(Handle, Options) -&gt; ok | {error, Error}</string>
		<string>eldap:start_tls</string>
		<string>eldap:start_tls(&lt;#Handle#&gt;, &lt;#Options#&gt;, &lt;#Timeout#&gt;)</string>
		<string>eldap:start_tls(Handle, Options, Timeout) -&gt; ok | {error, Error}</string>
		<string>eldap:simple_bind</string>
		<string>eldap:simple_bind(&lt;#Handle#&gt;, &lt;#Dn#&gt;, &lt;#Password#&gt;)</string>
		<string>eldap:simple_bind(Handle, Dn, Password) -&gt; ok | {error, Reason}</string>
		<string>eldap:add</string>
		<string>eldap:add(&lt;#Handle#&gt;, &lt;#Dn#&gt;, &lt;#[Attribute]#&gt;)</string>
		<string>eldap:add(Handle, Dn, [Attribute]) -&gt; ok | {error, Reason}</string>
		<string>eldap:delete</string>
		<string>eldap:delete(&lt;#Handle#&gt;, &lt;#Dn#&gt;)</string>
		<string>eldap:delete(Handle, Dn) -&gt; ok | {error, Reason}</string>
		<string>eldap:mod_add</string>
		<string>eldap:mod_add(&lt;#Type#&gt;, &lt;#[Value]#&gt;)</string>
		<string>eldap:mod_add(Type, [Value]) -&gt; modify_op()</string>
		<string>eldap:mod_delete</string>
		<string>eldap:mod_delete(&lt;#Type#&gt;, &lt;#[Value]#&gt;)</string>
		<string>eldap:mod_delete(Type, [Value]) -&gt; modify_op()</string>
		<string>eldap:mod_replace</string>
		<string>eldap:mod_replace(&lt;#Type#&gt;, &lt;#[Value]#&gt;)</string>
		<string>eldap:mod_replace(Type, [Value]) -&gt; modify_op()</string>
		<string>eldap:modify</string>
		<string>eldap:modify(&lt;#Handle#&gt;, &lt;#Dn#&gt;, &lt;#[ModifyOp]#&gt;)</string>
		<string>eldap:modify(Handle, Dn, [ModifyOp]) -&gt; ok | {error, Reason}</string>
		<string>eldap:modify_dn</string>
		<string>eldap:modify_dn(&lt;#Handle#&gt;, &lt;#Dn#&gt;, &lt;#NewRDN#&gt;, &lt;#DeleteOldRDN#&gt;, &lt;#NewSupDN#&gt;)</string>
		<string>eldap:modify_dn(Handle, Dn, NewRDN, DeleteOldRDN, NewSupDN) -&gt; ok | {error, Reason}</string>
		<string>eldap:search</string>
		<string>eldap:search(&lt;#Handle#&gt;, &lt;#SearchOptions#&gt;)</string>
		<string>eldap:search(Handle, SearchOptions) -&gt; {ok, #eldap_search_result{}} | {error, Reason}</string>
		<string>eldap:baseObject</string>
		<string>eldap:baseObject()</string>
		<string>eldap:baseObject() -&gt; scope()</string>
		<string>eldap:singleLevel</string>
		<string>eldap:singleLevel()</string>
		<string>eldap:singleLevel() -&gt; scope()</string>
		<string>eldap:wholeSubtree</string>
		<string>eldap:wholeSubtree()</string>
		<string>eldap:wholeSubtree() -&gt; scope()</string>
		<string>eldap:neverDerefAliases</string>
		<string>eldap:neverDerefAliases()</string>
		<string>eldap:neverDerefAliases() -&gt; dereference()</string>
		<string>eldap:derefAlways</string>
		<string>eldap:derefAlways()</string>
		<string>eldap:derefAlways() -&gt; dereference()</string>
		<string>eldap:derefInSearching</string>
		<string>eldap:derefInSearching()</string>
		<string>eldap:derefInSearching() -&gt; dereference()</string>
		<string>eldap:derefFindingBaseObj</string>
		<string>eldap:derefFindingBaseObj()</string>
		<string>eldap:derefFindingBaseObj() -&gt; dereference()</string>
		<string>eldap:present</string>
		<string>eldap:present(&lt;#Type#&gt;)</string>
		<string>eldap:present(Type) -&gt; filter()</string>
		<string>eldap:substrings</string>
		<string>eldap:substrings(&lt;#Type#&gt;, &lt;#[SubString]#&gt;)</string>
		<string>eldap:substrings(Type, [SubString]) -&gt; filter()</string>
		<string>eldap:equalityMatch</string>
		<string>eldap:equalityMatch(&lt;#Type#&gt;, &lt;#Value#&gt;)</string>
		<string>eldap:equalityMatch(Type, Value) -&gt; filter()</string>
		<string>eldap:greaterOrEqual</string>
		<string>eldap:greaterOrEqual(&lt;#Type#&gt;, &lt;#Value#&gt;)</string>
		<string>eldap:greaterOrEqual(Type, Value) -&gt; filter()</string>
		<string>eldap:lessOrEqual</string>
		<string>eldap:lessOrEqual(&lt;#Type#&gt;, &lt;#Value#&gt;)</string>
		<string>eldap:lessOrEqual(Type, Value) -&gt; filter()</string>
		<string>eldap:approxMatch</string>
		<string>eldap:approxMatch(&lt;#Type#&gt;, &lt;#Value#&gt;)</string>
		<string>eldap:approxMatch(Type, Value) -&gt; filter()</string>
		<string>eldap:'and'</string>
		<string>eldap:'and'(&lt;#[Filter]#&gt;)</string>
		<string>eldap:'and'([Filter]) -&gt; filter()</string>
		<string>eldap:'or'</string>
		<string>eldap:'or'(&lt;#[Filter]#&gt;)</string>
		<string>eldap:'or'([Filter]) -&gt; filter()</string>
		<string>eldap:'not'</string>
		<string>eldap:'not'(&lt;#Filter#&gt;)</string>
		<string>eldap:'not'(Filter) -&gt; filter()</string>
		<string>epp:close</string>
		<string>epp:close(&lt;#Epp#&gt;)</string>
		<string>epp:close(Epp) -&gt; ok</string>
		<string>epp:default_encoding</string>
		<string>epp:default_encoding()</string>
		<string>epp:default_encoding() -&gt; source_encoding()</string>
		<string>epp:encoding_to_string</string>
		<string>epp:encoding_to_string(&lt;#Encoding#&gt;)</string>
		<string>epp:encoding_to_string(Encoding) -&gt; string()</string>
		<string>epp:format_error</string>
		<string>epp:format_error(&lt;#ErrorDescriptor#&gt;)</string>
		<string>epp:format_error(ErrorDescriptor) -&gt; io_lib:chars()</string>
		<string>epp:open</string>
		<string>epp:open(&lt;#Options#&gt;)</string>
		<string>epp:open(Options) -&gt; {ok, Epp} | {ok, Epp, Extra} | {error, ErrorDescriptor}</string>
		<string>epp:open</string>
		<string>epp:open(&lt;#FileName#&gt;, &lt;#IncludePath#&gt;)</string>
		<string>epp:open(FileName, IncludePath) -&gt; {ok, Epp} | {error, ErrorDescriptor}</string>
		<string>epp:open</string>
		<string>epp:open(&lt;#FileName#&gt;, &lt;#IncludePath#&gt;, &lt;#PredefMacros#&gt;)</string>
		<string>epp:open(FileName, IncludePath, PredefMacros) -&gt; {ok, Epp} | {error, ErrorDescriptor}</string>
		<string>epp:parse_erl_form</string>
		<string>epp:parse_erl_form(&lt;#Epp#&gt;)</string>
		<string>epp:parse_erl_form(Epp) -&gt; {ok, AbsForm} | {eof, Line} | {error, ErrorInfo}</string>
		<string>epp:parse_file</string>
		<string>epp:parse_file(&lt;#Epp#&gt;)</string>
		<string>epp:parse_file(Epp) -&gt; [Form]</string>
		<string>epp:parse_file</string>
		<string>epp:parse_file(&lt;#FileName#&gt;, &lt;#Options#&gt;)</string>
		<string>epp:parse_file(FileName, Options) -&gt; {ok, [Form]} | {ok, [Form], Extra} | {error, OpenError}</string>
		<string>epp:parse_file</string>
		<string>epp:parse_file(&lt;#FileName#&gt;, &lt;#IncludePath#&gt;, &lt;#PredefMacros#&gt;)</string>
		<string>epp:parse_file(FileName, IncludePath, PredefMacros) -&gt; {ok, [Form]} | {error, OpenError}</string>
		<string>epp:read_encoding</string>
		<string>epp:read_encoding(&lt;#FileName#&gt;)</string>
		<string>epp:read_encoding(FileName) -&gt; source_encoding() | none</string>
		<string>epp:read_encoding</string>
		<string>epp:read_encoding(&lt;#FileName#&gt;, &lt;#Options#&gt;)</string>
		<string>epp:read_encoding(FileName, Options) -&gt; source_encoding() | none</string>
		<string>epp:read_encoding_from_binary</string>
		<string>epp:read_encoding_from_binary(&lt;#Binary#&gt;)</string>
		<string>epp:read_encoding_from_binary(Binary) -&gt; source_encoding() | none</string>
		<string>epp:read_encoding_from_binary</string>
		<string>epp:read_encoding_from_binary(&lt;#Binary#&gt;, &lt;#Options#&gt;)</string>
		<string>epp:read_encoding_from_binary(Binary, Options) -&gt; source_encoding() | none</string>
		<string>epp:set_encoding</string>
		<string>epp:set_encoding(&lt;#File#&gt;)</string>
		<string>epp:set_encoding(File) -&gt; source_encoding() | none</string>
		<string>epp:set_encoding</string>
		<string>epp:set_encoding(&lt;#File#&gt;, &lt;#Default#&gt;)</string>
		<string>epp:set_encoding(File, Default) -&gt; source_encoding() | none</string>
		<string>epp_dodger:parse</string>
		<string>epp_dodger:parse(&lt;#Dev::IODevice#&gt;)</string>
		<string>epp_dodger:parse(Dev::IODevice) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:parse</string>
		<string>epp_dodger:parse(&lt;#Dev::IODevice#&gt;, &lt;#L::StartLine#&gt;)</string>
		<string>epp_dodger:parse(Dev::IODevice, L::StartLine) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:parse</string>
		<string>epp_dodger:parse(&lt;#Dev::IODevice#&gt;, &lt;#L0::StartLine#&gt;, &lt;#Options#&gt;)</string>
		<string>epp_dodger:parse(Dev::IODevice, L0::StartLine, Options) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:parse_file</string>
		<string>epp_dodger:parse_file(&lt;#File#&gt;)</string>
		<string>epp_dodger:parse_file(File) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:parse_file</string>
		<string>epp_dodger:parse_file(&lt;#File#&gt;, &lt;#Options#&gt;)</string>
		<string>epp_dodger:parse_file(File, Options) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:parse_form</string>
		<string>epp_dodger:parse_form(&lt;#Dev::IODevice#&gt;, &lt;#L0::StartLine#&gt;)</string>
		<string>epp_dodger:parse_form(Dev::IODevice, L0::StartLine) -&gt; {ok, Form, LineNo} | {eof, LineNo} | {error, errorinfo(), LineNo}</string>
		<string>epp_dodger:parse_form</string>
		<string>epp_dodger:parse_form(&lt;#Dev::IODevice#&gt;, &lt;#L0::StartLine#&gt;, &lt;#Options#&gt;)</string>
		<string>epp_dodger:parse_form(Dev::IODevice, L0::StartLine, Options) -&gt; {ok, Form, LineNo} | {eof, LineNo} | {error, errorinfo(), LineNo}</string>
		<string>epp_dodger:quick_parse</string>
		<string>epp_dodger:quick_parse(&lt;#Dev::IODevice#&gt;)</string>
		<string>epp_dodger:quick_parse(Dev::IODevice) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:quick_parse</string>
		<string>epp_dodger:quick_parse(&lt;#Dev::IODevice#&gt;, &lt;#L::StartLine#&gt;)</string>
		<string>epp_dodger:quick_parse(Dev::IODevice, L::StartLine) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:quick_parse</string>
		<string>epp_dodger:quick_parse(&lt;#Dev::IODevice#&gt;, &lt;#L0::StartLine#&gt;, &lt;#Options#&gt;)</string>
		<string>epp_dodger:quick_parse(Dev::IODevice, L0::StartLine, Options) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:quick_parse_file</string>
		<string>epp_dodger:quick_parse_file(&lt;#File#&gt;)</string>
		<string>epp_dodger:quick_parse_file(File) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:quick_parse_file</string>
		<string>epp_dodger:quick_parse_file(&lt;#File#&gt;, &lt;#Options#&gt;)</string>
		<string>epp_dodger:quick_parse_file(File, Options) -&gt; {ok, Forms} | {error, errorinfo()}</string>
		<string>epp_dodger:quick_parse_form</string>
		<string>epp_dodger:quick_parse_form(&lt;#Dev::IODevice#&gt;, &lt;#L0::StartLine#&gt;)</string>
		<string>epp_dodger:quick_parse_form(Dev::IODevice, L0::StartLine) -&gt; {ok, Form, LineNo} | {eof, LineNo} | {error, errorinfo(), LineNo}</string>
		<string>epp_dodger:quick_parse_form</string>
		<string>epp_dodger:quick_parse_form(&lt;#Dev::IODevice#&gt;, &lt;#L0::StartLine#&gt;, &lt;#Options#&gt;)</string>
		<string>epp_dodger:quick_parse_form(Dev::IODevice, L0::StartLine, Options) -&gt; {ok, Form, LineNo} | {eof, LineNo} | {error, errorinfo(), LineNo}</string>
		<string>epp_dodger:tokens_to_string</string>
		<string>epp_dodger:tokens_to_string(&lt;#Tokens::[term()]#&gt;)</string>
		<string>epp_dodger:tokens_to_string(Tokens::[term()]) -&gt; string()</string>
		<string>eprof:start</string>
		<string>eprof:start()</string>
		<string>eprof:start() -&gt; {ok, Pid} | {error, Reason}</string>
		<string>eprof:start_profiling</string>
		<string>eprof:start_profiling(&lt;#Rootset#&gt;)</string>
		<string>eprof:start_profiling(Rootset) -&gt; profiling | {error, Reason}</string>
		<string>eprof:start_profiling</string>
		<string>eprof:start_profiling(&lt;#Rootset#&gt;, &lt;#Pattern#&gt;)</string>
		<string>eprof:start_profiling(Rootset, Pattern) -&gt; profiling | {error, Reason}</string>
		<string>eprof:start_profiling</string>
		<string>eprof:start_profiling(&lt;#Rootset#&gt;, &lt;#Pattern#&gt;, &lt;#Options#&gt;)</string>
		<string>eprof:start_profiling(Rootset, Pattern, Options) -&gt; profiling | {error, Reason}</string>
		<string>eprof:stop_profiling</string>
		<string>eprof:stop_profiling()</string>
		<string>eprof:stop_profiling() -&gt; profiling_stopped | profiling_already_stopped</string>
		<string>eprof:profile</string>
		<string>eprof:profile(&lt;#Fun#&gt;)</string>
		<string>eprof:profile(Fun) -&gt; profiling | {error, Reason}</string>
		<string>eprof:profile</string>
		<string>eprof:profile(&lt;#Fun#&gt;, &lt;#Options#&gt;)</string>
		<string>eprof:profile(Fun, Options) -&gt; profiling | {error, Reason}</string>
		<string>eprof:profile</string>
		<string>eprof:profile(&lt;#Rootset#&gt;)</string>
		<string>eprof:profile(Rootset) -&gt; profiling | {error, Reason}</string>
		<string>eprof:profile</string>
		<string>eprof:profile(&lt;#Rootset#&gt;, &lt;#Fun#&gt;)</string>
		<string>eprof:profile(Rootset, Fun) -&gt; {ok, Value} | {error, Reason}</string>
		<string>eprof:profile</string>
		<string>eprof:profile(&lt;#Rootset#&gt;, &lt;#Fun#&gt;, &lt;#Pattern#&gt;)</string>
		<string>eprof:profile(Rootset, Fun, Pattern) -&gt; {ok, Value} | {error, Reason}</string>
		<string>eprof:profile</string>
		<string>eprof:profile(&lt;#Rootset#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>eprof:profile(Rootset, Module, Function, Args) -&gt; {ok, Value} | {error, Reason}</string>
		<string>eprof:profile</string>
		<string>eprof:profile(&lt;#Rootset#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Pattern#&gt;)</string>
		<string>eprof:profile(Rootset, Module, Function, Args, Pattern) -&gt; {ok, Value} | {error, Reason}</string>
		<string>eprof:profile</string>
		<string>eprof:profile(&lt;#Rootset#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Pattern#&gt;, &lt;#Options#&gt;)</string>
		<string>eprof:profile(Rootset, Module, Function, Args, Pattern, Options) -&gt; {ok, Value} | {error, Reason}</string>
		<string>eprof:analyze</string>
		<string>eprof:analyze()</string>
		<string>eprof:analyze() -&gt; ok</string>
		<string>eprof:analyze</string>
		<string>eprof:analyze(&lt;#Type#&gt;)</string>
		<string>eprof:analyze(Type) -&gt; ok</string>
		<string>eprof:analyze</string>
		<string>eprof:analyze(&lt;#Type#&gt;, &lt;#Options#&gt;)</string>
		<string>eprof:analyze(Type, Options) -&gt; ok</string>
		<string>eprof:log</string>
		<string>eprof:log(&lt;#File#&gt;)</string>
		<string>eprof:log(File) -&gt; ok</string>
		<string>eprof:stop</string>
		<string>eprof:stop()</string>
		<string>eprof:stop() -&gt; stopped</string>
		<string>erl_boot_server:add_slave</string>
		<string>erl_boot_server:add_slave(&lt;#Slave#&gt;)</string>
		<string>erl_boot_server:add_slave(Slave) -&gt; ok | {error, What}</string>
		<string>erl_boot_server:add_subnet</string>
		<string>erl_boot_server:add_subnet(&lt;#Mask :: ip4_address()#&gt;, &lt;#Addr :: ip4_address()#&gt;)</string>
		<string>erl_boot_server:add_subnet(Mask :: ip4_address(), Addr :: ip4_address()) -&gt; ok | {error, any()}</string>
		<string>erl_boot_server:boot_init</string>
		<string>erl_boot_server:boot_init(&lt;#Tag :: reference()#&gt;)</string>
		<string>erl_boot_server:boot_init(Tag :: reference()) -&gt; no_return()</string>
		<string>erl_boot_server:code_change</string>
		<string>erl_boot_server:code_change(&lt;#Vsn :: term()#&gt;, &lt;#State :: state()#&gt;, &lt;#Extra :: term()#&gt;)</string>
		<string>erl_boot_server:code_change(Vsn :: term(), State :: state(), Extra :: term()) -&gt; {ok, state()}</string>
		<string>erl_boot_server:delete_slave</string>
		<string>erl_boot_server:delete_slave(&lt;#Slave#&gt;)</string>
		<string>erl_boot_server:delete_slave(Slave) -&gt; ok | {error, What}</string>
		<string>erl_boot_server:delete_subnet</string>
		<string>erl_boot_server:delete_subnet(&lt;#Mask :: ip4_address()#&gt;, &lt;#Addr :: ip4_address()#&gt;)</string>
		<string>erl_boot_server:delete_subnet(Mask :: ip4_address(), Addr :: ip4_address()) -&gt; ok</string>
		<string>erl_boot_server:handle_call</string>
		<string>erl_boot_server:handle_call(&lt;#X1 :: which | {add#&gt;, &lt;#atom()} | {delete#&gt;, &lt;#atom()}#&gt;, &lt;#X2 :: term()#&gt;, &lt;#S0 :: state()#&gt;)</string>
		<string>erl_boot_server:handle_call(X1 :: which | {add, atom()} | {delete, atom()}, X2 :: term(), S0 :: state()) -&gt; {reply, ok | [atom()], state()}</string>
		<string>erl_boot_server:handle_cast</string>
		<string>erl_boot_server:handle_cast(&lt;#X1 :: term()#&gt;, &lt;#Slaves :: [atom()]#&gt;)</string>
		<string>erl_boot_server:handle_cast(X1 :: term(), Slaves :: [atom()]) -&gt; {noreply, [atom()]}</string>
		<string>erl_boot_server:handle_info</string>
		<string>erl_boot_server:handle_info(&lt;#Info :: term()#&gt;, &lt;#S0 :: state()#&gt;)</string>
		<string>erl_boot_server:handle_info(Info :: term(), S0 :: state()) -&gt; {noreply, state()}</string>
		<string>erl_boot_server:init</string>
		<string>erl_boot_server:init(&lt;#Slaves :: [atom()]#&gt;)</string>
		<string>erl_boot_server:init(Slaves :: [atom()]) -&gt; {ok, state()}</string>
		<string>erl_boot_server:start</string>
		<string>erl_boot_server:start(&lt;#Slaves#&gt;)</string>
		<string>erl_boot_server:start(Slaves) -&gt; {ok, Pid} | {error, What}</string>
		<string>erl_boot_server:start_link</string>
		<string>erl_boot_server:start_link(&lt;#Slaves#&gt;)</string>
		<string>erl_boot_server:start_link(Slaves) -&gt; {ok, Pid} | {error, What}</string>
		<string>erl_boot_server:terminate</string>
		<string>erl_boot_server:terminate(&lt;#Reason :: term()#&gt;, &lt;#S0 :: state()#&gt;)</string>
		<string>erl_boot_server:terminate(Reason :: term(), S0 :: state()) -&gt; ok</string>
		<string>erl_boot_server:which_slaves</string>
		<string>erl_boot_server:which_slaves()</string>
		<string>erl_boot_server:which_slaves() -&gt; Slaves</string>
		<string>erl_comment_scan:file</string>
		<string>erl_comment_scan:file(&lt;#FileName::filename() (see module file)#&gt;)</string>
		<string>erl_comment_scan:file(FileName::filename() (see module file)) -&gt; [Comment]</string>
		<string>erl_comment_scan:join_lines</string>
		<string>erl_comment_scan:join_lines(&lt;#Lines::[CommentLine]#&gt;)</string>
		<string>erl_comment_scan:join_lines(Lines::[CommentLine]) -&gt; [Comment]</string>
		<string>erl_comment_scan:scan_lines</string>
		<string>erl_comment_scan:scan_lines(&lt;#Text::string()#&gt;)</string>
		<string>erl_comment_scan:scan_lines(Text::string()) -&gt; [CommentLine]</string>
		<string>erl_comment_scan:string</string>
		<string>erl_comment_scan:string(&lt;#Text::string()#&gt;)</string>
		<string>erl_comment_scan:string(Text::string()) -&gt; [Comment]</string>
		<string>erl_ddll:demonitor</string>
		<string>erl_ddll:demonitor(&lt;#MonitorRef#&gt;)</string>
		<string>erl_ddll:demonitor(MonitorRef) -&gt; ok</string>
		<string>erl_ddll:format_error</string>
		<string>erl_ddll:format_error(&lt;#ErrorDesc#&gt;)</string>
		<string>erl_ddll:format_error(ErrorDesc) -&gt; string()</string>
		<string>erl_ddll:format_error_int</string>
		<string>erl_ddll:format_error_int(&lt;#ErrSpec#&gt;)</string>
		<string>erl_ddll:format_error_int(ErrSpec) -&gt; string()</string>
		<string>erl_ddll:info</string>
		<string>erl_ddll:info()</string>
		<string>erl_ddll:info() -&gt; AllInfoList</string>
		<string>erl_ddll:info</string>
		<string>erl_ddll:info(&lt;#Name#&gt;)</string>
		<string>erl_ddll:info(Name) -&gt; InfoList</string>
		<string>erl_ddll:info</string>
		<string>erl_ddll:info(&lt;#Name#&gt;, &lt;#Tag#&gt;)</string>
		<string>erl_ddll:info(Name, Tag) -&gt; Value</string>
		<string>erl_ddll:load</string>
		<string>erl_ddll:load(&lt;#Path#&gt;, &lt;#Name#&gt;)</string>
		<string>erl_ddll:load(Path, Name) -&gt; ok | {error, ErrorDesc}</string>
		<string>erl_ddll:load_driver</string>
		<string>erl_ddll:load_driver(&lt;#Path#&gt;, &lt;#Name#&gt;)</string>
		<string>erl_ddll:load_driver(Path, Name) -&gt; ok | {error, ErrorDesc}</string>
		<string>erl_ddll:loaded_drivers</string>
		<string>erl_ddll:loaded_drivers()</string>
		<string>erl_ddll:loaded_drivers() -&gt; {ok, Drivers}</string>
		<string>erl_ddll:monitor</string>
		<string>erl_ddll:monitor(&lt;#Tag#&gt;, &lt;#Item#&gt;)</string>
		<string>erl_ddll:monitor(Tag, Item) -&gt; MonitorRef</string>
		<string>erl_ddll:reload</string>
		<string>erl_ddll:reload(&lt;#Path#&gt;, &lt;#Name#&gt;)</string>
		<string>erl_ddll:reload(Path, Name) -&gt; ok | {error, ErrorDesc}</string>
		<string>erl_ddll:reload_driver</string>
		<string>erl_ddll:reload_driver(&lt;#Path#&gt;, &lt;#Name#&gt;)</string>
		<string>erl_ddll:reload_driver(Path, Name) -&gt; ok | {error, ErrorDesc}</string>
		<string>erl_ddll:start</string>
		<string>erl_ddll:start()</string>
		<string>erl_ddll:start() -&gt; {error, {already_started, undefined}}</string>
		<string>erl_ddll:stop</string>
		<string>erl_ddll:stop()</string>
		<string>erl_ddll:stop() -&gt; ok</string>
		<string>erl_ddll:try_load</string>
		<string>erl_ddll:try_load(&lt;#Path#&gt;, &lt;#Name#&gt;, &lt;#OptionList#&gt;)</string>
		<string>erl_ddll:try_load(Path, Name, OptionList) -&gt; {ok, Status} | {ok, PendingStatus, Ref} | {error, ErrorDesc}</string>
		<string>erl_ddll:try_unload</string>
		<string>erl_ddll:try_unload(&lt;#Name#&gt;, &lt;#OptionList#&gt;)</string>
		<string>erl_ddll:try_unload(Name, OptionList) -&gt; {ok, Status} | {ok, PendingStatus, Ref} | {error, ErrorAtom}</string>
		<string>erl_ddll:unload</string>
		<string>erl_ddll:unload(&lt;#Name#&gt;)</string>
		<string>erl_ddll:unload(Name) -&gt; ok | {error, ErrorDesc}</string>
		<string>erl_ddll:unload_driver</string>
		<string>erl_ddll:unload_driver(&lt;#Name#&gt;)</string>
		<string>erl_ddll:unload_driver(Name) -&gt; ok | {error, ErrorDesc}</string>
		<string>erl_eval:add_binding</string>
		<string>erl_eval:add_binding(&lt;#Name#&gt;, &lt;#Value#&gt;, &lt;#BindingStruct#&gt;)</string>
		<string>erl_eval:add_binding(Name, Value, BindingStruct) -&gt; binding_struct()</string>
		<string>erl_eval:binding</string>
		<string>erl_eval:binding(&lt;#Name#&gt;, &lt;#BindingStruct#&gt;)</string>
		<string>erl_eval:binding(Name, BindingStruct) -&gt; {value, value()} | unbound</string>
		<string>erl_eval:bindings</string>
		<string>erl_eval:bindings(&lt;#BindingStruct :: binding_struct()#&gt;)</string>
		<string>erl_eval:bindings(BindingStruct :: binding_struct()) -&gt; bindings()</string>
		<string>erl_eval:del_binding</string>
		<string>erl_eval:del_binding(&lt;#Name#&gt;, &lt;#BindingStruct#&gt;)</string>
		<string>erl_eval:del_binding(Name, BindingStruct) -&gt; binding_struct()</string>
		<string>erl_eval:expr</string>
		<string>erl_eval:expr(&lt;#Expression#&gt;, &lt;#Bindings#&gt;)</string>
		<string>erl_eval:expr(Expression, Bindings) -&gt; {value, Value, NewBindings}</string>
		<string>erl_eval:expr</string>
		<string>erl_eval:expr(&lt;#Expression#&gt;, &lt;#Bindings#&gt;, &lt;#LocalFunctionHandler#&gt;)</string>
		<string>erl_eval:expr(Expression, Bindings, LocalFunctionHandler) -&gt; {value, Value, NewBindings}</string>
		<string>erl_eval:expr</string>
		<string>erl_eval:expr(&lt;#Expression#&gt;, &lt;#Bindings#&gt;, &lt;#LocalFunctionHandler#&gt;, &lt;#NonLocalFunctionHandler#&gt;)</string>
		<string>erl_eval:expr(Expression, Bindings, LocalFunctionHandler, NonLocalFunctionHandler) -&gt; {value, Value, NewBindings}</string>
		<string>erl_eval:expr</string>
		<string>erl_eval:expr(&lt;#Expression#&gt;, &lt;#Bindings#&gt;, &lt;#LocalFunctionHandler#&gt;, &lt;#NonLocalFunctionHandler#&gt;, &lt;#ReturnFormat#&gt;)</string>
		<string>erl_eval:expr(Expression, Bindings, LocalFunctionHandler, NonLocalFunctionHandler, ReturnFormat) -&gt; {value, Value, NewBindings} | Value</string>
		<string>erl_eval:expr_list</string>
		<string>erl_eval:expr_list(&lt;#ExpressionList#&gt;, &lt;#Bindings#&gt;)</string>
		<string>erl_eval:expr_list(ExpressionList, Bindings) -&gt; {ValueList, NewBindings}</string>
		<string>erl_eval:expr_list</string>
		<string>erl_eval:expr_list(&lt;#ExpressionList#&gt;, &lt;#Bindings#&gt;, &lt;#LocalFunctionHandler#&gt;)</string>
		<string>erl_eval:expr_list(ExpressionList, Bindings, LocalFunctionHandler) -&gt; {ValueList, NewBindings}</string>
		<string>erl_eval:expr_list</string>
		<string>erl_eval:expr_list(&lt;#ExpressionList#&gt;, &lt;#Bindings#&gt;, &lt;#LocalFunctionHandler#&gt;, &lt;#NonLocalFunctionHandler#&gt;)</string>
		<string>erl_eval:expr_list(ExpressionList, Bindings, LocalFunctionHandler, NonLocalFunctionHandler) -&gt; {ValueList, NewBindings}</string>
		<string>erl_eval:exprs</string>
		<string>erl_eval:exprs(&lt;#Expressions#&gt;, &lt;#Bindings#&gt;)</string>
		<string>erl_eval:exprs(Expressions, Bindings) -&gt; {value, Value, NewBindings}</string>
		<string>erl_eval:exprs</string>
		<string>erl_eval:exprs(&lt;#Expressions#&gt;, &lt;#Bindings#&gt;, &lt;#LocalFunctionHandler#&gt;)</string>
		<string>erl_eval:exprs(Expressions, Bindings, LocalFunctionHandler) -&gt; {value, Value, NewBindings}</string>
		<string>erl_eval:exprs</string>
		<string>erl_eval:exprs(&lt;#Expressions#&gt;, &lt;#Bindings#&gt;, &lt;#LocalFunctionHandler#&gt;, &lt;#NonLocalFunctionHandler#&gt;)</string>
		<string>erl_eval:exprs(Expressions, Bindings, LocalFunctionHandler, NonLocalFunctionHandler) -&gt; {value, Value, NewBindings}</string>
		<string>erl_eval:match_clause</string>
		<string>erl_eval:match_clause(&lt;#Clauses#&gt;, &lt;#ValueList#&gt;, &lt;#Bindings#&gt;, &lt;#LocalFunctionHandler#&gt;)</string>
		<string>erl_eval:match_clause(Clauses, ValueList, Bindings, LocalFunctionHandler) -&gt; {Body, NewBindings} | nomatch</string>
		<string>erl_eval:new_bindings</string>
		<string>erl_eval:new_bindings()</string>
		<string>erl_eval:new_bindings() -&gt; binding_struct()</string>
		<string>erl_expand_records:module</string>
		<string>erl_expand_records:module(&lt;#AbsForms#&gt;, &lt;#CompileOptions#&gt;)</string>
		<string>erl_expand_records:module(AbsForms, CompileOptions) -&gt; AbsForms</string>
		<string>erl_internal:arith_op</string>
		<string>erl_internal:arith_op(&lt;#OpName#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:arith_op(OpName, Arity) -&gt; boolean()</string>
		<string>erl_internal:bif</string>
		<string>erl_internal:bif(&lt;#Name#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:bif(Name, Arity) -&gt; boolean()</string>
		<string>erl_internal:bif</string>
		<string>erl_internal:bif(&lt;#Mod :: atom()#&gt;, &lt;#Name :: atom()#&gt;, &lt;#Arity :: arity()#&gt;)</string>
		<string>erl_internal:bif(Mod :: atom(), Name :: atom(), Arity :: arity()) -&gt; boolean()</string>
		<string>erl_internal:bool_op</string>
		<string>erl_internal:bool_op(&lt;#OpName#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:bool_op(OpName, Arity) -&gt; boolean()</string>
		<string>erl_internal:comp_op</string>
		<string>erl_internal:comp_op(&lt;#OpName#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:comp_op(OpName, Arity) -&gt; boolean()</string>
		<string>erl_internal:guard_bif</string>
		<string>erl_internal:guard_bif(&lt;#Name#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:guard_bif(Name, Arity) -&gt; boolean()</string>
		<string>erl_internal:list_op</string>
		<string>erl_internal:list_op(&lt;#OpName#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:list_op(OpName, Arity) -&gt; boolean()</string>
		<string>erl_internal:new_type_test</string>
		<string>erl_internal:new_type_test(&lt;#Name :: atom()#&gt;, &lt;#Arity :: arity()#&gt;)</string>
		<string>erl_internal:new_type_test(Name :: atom(), Arity :: arity()) -&gt; boolean()</string>
		<string>erl_internal:old_bif</string>
		<string>erl_internal:old_bif(&lt;#Name :: atom()#&gt;, &lt;#Arity :: arity()#&gt;)</string>
		<string>erl_internal:old_bif(Name :: atom(), Arity :: arity()) -&gt; boolean()</string>
		<string>erl_internal:old_type_test</string>
		<string>erl_internal:old_type_test(&lt;#Name :: atom()#&gt;, &lt;#Arity :: arity()#&gt;)</string>
		<string>erl_internal:old_type_test(Name :: atom(), Arity :: arity()) -&gt; boolean()</string>
		<string>erl_internal:op_type</string>
		<string>erl_internal:op_type(&lt;#OpName#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:op_type(OpName, Arity) -&gt; Type</string>
		<string>erl_internal:send_op</string>
		<string>erl_internal:send_op(&lt;#OpName#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:send_op(OpName, Arity) -&gt; boolean()</string>
		<string>erl_internal:type_test</string>
		<string>erl_internal:type_test(&lt;#Name#&gt;, &lt;#Arity#&gt;)</string>
		<string>erl_internal:type_test(Name, Arity) -&gt; boolean()</string>
		<string>erl_lint:bool_option</string>
		<string>erl_lint:bool_option(&lt;#On :: atom()#&gt;, &lt;#Off :: atom()#&gt;, &lt;#Default :: boolean()#&gt;, &lt;#Opts :: [compile:option()]#&gt;)</string>
		<string>erl_lint:bool_option(On :: atom(), Off :: atom(), Default :: boolean(), Opts :: [compile:option()]) -&gt; boolean()</string>
		<string>erl_lint:format_error</string>
		<string>erl_lint:format_error(&lt;#ErrorDescriptor#&gt;)</string>
		<string>erl_lint:format_error(ErrorDescriptor) -&gt; io_lib:chars()</string>
		<string>erl_lint:is_guard_test</string>
		<string>erl_lint:is_guard_test(&lt;#Expr#&gt;)</string>
		<string>erl_lint:is_guard_test(Expr) -&gt; boolean()</string>
		<string>erl_lint:module</string>
		<string>erl_lint:module(&lt;#AbsForms#&gt;)</string>
		<string>erl_lint:module(AbsForms) -&gt; {ok, Warnings} | {error, Errors, Warnings}</string>
		<string>erl_lint:module</string>
		<string>erl_lint:module(&lt;#AbsForms#&gt;, &lt;#FileName#&gt;)</string>
		<string>erl_lint:module(AbsForms, FileName) -&gt; {ok, Warnings} | {error, Errors, Warnings}</string>
		<string>erl_lint:module</string>
		<string>erl_lint:module(&lt;#AbsForms#&gt;, &lt;#FileName#&gt;, &lt;#CompileOptions#&gt;)</string>
		<string>erl_lint:module(AbsForms, FileName, CompileOptions) -&gt; {ok, Warnings} | {error, Errors, Warnings}</string>
		<string>erl_parse:abstract</string>
		<string>erl_parse:abstract(&lt;#Data#&gt;)</string>
		<string>erl_parse:abstract(Data) -&gt; AbsTerm</string>
		<string>erl_parse:abstract</string>
		<string>erl_parse:abstract(&lt;#Data#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_parse:abstract(Data, Options) -&gt; AbsTerm</string>
		<string>erl_parse:format_error</string>
		<string>erl_parse:format_error(&lt;#Message :: any()#&gt;)</string>
		<string>erl_parse:format_error(Message :: any()) -&gt; [char() | list()]</string>
		<string>erl_parse:func_prec</string>
		<string>erl_parse:func_prec()</string>
		<string>erl_parse:func_prec() -&gt; {800, 700}</string>
		<string>erl_parse:max_prec</string>
		<string>erl_parse:max_prec()</string>
		<string>erl_parse:max_prec() -&gt; 900</string>
		<string>erl_parse:normalise</string>
		<string>erl_parse:normalise(&lt;#AbsTerm#&gt;)</string>
		<string>erl_parse:normalise(AbsTerm) -&gt; Data</string>
		<string>erl_parse:parse</string>
		<string>erl_parse:parse(&lt;#Tokens :: list()#&gt;)</string>
		<string>erl_parse:parse(Tokens :: list()) -&gt; yecc_ret()</string>
		<string>erl_parse:parse_and_scan</string>
		<string>erl_parse:parse_and_scan(&lt;#X1 :: {function() | {atom()#&gt;, &lt;#atom()}#&gt;, &lt;#[term()]} | {atom()#&gt;, &lt;#atom()#&gt;, &lt;#[term()]}#&gt;)</string>
		<string>erl_parse:parse_and_scan(X1 :: {function() | {atom(), atom()}, [term()]} | {atom(), atom(), [term()]}) -&gt; yecc_ret()</string>
		<string>erl_parse:parse_exprs</string>
		<string>erl_parse:parse_exprs(&lt;#Tokens#&gt;)</string>
		<string>erl_parse:parse_exprs(Tokens) -&gt; {ok, ExprList} | {error, ErrorInfo}</string>
		<string>erl_parse:parse_form</string>
		<string>erl_parse:parse_form(&lt;#Tokens#&gt;)</string>
		<string>erl_parse:parse_form(Tokens) -&gt; {ok, AbsForm} | {error, ErrorInfo}</string>
		<string>erl_parse:parse_term</string>
		<string>erl_parse:parse_term(&lt;#Tokens#&gt;)</string>
		<string>erl_parse:parse_term(Tokens) -&gt; {ok, Term} | {error, ErrorInfo}</string>
		<string>erl_parse:preop_prec</string>
		<string>erl_parse:preop_prec(&lt;#X1 :: pre_op()#&gt;)</string>
		<string>erl_parse:preop_prec(X1 :: pre_op()) -&gt; {0 | 600 | 700, 100 | 700 | 800}</string>
		<string>erl_parse:tokens</string>
		<string>erl_parse:tokens(&lt;#AbsTerm#&gt;)</string>
		<string>erl_parse:tokens(AbsTerm) -&gt; Tokens</string>
		<string>erl_parse:tokens</string>
		<string>erl_parse:tokens(&lt;#AbsTerm#&gt;, &lt;#MoreTokens#&gt;)</string>
		<string>erl_parse:tokens(AbsTerm, MoreTokens) -&gt; Tokens</string>
		<string>erl_pp:attribute</string>
		<string>erl_pp:attribute(&lt;#Attribute#&gt;)</string>
		<string>erl_pp:attribute(Attribute) -&gt; io_lib:chars()</string>
		<string>erl_pp:attribute</string>
		<string>erl_pp:attribute(&lt;#Attribute#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:attribute(Attribute, Options) -&gt; io_lib:chars()</string>
		<string>erl_pp:expr</string>
		<string>erl_pp:expr(&lt;#Expression#&gt;)</string>
		<string>erl_pp:expr(Expression) -&gt; io_lib:chars()</string>
		<string>erl_pp:expr</string>
		<string>erl_pp:expr(&lt;#Expression#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:expr(Expression, Options) -&gt; io_lib:chars()</string>
		<string>erl_pp:expr</string>
		<string>erl_pp:expr(&lt;#Expression#&gt;, &lt;#Indent#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:expr(Expression, Indent, Options) -&gt; io_lib:chars()</string>
		<string>erl_pp:expr</string>
		<string>erl_pp:expr(&lt;#Expression#&gt;, &lt;#Indent#&gt;, &lt;#Precedence#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:expr(Expression, Indent, Precedence, Options) -&gt; io_lib:chars()</string>
		<string>erl_pp:exprs</string>
		<string>erl_pp:exprs(&lt;#Expressions#&gt;)</string>
		<string>erl_pp:exprs(Expressions) -&gt; io_lib:chars()</string>
		<string>erl_pp:exprs</string>
		<string>erl_pp:exprs(&lt;#Expressions#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:exprs(Expressions, Options) -&gt; io_lib:chars()</string>
		<string>erl_pp:exprs</string>
		<string>erl_pp:exprs(&lt;#Expressions#&gt;, &lt;#Indent#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:exprs(Expressions, Indent, Options) -&gt; io_lib:chars()</string>
		<string>erl_pp:form</string>
		<string>erl_pp:form(&lt;#Form#&gt;)</string>
		<string>erl_pp:form(Form) -&gt; io_lib:chars()</string>
		<string>erl_pp:form</string>
		<string>erl_pp:form(&lt;#Form#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:form(Form, Options) -&gt; io_lib:chars()</string>
		<string>erl_pp:function</string>
		<string>erl_pp:function(&lt;#Function#&gt;)</string>
		<string>erl_pp:function(Function) -&gt; io_lib:chars()</string>
		<string>erl_pp:function</string>
		<string>erl_pp:function(&lt;#Function#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:function(Function, Options) -&gt; io_lib:chars()</string>
		<string>erl_pp:guard</string>
		<string>erl_pp:guard(&lt;#Guard#&gt;)</string>
		<string>erl_pp:guard(Guard) -&gt; io_lib:chars()</string>
		<string>erl_pp:guard</string>
		<string>erl_pp:guard(&lt;#Guard#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_pp:guard(Guard, Options) -&gt; io_lib:chars()</string>
		<string>erl_prettypr:best</string>
		<string>erl_prettypr:best(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_prettypr:best(Tree::syntaxTree()) -&gt; empty | document()</string>
		<string>erl_prettypr:best</string>
		<string>erl_prettypr:best(&lt;#Tree::syntaxTree()#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>erl_prettypr:best(Tree::syntaxTree(), Options::[term()]) -&gt; empty | document()</string>
		<string>erl_prettypr:format</string>
		<string>erl_prettypr:format(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_prettypr:format(Tree::syntaxTree()) -&gt; string()</string>
		<string>erl_prettypr:format</string>
		<string>erl_prettypr:format(&lt;#Tree::syntaxTree()#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>erl_prettypr:format(Tree::syntaxTree(), Options::[term()]) -&gt; string()</string>
		<string>erl_prettypr:get_ctxt_hook</string>
		<string>erl_prettypr:get_ctxt_hook(&lt;#Ctxt::context()#&gt;)</string>
		<string>erl_prettypr:get_ctxt_hook(Ctxt::context()) -&gt; hook()</string>
		<string>erl_prettypr:get_ctxt_linewidth</string>
		<string>erl_prettypr:get_ctxt_linewidth(&lt;#Ctxt::context()#&gt;)</string>
		<string>erl_prettypr:get_ctxt_linewidth(Ctxt::context()) -&gt; integer()</string>
		<string>erl_prettypr:get_ctxt_paperwidth</string>
		<string>erl_prettypr:get_ctxt_paperwidth(&lt;#Ctxt::context()#&gt;)</string>
		<string>erl_prettypr:get_ctxt_paperwidth(Ctxt::context()) -&gt; integer()</string>
		<string>erl_prettypr:get_ctxt_precedence</string>
		<string>erl_prettypr:get_ctxt_precedence(&lt;#Ctxt::context()#&gt;)</string>
		<string>erl_prettypr:get_ctxt_precedence(Ctxt::context()) -&gt; integer()</string>
		<string>erl_prettypr:get_ctxt_user</string>
		<string>erl_prettypr:get_ctxt_user(&lt;#Ctxt::context()#&gt;)</string>
		<string>erl_prettypr:get_ctxt_user(Ctxt::context()) -&gt; term()</string>
		<string>erl_prettypr:layout</string>
		<string>erl_prettypr:layout(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_prettypr:layout(Tree::syntaxTree()) -&gt; document()</string>
		<string>erl_prettypr:layout</string>
		<string>erl_prettypr:layout(&lt;#Tree::syntaxTree()#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>erl_prettypr:layout(Tree::syntaxTree(), Options::[term()]) -&gt; document()</string>
		<string>erl_prettypr:set_ctxt_hook</string>
		<string>erl_prettypr:set_ctxt_hook(&lt;#Ctxt::context()#&gt;, &lt;#Hook::hook()#&gt;)</string>
		<string>erl_prettypr:set_ctxt_hook(Ctxt::context(), Hook::hook()) -&gt; context()</string>
		<string>erl_prettypr:set_ctxt_linewidth</string>
		<string>erl_prettypr:set_ctxt_linewidth(&lt;#Ctxt::context()#&gt;, &lt;#W::integer()#&gt;)</string>
		<string>erl_prettypr:set_ctxt_linewidth(Ctxt::context(), W::integer()) -&gt; context()</string>
		<string>erl_prettypr:set_ctxt_paperwidth</string>
		<string>erl_prettypr:set_ctxt_paperwidth(&lt;#Ctxt::context()#&gt;, &lt;#W::integer()#&gt;)</string>
		<string>erl_prettypr:set_ctxt_paperwidth(Ctxt::context(), W::integer()) -&gt; context()</string>
		<string>erl_prettypr:set_ctxt_precedence</string>
		<string>erl_prettypr:set_ctxt_precedence(&lt;#Ctxt::context()#&gt;, &lt;#Prec::integer()#&gt;)</string>
		<string>erl_prettypr:set_ctxt_precedence(Ctxt::context(), Prec::integer()) -&gt; context()</string>
		<string>erl_prettypr:set_ctxt_user</string>
		<string>erl_prettypr:set_ctxt_user(&lt;#Ctxt::context()#&gt;, &lt;#X::term()#&gt;)</string>
		<string>erl_prettypr:set_ctxt_user(Ctxt::context(), X::term()) -&gt; context()</string>
		<string>erl_prim_loader:get_cwd</string>
		<string>erl_prim_loader:get_cwd()</string>
		<string>erl_prim_loader:get_cwd() -&gt; {ok, string()} | error</string>
		<string>erl_prim_loader:get_cwd</string>
		<string>erl_prim_loader:get_cwd(&lt;#Drive :: string()#&gt;)</string>
		<string>erl_prim_loader:get_cwd(Drive :: string()) -&gt; {ok, string()} | error</string>
		<string>erl_prim_loader:get_file</string>
		<string>erl_prim_loader:get_file(&lt;#Filename#&gt;)</string>
		<string>erl_prim_loader:get_file(Filename) -&gt; {ok, Bin, FullName} | error</string>
		<string>erl_prim_loader:get_files</string>
		<string>erl_prim_loader:get_files(&lt;#ModFiles :: [{atom()#&gt;, &lt;#string()}]#&gt;, &lt;#Fun ::fun((atom()#&gt;, &lt;#binary()#&gt;, &lt;#string()#&gt;)</string>
		<string>erl_prim_loader:get_files(ModFiles :: [{atom(), string()}], Fun ::fun((atom(), binary(), string()) -&gt; ok | {error, atom()})) -&gt;ok | {error, atom()}</string>
		<string>erl_prim_loader:get_path</string>
		<string>erl_prim_loader:get_path()</string>
		<string>erl_prim_loader:get_path() -&gt; {ok, Path}</string>
		<string>erl_prim_loader:list_dir</string>
		<string>erl_prim_loader:list_dir(&lt;#Dir#&gt;)</string>
		<string>erl_prim_loader:list_dir(Dir) -&gt; {ok, Filenames} | error</string>
		<string>erl_prim_loader:prim_get_cwd</string>
		<string>erl_prim_loader:prim_get_cwd(&lt;#PS :: prim_state()#&gt;, &lt;#X2 :: [file:filename()]#&gt;)</string>
		<string>erl_prim_loader:prim_get_cwd(PS :: prim_state(), X2 :: [file:filename()]) -&gt; {{error, term()} | {ok, term()}, prim_state()}</string>
		<string>erl_prim_loader:prim_get_file</string>
		<string>erl_prim_loader:prim_get_file(&lt;#PS :: prim_state()#&gt;, &lt;#File :: file:filename()#&gt;)</string>
		<string>erl_prim_loader:prim_get_file(PS :: prim_state(), File :: file:filename()) -&gt; {term(), prim_state()}</string>
		<string>erl_prim_loader:prim_init</string>
		<string>erl_prim_loader:prim_init()</string>
		<string>erl_prim_loader:prim_init() -&gt; prim_state()</string>
		<string>erl_prim_loader:prim_list_dir</string>
		<string>erl_prim_loader:prim_list_dir(&lt;#PS :: prim_state()#&gt;, &lt;#Dir :: file:filename()#&gt;)</string>
		<string>erl_prim_loader:prim_list_dir(PS :: prim_state(), Dir :: file:filename()) -&gt; {{ok, [file:filename()]}, prim_state()} | {{error, term()}, prim_state()}</string>
		<string>erl_prim_loader:prim_read_file_info</string>
		<string>erl_prim_loader:prim_read_file_info(&lt;#PS :: prim_state()#&gt;, &lt;#File :: file:filename()#&gt;, &lt;#FollowLinks :: boolean()#&gt;)</string>
		<string>erl_prim_loader:prim_read_file_info(PS :: prim_state(), File :: file:filename(), FollowLinks :: boolean()) -&gt; {{ok, #file_info{size = undefined | integer() &gt;= 0, type = undefined | device | directory | other | regular | symlink, access = undefined | read | write | read_write | none, atime = undefined | file:date_time() | integer() &gt;= 0, mtime = undefined | file:date_time() | integer() &gt;= 0, ctime = undefined | file:date_time() | integer() &gt;= 0, mode = undefined | integer() &gt;= 0, links = undefined | integer() &gt;= 0, major_device = undefined | integer() &gt;= 0, minor_device = undefined | integer() &gt;= 0, inode = undefined | integer() &gt;= 0, uid = undefined | integer() &gt;= 0, gid = undefined | integer() &gt;= 0}}, prim_state()} | {{error, term()}, prim_state()}</string>
		<string>erl_prim_loader:read_file_info</string>
		<string>erl_prim_loader:read_file_info(&lt;#Filename#&gt;)</string>
		<string>erl_prim_loader:read_file_info(Filename) -&gt; {ok, FileInfo} | error</string>
		<string>erl_prim_loader:read_link_info</string>
		<string>erl_prim_loader:read_link_info(&lt;#Filename#&gt;)</string>
		<string>erl_prim_loader:read_link_info(Filename) -&gt; {ok, FileInfo} | error</string>
		<string>erl_prim_loader:release_archives</string>
		<string>erl_prim_loader:release_archives()</string>
		<string>erl_prim_loader:release_archives() -&gt; ok | {error, term()}</string>
		<string>erl_prim_loader:set_path</string>
		<string>erl_prim_loader:set_path(&lt;#Path#&gt;)</string>
		<string>erl_prim_loader:set_path(Path) -&gt; ok</string>
		<string>erl_prim_loader:set_primary_archive</string>
		<string>erl_prim_loader:set_primary_archive(&lt;#File :: string() | undefined#&gt;, &lt;#ArchiveBin :: binary() | undefined#&gt;, &lt;#FileInfo :: #file_info{size = undefined | integer() &gt;= 0#&gt;, &lt;#type = undefined | device | directory | other | regular | symlink#&gt;, &lt;#access = undefined | read | write | read_write | none#&gt;, &lt;#atime = undefined | file:date_time() | integer() &gt;= 0#&gt;, &lt;#mtime = undefined | file:date_time() | integer() &gt;= 0#&gt;, &lt;#ctime = undefined | file:date_time() | integer() &gt;= 0#&gt;, &lt;#mode = undefined | integer() &gt;= 0#&gt;, &lt;#links = undefined | integer() &gt;= 0#&gt;, &lt;#major_device = undefined | integer() &gt;= 0#&gt;, &lt;#minor_device = undefined | integer() &gt;= 0#&gt;, &lt;#inode = undefined | integer() &gt;= 0#&gt;, &lt;#uid = undefined | integer() &gt;= 0#&gt;, &lt;#gid = undefined | integer() &gt;= 0} | undefined#&gt;, &lt;#ParserFun :: function()#&gt;)</string>
		<string>erl_prim_loader:set_primary_archive(File :: string() | undefined, ArchiveBin :: binary() | undefined, FileInfo :: #file_info{size = undefined | integer() &gt;= 0, type = undefined | device | directory | other | regular | symlink, access = undefined | read | write | read_write | none, atime = undefined | file:date_time() | integer() &gt;= 0, mtime = undefined | file:date_time() | integer() &gt;= 0, ctime = undefined | file:date_time() | integer() &gt;= 0, mode = undefined | integer() &gt;= 0, links = undefined | integer() &gt;= 0, major_device = undefined | integer() &gt;= 0, minor_device = undefined | integer() &gt;= 0, inode = undefined | integer() &gt;= 0, uid = undefined | integer() &gt;= 0, gid = undefined | integer() &gt;= 0} | undefined, ParserFun :: function()) -&gt; {ok, [string()]} | {error, term()}</string>
		<string>erl_prim_loader:start</string>
		<string>erl_prim_loader:start(&lt;#Id#&gt;, &lt;#Loader#&gt;, &lt;#Hosts#&gt;)</string>
		<string>erl_prim_loader:start(Id, Loader, Hosts) -&gt; {ok, Pid} | {error, What}</string>
		<string>erl_recomment:quick_recomment_forms</string>
		<string>erl_recomment:quick_recomment_forms(&lt;#Tree::Forms#&gt;, &lt;#Comments::[Comment]#&gt;)</string>
		<string>erl_recomment:quick_recomment_forms(Tree::Forms, Comments::[Comment]) -&gt; syntaxTree()</string>
		<string>erl_recomment:recomment_forms</string>
		<string>erl_recomment:recomment_forms(&lt;#Tree::Forms#&gt;, &lt;#Comments::[Comment]#&gt;)</string>
		<string>erl_recomment:recomment_forms(Tree::Forms, Comments::[Comment]) -&gt; syntaxTree()</string>
		<string>erl_recomment:recomment_tree</string>
		<string>erl_recomment:recomment_tree(&lt;#Tree::syntaxTree()#&gt;, &lt;#Comments::[Comment]#&gt;)</string>
		<string>erl_recomment:recomment_tree(Tree::syntaxTree(), Comments::[Comment]) -&gt; {syntaxTree(), [Comment]}</string>
		<string>erl_scan:attributes_info</string>
		<string>erl_scan:attributes_info(&lt;#Attributes#&gt;)</string>
		<string>erl_scan:attributes_info(Attributes) -&gt; AttributesInfo</string>
		<string>erl_scan:attributes_info</string>
		<string>erl_scan:attributes_info(&lt;#Attributes#&gt;, &lt;#AttributeItem#&gt;)</string>
		<string>erl_scan:attributes_info(Attributes, AttributeItem) -&gt; AttributeInfoTuple | undefined</string>
		<string>erl_scan:attributes_info</string>
		<string>erl_scan:attributes_info(&lt;#Attributes#&gt;, &lt;#AttributeItems#&gt;)</string>
		<string>erl_scan:attributes_info(Attributes, AttributeItems) -&gt; AttributeInfo</string>
		<string>erl_scan:format_error</string>
		<string>erl_scan:format_error(&lt;#ErrorDescriptor#&gt;)</string>
		<string>erl_scan:format_error(ErrorDescriptor) -&gt; string()</string>
		<string>erl_scan:reserved_word</string>
		<string>erl_scan:reserved_word(&lt;#Atom :: atom()#&gt;)</string>
		<string>erl_scan:reserved_word(Atom :: atom()) -&gt; boolean()</string>
		<string>erl_scan:set_attribute</string>
		<string>erl_scan:set_attribute(&lt;#AttributeItem#&gt;, &lt;#Attributes#&gt;, &lt;#SetAttributeFun#&gt;)</string>
		<string>erl_scan:set_attribute(AttributeItem, Attributes, SetAttributeFun) -&gt; Attributes</string>
		<string>erl_scan:string</string>
		<string>erl_scan:string(&lt;#String#&gt;)</string>
		<string>erl_scan:string(String) -&gt; Return</string>
		<string>erl_scan:string</string>
		<string>erl_scan:string(&lt;#String#&gt;, &lt;#StartLocation#&gt;)</string>
		<string>erl_scan:string(String, StartLocation) -&gt; Return</string>
		<string>erl_scan:string</string>
		<string>erl_scan:string(&lt;#String#&gt;, &lt;#StartLocation#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_scan:string(String, StartLocation, Options) -&gt; Return</string>
		<string>erl_scan:token_info</string>
		<string>erl_scan:token_info(&lt;#Token#&gt;)</string>
		<string>erl_scan:token_info(Token) -&gt; TokenInfo</string>
		<string>erl_scan:token_info</string>
		<string>erl_scan:token_info(&lt;#Token#&gt;, &lt;#TokenItem#&gt;)</string>
		<string>erl_scan:token_info(Token, TokenItem) -&gt; TokenInfoTuple | undefined</string>
		<string>erl_scan:token_info</string>
		<string>erl_scan:token_info(&lt;#Token#&gt;, &lt;#TokenItems#&gt;)</string>
		<string>erl_scan:token_info(Token, TokenItems) -&gt; TokenInfo</string>
		<string>erl_scan:tokens</string>
		<string>erl_scan:tokens(&lt;#Continuation#&gt;, &lt;#CharSpec#&gt;, &lt;#StartLocation#&gt;)</string>
		<string>erl_scan:tokens(Continuation, CharSpec, StartLocation) -&gt; Return</string>
		<string>erl_scan:tokens</string>
		<string>erl_scan:tokens(&lt;#Continuation#&gt;, &lt;#CharSpec#&gt;, &lt;#StartLocation#&gt;, &lt;#Options#&gt;)</string>
		<string>erl_scan:tokens(Continuation, CharSpec, StartLocation, Options) -&gt; Return</string>
		<string>erl_syntax:abstract</string>
		<string>erl_syntax:abstract(&lt;#T::term()#&gt;)</string>
		<string>erl_syntax:abstract(T::term()) -&gt; syntaxTree()</string>
		<string>erl_syntax:add_ann</string>
		<string>erl_syntax:add_ann(&lt;#A::term()#&gt;, &lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:add_ann(A::term(), Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:add_postcomments</string>
		<string>erl_syntax:add_postcomments(&lt;#Cs::[syntaxTree()]#&gt;, &lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:add_postcomments(Cs::[syntaxTree()], Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:add_precomments</string>
		<string>erl_syntax:add_precomments(&lt;#Cs::[syntaxTree()]#&gt;, &lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:add_precomments(Cs::[syntaxTree()], Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:application</string>
		<string>erl_syntax:application(&lt;#Operator::syntaxTree()#&gt;, &lt;#Arguments::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:application(Operator::syntaxTree(), Arguments::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:application</string>
		<string>erl_syntax:application(&lt;#Module::none | syntaxTree()#&gt;, &lt;#Name::syntaxTree()#&gt;, &lt;#Arguments::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:application(Module::none | syntaxTree(), Name::syntaxTree(), Arguments::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:application_arguments</string>
		<string>erl_syntax:application_arguments(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:application_arguments(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:application_operator</string>
		<string>erl_syntax:application_operator(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:application_operator(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:arity_qualifier</string>
		<string>erl_syntax:arity_qualifier(&lt;#Body::syntaxTree()#&gt;, &lt;#Arity::syntaxTree()#&gt;)</string>
		<string>erl_syntax:arity_qualifier(Body::syntaxTree(), Arity::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:arity_qualifier_argument</string>
		<string>erl_syntax:arity_qualifier_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:arity_qualifier_argument(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:arity_qualifier_body</string>
		<string>erl_syntax:arity_qualifier_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:arity_qualifier_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:atom</string>
		<string>erl_syntax:atom(&lt;#Name::atom() | string()#&gt;)</string>
		<string>erl_syntax:atom(Name::atom() | string()) -&gt; syntaxTree()</string>
		<string>erl_syntax:atom_literal</string>
		<string>erl_syntax:atom_literal(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:atom_literal(Node::syntaxTree()) -&gt; string()</string>
		<string>erl_syntax:atom_name</string>
		<string>erl_syntax:atom_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:atom_name(Node::syntaxTree()) -&gt; string()</string>
		<string>erl_syntax:atom_value</string>
		<string>erl_syntax:atom_value(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:atom_value(Node::syntaxTree()) -&gt; atom()</string>
		<string>erl_syntax:attribute</string>
		<string>erl_syntax:attribute(&lt;#Name::syntaxTree()#&gt;)</string>
		<string>erl_syntax:attribute(Name::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:attribute</string>
		<string>erl_syntax:attribute(&lt;#Name::syntaxTree()#&gt;, &lt;#Args::none | [syntaxTree()]#&gt;)</string>
		<string>erl_syntax:attribute(Name::syntaxTree(), Args::none | [syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:attribute_arguments</string>
		<string>erl_syntax:attribute_arguments(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:attribute_arguments(Node::syntaxTree()) -&gt; none | [syntaxTree()]</string>
		<string>erl_syntax:attribute_name</string>
		<string>erl_syntax:attribute_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:attribute_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary</string>
		<string>erl_syntax:binary(&lt;#List::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:binary(List::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_comp</string>
		<string>erl_syntax:binary_comp(&lt;#Template::syntaxTree()#&gt;, &lt;#Body::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:binary_comp(Template::syntaxTree(), Body::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_comp_body</string>
		<string>erl_syntax:binary_comp_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_comp_body(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:binary_comp_template</string>
		<string>erl_syntax:binary_comp_template(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_comp_template(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_field</string>
		<string>erl_syntax:binary_field(&lt;#Body::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_field(Body::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_field</string>
		<string>erl_syntax:binary_field(&lt;#Body::syntaxTree()#&gt;, &lt;#Types::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:binary_field(Body::syntaxTree(), Types::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_field</string>
		<string>erl_syntax:binary_field(&lt;#Body::syntaxTree()#&gt;, &lt;#Size::none | syntaxTree()#&gt;, &lt;#Types::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:binary_field(Body::syntaxTree(), Size::none | syntaxTree(), Types::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_field_body</string>
		<string>erl_syntax:binary_field_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_field_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_field_size</string>
		<string>erl_syntax:binary_field_size(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_field_size(Node::syntaxTree()) -&gt; none | syntaxTree()</string>
		<string>erl_syntax:binary_field_types</string>
		<string>erl_syntax:binary_field_types(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_field_types(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:binary_fields</string>
		<string>erl_syntax:binary_fields(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_fields(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:binary_generator</string>
		<string>erl_syntax:binary_generator(&lt;#Pattern::syntaxTree()#&gt;, &lt;#Body::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_generator(Pattern::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_generator_body</string>
		<string>erl_syntax:binary_generator_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_generator_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:binary_generator_pattern</string>
		<string>erl_syntax:binary_generator_pattern(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:binary_generator_pattern(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:block_expr</string>
		<string>erl_syntax:block_expr(&lt;#Body::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:block_expr(Body::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:block_expr_body</string>
		<string>erl_syntax:block_expr_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:block_expr_body(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:case_expr</string>
		<string>erl_syntax:case_expr(&lt;#Argument::syntaxTree()#&gt;, &lt;#Clauses::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:case_expr(Argument::syntaxTree(), Clauses::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:case_expr_argument</string>
		<string>erl_syntax:case_expr_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:case_expr_argument(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:case_expr_clauses</string>
		<string>erl_syntax:case_expr_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:case_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:catch_expr</string>
		<string>erl_syntax:catch_expr(&lt;#Expr::syntaxTree()#&gt;)</string>
		<string>erl_syntax:catch_expr(Expr::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:catch_expr_body</string>
		<string>erl_syntax:catch_expr_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:catch_expr_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:char</string>
		<string>erl_syntax:char(&lt;#Char::char()#&gt;)</string>
		<string>erl_syntax:char(Char::char()) -&gt; syntaxTree()</string>
		<string>erl_syntax:char_literal</string>
		<string>erl_syntax:char_literal(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:char_literal(Node::syntaxTree()) -&gt; nonempty_string()</string>
		<string>erl_syntax:char_literal</string>
		<string>erl_syntax:char_literal(&lt;#Node::syntaxTree()#&gt;, &lt;#X2::encoding()#&gt;)</string>
		<string>erl_syntax:char_literal(Node::syntaxTree(), X2::encoding()) -&gt; nonempty_string()</string>
		<string>erl_syntax:char_value</string>
		<string>erl_syntax:char_value(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:char_value(Node::syntaxTree()) -&gt; char()</string>
		<string>erl_syntax:class_qualifier</string>
		<string>erl_syntax:class_qualifier(&lt;#Class::syntaxTree()#&gt;, &lt;#Body::syntaxTree()#&gt;)</string>
		<string>erl_syntax:class_qualifier(Class::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:class_qualifier_argument</string>
		<string>erl_syntax:class_qualifier_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:class_qualifier_argument(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:class_qualifier_body</string>
		<string>erl_syntax:class_qualifier_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:class_qualifier_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:clause</string>
		<string>erl_syntax:clause(&lt;#Guard::guard()#&gt;, &lt;#Body::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:clause(Guard::guard(), Body::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:clause</string>
		<string>erl_syntax:clause(&lt;#Patterns::[syntaxTree()]#&gt;, &lt;#Guard::guard()#&gt;, &lt;#Body::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:clause(Patterns::[syntaxTree()], Guard::guard(), Body::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:clause_body</string>
		<string>erl_syntax:clause_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:clause_body(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:clause_guard</string>
		<string>erl_syntax:clause_guard(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:clause_guard(Node::syntaxTree()) -&gt; none | syntaxTree()</string>
		<string>erl_syntax:clause_patterns</string>
		<string>erl_syntax:clause_patterns(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:clause_patterns(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:comment</string>
		<string>erl_syntax:comment(&lt;#Strings::[string()]#&gt;)</string>
		<string>erl_syntax:comment(Strings::[string()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:comment</string>
		<string>erl_syntax:comment(&lt;#Pad::padding()#&gt;, &lt;#Strings::[string()]#&gt;)</string>
		<string>erl_syntax:comment(Pad::padding(), Strings::[string()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:comment_padding</string>
		<string>erl_syntax:comment_padding(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:comment_padding(Node::syntaxTree()) -&gt; padding()</string>
		<string>erl_syntax:comment_text</string>
		<string>erl_syntax:comment_text(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:comment_text(Node::syntaxTree()) -&gt; [string()]</string>
		<string>erl_syntax:compact_list</string>
		<string>erl_syntax:compact_list(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:compact_list(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:concrete</string>
		<string>erl_syntax:concrete(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:concrete(Node::syntaxTree()) -&gt; term()</string>
		<string>erl_syntax:cond_expr</string>
		<string>erl_syntax:cond_expr(&lt;#Clauses::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:cond_expr(Clauses::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:cond_expr_clauses</string>
		<string>erl_syntax:cond_expr_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:cond_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:conjunction</string>
		<string>erl_syntax:conjunction(&lt;#Tests::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:conjunction(Tests::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:conjunction_body</string>
		<string>erl_syntax:conjunction_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:conjunction_body(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:cons</string>
		<string>erl_syntax:cons(&lt;#Head::syntaxTree()#&gt;, &lt;#Tail::syntaxTree()#&gt;)</string>
		<string>erl_syntax:cons(Head::syntaxTree(), Tail::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:copy_ann</string>
		<string>erl_syntax:copy_ann(&lt;#Source::syntaxTree()#&gt;, &lt;#Target::syntaxTree()#&gt;)</string>
		<string>erl_syntax:copy_ann(Source::syntaxTree(), Target::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:copy_attrs</string>
		<string>erl_syntax:copy_attrs(&lt;#S::syntaxTree()#&gt;, &lt;#T::syntaxTree()#&gt;)</string>
		<string>erl_syntax:copy_attrs(S::syntaxTree(), T::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:copy_comments</string>
		<string>erl_syntax:copy_comments(&lt;#Source::syntaxTree()#&gt;, &lt;#Target::syntaxTree()#&gt;)</string>
		<string>erl_syntax:copy_comments(Source::syntaxTree(), Target::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:copy_pos</string>
		<string>erl_syntax:copy_pos(&lt;#Source::syntaxTree()#&gt;, &lt;#Target::syntaxTree()#&gt;)</string>
		<string>erl_syntax:copy_pos(Source::syntaxTree(), Target::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:data</string>
		<string>erl_syntax:data(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:data(Tree::syntaxTree()) -&gt; term()</string>
		<string>erl_syntax:disjunction</string>
		<string>erl_syntax:disjunction(&lt;#Tests::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:disjunction(Tests::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:disjunction_body</string>
		<string>erl_syntax:disjunction_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:disjunction_body(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:eof_marker</string>
		<string>erl_syntax:eof_marker()</string>
		<string>erl_syntax:eof_marker() -&gt; syntaxTree()</string>
		<string>erl_syntax:error_marker</string>
		<string>erl_syntax:error_marker(&lt;#Error::term()#&gt;)</string>
		<string>erl_syntax:error_marker(Error::term()) -&gt; syntaxTree()</string>
		<string>erl_syntax:error_marker_info</string>
		<string>erl_syntax:error_marker_info(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:error_marker_info(Node::syntaxTree()) -&gt; term()</string>
		<string>erl_syntax:flatten_form_list</string>
		<string>erl_syntax:flatten_form_list(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:flatten_form_list(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:float</string>
		<string>erl_syntax:float(&lt;#Value::float()#&gt;)</string>
		<string>erl_syntax:float(Value::float()) -&gt; syntaxTree()</string>
		<string>erl_syntax:float_literal</string>
		<string>erl_syntax:float_literal(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:float_literal(Node::syntaxTree()) -&gt; string()</string>
		<string>erl_syntax:float_value</string>
		<string>erl_syntax:float_value(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:float_value(Node::syntaxTree()) -&gt; float()</string>
		<string>erl_syntax:form_list</string>
		<string>erl_syntax:form_list(&lt;#Forms::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:form_list(Forms::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:form_list_elements</string>
		<string>erl_syntax:form_list_elements(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:form_list_elements(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:fun_expr</string>
		<string>erl_syntax:fun_expr(&lt;#Clauses::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:fun_expr(Clauses::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:fun_expr_arity</string>
		<string>erl_syntax:fun_expr_arity(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:fun_expr_arity(Node::syntaxTree()) -&gt; arity()</string>
		<string>erl_syntax:fun_expr_clauses</string>
		<string>erl_syntax:fun_expr_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:fun_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:function</string>
		<string>erl_syntax:function(&lt;#Name::syntaxTree()#&gt;, &lt;#Clauses::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:function(Name::syntaxTree(), Clauses::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:function_arity</string>
		<string>erl_syntax:function_arity(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:function_arity(Node::syntaxTree()) -&gt; arity()</string>
		<string>erl_syntax:function_clauses</string>
		<string>erl_syntax:function_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:function_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:function_name</string>
		<string>erl_syntax:function_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:function_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:generator</string>
		<string>erl_syntax:generator(&lt;#Pattern::syntaxTree()#&gt;, &lt;#Body::syntaxTree()#&gt;)</string>
		<string>erl_syntax:generator(Pattern::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:generator_body</string>
		<string>erl_syntax:generator_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:generator_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:generator_pattern</string>
		<string>erl_syntax:generator_pattern(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:generator_pattern(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:get_ann</string>
		<string>erl_syntax:get_ann(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:get_ann(Tree::syntaxTree()) -&gt; [term()]</string>
		<string>erl_syntax:get_attrs</string>
		<string>erl_syntax:get_attrs(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:get_attrs(Tree::syntaxTree()) -&gt; syntaxTreeAttributes()</string>
		<string>erl_syntax:get_pos</string>
		<string>erl_syntax:get_pos(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:get_pos(Tree::syntaxTree()) -&gt; term()</string>
		<string>erl_syntax:get_postcomments</string>
		<string>erl_syntax:get_postcomments(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:get_postcomments(Tree::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:get_precomments</string>
		<string>erl_syntax:get_precomments(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:get_precomments(Tree::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:has_comments</string>
		<string>erl_syntax:has_comments(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:has_comments(Tree::syntaxTree()) -&gt; boolean()</string>
		<string>erl_syntax:if_expr</string>
		<string>erl_syntax:if_expr(&lt;#Clauses::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:if_expr(Clauses::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:if_expr_clauses</string>
		<string>erl_syntax:if_expr_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:if_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:implicit_fun</string>
		<string>erl_syntax:implicit_fun(&lt;#Name::syntaxTree()#&gt;)</string>
		<string>erl_syntax:implicit_fun(Name::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:implicit_fun</string>
		<string>erl_syntax:implicit_fun(&lt;#Name::syntaxTree()#&gt;, &lt;#Arity::none | syntaxTree()#&gt;)</string>
		<string>erl_syntax:implicit_fun(Name::syntaxTree(), Arity::none | syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:implicit_fun</string>
		<string>erl_syntax:implicit_fun(&lt;#Module::none | syntaxTree()#&gt;, &lt;#Name::syntaxTree()#&gt;, &lt;#Arity::syntaxTree()#&gt;)</string>
		<string>erl_syntax:implicit_fun(Module::none | syntaxTree(), Name::syntaxTree(), Arity::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:implicit_fun_name</string>
		<string>erl_syntax:implicit_fun_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:implicit_fun_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:infix_expr</string>
		<string>erl_syntax:infix_expr(&lt;#Left::syntaxTree()#&gt;, &lt;#Operator::syntaxTree()#&gt;, &lt;#Right::syntaxTree()#&gt;)</string>
		<string>erl_syntax:infix_expr(Left::syntaxTree(), Operator::syntaxTree(), Right::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:infix_expr_left</string>
		<string>erl_syntax:infix_expr_left(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:infix_expr_left(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:infix_expr_operator</string>
		<string>erl_syntax:infix_expr_operator(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:infix_expr_operator(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:infix_expr_right</string>
		<string>erl_syntax:infix_expr_right(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:infix_expr_right(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:integer</string>
		<string>erl_syntax:integer(&lt;#Value::integer()#&gt;)</string>
		<string>erl_syntax:integer(Value::integer()) -&gt; syntaxTree()</string>
		<string>erl_syntax:integer_literal</string>
		<string>erl_syntax:integer_literal(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:integer_literal(Node::syntaxTree()) -&gt; string()</string>
		<string>erl_syntax:integer_value</string>
		<string>erl_syntax:integer_value(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:integer_value(Node::syntaxTree()) -&gt; integer()</string>
		<string>erl_syntax:is_atom</string>
		<string>erl_syntax:is_atom(&lt;#Node::syntaxTree()#&gt;, &lt;#Value::atom()#&gt;)</string>
		<string>erl_syntax:is_atom(Node::syntaxTree(), Value::atom()) -&gt; boolean()</string>
		<string>erl_syntax:is_char</string>
		<string>erl_syntax:is_char(&lt;#Node::syntaxTree()#&gt;, &lt;#Value::char()#&gt;)</string>
		<string>erl_syntax:is_char(Node::syntaxTree(), Value::char()) -&gt; boolean()</string>
		<string>erl_syntax:is_form</string>
		<string>erl_syntax:is_form(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:is_form(Node::syntaxTree()) -&gt; boolean()</string>
		<string>erl_syntax:is_integer</string>
		<string>erl_syntax:is_integer(&lt;#Node::syntaxTree()#&gt;, &lt;#Value::integer()#&gt;)</string>
		<string>erl_syntax:is_integer(Node::syntaxTree(), Value::integer()) -&gt; boolean()</string>
		<string>erl_syntax:is_leaf</string>
		<string>erl_syntax:is_leaf(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:is_leaf(Node::syntaxTree()) -&gt; boolean()</string>
		<string>erl_syntax:is_list_skeleton</string>
		<string>erl_syntax:is_list_skeleton(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:is_list_skeleton(Node::syntaxTree()) -&gt; boolean()</string>
		<string>erl_syntax:is_literal</string>
		<string>erl_syntax:is_literal(&lt;#T::syntaxTree()#&gt;)</string>
		<string>erl_syntax:is_literal(T::syntaxTree()) -&gt; boolean()</string>
		<string>erl_syntax:is_proper_list</string>
		<string>erl_syntax:is_proper_list(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:is_proper_list(Node::syntaxTree()) -&gt; boolean()</string>
		<string>erl_syntax:is_string</string>
		<string>erl_syntax:is_string(&lt;#Node::syntaxTree()#&gt;, &lt;#Value::string()#&gt;)</string>
		<string>erl_syntax:is_string(Node::syntaxTree(), Value::string()) -&gt; boolean()</string>
		<string>erl_syntax:is_tree</string>
		<string>erl_syntax:is_tree(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:is_tree(Tree::syntaxTree()) -&gt; boolean()</string>
		<string>erl_syntax:join_comments</string>
		<string>erl_syntax:join_comments(&lt;#Source::syntaxTree()#&gt;, &lt;#Target::syntaxTree()#&gt;)</string>
		<string>erl_syntax:join_comments(Source::syntaxTree(), Target::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:list</string>
		<string>erl_syntax:list(&lt;#List::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:list(List::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:list</string>
		<string>erl_syntax:list(&lt;#Elements::[syntaxTree()]#&gt;, &lt;#Tail::none | syntaxTree()#&gt;)</string>
		<string>erl_syntax:list(Elements::[syntaxTree()], Tail::none | syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:list_comp</string>
		<string>erl_syntax:list_comp(&lt;#Template::syntaxTree()#&gt;, &lt;#Body::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:list_comp(Template::syntaxTree(), Body::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:list_comp_body</string>
		<string>erl_syntax:list_comp_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:list_comp_body(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:list_comp_template</string>
		<string>erl_syntax:list_comp_template(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:list_comp_template(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:list_elements</string>
		<string>erl_syntax:list_elements(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:list_elements(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:list_head</string>
		<string>erl_syntax:list_head(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:list_head(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:list_length</string>
		<string>erl_syntax:list_length(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:list_length(Node::syntaxTree()) -&gt; non_neg_integer()</string>
		<string>erl_syntax:list_prefix</string>
		<string>erl_syntax:list_prefix(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:list_prefix(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:list_suffix</string>
		<string>erl_syntax:list_suffix(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:list_suffix(Node::syntaxTree()) -&gt; none | syntaxTree()</string>
		<string>erl_syntax:list_tail</string>
		<string>erl_syntax:list_tail(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:list_tail(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:macro</string>
		<string>erl_syntax:macro(&lt;#Name::syntaxTree()#&gt;)</string>
		<string>erl_syntax:macro(Name::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:macro</string>
		<string>erl_syntax:macro(&lt;#Name::syntaxTree()#&gt;, &lt;#Arguments::none | [syntaxTree()]#&gt;)</string>
		<string>erl_syntax:macro(Name::syntaxTree(), Arguments::none | [syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:macro_arguments</string>
		<string>erl_syntax:macro_arguments(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:macro_arguments(Node::syntaxTree()) -&gt; none | [syntaxTree()]</string>
		<string>erl_syntax:macro_name</string>
		<string>erl_syntax:macro_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:macro_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:make_tree</string>
		<string>erl_syntax:make_tree(&lt;#X1::atom()#&gt;, &lt;#X2::[[syntaxTree()]]#&gt;)</string>
		<string>erl_syntax:make_tree(X1::atom(), X2::[[syntaxTree()]]) -&gt; syntaxTree()</string>
		<string>erl_syntax:map_expr</string>
		<string>erl_syntax:map_expr(&lt;#Fields::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:map_expr(Fields::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:map_expr</string>
		<string>erl_syntax:map_expr(&lt;#Argument::none | syntaxTree()#&gt;, &lt;#Fields::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:map_expr(Argument::none | syntaxTree(), Fields::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:map_expr_argument</string>
		<string>erl_syntax:map_expr_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:map_expr_argument(Node::syntaxTree()) -&gt; none | syntaxTree()</string>
		<string>erl_syntax:map_expr_fields</string>
		<string>erl_syntax:map_expr_fields(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:map_expr_fields(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:map_field_assoc</string>
		<string>erl_syntax:map_field_assoc(&lt;#Name::syntaxTree()#&gt;, &lt;#Value::syntaxTree()#&gt;)</string>
		<string>erl_syntax:map_field_assoc(Name::syntaxTree(), Value::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:map_field_assoc_name</string>
		<string>erl_syntax:map_field_assoc_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:map_field_assoc_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:map_field_assoc_value</string>
		<string>erl_syntax:map_field_assoc_value(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:map_field_assoc_value(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:map_field_exact</string>
		<string>erl_syntax:map_field_exact(&lt;#Name::syntaxTree()#&gt;, &lt;#Value::syntaxTree()#&gt;)</string>
		<string>erl_syntax:map_field_exact(Name::syntaxTree(), Value::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:map_field_exact_name</string>
		<string>erl_syntax:map_field_exact_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:map_field_exact_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:map_field_exact_value</string>
		<string>erl_syntax:map_field_exact_value(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:map_field_exact_value(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:match_expr</string>
		<string>erl_syntax:match_expr(&lt;#Pattern::syntaxTree()#&gt;, &lt;#Body::syntaxTree()#&gt;)</string>
		<string>erl_syntax:match_expr(Pattern::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:match_expr_body</string>
		<string>erl_syntax:match_expr_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:match_expr_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:match_expr_pattern</string>
		<string>erl_syntax:match_expr_pattern(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:match_expr_pattern(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:meta</string>
		<string>erl_syntax:meta(&lt;#T::syntaxTree()#&gt;)</string>
		<string>erl_syntax:meta(T::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:module_qualifier</string>
		<string>erl_syntax:module_qualifier(&lt;#Module::syntaxTree()#&gt;, &lt;#Body::syntaxTree()#&gt;)</string>
		<string>erl_syntax:module_qualifier(Module::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:module_qualifier_argument</string>
		<string>erl_syntax:module_qualifier_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:module_qualifier_argument(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:module_qualifier_body</string>
		<string>erl_syntax:module_qualifier_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:module_qualifier_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:named_fun_expr</string>
		<string>erl_syntax:named_fun_expr(&lt;#Name::syntaxTree()#&gt;, &lt;#Clauses::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:named_fun_expr(Name::syntaxTree(), Clauses::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:named_fun_expr_arity</string>
		<string>erl_syntax:named_fun_expr_arity(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:named_fun_expr_arity(Node::syntaxTree()) -&gt; arity()</string>
		<string>erl_syntax:named_fun_expr_clauses</string>
		<string>erl_syntax:named_fun_expr_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:named_fun_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:named_fun_expr_name</string>
		<string>erl_syntax:named_fun_expr_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:named_fun_expr_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:nil</string>
		<string>erl_syntax:nil()</string>
		<string>erl_syntax:nil() -&gt; syntaxTree()</string>
		<string>erl_syntax:normalize_list</string>
		<string>erl_syntax:normalize_list(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:normalize_list(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:operator</string>
		<string>erl_syntax:operator(&lt;#Name::atom() | string()#&gt;)</string>
		<string>erl_syntax:operator(Name::atom() | string()) -&gt; syntaxTree()</string>
		<string>erl_syntax:operator_literal</string>
		<string>erl_syntax:operator_literal(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:operator_literal(Node::syntaxTree()) -&gt; string()</string>
		<string>erl_syntax:operator_name</string>
		<string>erl_syntax:operator_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:operator_name(Node::syntaxTree()) -&gt; atom()</string>
		<string>erl_syntax:parentheses</string>
		<string>erl_syntax:parentheses(&lt;#Expr::syntaxTree()#&gt;)</string>
		<string>erl_syntax:parentheses(Expr::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:parentheses_body</string>
		<string>erl_syntax:parentheses_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:parentheses_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:prefix_expr</string>
		<string>erl_syntax:prefix_expr(&lt;#Operator::syntaxTree()#&gt;, &lt;#Argument::syntaxTree()#&gt;)</string>
		<string>erl_syntax:prefix_expr(Operator::syntaxTree(), Argument::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:prefix_expr_argument</string>
		<string>erl_syntax:prefix_expr_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:prefix_expr_argument(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:prefix_expr_operator</string>
		<string>erl_syntax:prefix_expr_operator(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:prefix_expr_operator(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:receive_expr</string>
		<string>erl_syntax:receive_expr(&lt;#Clauses::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:receive_expr(Clauses::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:receive_expr</string>
		<string>erl_syntax:receive_expr(&lt;#Clauses::[syntaxTree()]#&gt;, &lt;#Timeout::none | syntaxTree()#&gt;, &lt;#Action::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:receive_expr(Clauses::[syntaxTree()], Timeout::none | syntaxTree(), Action::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:receive_expr_action</string>
		<string>erl_syntax:receive_expr_action(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:receive_expr_action(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:receive_expr_clauses</string>
		<string>erl_syntax:receive_expr_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:receive_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:receive_expr_timeout</string>
		<string>erl_syntax:receive_expr_timeout(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:receive_expr_timeout(Node::syntaxTree()) -&gt; none | syntaxTree()</string>
		<string>erl_syntax:record_access</string>
		<string>erl_syntax:record_access(&lt;#Argument::syntaxTree()#&gt;, &lt;#Field::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_access(Argument::syntaxTree(), Field::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_access</string>
		<string>erl_syntax:record_access(&lt;#Argument::syntaxTree()#&gt;, &lt;#Type::none | syntaxTree()#&gt;, &lt;#Field::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_access(Argument::syntaxTree(), Type::none | syntaxTree(), Field::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_access_argument</string>
		<string>erl_syntax:record_access_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_access_argument(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_access_field</string>
		<string>erl_syntax:record_access_field(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_access_field(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_access_type</string>
		<string>erl_syntax:record_access_type(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_access_type(Node::syntaxTree()) -&gt; none | syntaxTree()</string>
		<string>erl_syntax:record_expr</string>
		<string>erl_syntax:record_expr(&lt;#Type::syntaxTree()#&gt;, &lt;#Fields::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:record_expr(Type::syntaxTree(), Fields::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_expr</string>
		<string>erl_syntax:record_expr(&lt;#Argument::none | syntaxTree()#&gt;, &lt;#Type::syntaxTree()#&gt;, &lt;#Fields::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:record_expr(Argument::none | syntaxTree(), Type::syntaxTree(), Fields::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_expr_argument</string>
		<string>erl_syntax:record_expr_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_expr_argument(Node::syntaxTree()) -&gt; none | syntaxTree()</string>
		<string>erl_syntax:record_expr_fields</string>
		<string>erl_syntax:record_expr_fields(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_expr_fields(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:record_expr_type</string>
		<string>erl_syntax:record_expr_type(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_expr_type(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_field</string>
		<string>erl_syntax:record_field(&lt;#Name::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_field(Name::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_field</string>
		<string>erl_syntax:record_field(&lt;#Name::syntaxTree()#&gt;, &lt;#Value::none | syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_field(Name::syntaxTree(), Value::none | syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_field_name</string>
		<string>erl_syntax:record_field_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_field_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_field_value</string>
		<string>erl_syntax:record_field_value(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_field_value(Node::syntaxTree()) -&gt; none | syntaxTree()</string>
		<string>erl_syntax:record_index_expr</string>
		<string>erl_syntax:record_index_expr(&lt;#Type::syntaxTree()#&gt;, &lt;#Field::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_index_expr(Type::syntaxTree(), Field::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_index_expr_field</string>
		<string>erl_syntax:record_index_expr_field(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_index_expr_field(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:record_index_expr_type</string>
		<string>erl_syntax:record_index_expr_type(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:record_index_expr_type(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:remove_comments</string>
		<string>erl_syntax:remove_comments(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:remove_comments(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:revert</string>
		<string>erl_syntax:revert(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:revert(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:revert_forms</string>
		<string>erl_syntax:revert_forms(&lt;#Forms::forms()#&gt;)</string>
		<string>erl_syntax:revert_forms(Forms::forms()) -&gt; [erl_parse()]</string>
		<string>erl_syntax:rule</string>
		<string>erl_syntax:rule(&lt;#Name::syntaxTree()#&gt;, &lt;#Clauses::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:rule(Name::syntaxTree(), Clauses::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:rule_arity</string>
		<string>erl_syntax:rule_arity(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:rule_arity(Node::syntaxTree()) -&gt; arity()</string>
		<string>erl_syntax:rule_clauses</string>
		<string>erl_syntax:rule_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:rule_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:rule_name</string>
		<string>erl_syntax:rule_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:rule_name(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:set_ann</string>
		<string>erl_syntax:set_ann(&lt;#Node::syntaxTree()#&gt;, &lt;#As::[term()]#&gt;)</string>
		<string>erl_syntax:set_ann(Node::syntaxTree(), As::[term()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:set_attrs</string>
		<string>erl_syntax:set_attrs(&lt;#Node::syntaxTree()#&gt;, &lt;#Attr::syntaxTreeAttributes()#&gt;)</string>
		<string>erl_syntax:set_attrs(Node::syntaxTree(), Attr::syntaxTreeAttributes()) -&gt; syntaxTree()</string>
		<string>erl_syntax:set_pos</string>
		<string>erl_syntax:set_pos(&lt;#Node::syntaxTree()#&gt;, &lt;#Pos::term()#&gt;)</string>
		<string>erl_syntax:set_pos(Node::syntaxTree(), Pos::term()) -&gt; syntaxTree()</string>
		<string>erl_syntax:set_postcomments</string>
		<string>erl_syntax:set_postcomments(&lt;#Node::syntaxTree()#&gt;, &lt;#Cs::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:set_postcomments(Node::syntaxTree(), Cs::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:set_precomments</string>
		<string>erl_syntax:set_precomments(&lt;#Node::syntaxTree()#&gt;, &lt;#Cs::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:set_precomments(Node::syntaxTree(), Cs::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:size_qualifier</string>
		<string>erl_syntax:size_qualifier(&lt;#Body::syntaxTree()#&gt;, &lt;#Size::syntaxTree()#&gt;)</string>
		<string>erl_syntax:size_qualifier(Body::syntaxTree(), Size::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:size_qualifier_argument</string>
		<string>erl_syntax:size_qualifier_argument(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:size_qualifier_argument(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:size_qualifier_body</string>
		<string>erl_syntax:size_qualifier_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:size_qualifier_body(Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax:string</string>
		<string>erl_syntax:string(&lt;#String::string()#&gt;)</string>
		<string>erl_syntax:string(String::string()) -&gt; syntaxTree()</string>
		<string>erl_syntax:string_literal</string>
		<string>erl_syntax:string_literal(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:string_literal(Node::syntaxTree()) -&gt; nonempty_string()</string>
		<string>erl_syntax:string_literal</string>
		<string>erl_syntax:string_literal(&lt;#Node::syntaxTree()#&gt;, &lt;#X2::encoding()#&gt;)</string>
		<string>erl_syntax:string_literal(Node::syntaxTree(), X2::encoding()) -&gt; nonempty_string()</string>
		<string>erl_syntax:string_value</string>
		<string>erl_syntax:string_value(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:string_value(Node::syntaxTree()) -&gt; string()</string>
		<string>erl_syntax:subtrees</string>
		<string>erl_syntax:subtrees(&lt;#T::syntaxTree()#&gt;)</string>
		<string>erl_syntax:subtrees(T::syntaxTree()) -&gt; [[syntaxTree()]]</string>
		<string>erl_syntax:text</string>
		<string>erl_syntax:text(&lt;#String::string()#&gt;)</string>
		<string>erl_syntax:text(String::string()) -&gt; syntaxTree()</string>
		<string>erl_syntax:text_string</string>
		<string>erl_syntax:text_string(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:text_string(Node::syntaxTree()) -&gt; string()</string>
		<string>erl_syntax:tree</string>
		<string>erl_syntax:tree(&lt;#Type::atom()#&gt;)</string>
		<string>erl_syntax:tree(Type::atom()) -&gt; #tree{}</string>
		<string>erl_syntax:tree</string>
		<string>erl_syntax:tree(&lt;#Type::atom()#&gt;, &lt;#Data::term()#&gt;)</string>
		<string>erl_syntax:tree(Type::atom(), Data::term()) -&gt; #tree{}</string>
		<string>erl_syntax:try_after_expr</string>
		<string>erl_syntax:try_after_expr(&lt;#Body::[syntaxTree()]#&gt;, &lt;#After::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:try_after_expr(Body::[syntaxTree()], After::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:try_expr</string>
		<string>erl_syntax:try_expr(&lt;#Body::[syntaxTree()]#&gt;, &lt;#Handlers::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:try_expr(Body::[syntaxTree()], Handlers::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:try_expr</string>
		<string>erl_syntax:try_expr(&lt;#Body::[syntaxTree()]#&gt;, &lt;#Clauses::[syntaxTree()]#&gt;, &lt;#Handlers::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:try_expr(Body::[syntaxTree()], Clauses::[syntaxTree()], Handlers::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:try_expr</string>
		<string>erl_syntax:try_expr(&lt;#Body::[syntaxTree()]#&gt;, &lt;#Clauses::[syntaxTree()]#&gt;, &lt;#Handlers::[syntaxTree()]#&gt;, &lt;#After::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:try_expr(Body::[syntaxTree()], Clauses::[syntaxTree()], Handlers::[syntaxTree()], After::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:try_expr_after</string>
		<string>erl_syntax:try_expr_after(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:try_expr_after(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:try_expr_body</string>
		<string>erl_syntax:try_expr_body(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:try_expr_body(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:try_expr_clauses</string>
		<string>erl_syntax:try_expr_clauses(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:try_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:try_expr_handlers</string>
		<string>erl_syntax:try_expr_handlers(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:try_expr_handlers(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:tuple</string>
		<string>erl_syntax:tuple(&lt;#List::[syntaxTree()]#&gt;)</string>
		<string>erl_syntax:tuple(List::[syntaxTree()]) -&gt; syntaxTree()</string>
		<string>erl_syntax:tuple_elements</string>
		<string>erl_syntax:tuple_elements(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:tuple_elements(Node::syntaxTree()) -&gt; [syntaxTree()]</string>
		<string>erl_syntax:tuple_size</string>
		<string>erl_syntax:tuple_size(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:tuple_size(Node::syntaxTree()) -&gt; non_neg_integer()</string>
		<string>erl_syntax:type</string>
		<string>erl_syntax:type(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax:type(Tree::syntaxTree()) -&gt; atom()</string>
		<string>erl_syntax:underscore</string>
		<string>erl_syntax:underscore()</string>
		<string>erl_syntax:underscore() -&gt; syntaxTree()</string>
		<string>erl_syntax:update_tree</string>
		<string>erl_syntax:update_tree(&lt;#Node::syntaxTree()#&gt;, &lt;#Groups::[[syntaxTree()]]#&gt;)</string>
		<string>erl_syntax:update_tree(Node::syntaxTree(), Groups::[[syntaxTree()]]) -&gt; syntaxTree()</string>
		<string>erl_syntax:variable</string>
		<string>erl_syntax:variable(&lt;#Name::atom() | string()#&gt;)</string>
		<string>erl_syntax:variable(Name::atom() | string()) -&gt; syntaxTree()</string>
		<string>erl_syntax:variable_literal</string>
		<string>erl_syntax:variable_literal(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:variable_literal(Node::syntaxTree()) -&gt; string()</string>
		<string>erl_syntax:variable_name</string>
		<string>erl_syntax:variable_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:variable_name(Node::syntaxTree()) -&gt; atom()</string>
		<string>erl_syntax:warning_marker</string>
		<string>erl_syntax:warning_marker(&lt;#Warning::term()#&gt;)</string>
		<string>erl_syntax:warning_marker(Warning::term()) -&gt; syntaxTree()</string>
		<string>erl_syntax:warning_marker_info</string>
		<string>erl_syntax:warning_marker_info(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax:warning_marker_info(Node::syntaxTree()) -&gt; term()</string>
		<string>erl_syntax_lib:analyze_application</string>
		<string>erl_syntax_lib:analyze_application(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_application(Node::syntaxTree()) -&gt; FunctionName | Arity</string>
		<string>erl_syntax_lib:analyze_attribute</string>
		<string>erl_syntax_lib:analyze_attribute(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_attribute(Node::syntaxTree()) -&gt; preprocessor | {atom(), atom()}</string>
		<string>erl_syntax_lib:analyze_export_attribute</string>
		<string>erl_syntax_lib:analyze_export_attribute(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_export_attribute(Node::syntaxTree()) -&gt; [FunctionName]</string>
		<string>erl_syntax_lib:analyze_file_attribute</string>
		<string>erl_syntax_lib:analyze_file_attribute(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_file_attribute(Node::syntaxTree()) -&gt; {string(), integer()}</string>
		<string>erl_syntax_lib:analyze_form</string>
		<string>erl_syntax_lib:analyze_form(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_form(Node::syntaxTree()) -&gt; {atom(), term()} | atom()</string>
		<string>erl_syntax_lib:analyze_forms</string>
		<string>erl_syntax_lib:analyze_forms(&lt;#Forms#&gt;)</string>
		<string>erl_syntax_lib:analyze_forms(Forms) -&gt; [{Key, term()}]</string>
		<string>erl_syntax_lib:analyze_function</string>
		<string>erl_syntax_lib:analyze_function(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_function(Node::syntaxTree()) -&gt; {atom(), integer()}</string>
		<string>erl_syntax_lib:analyze_function_name</string>
		<string>erl_syntax_lib:analyze_function_name(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_function_name(Node::syntaxTree()) -&gt; FunctionName</string>
		<string>erl_syntax_lib:analyze_implicit_fun</string>
		<string>erl_syntax_lib:analyze_implicit_fun(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_implicit_fun(Node::syntaxTree()) -&gt; FunctionName</string>
		<string>erl_syntax_lib:analyze_import_attribute</string>
		<string>erl_syntax_lib:analyze_import_attribute(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_import_attribute(Node::syntaxTree()) -&gt; {atom(), [FunctionName]} | atom()</string>
		<string>erl_syntax_lib:analyze_module_attribute</string>
		<string>erl_syntax_lib:analyze_module_attribute(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_module_attribute(Node::syntaxTree()) -&gt; Name::atom() | {Name::atom(), Variables::[atom()]}</string>
		<string>erl_syntax_lib:analyze_record_attribute</string>
		<string>erl_syntax_lib:analyze_record_attribute(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_record_attribute(Node::syntaxTree()) -&gt; {atom(), Fields}</string>
		<string>erl_syntax_lib:analyze_record_expr</string>
		<string>erl_syntax_lib:analyze_record_expr(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_record_expr(Node::syntaxTree()) -&gt; {atom(), Info} | atom()</string>
		<string>erl_syntax_lib:analyze_record_field</string>
		<string>erl_syntax_lib:analyze_record_field(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_record_field(Node::syntaxTree()) -&gt; {atom(), Value}</string>
		<string>erl_syntax_lib:analyze_rule</string>
		<string>erl_syntax_lib:analyze_rule(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_rule(Node::syntaxTree()) -&gt; {atom(), integer()}</string>
		<string>erl_syntax_lib:analyze_wild_attribute</string>
		<string>erl_syntax_lib:analyze_wild_attribute(&lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:analyze_wild_attribute(Node::syntaxTree()) -&gt; {atom(), term()}</string>
		<string>erl_syntax_lib:annotate_bindings</string>
		<string>erl_syntax_lib:annotate_bindings(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:annotate_bindings(Tree::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:annotate_bindings</string>
		<string>erl_syntax_lib:annotate_bindings(&lt;#Tree::syntaxTree()#&gt;, &lt;#Bindings::ordset(atom())#&gt;)</string>
		<string>erl_syntax_lib:annotate_bindings(Tree::syntaxTree(), Bindings::ordset(atom())) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:fold</string>
		<string>erl_syntax_lib:fold(&lt;#F::Function#&gt;, &lt;#Start::term()#&gt;, &lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:fold(F::Function, Start::term(), Tree::syntaxTree()) -&gt; term()</string>
		<string>erl_syntax_lib:fold_subtrees</string>
		<string>erl_syntax_lib:fold_subtrees(&lt;#F::Function#&gt;, &lt;#Start::term()#&gt;, &lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:fold_subtrees(F::Function, Start::term(), Tree::syntaxTree()) -&gt; term()</string>
		<string>erl_syntax_lib:foldl_listlist</string>
		<string>erl_syntax_lib:foldl_listlist(&lt;#F::Function#&gt;, &lt;#Start::term()#&gt;, &lt;#Ls::[[term()]]#&gt;)</string>
		<string>erl_syntax_lib:foldl_listlist(F::Function, Start::term(), Ls::[[term()]]) -&gt; term()</string>
		<string>erl_syntax_lib:function_name_expansions</string>
		<string>erl_syntax_lib:function_name_expansions(&lt;#Names::[Name]#&gt;)</string>
		<string>erl_syntax_lib:function_name_expansions(Names::[Name]) -&gt; [{ShortName, Name}]</string>
		<string>erl_syntax_lib:is_fail_expr</string>
		<string>erl_syntax_lib:is_fail_expr(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:is_fail_expr(Tree::syntaxTree()) -&gt; boolean()</string>
		<string>erl_syntax_lib:limit</string>
		<string>erl_syntax_lib:limit(&lt;#Tree#&gt;, &lt;#Depth#&gt;)</string>
		<string>erl_syntax_lib:limit(Tree, Depth) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:limit</string>
		<string>erl_syntax_lib:limit(&lt;#Tree::syntaxTree()#&gt;, &lt;#Depth::integer()#&gt;, &lt;#Node::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:limit(Tree::syntaxTree(), Depth::integer(), Node::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:map</string>
		<string>erl_syntax_lib:map(&lt;#F::Function#&gt;, &lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:map(F::Function, Tree::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:map_subtrees</string>
		<string>erl_syntax_lib:map_subtrees(&lt;#F::Function#&gt;, &lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:map_subtrees(F::Function, Tree::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:mapfold</string>
		<string>erl_syntax_lib:mapfold(&lt;#F::Function#&gt;, &lt;#Start::term()#&gt;, &lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:mapfold(F::Function, Start::term(), Tree::syntaxTree()) -&gt; {syntaxTree(), term()}</string>
		<string>erl_syntax_lib:mapfold_subtrees</string>
		<string>erl_syntax_lib:mapfold_subtrees(&lt;#F::Function#&gt;, &lt;#Start::term()#&gt;, &lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:mapfold_subtrees(F::Function, Start::term(), Tree::syntaxTree()) -&gt; {syntaxTree(), term()}</string>
		<string>erl_syntax_lib:mapfoldl_listlist</string>
		<string>erl_syntax_lib:mapfoldl_listlist(&lt;#F::Function#&gt;, &lt;#S::State#&gt;, &lt;#Ls::[[term()]]#&gt;)</string>
		<string>erl_syntax_lib:mapfoldl_listlist(F::Function, S::State, Ls::[[term()]]) -&gt; {[[term()]], term()}</string>
		<string>erl_syntax_lib:new_variable_name</string>
		<string>erl_syntax_lib:new_variable_name(&lt;#Used::set(atom())#&gt;)</string>
		<string>erl_syntax_lib:new_variable_name(Used::set(atom())) -&gt; atom()</string>
		<string>erl_syntax_lib:new_variable_name</string>
		<string>erl_syntax_lib:new_variable_name(&lt;#F::Function#&gt;, &lt;#Used::set(atom())#&gt;)</string>
		<string>erl_syntax_lib:new_variable_name(F::Function, Used::set(atom())) -&gt; atom()</string>
		<string>erl_syntax_lib:new_variable_names</string>
		<string>erl_syntax_lib:new_variable_names(&lt;#N::integer()#&gt;, &lt;#Used::set(atom())#&gt;)</string>
		<string>erl_syntax_lib:new_variable_names(N::integer(), Used::set(atom())) -&gt; [atom()]</string>
		<string>erl_syntax_lib:new_variable_names</string>
		<string>erl_syntax_lib:new_variable_names(&lt;#N::integer()#&gt;, &lt;#F::Function#&gt;, &lt;#Used::set(atom())#&gt;)</string>
		<string>erl_syntax_lib:new_variable_names(N::integer(), F::Function, Used::set(atom())) -&gt; [atom()]</string>
		<string>erl_syntax_lib:strip_comments</string>
		<string>erl_syntax_lib:strip_comments(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:strip_comments(Tree::syntaxTree()) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:to_comment</string>
		<string>erl_syntax_lib:to_comment(&lt;#Tree#&gt;)</string>
		<string>erl_syntax_lib:to_comment(Tree) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:to_comment</string>
		<string>erl_syntax_lib:to_comment(&lt;#Tree::syntaxTree()#&gt;, &lt;#Prefix::string()#&gt;)</string>
		<string>erl_syntax_lib:to_comment(Tree::syntaxTree(), Prefix::string()) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:to_comment</string>
		<string>erl_syntax_lib:to_comment(&lt;#Tree::syntaxTree()#&gt;, &lt;#Prefix::string()#&gt;, &lt;#F::Printer#&gt;)</string>
		<string>erl_syntax_lib:to_comment(Tree::syntaxTree(), Prefix::string(), F::Printer) -&gt; syntaxTree()</string>
		<string>erl_syntax_lib:variables</string>
		<string>erl_syntax_lib:variables(&lt;#Tree::syntaxTree()#&gt;)</string>
		<string>erl_syntax_lib:variables(Tree::syntaxTree()) -&gt; set(atom())</string>
		<string>erl_tidy:dir</string>
		<string>erl_tidy:dir()</string>
		<string>erl_tidy:dir() -&gt; ok</string>
		<string>erl_tidy:dir</string>
		<string>erl_tidy:dir(&lt;#Dir#&gt;)</string>
		<string>erl_tidy:dir(Dir) -&gt; ok</string>
		<string>erl_tidy:dir</string>
		<string>erl_tidy:dir(&lt;#Directory::filename()#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>erl_tidy:dir(Directory::filename(), Options::[term()]) -&gt; ok</string>
		<string>erl_tidy:file</string>
		<string>erl_tidy:file(&lt;#Name#&gt;)</string>
		<string>erl_tidy:file(Name) -&gt; ok</string>
		<string>erl_tidy:file</string>
		<string>erl_tidy:file(&lt;#Name::filename()#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>erl_tidy:file(Name::filename(), Options::[term()]) -&gt; ok</string>
		<string>erl_tidy:module</string>
		<string>erl_tidy:module(&lt;#Forms#&gt;)</string>
		<string>erl_tidy:module(Forms) -&gt; syntaxTree()</string>
		<string>erl_tidy:module</string>
		<string>erl_tidy:module(&lt;#Forms#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>erl_tidy:module(Forms, Options::[term()]) -&gt; syntaxTree()</string>
		<string>abs</string>
		<string>abs(&lt;#Float#&gt;)</string>
		<string>abs(Float) -&gt; float()</string>
		<string>abs</string>
		<string>abs(&lt;#Int#&gt;)</string>
		<string>abs(Int) -&gt; integer() &gt;= 0</string>
		<string>erlang:adler32</string>
		<string>erlang:adler32(&lt;#Data#&gt;)</string>
		<string>erlang:adler32(Data) -&gt; integer() &gt;= 0</string>
		<string>erlang:adler32</string>
		<string>erlang:adler32(&lt;#OldAdler#&gt;, &lt;#Data#&gt;)</string>
		<string>erlang:adler32(OldAdler, Data) -&gt; integer() &gt;= 0</string>
		<string>erlang:adler32_combine</string>
		<string>erlang:adler32_combine(&lt;#FirstAdler#&gt;, &lt;#SecondAdler#&gt;, &lt;#SecondSize#&gt;)</string>
		<string>erlang:adler32_combine(FirstAdler, SecondAdler, SecondSize) -&gt; integer() &gt;= 0</string>
		<string>erlang:append</string>
		<string>erlang:append(&lt;#List#&gt;, &lt;#Tail#&gt;)</string>
		<string>erlang:append(List, Tail) -&gt; maybe_improper_list()</string>
		<string>erlang:append_element</string>
		<string>erlang:append_element(&lt;#Tuple1#&gt;, &lt;#Term#&gt;)</string>
		<string>erlang:append_element(Tuple1, Term) -&gt; Tuple2</string>
		<string>apply</string>
		<string>apply(&lt;#Fun#&gt;, &lt;#Args#&gt;)</string>
		<string>apply(Fun, Args) -&gt; term()</string>
		<string>apply</string>
		<string>apply(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>apply(Module, Function, Args) -&gt; term()</string>
		<string>atom_to_binary</string>
		<string>atom_to_binary(&lt;#Atom#&gt;, &lt;#Encoding#&gt;)</string>
		<string>atom_to_binary(Atom, Encoding) -&gt; binary()</string>
		<string>atom_to_list</string>
		<string>atom_to_list(&lt;#Atom#&gt;)</string>
		<string>atom_to_list(Atom) -&gt; string()</string>
		<string>erlang:await_proc_exit</string>
		<string>erlang:await_proc_exit(&lt;#Proc :: dst()#&gt;, &lt;#Op :: apply | data | reason#&gt;, &lt;#Data :: term()#&gt;)</string>
		<string>erlang:await_proc_exit(Proc :: dst(), Op :: apply | data | reason, Data :: term()) -&gt; term()</string>
		<string>erlang:await_sched_wall_time_modifications</string>
		<string>erlang:await_sched_wall_time_modifications(&lt;#Ref#&gt;, &lt;#Result#&gt;)</string>
		<string>erlang:await_sched_wall_time_modifications(Ref, Result) -&gt; boolean()</string>
		<string>binary_part</string>
		<string>binary_part(&lt;#Subject#&gt;, &lt;#PosLen#&gt;)</string>
		<string>binary_part(Subject, PosLen) -&gt; binary()</string>
		<string>binary_part</string>
		<string>binary_part(&lt;#Subject#&gt;, &lt;#Start#&gt;, &lt;#Length#&gt;)</string>
		<string>binary_part(Subject, Start, Length) -&gt; binary()</string>
		<string>binary_to_atom</string>
		<string>binary_to_atom(&lt;#Binary#&gt;, &lt;#Encoding#&gt;)</string>
		<string>binary_to_atom(Binary, Encoding) -&gt; atom()</string>
		<string>binary_to_existing_atom</string>
		<string>binary_to_existing_atom(&lt;#Binary#&gt;, &lt;#Encoding#&gt;)</string>
		<string>binary_to_existing_atom(Binary, Encoding) -&gt; atom()</string>
		<string>binary_to_float</string>
		<string>binary_to_float(&lt;#Binary#&gt;)</string>
		<string>binary_to_float(Binary) -&gt; float()</string>
		<string>binary_to_integer</string>
		<string>binary_to_integer(&lt;#Binary#&gt;)</string>
		<string>binary_to_integer(Binary) -&gt; integer()</string>
		<string>binary_to_integer</string>
		<string>binary_to_integer(&lt;#Binary#&gt;, &lt;#Base#&gt;)</string>
		<string>binary_to_integer(Binary, Base) -&gt; integer()</string>
		<string>binary_to_list</string>
		<string>binary_to_list(&lt;#Binary#&gt;)</string>
		<string>binary_to_list(Binary) -&gt; [byte()]</string>
		<string>binary_to_list</string>
		<string>binary_to_list(&lt;#Binary#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>binary_to_list(Binary, Start, Stop) -&gt; [byte()]</string>
		<string>binary_to_term</string>
		<string>binary_to_term(&lt;#Binary#&gt;)</string>
		<string>binary_to_term(Binary) -&gt; term()</string>
		<string>binary_to_term</string>
		<string>binary_to_term(&lt;#Binary#&gt;, &lt;#Opts#&gt;)</string>
		<string>binary_to_term(Binary, Opts) -&gt; term()</string>
		<string>bit_size</string>
		<string>bit_size(&lt;#Bitstring#&gt;)</string>
		<string>bit_size(Bitstring) -&gt; integer() &gt;= 0</string>
		<string>bitsize</string>
		<string>bitsize(&lt;#P1#&gt;)</string>
		<string>bitsize(P1) -&gt; integer() &gt;= 0</string>
		<string>bitstring_to_list</string>
		<string>bitstring_to_list(&lt;#Bitstring#&gt;)</string>
		<string>bitstring_to_list(Bitstring) -&gt; [byte() | bitstring()]</string>
		<string>erlang:bump_reductions</string>
		<string>erlang:bump_reductions(&lt;#Reductions#&gt;)</string>
		<string>erlang:bump_reductions(Reductions) -&gt; true</string>
		<string>byte_size</string>
		<string>byte_size(&lt;#Bitstring#&gt;)</string>
		<string>byte_size(Bitstring) -&gt; integer() &gt;= 0</string>
		<string>erlang:call_on_load_function</string>
		<string>erlang:call_on_load_function(&lt;#P1#&gt;)</string>
		<string>erlang:call_on_load_function(P1) -&gt; term()</string>
		<string>erlang:cancel_timer</string>
		<string>erlang:cancel_timer(&lt;#TimerRef#&gt;)</string>
		<string>erlang:cancel_timer(TimerRef) -&gt; Time | false</string>
		<string>check_old_code</string>
		<string>check_old_code(&lt;#Module#&gt;)</string>
		<string>check_old_code(Module) -&gt; boolean()</string>
		<string>check_process_code</string>
		<string>check_process_code(&lt;#Pid#&gt;, &lt;#Module#&gt;)</string>
		<string>check_process_code(Pid, Module) -&gt; CheckResult</string>
		<string>check_process_code</string>
		<string>check_process_code(&lt;#Pid#&gt;, &lt;#Module#&gt;, &lt;#OptionList#&gt;)</string>
		<string>check_process_code(Pid, Module, OptionList) -&gt; CheckResult | async</string>
		<string>erlang:crc32</string>
		<string>erlang:crc32(&lt;#Data#&gt;)</string>
		<string>erlang:crc32(Data) -&gt; integer() &gt;= 0</string>
		<string>erlang:crc32</string>
		<string>erlang:crc32(&lt;#OldCrc#&gt;, &lt;#Data#&gt;)</string>
		<string>erlang:crc32(OldCrc, Data) -&gt; integer() &gt;= 0</string>
		<string>erlang:crc32_combine</string>
		<string>erlang:crc32_combine(&lt;#FirstCrc#&gt;, &lt;#SecondCrc#&gt;, &lt;#SecondSize#&gt;)</string>
		<string>erlang:crc32_combine(FirstCrc, SecondCrc, SecondSize) -&gt; integer() &gt;= 0</string>
		<string>date</string>
		<string>date()</string>
		<string>date() -&gt; Date</string>
		<string>erlang:decode_packet</string>
		<string>erlang:decode_packet(&lt;#Type#&gt;, &lt;#Bin#&gt;, &lt;#Options#&gt;)</string>
		<string>erlang:decode_packet(Type, Bin, Options) -&gt; {ok, Packet, Rest} | {more, Length} | {error, Reason}</string>
		<string>erlang:delay_trap</string>
		<string>erlang:delay_trap(&lt;#Result#&gt;, &lt;#Timeout :: timeout()#&gt;)</string>
		<string>erlang:delay_trap(Result, Timeout :: timeout()) -&gt; Result</string>
		<string>erlang:delete_element</string>
		<string>erlang:delete_element(&lt;#Index#&gt;, &lt;#Tuple1#&gt;)</string>
		<string>erlang:delete_element(Index, Tuple1) -&gt; Tuple2</string>
		<string>delete_module</string>
		<string>delete_module(&lt;#Module#&gt;)</string>
		<string>delete_module(Module) -&gt; true | undefined</string>
		<string>demonitor</string>
		<string>demonitor(&lt;#MonitorRef#&gt;)</string>
		<string>demonitor(MonitorRef) -&gt; true</string>
		<string>demonitor</string>
		<string>demonitor(&lt;#MonitorRef#&gt;, &lt;#OptionList#&gt;)</string>
		<string>demonitor(MonitorRef, OptionList) -&gt; boolean()</string>
		<string>disconnect_node</string>
		<string>disconnect_node(&lt;#Node#&gt;)</string>
		<string>disconnect_node(Node) -&gt; boolean() | ignored</string>
		<string>erlang:display</string>
		<string>erlang:display(&lt;#Term#&gt;)</string>
		<string>erlang:display(Term) -&gt; true</string>
		<string>erlang:display_nl</string>
		<string>erlang:display_nl()</string>
		<string>erlang:display_nl() -&gt; true</string>
		<string>erlang:display_string</string>
		<string>erlang:display_string(&lt;#P1#&gt;)</string>
		<string>erlang:display_string(P1) -&gt; true</string>
		<string>erlang:dist_exit</string>
		<string>erlang:dist_exit(&lt;#P1#&gt;, &lt;#P2#&gt;, &lt;#P3#&gt;)</string>
		<string>erlang:dist_exit(P1, P2, P3) -&gt; true</string>
		<string>erlang:dlink</string>
		<string>erlang:dlink(&lt;#Pid :: pid() | port()#&gt;)</string>
		<string>erlang:dlink(Pid :: pid() | port()) -&gt; true</string>
		<string>erlang:dmonitor_p</string>
		<string>erlang:dmonitor_p(&lt;#X1 :: process#&gt;, &lt;#ProcSpec :: pid() | {atom()#&gt;, &lt;#atom()}#&gt;)</string>
		<string>erlang:dmonitor_p(X1 :: process, ProcSpec :: pid() | {atom(), atom()}) -&gt; reference()</string>
		<string>erlang:dt_append_vm_tag_data</string>
		<string>erlang:dt_append_vm_tag_data(&lt;#IoData#&gt;)</string>
		<string>erlang:dt_append_vm_tag_data(IoData) -&gt; IoDataRet</string>
		<string>erlang:dt_get_tag</string>
		<string>erlang:dt_get_tag()</string>
		<string>erlang:dt_get_tag() -&gt; binary() | undefined</string>
		<string>erlang:dt_get_tag_data</string>
		<string>erlang:dt_get_tag_data()</string>
		<string>erlang:dt_get_tag_data() -&gt; binary() | undefined</string>
		<string>erlang:dt_prepend_vm_tag_data</string>
		<string>erlang:dt_prepend_vm_tag_data(&lt;#IoData#&gt;)</string>
		<string>erlang:dt_prepend_vm_tag_data(IoData) -&gt; IoDataRet</string>
		<string>erlang:dt_put_tag</string>
		<string>erlang:dt_put_tag(&lt;#IoData#&gt;)</string>
		<string>erlang:dt_put_tag(IoData) -&gt; binary() | undefined</string>
		<string>erlang:dt_restore_tag</string>
		<string>erlang:dt_restore_tag(&lt;#TagData#&gt;)</string>
		<string>erlang:dt_restore_tag(TagData) -&gt; true</string>
		<string>erlang:dt_spread_tag</string>
		<string>erlang:dt_spread_tag(&lt;#Bool :: boolean()#&gt;)</string>
		<string>erlang:dt_spread_tag(Bool :: boolean()) -&gt; TagData</string>
		<string>erlang:dunlink</string>
		<string>erlang:dunlink(&lt;#Pid :: identifier()#&gt;)</string>
		<string>erlang:dunlink(Pid :: identifier()) -&gt; true</string>
		<string>element</string>
		<string>element(&lt;#N#&gt;, &lt;#Tuple#&gt;)</string>
		<string>element(N, Tuple) -&gt; term()</string>
		<string>erase</string>
		<string>erase()</string>
		<string>erase() -&gt; [{Key, Val}]</string>
		<string>erase</string>
		<string>erase(&lt;#Key#&gt;)</string>
		<string>erase(Key) -&gt; Val | undefined</string>
		<string>error</string>
		<string>error(&lt;#Reason#&gt;)</string>
		<string>error(Reason) -&gt; no_return()</string>
		<string>error</string>
		<string>error(&lt;#Reason#&gt;, &lt;#Args#&gt;)</string>
		<string>error(Reason, Args) -&gt; no_return()</string>
		<string>exit</string>
		<string>exit(&lt;#Reason#&gt;)</string>
		<string>exit(Reason) -&gt; no_return()</string>
		<string>exit</string>
		<string>exit(&lt;#Pid#&gt;, &lt;#Reason#&gt;)</string>
		<string>exit(Pid, Reason) -&gt; true</string>
		<string>erlang:external_size</string>
		<string>erlang:external_size(&lt;#Term#&gt;)</string>
		<string>erlang:external_size(Term) -&gt; integer() &gt;= 0</string>
		<string>erlang:external_size</string>
		<string>erlang:external_size(&lt;#Term#&gt;, &lt;#Options#&gt;)</string>
		<string>erlang:external_size(Term, Options) -&gt; integer() &gt;= 0</string>
		<string>erlang:finish_after_on_load</string>
		<string>erlang:finish_after_on_load(&lt;#P1#&gt;, &lt;#P2#&gt;)</string>
		<string>erlang:finish_after_on_load(P1, P2) -&gt; true</string>
		<string>erlang:finish_loading</string>
		<string>erlang:finish_loading(&lt;#PreparedCodeBinaries#&gt;)</string>
		<string>erlang:finish_loading(PreparedCodeBinaries) -&gt; ok | Error</string>
		<string>float</string>
		<string>float(&lt;#Number#&gt;)</string>
		<string>float(Number) -&gt; float()</string>
		<string>float_to_binary</string>
		<string>float_to_binary(&lt;#Float#&gt;)</string>
		<string>float_to_binary(Float) -&gt; binary()</string>
		<string>float_to_binary</string>
		<string>float_to_binary(&lt;#Float#&gt;, &lt;#Options#&gt;)</string>
		<string>float_to_binary(Float, Options) -&gt; binary()</string>
		<string>float_to_list</string>
		<string>float_to_list(&lt;#Float#&gt;)</string>
		<string>float_to_list(Float) -&gt; string()</string>
		<string>float_to_list</string>
		<string>float_to_list(&lt;#Float#&gt;, &lt;#Options#&gt;)</string>
		<string>float_to_list(Float, Options) -&gt; string()</string>
		<string>erlang:fun_info</string>
		<string>erlang:fun_info(&lt;#Fun#&gt;)</string>
		<string>erlang:fun_info(Fun) -&gt; [{Item, Info}]</string>
		<string>erlang:fun_info</string>
		<string>erlang:fun_info(&lt;#Fun#&gt;, &lt;#Item#&gt;)</string>
		<string>erlang:fun_info(Fun, Item) -&gt; {Item, Info}</string>
		<string>erlang:fun_info_mfa</string>
		<string>erlang:fun_info_mfa(&lt;#Fun#&gt;)</string>
		<string>erlang:fun_info_mfa(Fun) -&gt; {Mod, Name, Arity}</string>
		<string>erlang:fun_to_list</string>
		<string>erlang:fun_to_list(&lt;#Fun#&gt;)</string>
		<string>erlang:fun_to_list(Fun) -&gt; string()</string>
		<string>erlang:function_exported</string>
		<string>erlang:function_exported(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Arity#&gt;)</string>
		<string>erlang:function_exported(Module, Function, Arity) -&gt; boolean()</string>
		<string>garbage_collect</string>
		<string>garbage_collect()</string>
		<string>garbage_collect() -&gt; true</string>
		<string>garbage_collect</string>
		<string>garbage_collect(&lt;#Pid#&gt;)</string>
		<string>garbage_collect(Pid) -&gt; GCResult</string>
		<string>garbage_collect</string>
		<string>garbage_collect(&lt;#Pid#&gt;, &lt;#OptionList#&gt;)</string>
		<string>garbage_collect(Pid, OptionList) -&gt; GCResult | async</string>
		<string>erlang:garbage_collect_message_area</string>
		<string>erlang:garbage_collect_message_area()</string>
		<string>erlang:garbage_collect_message_area() -&gt; boolean()</string>
		<string>erlang:gather_gc_info_result</string>
		<string>erlang:gather_gc_info_result(&lt;#Ref#&gt;)</string>
		<string>erlang:gather_gc_info_result(Ref) -&gt; {number(), number(), 0}</string>
		<string>erlang:gather_sched_wall_time_result</string>
		<string>erlang:gather_sched_wall_time_result(&lt;#Ref#&gt;)</string>
		<string>erlang:gather_sched_wall_time_result(Ref) -&gt; [{integer() &gt;= 1, integer() &gt;= 0, integer() &gt;= 0}]</string>
		<string>get</string>
		<string>get()</string>
		<string>get() -&gt; [{Key, Val}]</string>
		<string>get</string>
		<string>get(&lt;#Key#&gt;)</string>
		<string>get(Key) -&gt; Val | undefined</string>
		<string>erlang:get_cookie</string>
		<string>erlang:get_cookie()</string>
		<string>erlang:get_cookie() -&gt; Cookie | nocookie</string>
		<string>get_keys</string>
		<string>get_keys(&lt;#Val#&gt;)</string>
		<string>get_keys(Val) -&gt; [Key]</string>
		<string>erlang:get_module_info</string>
		<string>erlang:get_module_info(&lt;#P1#&gt;)</string>
		<string>erlang:get_module_info(P1) -&gt; [{atom(), [{atom(), term()}]}]</string>
		<string>erlang:get_module_info</string>
		<string>erlang:get_module_info(&lt;#Module#&gt;, &lt;#Item#&gt;)</string>
		<string>erlang:get_module_info(Module, Item) -&gt; ModuleInfo</string>
		<string>erlang:get_stacktrace</string>
		<string>erlang:get_stacktrace()</string>
		<string>erlang:get_stacktrace() -&gt; [stack_item()]</string>
		<string>group_leader</string>
		<string>group_leader()</string>
		<string>group_leader() -&gt; pid()</string>
		<string>group_leader</string>
		<string>group_leader(&lt;#GroupLeader#&gt;, &lt;#Pid#&gt;)</string>
		<string>group_leader(GroupLeader, Pid) -&gt; true</string>
		<string>halt</string>
		<string>halt()</string>
		<string>halt() -&gt; no_return()</string>
		<string>halt</string>
		<string>halt(&lt;#Status#&gt;)</string>
		<string>halt(Status) -&gt; no_return()</string>
		<string>halt</string>
		<string>halt(&lt;#Status#&gt;, &lt;#Options#&gt;)</string>
		<string>halt(Status, Options) -&gt; no_return()</string>
		<string>erlang:hash</string>
		<string>erlang:hash(&lt;#Term#&gt;, &lt;#Range#&gt;)</string>
		<string>erlang:hash(Term, Range) -&gt; integer() &gt;= 1</string>
		<string>hd</string>
		<string>hd(&lt;#List#&gt;)</string>
		<string>hd(List) -&gt; term()</string>
		<string>erlang:hibernate</string>
		<string>erlang:hibernate(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>erlang:hibernate(Module, Function, Args) -&gt; no_return()</string>
		<string>erlang:insert_element</string>
		<string>erlang:insert_element(&lt;#Index#&gt;, &lt;#Tuple1#&gt;, &lt;#Term#&gt;)</string>
		<string>erlang:insert_element(Index, Tuple1, Term) -&gt; Tuple2</string>
		<string>integer_to_binary</string>
		<string>integer_to_binary(&lt;#Integer#&gt;)</string>
		<string>integer_to_binary(Integer) -&gt; binary()</string>
		<string>integer_to_binary</string>
		<string>integer_to_binary(&lt;#Integer#&gt;, &lt;#Base#&gt;)</string>
		<string>integer_to_binary(Integer, Base) -&gt; binary()</string>
		<string>integer_to_list</string>
		<string>integer_to_list(&lt;#Integer#&gt;)</string>
		<string>integer_to_list(Integer) -&gt; string()</string>
		<string>integer_to_list</string>
		<string>integer_to_list(&lt;#Integer#&gt;, &lt;#Base#&gt;)</string>
		<string>integer_to_list(Integer, Base) -&gt; string()</string>
		<string>iolist_size</string>
		<string>iolist_size(&lt;#Item#&gt;)</string>
		<string>iolist_size(Item) -&gt; integer() &gt;= 0</string>
		<string>iolist_to_binary</string>
		<string>iolist_to_binary(&lt;#IoListOrBinary#&gt;)</string>
		<string>iolist_to_binary(IoListOrBinary) -&gt; binary()</string>
		<string>is_alive</string>
		<string>is_alive()</string>
		<string>is_alive() -&gt; boolean()</string>
		<string>is_atom</string>
		<string>is_atom(&lt;#Term#&gt;)</string>
		<string>is_atom(Term) -&gt; boolean()</string>
		<string>is_binary</string>
		<string>is_binary(&lt;#Term#&gt;)</string>
		<string>is_binary(Term) -&gt; boolean()</string>
		<string>is_bitstring</string>
		<string>is_bitstring(&lt;#Term#&gt;)</string>
		<string>is_bitstring(Term) -&gt; boolean()</string>
		<string>is_boolean</string>
		<string>is_boolean(&lt;#Term#&gt;)</string>
		<string>is_boolean(Term) -&gt; boolean()</string>
		<string>erlang:is_builtin</string>
		<string>erlang:is_builtin(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Arity#&gt;)</string>
		<string>erlang:is_builtin(Module, Function, Arity) -&gt; boolean()</string>
		<string>is_float</string>
		<string>is_float(&lt;#Term#&gt;)</string>
		<string>is_float(Term) -&gt; boolean()</string>
		<string>is_function</string>
		<string>is_function(&lt;#Term#&gt;)</string>
		<string>is_function(Term) -&gt; boolean()</string>
		<string>is_function</string>
		<string>is_function(&lt;#Term#&gt;, &lt;#Arity#&gt;)</string>
		<string>is_function(Term, Arity) -&gt; boolean()</string>
		<string>is_integer</string>
		<string>is_integer(&lt;#Term#&gt;)</string>
		<string>is_integer(Term) -&gt; boolean()</string>
		<string>is_list</string>
		<string>is_list(&lt;#Term#&gt;)</string>
		<string>is_list(Term) -&gt; boolean()</string>
		<string>is_map</string>
		<string>is_map(&lt;#Term#&gt;)</string>
		<string>is_map(Term) -&gt; boolean()</string>
		<string>is_number</string>
		<string>is_number(&lt;#Term#&gt;)</string>
		<string>is_number(Term) -&gt; boolean()</string>
		<string>is_pid</string>
		<string>is_pid(&lt;#Term#&gt;)</string>
		<string>is_pid(Term) -&gt; boolean()</string>
		<string>is_port</string>
		<string>is_port(&lt;#Term#&gt;)</string>
		<string>is_port(Term) -&gt; boolean()</string>
		<string>is_process_alive</string>
		<string>is_process_alive(&lt;#Pid#&gt;)</string>
		<string>is_process_alive(Pid) -&gt; boolean()</string>
		<string>is_record</string>
		<string>is_record(&lt;#Term#&gt;, &lt;#RecordTag#&gt;)</string>
		<string>is_record(Term, RecordTag) -&gt; boolean()</string>
		<string>is_record</string>
		<string>is_record(&lt;#Term#&gt;, &lt;#RecordTag#&gt;, &lt;#Size#&gt;)</string>
		<string>is_record(Term, RecordTag, Size) -&gt; boolean()</string>
		<string>is_reference</string>
		<string>is_reference(&lt;#Term#&gt;)</string>
		<string>is_reference(Term) -&gt; boolean()</string>
		<string>is_tuple</string>
		<string>is_tuple(&lt;#Term#&gt;)</string>
		<string>is_tuple(Term) -&gt; boolean()</string>
		<string>length</string>
		<string>length(&lt;#List#&gt;)</string>
		<string>length(List) -&gt; integer() &gt;= 0</string>
		<string>link</string>
		<string>link(&lt;#PidOrPort#&gt;)</string>
		<string>link(PidOrPort) -&gt; true</string>
		<string>list_to_atom</string>
		<string>list_to_atom(&lt;#String#&gt;)</string>
		<string>list_to_atom(String) -&gt; atom()</string>
		<string>list_to_binary</string>
		<string>list_to_binary(&lt;#IoList#&gt;)</string>
		<string>list_to_binary(IoList) -&gt; binary()</string>
		<string>list_to_bitstring</string>
		<string>list_to_bitstring(&lt;#BitstringList#&gt;)</string>
		<string>list_to_bitstring(BitstringList) -&gt; bitstring()</string>
		<string>list_to_existing_atom</string>
		<string>list_to_existing_atom(&lt;#String#&gt;)</string>
		<string>list_to_existing_atom(String) -&gt; atom()</string>
		<string>list_to_float</string>
		<string>list_to_float(&lt;#String#&gt;)</string>
		<string>list_to_float(String) -&gt; float()</string>
		<string>list_to_integer</string>
		<string>list_to_integer(&lt;#String#&gt;)</string>
		<string>list_to_integer(String) -&gt; integer()</string>
		<string>list_to_integer</string>
		<string>list_to_integer(&lt;#String#&gt;, &lt;#Base#&gt;)</string>
		<string>list_to_integer(String, Base) -&gt; integer()</string>
		<string>list_to_pid</string>
		<string>list_to_pid(&lt;#String#&gt;)</string>
		<string>list_to_pid(String) -&gt; pid()</string>
		<string>list_to_tuple</string>
		<string>list_to_tuple(&lt;#List#&gt;)</string>
		<string>list_to_tuple(List) -&gt; tuple()</string>
		<string>load_module</string>
		<string>load_module(&lt;#Module#&gt;, &lt;#Binary#&gt;)</string>
		<string>load_module(Module, Binary) -&gt; {module, Module} | {error, Reason}</string>
		<string>erlang:load_nif</string>
		<string>erlang:load_nif(&lt;#Path#&gt;, &lt;#LoadInfo#&gt;)</string>
		<string>erlang:load_nif(Path, LoadInfo) -&gt; ok | Error</string>
		<string>erlang:loaded</string>
		<string>erlang:loaded()</string>
		<string>erlang:loaded() -&gt; [Module]</string>
		<string>erlang:localtime</string>
		<string>erlang:localtime()</string>
		<string>erlang:localtime() -&gt; DateTime</string>
		<string>erlang:localtime_to_universaltime</string>
		<string>erlang:localtime_to_universaltime(&lt;#Localtime#&gt;)</string>
		<string>erlang:localtime_to_universaltime(Localtime) -&gt; Universaltime</string>
		<string>erlang:localtime_to_universaltime</string>
		<string>erlang:localtime_to_universaltime(&lt;#Localtime#&gt;, &lt;#IsDst#&gt;)</string>
		<string>erlang:localtime_to_universaltime(Localtime, IsDst) -&gt; Universaltime</string>
		<string>erlang:make_fun</string>
		<string>erlang:make_fun(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Arity#&gt;)</string>
		<string>erlang:make_fun(Module, Function, Arity) -&gt; function()</string>
		<string>make_ref</string>
		<string>make_ref()</string>
		<string>make_ref() -&gt; reference()</string>
		<string>erlang:make_tuple</string>
		<string>erlang:make_tuple(&lt;#Arity#&gt;, &lt;#InitialValue#&gt;)</string>
		<string>erlang:make_tuple(Arity, InitialValue) -&gt; tuple()</string>
		<string>erlang:make_tuple</string>
		<string>erlang:make_tuple(&lt;#Arity#&gt;, &lt;#DefaultValue#&gt;, &lt;#InitList#&gt;)</string>
		<string>erlang:make_tuple(Arity, DefaultValue, InitList) -&gt; tuple()</string>
		<string>map_size</string>
		<string>map_size(&lt;#Map#&gt;)</string>
		<string>map_size(Map) -&gt; integer() &gt;= 0</string>
		<string>erlang:match_spec_test</string>
		<string>erlang:match_spec_test(&lt;#P1#&gt;, &lt;#P2#&gt;, &lt;#P3#&gt;)</string>
		<string>erlang:match_spec_test(P1, P2, P3) -&gt; TestResult</string>
		<string>max</string>
		<string>max(&lt;#Term1#&gt;, &lt;#Term2#&gt;)</string>
		<string>max(Term1, Term2) -&gt; Maximum</string>
		<string>erlang:md5</string>
		<string>erlang:md5(&lt;#Data#&gt;)</string>
		<string>erlang:md5(Data) -&gt; Digest</string>
		<string>erlang:md5_final</string>
		<string>erlang:md5_final(&lt;#Context#&gt;)</string>
		<string>erlang:md5_final(Context) -&gt; Digest</string>
		<string>erlang:md5_init</string>
		<string>erlang:md5_init()</string>
		<string>erlang:md5_init() -&gt; Context</string>
		<string>erlang:md5_update</string>
		<string>erlang:md5_update(&lt;#Context#&gt;, &lt;#Data#&gt;)</string>
		<string>erlang:md5_update(Context, Data) -&gt; NewContext</string>
		<string>erlang:memory</string>
		<string>erlang:memory()</string>
		<string>erlang:memory() -&gt; [{Type, Size}]</string>
		<string>erlang:memory</string>
		<string>erlang:memory(&lt;#Type :: memory_type()#&gt;)</string>
		<string>erlang:memory(Type :: memory_type()) -&gt; integer() &gt;= 0</string>
		<string>erlang:memory</string>
		<string>erlang:memory(&lt;#TypeList :: [memory_type()]#&gt;)</string>
		<string>erlang:memory(TypeList :: [memory_type()]) -&gt; [{memory_type(), integer() &gt;= 0}]</string>
		<string>min</string>
		<string>min(&lt;#Term1#&gt;, &lt;#Term2#&gt;)</string>
		<string>min(Term1, Term2) -&gt; Minimum</string>
		<string>module_loaded</string>
		<string>module_loaded(&lt;#Module#&gt;)</string>
		<string>module_loaded(Module) -&gt; boolean()</string>
		<string>monitor</string>
		<string>monitor(&lt;#Type#&gt;, &lt;#Item#&gt;)</string>
		<string>monitor(Type, Item) -&gt; MonitorRef</string>
		<string>monitor_node</string>
		<string>monitor_node(&lt;#Node#&gt;, &lt;#Flag#&gt;)</string>
		<string>monitor_node(Node, Flag) -&gt; true</string>
		<string>erlang:monitor_node</string>
		<string>erlang:monitor_node(&lt;#Node#&gt;, &lt;#Flag#&gt;, &lt;#Options#&gt;)</string>
		<string>erlang:monitor_node(Node, Flag, Options) -&gt; true</string>
		<string>erlang:nif_error</string>
		<string>erlang:nif_error(&lt;#Reason#&gt;)</string>
		<string>erlang:nif_error(Reason) -&gt; no_return()</string>
		<string>erlang:nif_error</string>
		<string>erlang:nif_error(&lt;#Reason#&gt;, &lt;#Args#&gt;)</string>
		<string>erlang:nif_error(Reason, Args) -&gt; no_return()</string>
		<string>node</string>
		<string>node()</string>
		<string>node() -&gt; Node</string>
		<string>node</string>
		<string>node(&lt;#Arg#&gt;)</string>
		<string>node(Arg) -&gt; Node</string>
		<string>nodes</string>
		<string>nodes()</string>
		<string>nodes() -&gt; Nodes</string>
		<string>nodes</string>
		<string>nodes(&lt;#Arg#&gt;)</string>
		<string>nodes(Arg) -&gt; Nodes</string>
		<string>now</string>
		<string>now()</string>
		<string>now() -&gt; Timestamp</string>
		<string>open_port</string>
		<string>open_port(&lt;#PortName#&gt;, &lt;#PortSettings#&gt;)</string>
		<string>open_port(PortName, PortSettings) -&gt; port()</string>
		<string>erlang:phash</string>
		<string>erlang:phash(&lt;#Term#&gt;, &lt;#Range#&gt;)</string>
		<string>erlang:phash(Term, Range) -&gt; Hash</string>
		<string>erlang:phash2</string>
		<string>erlang:phash2(&lt;#Term#&gt;)</string>
		<string>erlang:phash2(Term) -&gt; Hash</string>
		<string>erlang:phash2</string>
		<string>erlang:phash2(&lt;#Term#&gt;, &lt;#Range#&gt;)</string>
		<string>erlang:phash2(Term, Range) -&gt; Hash</string>
		<string>pid_to_list</string>
		<string>pid_to_list(&lt;#Pid#&gt;)</string>
		<string>pid_to_list(Pid) -&gt; string()</string>
		<string>erlang:port_call</string>
		<string>erlang:port_call(&lt;#Port#&gt;, &lt;#Data#&gt;)</string>
		<string>erlang:port_call(Port, Data) -&gt; term()</string>
		<string>erlang:port_call</string>
		<string>erlang:port_call(&lt;#Port#&gt;, &lt;#Operation#&gt;, &lt;#Data#&gt;)</string>
		<string>erlang:port_call(Port, Operation, Data) -&gt; term()</string>
		<string>port_close</string>
		<string>port_close(&lt;#Port#&gt;)</string>
		<string>port_close(Port) -&gt; true</string>
		<string>port_command</string>
		<string>port_command(&lt;#Port#&gt;, &lt;#Data#&gt;)</string>
		<string>port_command(Port, Data) -&gt; true</string>
		<string>port_command</string>
		<string>port_command(&lt;#Port#&gt;, &lt;#Data#&gt;, &lt;#OptionList#&gt;)</string>
		<string>port_command(Port, Data, OptionList) -&gt; boolean()</string>
		<string>port_connect</string>
		<string>port_connect(&lt;#Port#&gt;, &lt;#Pid#&gt;)</string>
		<string>port_connect(Port, Pid) -&gt; true</string>
		<string>port_control</string>
		<string>port_control(&lt;#Port#&gt;, &lt;#Operation#&gt;, &lt;#Data#&gt;)</string>
		<string>port_control(Port, Operation, Data) -&gt; iodata() | binary()</string>
		<string>erlang:port_get_data</string>
		<string>erlang:port_get_data(&lt;#Port#&gt;)</string>
		<string>erlang:port_get_data(Port) -&gt; term()</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;)</string>
		<string>erlang:port_info(Port) -&gt; Result</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: connected#&gt;)</string>
		<string>erlang:port_info(Port, Item :: connected) -&gt; {connected, Pid} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: id#&gt;)</string>
		<string>erlang:port_info(Port, Item :: id) -&gt; {id, Index} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: input#&gt;)</string>
		<string>erlang:port_info(Port, Item :: input) -&gt; {input, Bytes} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: links#&gt;)</string>
		<string>erlang:port_info(Port, Item :: links) -&gt; {links, Pids} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: locking#&gt;)</string>
		<string>erlang:port_info(Port, Item :: locking) -&gt; {locking, Locking} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: memory#&gt;)</string>
		<string>erlang:port_info(Port, Item :: memory) -&gt; {memory, Bytes} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: monitors#&gt;)</string>
		<string>erlang:port_info(Port, Item :: monitors) -&gt; {monitors, Monitors} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: name#&gt;)</string>
		<string>erlang:port_info(Port, Item :: name) -&gt; {name, Name} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: os_pid#&gt;)</string>
		<string>erlang:port_info(Port, Item :: os_pid) -&gt; {os_pid, OsPid} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: output#&gt;)</string>
		<string>erlang:port_info(Port, Item :: output) -&gt; {output, Bytes} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: parallelism#&gt;)</string>
		<string>erlang:port_info(Port, Item :: parallelism) -&gt; {parallelism, Boolean} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: queue_size#&gt;)</string>
		<string>erlang:port_info(Port, Item :: queue_size) -&gt; {queue_size, Bytes} | undefined</string>
		<string>erlang:port_info</string>
		<string>erlang:port_info(&lt;#Port#&gt;, &lt;#Item :: registered_name#&gt;)</string>
		<string>erlang:port_info(Port, Item :: registered_name) -&gt; {registered_name, RegisteredName} | [] | undefined</string>
		<string>erlang:port_set_data</string>
		<string>erlang:port_set_data(&lt;#Port#&gt;, &lt;#Data#&gt;)</string>
		<string>erlang:port_set_data(Port, Data) -&gt; true</string>
		<string>erlang:port_to_list</string>
		<string>erlang:port_to_list(&lt;#Port#&gt;)</string>
		<string>erlang:port_to_list(Port) -&gt; string()</string>
		<string>erlang:ports</string>
		<string>erlang:ports()</string>
		<string>erlang:ports() -&gt; [port()]</string>
		<string>erlang:posixtime_to_universaltime</string>
		<string>erlang:posixtime_to_universaltime(&lt;#P1#&gt;)</string>
		<string>erlang:posixtime_to_universaltime(P1) -&gt; {calendar:date(), calendar:time()}</string>
		<string>pre_loaded</string>
		<string>pre_loaded()</string>
		<string>pre_loaded() -&gt; [module()]</string>
		<string>erlang:prepare_loading</string>
		<string>erlang:prepare_loading(&lt;#Module#&gt;, &lt;#Code#&gt;)</string>
		<string>erlang:prepare_loading(Module, Code) -&gt; PreparedCode | {error, Reason}</string>
		<string>erlang:process_display</string>
		<string>erlang:process_display(&lt;#Pid#&gt;, &lt;#Type#&gt;)</string>
		<string>erlang:process_display(Pid, Type) -&gt; true</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: trap_exit#&gt;, &lt;#Boolean#&gt;)</string>
		<string>process_flag(Flag :: trap_exit, Boolean) -&gt; OldBoolean</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: error_handler#&gt;, &lt;#Module#&gt;)</string>
		<string>process_flag(Flag :: error_handler, Module) -&gt; OldModule</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: min_heap_size#&gt;, &lt;#MinHeapSize#&gt;)</string>
		<string>process_flag(Flag :: min_heap_size, MinHeapSize) -&gt; OldMinHeapSize</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: min_bin_vheap_size#&gt;, &lt;#MinBinVHeapSize#&gt;)</string>
		<string>process_flag(Flag :: min_bin_vheap_size, MinBinVHeapSize) -&gt; OldMinBinVHeapSize</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: priority#&gt;, &lt;#Level#&gt;)</string>
		<string>process_flag(Flag :: priority, Level) -&gt; OldLevel</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: save_calls#&gt;, &lt;#N#&gt;)</string>
		<string>process_flag(Flag :: save_calls, N) -&gt; OldN</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: sensitive#&gt;, &lt;#Boolean#&gt;)</string>
		<string>process_flag(Flag :: sensitive, Boolean) -&gt; OldBoolean</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: {monitor_nodes#&gt;, &lt;#term()}#&gt;, &lt;#Value :: term()#&gt;)</string>
		<string>process_flag(Flag :: {monitor_nodes, term()}, Value :: term()) -&gt; term()</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Flag :: monitor_nodes#&gt;, &lt;#Value :: term()#&gt;)</string>
		<string>process_flag(Flag :: monitor_nodes, Value :: term()) -&gt; term()</string>
		<string>process_flag</string>
		<string>process_flag(&lt;#Pid#&gt;, &lt;#Flag#&gt;, &lt;#Value#&gt;)</string>
		<string>process_flag(Pid, Flag, Value) -&gt; OldValue</string>
		<string>process_info</string>
		<string>process_info(&lt;#Pid#&gt;)</string>
		<string>process_info(Pid) -&gt; Info</string>
		<string>process_info</string>
		<string>process_info(&lt;#Pid#&gt;, &lt;#Item#&gt;)</string>
		<string>process_info(Pid, Item) -&gt; InfoTuple | [] | undefined</string>
		<string>process_info</string>
		<string>process_info(&lt;#Pid#&gt;, &lt;#ItemList#&gt;)</string>
		<string>process_info(Pid, ItemList) -&gt; InfoTupleList | [] | undefined</string>
		<string>processes</string>
		<string>processes()</string>
		<string>processes() -&gt; [pid()]</string>
		<string>purge_module</string>
		<string>purge_module(&lt;#Module#&gt;)</string>
		<string>purge_module(Module) -&gt; true</string>
		<string>put</string>
		<string>put(&lt;#Key#&gt;, &lt;#Val#&gt;)</string>
		<string>put(Key, Val) -&gt; term()</string>
		<string>erlang:raise</string>
		<string>erlang:raise(&lt;#Class#&gt;, &lt;#Reason#&gt;, &lt;#Stacktrace#&gt;)</string>
		<string>erlang:raise(Class, Reason, Stacktrace) -&gt; no_return()</string>
		<string>erlang:read_timer</string>
		<string>erlang:read_timer(&lt;#TimerRef#&gt;)</string>
		<string>erlang:read_timer(TimerRef) -&gt; integer() &gt;= 0 | false</string>
		<string>erlang:ref_to_list</string>
		<string>erlang:ref_to_list(&lt;#Ref#&gt;)</string>
		<string>erlang:ref_to_list(Ref) -&gt; string()</string>
		<string>register</string>
		<string>register(&lt;#RegName#&gt;, &lt;#PidOrPort#&gt;)</string>
		<string>register(RegName, PidOrPort) -&gt; true</string>
		<string>registered</string>
		<string>registered()</string>
		<string>registered() -&gt; [RegName]</string>
		<string>erlang:resume_process</string>
		<string>erlang:resume_process(&lt;#Suspendee#&gt;)</string>
		<string>erlang:resume_process(Suspendee) -&gt; true</string>
		<string>round</string>
		<string>round(&lt;#Number#&gt;)</string>
		<string>round(Number) -&gt; integer()</string>
		<string>self</string>
		<string>self()</string>
		<string>self() -&gt; pid()</string>
		<string>erlang:send</string>
		<string>erlang:send(&lt;#Dest#&gt;, &lt;#Msg#&gt;)</string>
		<string>erlang:send(Dest, Msg) -&gt; Msg</string>
		<string>erlang:send</string>
		<string>erlang:send(&lt;#Dest#&gt;, &lt;#Msg#&gt;, &lt;#Options#&gt;)</string>
		<string>erlang:send(Dest, Msg, Options) -&gt; Res</string>
		<string>erlang:send_after</string>
		<string>erlang:send_after(&lt;#Time#&gt;, &lt;#Dest#&gt;, &lt;#Msg#&gt;)</string>
		<string>erlang:send_after(Time, Dest, Msg) -&gt; TimerRef</string>
		<string>erlang:send_nosuspend</string>
		<string>erlang:send_nosuspend(&lt;#Dest#&gt;, &lt;#Msg#&gt;)</string>
		<string>erlang:send_nosuspend(Dest, Msg) -&gt; boolean()</string>
		<string>erlang:send_nosuspend</string>
		<string>erlang:send_nosuspend(&lt;#Dest#&gt;, &lt;#Msg#&gt;, &lt;#Options#&gt;)</string>
		<string>erlang:send_nosuspend(Dest, Msg, Options) -&gt; boolean()</string>
		<string>erlang:seq_trace</string>
		<string>erlang:seq_trace(&lt;#P1#&gt;, &lt;#P2#&gt;)</string>
		<string>erlang:seq_trace(P1, P2) -&gt; seq_trace_info_returns() | {term(), term(), term(), term(), term()}</string>
		<string>erlang:seq_trace_info</string>
		<string>erlang:seq_trace_info(&lt;#What :: send#&gt;)</string>
		<string>erlang:seq_trace_info(What :: send) -&gt; {send, boolean()}</string>
		<string>erlang:seq_trace_info</string>
		<string>erlang:seq_trace_info(&lt;#What :: 'receive'#&gt;)</string>
		<string>erlang:seq_trace_info(What :: 'receive') -&gt; {'receive', boolean()}</string>
		<string>erlang:seq_trace_info</string>
		<string>erlang:seq_trace_info(&lt;#What :: print#&gt;)</string>
		<string>erlang:seq_trace_info(What :: print) -&gt; {print, boolean()}</string>
		<string>erlang:seq_trace_info</string>
		<string>erlang:seq_trace_info(&lt;#What :: timestamp#&gt;)</string>
		<string>erlang:seq_trace_info(What :: timestamp) -&gt; {timestamp, boolean()}</string>
		<string>erlang:seq_trace_info</string>
		<string>erlang:seq_trace_info(&lt;#What :: label#&gt;)</string>
		<string>erlang:seq_trace_info(What :: label) -&gt; [] | {label, integer() &gt;= 0}</string>
		<string>erlang:seq_trace_info</string>
		<string>erlang:seq_trace_info(&lt;#What :: serial#&gt;)</string>
		<string>erlang:seq_trace_info(What :: serial) -&gt; [] | {serial, {integer() &gt;= 0, integer() &gt;= 0}}</string>
		<string>erlang:seq_trace_print</string>
		<string>erlang:seq_trace_print(&lt;#P1#&gt;)</string>
		<string>erlang:seq_trace_print(P1) -&gt; boolean()</string>
		<string>erlang:seq_trace_print</string>
		<string>erlang:seq_trace_print(&lt;#P1#&gt;, &lt;#P2#&gt;)</string>
		<string>erlang:seq_trace_print(P1, P2) -&gt; boolean()</string>
		<string>erlang:set_cookie</string>
		<string>erlang:set_cookie(&lt;#Node#&gt;, &lt;#Cookie#&gt;)</string>
		<string>erlang:set_cookie(Node, Cookie) -&gt; true</string>
		<string>setelement</string>
		<string>setelement(&lt;#Index#&gt;, &lt;#Tuple1#&gt;, &lt;#Value#&gt;)</string>
		<string>setelement(Index, Tuple1, Value) -&gt; Tuple2</string>
		<string>erlang:setnode</string>
		<string>erlang:setnode(&lt;#P1#&gt;, &lt;#P2#&gt;)</string>
		<string>erlang:setnode(P1, P2) -&gt; true</string>
		<string>erlang:setnode</string>
		<string>erlang:setnode(&lt;#P1#&gt;, &lt;#P2#&gt;, &lt;#P3#&gt;)</string>
		<string>erlang:setnode(P1, P2, P3) -&gt; true</string>
		<string>size</string>
		<string>size(&lt;#Item#&gt;)</string>
		<string>size(Item) -&gt; integer() &gt;= 0</string>
		<string>spawn</string>
		<string>spawn(&lt;#Fun#&gt;)</string>
		<string>spawn(Fun) -&gt; pid()</string>
		<string>spawn</string>
		<string>spawn(&lt;#Node#&gt;, &lt;#Fun#&gt;)</string>
		<string>spawn(Node, Fun) -&gt; pid()</string>
		<string>spawn</string>
		<string>spawn(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>spawn(Module, Function, Args) -&gt; pid()</string>
		<string>spawn</string>
		<string>spawn(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>spawn(Node, Module, Function, Args) -&gt; pid()</string>
		<string>spawn_link</string>
		<string>spawn_link(&lt;#Fun#&gt;)</string>
		<string>spawn_link(Fun) -&gt; pid()</string>
		<string>spawn_link</string>
		<string>spawn_link(&lt;#Node#&gt;, &lt;#Fun#&gt;)</string>
		<string>spawn_link(Node, Fun) -&gt; pid()</string>
		<string>spawn_link</string>
		<string>spawn_link(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>spawn_link(Module, Function, Args) -&gt; pid()</string>
		<string>spawn_link</string>
		<string>spawn_link(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>spawn_link(Node, Module, Function, Args) -&gt; pid()</string>
		<string>spawn_monitor</string>
		<string>spawn_monitor(&lt;#Fun#&gt;)</string>
		<string>spawn_monitor(Fun) -&gt; {pid(), reference()}</string>
		<string>spawn_monitor</string>
		<string>spawn_monitor(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>spawn_monitor(Module, Function, Args) -&gt; {pid(), reference()}</string>
		<string>erlang:spawn_opt</string>
		<string>erlang:spawn_opt(&lt;#Tuple :: {Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Options}#&gt;)</string>
		<string>erlang:spawn_opt(Tuple :: {Module, Function, Args, Options}) -&gt; pid() | {pid(), reference()}</string>
		<string>spawn_opt</string>
		<string>spawn_opt(&lt;#Fun#&gt;, &lt;#Options#&gt;)</string>
		<string>spawn_opt(Fun, Options) -&gt; pid() | {pid(), reference()}</string>
		<string>spawn_opt</string>
		<string>spawn_opt(&lt;#Node#&gt;, &lt;#Fun#&gt;, &lt;#Options#&gt;)</string>
		<string>spawn_opt(Node, Fun, Options) -&gt; pid() | {pid(), reference()}</string>
		<string>spawn_opt</string>
		<string>spawn_opt(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Options#&gt;)</string>
		<string>spawn_opt(Module, Function, Args, Options) -&gt; pid() | {pid(), reference()}</string>
		<string>spawn_opt</string>
		<string>spawn_opt(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Options#&gt;)</string>
		<string>spawn_opt(Node, Module, Function, Args, Options) -&gt; pid() | {pid(), reference()}</string>
		<string>split_binary</string>
		<string>split_binary(&lt;#Bin#&gt;, &lt;#Pos#&gt;)</string>
		<string>split_binary(Bin, Pos) -&gt; {binary(), binary()}</string>
		<string>erlang:start_timer</string>
		<string>erlang:start_timer(&lt;#Time#&gt;, &lt;#Dest#&gt;, &lt;#Msg#&gt;)</string>
		<string>erlang:start_timer(Time, Dest, Msg) -&gt; TimerRef</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: context_switches#&gt;)</string>
		<string>statistics(Item :: context_switches) -&gt; {ContextSwitches, 0}</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: exact_reductions#&gt;)</string>
		<string>statistics(Item :: exact_reductions) -&gt; {Total_Exact_Reductions, Exact_Reductions_Since_Last_Call}</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: garbage_collection#&gt;)</string>
		<string>statistics(Item :: garbage_collection) -&gt; {Number_of_GCs, Words_Reclaimed, 0}</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: io#&gt;)</string>
		<string>statistics(Item :: io) -&gt; {{input, Input}, {output, Output}}</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: reductions#&gt;)</string>
		<string>statistics(Item :: reductions) -&gt; {Total_Reductions, Reductions_Since_Last_Call}</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: run_queue#&gt;)</string>
		<string>statistics(Item :: run_queue) -&gt; integer() &gt;= 0</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: runtime#&gt;)</string>
		<string>statistics(Item :: runtime) -&gt; {Total_Run_Time, Time_Since_Last_Call}</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: scheduler_wall_time#&gt;)</string>
		<string>statistics(Item :: scheduler_wall_time) -&gt; [{SchedulerId, ActiveTime, TotalTime}] | undefined</string>
		<string>statistics</string>
		<string>statistics(&lt;#Item :: wall_clock#&gt;)</string>
		<string>statistics(Item :: wall_clock) -&gt; {Total_Wallclock_Time, Wallclock_Time_Since_Last_Call}</string>
		<string>erlang:subtract</string>
		<string>erlang:subtract(&lt;#X1 :: [term()]#&gt;, &lt;#X2 :: [term()]#&gt;)</string>
		<string>erlang:subtract(X1 :: [term()], X2 :: [term()]) -&gt; [term()]</string>
		<string>erlang:suspend_process</string>
		<string>erlang:suspend_process(&lt;#Suspendee#&gt;)</string>
		<string>erlang:suspend_process(Suspendee) -&gt; true</string>
		<string>erlang:suspend_process</string>
		<string>erlang:suspend_process(&lt;#Suspendee#&gt;, &lt;#OptList#&gt;)</string>
		<string>erlang:suspend_process(Suspendee, OptList) -&gt; boolean()</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: backtrace_depth#&gt;, &lt;#Depth#&gt;)</string>
		<string>erlang:system_flag(Flag :: backtrace_depth, Depth) -&gt; OldDepth</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: cpu_topology#&gt;, &lt;#CpuTopology#&gt;)</string>
		<string>erlang:system_flag(Flag :: cpu_topology, CpuTopology) -&gt; OldCpuTopology</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: dirty_cpu_schedulers_online#&gt;, &lt;#DirtyCPUSchedulersOnline#&gt;)</string>
		<string>erlang:system_flag(Flag :: dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline) -&gt; OldDirtyCPUSchedulersOnline</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: fullsweep_after#&gt;, &lt;#Number#&gt;)</string>
		<string>erlang:system_flag(Flag :: fullsweep_after, Number) -&gt; OldNumber</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: min_heap_size#&gt;, &lt;#MinHeapSize#&gt;)</string>
		<string>erlang:system_flag(Flag :: min_heap_size, MinHeapSize) -&gt; OldMinHeapSize</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: min_bin_vheap_size#&gt;, &lt;#MinBinVHeapSize#&gt;)</string>
		<string>erlang:system_flag(Flag :: min_bin_vheap_size, MinBinVHeapSize) -&gt; OldMinBinVHeapSize</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: multi_scheduling#&gt;, &lt;#BlockState#&gt;)</string>
		<string>erlang:system_flag(Flag :: multi_scheduling, BlockState) -&gt; OldBlockState</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: scheduler_bind_type#&gt;, &lt;#How#&gt;)</string>
		<string>erlang:system_flag(Flag :: scheduler_bind_type, How) -&gt; OldBindType</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: scheduler_wall_time#&gt;, &lt;#Boolean#&gt;)</string>
		<string>erlang:system_flag(Flag :: scheduler_wall_time, Boolean) -&gt; OldBoolean</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: schedulers_online#&gt;, &lt;#SchedulersOnline#&gt;)</string>
		<string>erlang:system_flag(Flag :: schedulers_online, SchedulersOnline) -&gt; OldSchedulersOnline</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: trace_control_word#&gt;, &lt;#TCW#&gt;)</string>
		<string>erlang:system_flag(Flag :: trace_control_word, TCW) -&gt; OldTCW</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: internal_cpu_topology#&gt;, &lt;#Value :: term()#&gt;)</string>
		<string>erlang:system_flag(Flag :: internal_cpu_topology, Value :: term()) -&gt; term()</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: sequential_tracer#&gt;, &lt;#Value :: pid() | port() | false#&gt;)</string>
		<string>erlang:system_flag(Flag :: sequential_tracer, Value :: pid() | port() | false) -&gt; pid() | port() | false</string>
		<string>erlang:system_flag</string>
		<string>erlang:system_flag(&lt;#Flag :: 1#&gt;, &lt;#Value :: 0#&gt;)</string>
		<string>erlang:system_flag(Flag :: 1, Value :: 0) -&gt; true</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: allocated_areas#&gt;)</string>
		<string>erlang:system_info(Item :: allocated_areas) -&gt; [tuple()]</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: allocator#&gt;)</string>
		<string>erlang:system_info(Item :: allocator) -&gt; {Allocator, Version, Features, Settings}</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: alloc_util_allocators#&gt;)</string>
		<string>erlang:system_info(Item :: alloc_util_allocators) -&gt; [Alloc]</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: {allocator#&gt;, &lt;#Alloc}#&gt;)</string>
		<string>erlang:system_info(Item :: {allocator, Alloc}) -&gt; [term()]</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: {allocator_sizes#&gt;, &lt;#Alloc}#&gt;)</string>
		<string>erlang:system_info(Item :: {allocator_sizes, Alloc}) -&gt; [term()]</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: build_type#&gt;)</string>
		<string>erlang:system_info(Item :: build_type) -&gt; opt | debug | purify | quantify | purecov | gcov | valgrind | gprof | lcnt | frmptr</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: c_compiler_used#&gt;)</string>
		<string>erlang:system_info(Item :: c_compiler_used) -&gt; {atom(), term()}</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: check_io#&gt;)</string>
		<string>erlang:system_info(Item :: check_io) -&gt; [term()]</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: compat_rel#&gt;)</string>
		<string>erlang:system_info(Item :: compat_rel) -&gt; integer()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: cpu_topology#&gt;)</string>
		<string>erlang:system_info(Item :: cpu_topology) -&gt; CpuTopology</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item ::{cpu_topology#&gt;, &lt;#defined | detected | used}#&gt;)</string>
		<string>erlang:system_info(Item ::{cpu_topology, defined | detected | used}) -&gt; CpuTopology</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: creation#&gt;)</string>
		<string>erlang:system_info(Item :: creation) -&gt; integer()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: debug_compiled#&gt;)</string>
		<string>erlang:system_info(Item :: debug_compiled) -&gt; boolean()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: dirty_cpu_schedulers#&gt;)</string>
		<string>erlang:system_info(Item :: dirty_cpu_schedulers) -&gt; integer() &gt;= 0</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: dirty_cpu_schedulers_online#&gt;)</string>
		<string>erlang:system_info(Item :: dirty_cpu_schedulers_online) -&gt; integer() &gt;= 0</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: dirty_io_schedulers#&gt;)</string>
		<string>erlang:system_info(Item :: dirty_io_schedulers) -&gt; integer() &gt;= 0</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: dist#&gt;)</string>
		<string>erlang:system_info(Item :: dist) -&gt; binary()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: dist_buf_busy_limit#&gt;)</string>
		<string>erlang:system_info(Item :: dist_buf_busy_limit) -&gt; integer() &gt;= 0</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: dist_ctrl#&gt;)</string>
		<string>erlang:system_info(Item :: dist_ctrl) -&gt; {Node :: node(), ControllingEntity :: port() | pid()}</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: driver_version#&gt;)</string>
		<string>erlang:system_info(Item :: driver_version) -&gt; string()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: dynamic_trace#&gt;)</string>
		<string>erlang:system_info(Item :: dynamic_trace) -&gt; none | dtrace | systemtap</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: dynamic_trace_probes#&gt;)</string>
		<string>erlang:system_info(Item :: dynamic_trace_probes) -&gt; boolean()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: elib_malloc#&gt;)</string>
		<string>erlang:system_info(Item :: elib_malloc) -&gt; false</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: ets_limit#&gt;)</string>
		<string>erlang:system_info(Item :: ets_limit) -&gt; integer() &gt;= 1</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: fullsweep_after#&gt;)</string>
		<string>erlang:system_info(Item :: fullsweep_after) -&gt; {fullsweep_after, integer() &gt;= 0}</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: garbage_collection#&gt;)</string>
		<string>erlang:system_info(Item :: garbage_collection) -&gt; [{atom(), integer()}]</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: heap_sizes#&gt;)</string>
		<string>erlang:system_info(Item :: heap_sizes) -&gt; [integer() &gt;= 0]</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: heap_type#&gt;)</string>
		<string>erlang:system_info(Item :: heap_type) -&gt; private</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: info#&gt;)</string>
		<string>erlang:system_info(Item :: info) -&gt; binary()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: kernel_poll#&gt;)</string>
		<string>erlang:system_info(Item :: kernel_poll) -&gt; boolean()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: loaded#&gt;)</string>
		<string>erlang:system_info(Item :: loaded) -&gt; binary()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: logical_processors | logical_processors_available | logical_processors_online#&gt;)</string>
		<string>erlang:system_info(Item :: logical_processors | logical_processors_available | logical_processors_online) -&gt; unknown | integer() &gt;= 1</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: machine#&gt;)</string>
		<string>erlang:system_info(Item :: machine) -&gt; string()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: min_heap_size#&gt;)</string>
		<string>erlang:system_info(Item :: min_heap_size) -&gt; {min_heap_size, MinHeapSize :: integer() &gt;= 1}</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: min_bin_vheap_size#&gt;)</string>
		<string>erlang:system_info(Item :: min_bin_vheap_size) -&gt; {min_bin_vheap_size, MinBinVHeapSize :: integer() &gt;= 1}</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: modified_timing_level#&gt;)</string>
		<string>erlang:system_info(Item :: modified_timing_level) -&gt; integer() | undefined</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: multi_scheduling#&gt;)</string>
		<string>erlang:system_info(Item :: multi_scheduling) -&gt; disabled | blocked | enabled</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: multi_scheduling_blockers#&gt;)</string>
		<string>erlang:system_info(Item :: multi_scheduling_blockers) -&gt; [PID :: pid()]</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: otp_release#&gt;)</string>
		<string>erlang:system_info(Item :: otp_release) -&gt; string()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: port_count#&gt;)</string>
		<string>erlang:system_info(Item :: port_count) -&gt; integer() &gt;= 0</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: port_limit#&gt;)</string>
		<string>erlang:system_info(Item :: port_limit) -&gt; integer() &gt;= 1</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: process_count#&gt;)</string>
		<string>erlang:system_info(Item :: process_count) -&gt; integer() &gt;= 1</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: process_limit#&gt;)</string>
		<string>erlang:system_info(Item :: process_limit) -&gt; integer() &gt;= 1</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: procs#&gt;)</string>
		<string>erlang:system_info(Item :: procs) -&gt; binary()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: scheduler_bind_type#&gt;)</string>
		<string>erlang:system_info(Item :: scheduler_bind_type) -&gt; spread | processor_spread | thread_spread | thread_no_node_processor_spread | no_node_processor_spread | no_node_thread_spread | no_spread | unbound</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: scheduler_bindings#&gt;)</string>
		<string>erlang:system_info(Item :: scheduler_bindings) -&gt; tuple()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: scheduler_id#&gt;)</string>
		<string>erlang:system_info(Item :: scheduler_id) -&gt; SchedulerId :: integer() &gt;= 1</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: schedulers | schedulers_online#&gt;)</string>
		<string>erlang:system_info(Item :: schedulers | schedulers_online) -&gt; integer() &gt;= 1</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: smp_support#&gt;)</string>
		<string>erlang:system_info(Item :: smp_support) -&gt; boolean()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: system_version#&gt;)</string>
		<string>erlang:system_info(Item :: system_version) -&gt; string()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: system_architecture#&gt;)</string>
		<string>erlang:system_info(Item :: system_architecture) -&gt; string()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: threads#&gt;)</string>
		<string>erlang:system_info(Item :: threads) -&gt; boolean()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: thread_pool_size#&gt;)</string>
		<string>erlang:system_info(Item :: thread_pool_size) -&gt; integer() &gt;= 0</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: tolerant_timeofday#&gt;)</string>
		<string>erlang:system_info(Item :: tolerant_timeofday) -&gt; enabled | disabled</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: trace_control_word#&gt;)</string>
		<string>erlang:system_info(Item :: trace_control_word) -&gt; integer() &gt;= 0</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: update_cpu_info#&gt;)</string>
		<string>erlang:system_info(Item :: update_cpu_info) -&gt; changed | unchanged</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: version#&gt;)</string>
		<string>erlang:system_info(Item :: version) -&gt; string()</string>
		<string>erlang:system_info</string>
		<string>erlang:system_info(&lt;#Item :: wordsize | {wordsize#&gt;, &lt;#internal} | {wordsize#&gt;, &lt;#external}#&gt;)</string>
		<string>erlang:system_info(Item :: wordsize | {wordsize, internal} | {wordsize, external}) -&gt; 4 | 8</string>
		<string>erlang:system_monitor</string>
		<string>erlang:system_monitor()</string>
		<string>erlang:system_monitor() -&gt; MonSettings</string>
		<string>erlang:system_monitor</string>
		<string>erlang:system_monitor(&lt;#Arg#&gt;)</string>
		<string>erlang:system_monitor(Arg) -&gt; MonSettings</string>
		<string>erlang:system_monitor</string>
		<string>erlang:system_monitor(&lt;#MonitorPid#&gt;, &lt;#Options#&gt;)</string>
		<string>erlang:system_monitor(MonitorPid, Options) -&gt; MonSettings</string>
		<string>erlang:system_profile</string>
		<string>erlang:system_profile()</string>
		<string>erlang:system_profile() -&gt; ProfilerSettings</string>
		<string>erlang:system_profile</string>
		<string>erlang:system_profile(&lt;#ProfilerPid#&gt;, &lt;#Options#&gt;)</string>
		<string>erlang:system_profile(ProfilerPid, Options) -&gt; ProfilerSettings</string>
		<string>term_to_binary</string>
		<string>term_to_binary(&lt;#Term#&gt;)</string>
		<string>term_to_binary(Term) -&gt; ext_binary()</string>
		<string>term_to_binary</string>
		<string>term_to_binary(&lt;#Term#&gt;, &lt;#Options#&gt;)</string>
		<string>term_to_binary(Term, Options) -&gt; ext_binary()</string>
		<string>throw</string>
		<string>throw(&lt;#Any#&gt;)</string>
		<string>throw(Any) -&gt; no_return()</string>
		<string>time</string>
		<string>time()</string>
		<string>time() -&gt; Time</string>
		<string>tl</string>
		<string>tl(&lt;#List#&gt;)</string>
		<string>tl(List) -&gt; term()</string>
		<string>erlang:trace</string>
		<string>erlang:trace(&lt;#PidSpec#&gt;, &lt;#How#&gt;, &lt;#FlagList#&gt;)</string>
		<string>erlang:trace(PidSpec, How, FlagList) -&gt; integer()</string>
		<string>erlang:trace_delivered</string>
		<string>erlang:trace_delivered(&lt;#Tracee#&gt;)</string>
		<string>erlang:trace_delivered(Tracee) -&gt; Ref</string>
		<string>erlang:trace_info</string>
		<string>erlang:trace_info(&lt;#PidOrFunc#&gt;, &lt;#Item#&gt;)</string>
		<string>erlang:trace_info(PidOrFunc, Item) -&gt; Res</string>
		<string>erlang:trace_pattern</string>
		<string>erlang:trace_pattern(&lt;#MFA#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>erlang:trace_pattern(MFA, MatchSpec) -&gt; integer() &gt;= 0</string>
		<string>erlang:trace_pattern</string>
		<string>erlang:trace_pattern(&lt;#MFA#&gt;, &lt;#MatchSpec#&gt;, &lt;#FlagList#&gt;)</string>
		<string>erlang:trace_pattern(MFA, MatchSpec, FlagList) -&gt; integer() &gt;= 0</string>
		<string>trunc</string>
		<string>trunc(&lt;#Number#&gt;)</string>
		<string>trunc(Number) -&gt; integer()</string>
		<string>tuple_size</string>
		<string>tuple_size(&lt;#Tuple#&gt;)</string>
		<string>tuple_size(Tuple) -&gt; integer() &gt;= 0</string>
		<string>tuple_to_list</string>
		<string>tuple_to_list(&lt;#Tuple#&gt;)</string>
		<string>tuple_to_list(Tuple) -&gt; [term()]</string>
		<string>erlang:universaltime</string>
		<string>erlang:universaltime()</string>
		<string>erlang:universaltime() -&gt; DateTime</string>
		<string>erlang:universaltime_to_localtime</string>
		<string>erlang:universaltime_to_localtime(&lt;#Universaltime#&gt;)</string>
		<string>erlang:universaltime_to_localtime(Universaltime) -&gt; Localtime</string>
		<string>erlang:universaltime_to_posixtime</string>
		<string>erlang:universaltime_to_posixtime(&lt;#P1#&gt;)</string>
		<string>erlang:universaltime_to_posixtime(P1) -&gt; integer()</string>
		<string>unlink</string>
		<string>unlink(&lt;#Id#&gt;)</string>
		<string>unlink(Id) -&gt; true</string>
		<string>unregister</string>
		<string>unregister(&lt;#RegName#&gt;)</string>
		<string>unregister(RegName) -&gt; true</string>
		<string>whereis</string>
		<string>whereis(&lt;#RegName#&gt;)</string>
		<string>whereis(RegName) -&gt; pid() | port() | undefined</string>
		<string>erlang:yield</string>
		<string>erlang:yield()</string>
		<string>erlang:yield() -&gt; true</string>
		<string>error_handler:breakpoint</string>
		<string>error_handler:breakpoint(&lt;#Module :: atom()#&gt;, &lt;#Function :: atom()#&gt;, &lt;#Args :: [term()]#&gt;)</string>
		<string>error_handler:breakpoint(Module :: atom(), Function :: atom(), Args :: [term()]) -&gt; any()</string>
		<string>error_handler:raise_undef_exception</string>
		<string>error_handler:raise_undef_exception(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>error_handler:raise_undef_exception(Module, Function, Args) -&gt; no_return()</string>
		<string>error_handler:stub_function</string>
		<string>error_handler:stub_function(&lt;#Mod :: atom()#&gt;, &lt;#Func :: atom()#&gt;, &lt;#Args :: [term()]#&gt;)</string>
		<string>error_handler:stub_function(Mod :: atom(), Func :: atom(), Args :: [term()]) -&gt; no_return()</string>
		<string>error_handler:undefined_function</string>
		<string>error_handler:undefined_function(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>error_handler:undefined_function(Module, Function, Args) -&gt; any()</string>
		<string>error_handler:undefined_lambda</string>
		<string>error_handler:undefined_lambda(&lt;#Module#&gt;, &lt;#Fun#&gt;, &lt;#Args#&gt;)</string>
		<string>error_handler:undefined_lambda(Module, Fun, Args) -&gt; term()</string>
		<string>error_logger:add_report_handler</string>
		<string>error_logger:add_report_handler(&lt;#Handler#&gt;)</string>
		<string>error_logger:add_report_handler(Handler) -&gt; any()</string>
		<string>error_logger:add_report_handler</string>
		<string>error_logger:add_report_handler(&lt;#Handler#&gt;, &lt;#Args#&gt;)</string>
		<string>error_logger:add_report_handler(Handler, Args) -&gt; Result</string>
		<string>error_logger:delete_report_handler</string>
		<string>error_logger:delete_report_handler(&lt;#Handler#&gt;)</string>
		<string>error_logger:delete_report_handler(Handler) -&gt; Result</string>
		<string>error_logger:error_info</string>
		<string>error_logger:error_info(&lt;#Error :: any()#&gt;)</string>
		<string>error_logger:error_info(Error :: any()) -&gt; ok</string>
		<string>error_logger:error_msg</string>
		<string>error_logger:error_msg(&lt;#Format#&gt;)</string>
		<string>error_logger:error_msg(Format) -&gt; ok</string>
		<string>error_logger:error_msg</string>
		<string>error_logger:error_msg(&lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>error_logger:error_msg(Format, Data) -&gt; ok</string>
		<string>error_logger:error_report</string>
		<string>error_logger:error_report(&lt;#Report#&gt;)</string>
		<string>error_logger:error_report(Report) -&gt; ok</string>
		<string>error_logger:error_report</string>
		<string>error_logger:error_report(&lt;#Type#&gt;, &lt;#Report#&gt;)</string>
		<string>error_logger:error_report(Type, Report) -&gt; ok</string>
		<string>error_logger:format</string>
		<string>error_logger:format(&lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>error_logger:format(Format, Data) -&gt; ok</string>
		<string>error_logger:handle_call</string>
		<string>error_logger:handle_call(&lt;#Query :: term()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>error_logger:handle_call(Query :: term(), State :: state()) -&gt; {ok, {error, bad_query}, state()}</string>
		<string>error_logger:handle_event</string>
		<string>error_logger:handle_event(&lt;#Event :: term()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>error_logger:handle_event(Event :: term(), State :: state()) -&gt; {ok, state()}</string>
		<string>error_logger:handle_info</string>
		<string>error_logger:handle_info(&lt;#X1 :: term()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>error_logger:handle_info(X1 :: term(), State :: state()) -&gt; {ok, state()}</string>
		<string>error_logger:info_msg</string>
		<string>error_logger:info_msg(&lt;#Format#&gt;)</string>
		<string>error_logger:info_msg(Format) -&gt; ok</string>
		<string>error_logger:info_msg</string>
		<string>error_logger:info_msg(&lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>error_logger:info_msg(Format, Data) -&gt; ok</string>
		<string>error_logger:info_report</string>
		<string>error_logger:info_report(&lt;#Report#&gt;)</string>
		<string>error_logger:info_report(Report) -&gt; ok</string>
		<string>error_logger:info_report</string>
		<string>error_logger:info_report(&lt;#Type#&gt;, &lt;#Report#&gt;)</string>
		<string>error_logger:info_report(Type, Report) -&gt; ok</string>
		<string>error_logger:init</string>
		<string>error_logger:init(&lt;#Max :: term()#&gt;)</string>
		<string>error_logger:init(Max :: term()) -&gt; {ok, state() | []}</string>
		<string>error_logger:logfile</string>
		<string>error_logger:logfile(&lt;#Request :: {open#&gt;, &lt;#Filename}#&gt;)</string>
		<string>error_logger:logfile(Request :: {open, Filename}) -&gt; ok | {error, OpenReason}</string>
		<string>error_logger:logfile</string>
		<string>error_logger:logfile(&lt;#Request :: close#&gt;)</string>
		<string>error_logger:logfile(Request :: close) -&gt; ok | {error, CloseReason}</string>
		<string>error_logger:logfile</string>
		<string>error_logger:logfile(&lt;#Request :: filename#&gt;)</string>
		<string>error_logger:logfile(Request :: filename) -&gt; Filename | {error, FilenameReason}</string>
		<string>error_logger:start</string>
		<string>error_logger:start()</string>
		<string>error_logger:start() -&gt; {ok, pid()} | {error, any()}</string>
		<string>error_logger:start_link</string>
		<string>error_logger:start_link()</string>
		<string>error_logger:start_link() -&gt; {ok, pid()} | {error, any()}</string>
		<string>error_logger:swap_handler</string>
		<string>error_logger:swap_handler(&lt;#Type :: swap_handler_type()#&gt;)</string>
		<string>error_logger:swap_handler(Type :: swap_handler_type()) -&gt; any()</string>
		<string>error_logger:terminate</string>
		<string>error_logger:terminate(&lt;#X1 :: term()#&gt;, &lt;#X2 :: state()#&gt;)</string>
		<string>error_logger:terminate(X1 :: term(), X2 :: state()) -&gt; {error_logger, [term()]}</string>
		<string>error_logger:tty</string>
		<string>error_logger:tty(&lt;#Flag#&gt;)</string>
		<string>error_logger:tty(Flag) -&gt; ok</string>
		<string>error_logger:warning_map</string>
		<string>error_logger:warning_map()</string>
		<string>error_logger:warning_map() -&gt; Tag</string>
		<string>error_logger:warning_msg</string>
		<string>error_logger:warning_msg(&lt;#Format#&gt;)</string>
		<string>error_logger:warning_msg(Format) -&gt; ok</string>
		<string>error_logger:warning_msg</string>
		<string>error_logger:warning_msg(&lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>error_logger:warning_msg(Format, Data) -&gt; ok</string>
		<string>error_logger:warning_report</string>
		<string>error_logger:warning_report(&lt;#Report#&gt;)</string>
		<string>error_logger:warning_report(Report) -&gt; ok</string>
		<string>error_logger:warning_report</string>
		<string>error_logger:warning_report(&lt;#Type#&gt;, &lt;#Report#&gt;)</string>
		<string>error_logger:warning_report(Type, Report) -&gt; ok</string>
		<string>et:trace_me</string>
		<string>et:trace_me(&lt;#DetailLevel#&gt;, &lt;#From#&gt;, &lt;#To#&gt;, &lt;#Label#&gt;, &lt;#Contents#&gt;)</string>
		<string>et:trace_me(DetailLevel, From, To, Label, Contents) -&gt; hopefully_traced</string>
		<string>et:trace_me</string>
		<string>et:trace_me(&lt;#DetailLevel#&gt;, &lt;#FromTo#&gt;, &lt;#Label#&gt;, &lt;#Contents#&gt;)</string>
		<string>et:trace_me(DetailLevel, FromTo, Label, Contents) -&gt; hopefully_traced</string>
		<string>et:phone_home</string>
		<string>et:phone_home(&lt;#DetailLevel#&gt;, &lt;#FromTo#&gt;, &lt;#Label#&gt;, &lt;#Contents#&gt;)</string>
		<string>et:phone_home(DetailLevel, FromTo, Label, Contents) -&gt; hopefully_traced</string>
		<string>et:phone_home</string>
		<string>et:phone_home(&lt;#DetailLevel#&gt;, &lt;#From#&gt;, &lt;#To#&gt;, &lt;#Label#&gt;, &lt;#Contents#&gt;)</string>
		<string>et:phone_home(DetailLevel, From, To, Label, Contents) -&gt; hopefully_traced</string>
		<string>et:report_event</string>
		<string>et:report_event(&lt;#DetailLevel#&gt;, &lt;#FromTo#&gt;, &lt;#Label#&gt;, &lt;#Contents#&gt;)</string>
		<string>et:report_event(DetailLevel, FromTo, Label, Contents) -&gt; hopefully_traced</string>
		<string>et:report_event</string>
		<string>et:report_event(&lt;#DetailLevel#&gt;, &lt;#From#&gt;, &lt;#To#&gt;, &lt;#Label#&gt;, &lt;#Contents#&gt;)</string>
		<string>et:report_event(DetailLevel, From, To, Label, Contents) -&gt; hopefully_traced</string>
		<string>et_collector:start_link</string>
		<string>et_collector:start_link(&lt;#Options#&gt;)</string>
		<string>et_collector:start_link(Options) -&gt; {ok, CollectorPid} | {error, Reason}</string>
		<string>et_collector:stop</string>
		<string>et_collector:stop(&lt;#CollectorPid#&gt;)</string>
		<string>et_collector:stop(CollectorPid) -&gt; ok</string>
		<string>et_collector:save_event_file</string>
		<string>et_collector:save_event_file(&lt;#CollectorPid#&gt;, &lt;#FileName#&gt;, &lt;#Options#&gt;)</string>
		<string>et_collector:save_event_file(CollectorPid, FileName, Options) -&gt; ok | {error, Reason}</string>
		<string>et_collector:load_event_file</string>
		<string>et_collector:load_event_file(&lt;#CollectorPid#&gt;, &lt;#FileName#&gt;)</string>
		<string>et_collector:load_event_file(CollectorPid, FileName) -&gt; {ok, BadBytes} | exit(Reason)</string>
		<string>et_collector:report</string>
		<string>et_collector:report(&lt;#Handle#&gt;, &lt;#TraceOrEvent#&gt;)</string>
		<string>et_collector:report(Handle, TraceOrEvent) -&gt; {ok, Continuation} | exit(Reason)</string>
		<string>et_collector:report_event</string>
		<string>et_collector:report_event(&lt;#Handle#&gt;, &lt;#DetailLevel#&gt;, &lt;#FromTo#&gt;, &lt;#Label#&gt;, &lt;#Contents#&gt;)</string>
		<string>et_collector:report_event(Handle, DetailLevel, FromTo, Label, Contents) -&gt; {ok, Continuation} | exit(Reason)</string>
		<string>et_collector:report_event</string>
		<string>et_collector:report_event(&lt;#Handle#&gt;, &lt;#DetailLevel#&gt;, &lt;#From#&gt;, &lt;#To#&gt;, &lt;#Label#&gt;, &lt;#Contents#&gt;)</string>
		<string>et_collector:report_event(Handle, DetailLevel, From, To, Label, Contents) -&gt; {ok, Continuation} | exit(Reason)</string>
		<string>et_collector:make_key</string>
		<string>et_collector:make_key(&lt;#Type#&gt;, &lt;#Stuff#&gt;)</string>
		<string>et_collector:make_key(Type, Stuff) -&gt; Key</string>
		<string>et_collector:get_table_handle</string>
		<string>et_collector:get_table_handle(&lt;#CollectorPid#&gt;)</string>
		<string>et_collector:get_table_handle(CollectorPid) -&gt; Handle</string>
		<string>et_collector:get_global_pid</string>
		<string>et_collector:get_global_pid()</string>
		<string>et_collector:get_global_pid() -&gt; CollectorPid | exit(Reason)</string>
		<string>et_collector:change_pattern</string>
		<string>et_collector:change_pattern(&lt;#CollectorPid#&gt;, &lt;#RawPattern#&gt;)</string>
		<string>et_collector:change_pattern(CollectorPid, RawPattern) -&gt; {old_pattern, TracePattern}</string>
		<string>et_collector:dict_insert</string>
		<string>et_collector:dict_insert(&lt;#CollectorPid#&gt;, &lt;#{filter#&gt;, &lt;#collector}#&gt;, &lt;#FilterFun#&gt;)</string>
		<string>et_collector:dict_insert(CollectorPid, {filter, collector}, FilterFun) -&gt; ok</string>
		<string>et_collector:dict_insert</string>
		<string>et_collector:dict_insert(&lt;#CollectorPid#&gt;, &lt;#{subscriber#&gt;, &lt;#SubscriberPid}#&gt;, &lt;#Void#&gt;)</string>
		<string>et_collector:dict_insert(CollectorPid, {subscriber, SubscriberPid}, Void) -&gt; ok</string>
		<string>et_collector:dict_insert</string>
		<string>et_collector:dict_insert(&lt;#CollectorPid#&gt;, &lt;#Key#&gt;, &lt;#Val#&gt;)</string>
		<string>et_collector:dict_insert(CollectorPid, Key, Val) -&gt; ok</string>
		<string>et_collector:dict_lookup</string>
		<string>et_collector:dict_lookup(&lt;#CollectorPid#&gt;, &lt;#Key#&gt;)</string>
		<string>et_collector:dict_lookup(CollectorPid, Key) -&gt; [Val]</string>
		<string>et_collector:dict_delete</string>
		<string>et_collector:dict_delete(&lt;#CollectorPid#&gt;, &lt;#Key#&gt;)</string>
		<string>et_collector:dict_delete(CollectorPid, Key) -&gt; ok</string>
		<string>et_collector:dict_match</string>
		<string>et_collector:dict_match(&lt;#CollectorPid#&gt;, &lt;#Pattern#&gt;)</string>
		<string>et_collector:dict_match(CollectorPid, Pattern) -&gt; [Match]</string>
		<string>et_collector:multicast</string>
		<string>et_collector:multicast(&lt;#_CollectorPid#&gt;, &lt;#Msg#&gt;)</string>
		<string>et_collector:multicast(_CollectorPid, Msg) -&gt; ok</string>
		<string>et_collector:start_trace_client</string>
		<string>et_collector:start_trace_client(&lt;#CollectorPid#&gt;, &lt;#Type#&gt;, &lt;#Parameters#&gt;)</string>
		<string>et_collector:start_trace_client(CollectorPid, Type, Parameters) -&gt; file_loaded | {trace_client_pid, pid()} | exit(Reason)</string>
		<string>et_collector:iterate</string>
		<string>et_collector:iterate(&lt;#Handle#&gt;, &lt;#Prev#&gt;, &lt;#Limit#&gt;)</string>
		<string>et_collector:iterate(Handle, Prev, Limit) -&gt; NewAcc</string>
		<string>et_collector:iterate</string>
		<string>et_collector:iterate(&lt;#Handle#&gt;, &lt;#Prev#&gt;, &lt;#Limit#&gt;, &lt;#Fun#&gt;, &lt;#Acc#&gt;)</string>
		<string>et_collector:iterate(Handle, Prev, Limit, Fun, Acc) -&gt; NewAcc</string>
		<string>et_collector:clear_table</string>
		<string>et_collector:clear_table(&lt;#Handle#&gt;)</string>
		<string>et_collector:clear_table(Handle) -&gt; ok</string>
		<string>et_selector:make_pattern</string>
		<string>et_selector:make_pattern(&lt;#RawPattern#&gt;)</string>
		<string>et_selector:make_pattern(RawPattern) -&gt; TracePattern</string>
		<string>et_selector:change_pattern</string>
		<string>et_selector:change_pattern(&lt;#Pattern#&gt;)</string>
		<string>et_selector:change_pattern(Pattern) -&gt; ok</string>
		<string>et_selector:parse_event</string>
		<string>et_selector:parse_event(&lt;#Mod#&gt;, &lt;#ValidTraceData#&gt;)</string>
		<string>et_selector:parse_event(Mod, ValidTraceData) -&gt; false | true | {true, Event}</string>
		<string>et_viewer:file</string>
		<string>et_viewer:file(&lt;#FileName#&gt;)</string>
		<string>et_viewer:file(FileName) -&gt; {ok, ViewerPid} | {error, Reason}</string>
		<string>et_viewer:start</string>
		<string>et_viewer:start()</string>
		<string>et_viewer:start() -&gt; ok</string>
		<string>et_viewer:start</string>
		<string>et_viewer:start(&lt;#Options#&gt;)</string>
		<string>et_viewer:start(Options) -&gt; ok</string>
		<string>et_viewer:start_link</string>
		<string>et_viewer:start_link(&lt;#Options#&gt;)</string>
		<string>et_viewer:start_link(Options) -&gt; {ok, ViewerPid} | {error, Reason}</string>
		<string>et_viewer:get_collector_pid</string>
		<string>et_viewer:get_collector_pid(&lt;#ViewerPid#&gt;)</string>
		<string>et_viewer:get_collector_pid(ViewerPid) -&gt; CollectorPid</string>
		<string>et_viewer:stop</string>
		<string>et_viewer:stop(&lt;#ViewerPid#&gt;)</string>
		<string>et_viewer:stop(ViewerPid) -&gt; ok</string>
		<string>etop:start</string>
		<string>etop:start()</string>
		<string>etop:start() -&gt; ok</string>
		<string>etop:start</string>
		<string>etop:start(&lt;#Options#&gt;)</string>
		<string>etop:start(Options) -&gt; ok</string>
		<string>etop:help</string>
		<string>etop:help()</string>
		<string>etop:help() -&gt; ok</string>
		<string>etop:config</string>
		<string>etop:config(&lt;#Key#&gt;, &lt;#Value#&gt;)</string>
		<string>etop:config(Key, Value) -&gt; Result</string>
		<string>etop:dump</string>
		<string>etop:dump(&lt;#File#&gt;)</string>
		<string>etop:dump(File) -&gt; Result</string>
		<string>etop:stop</string>
		<string>etop:stop()</string>
		<string>etop:stop() -&gt; stop</string>
		<string>ets:all</string>
		<string>ets:all()</string>
		<string>ets:all() -&gt; [Tab]</string>
		<string>ets:delete</string>
		<string>ets:delete(&lt;#Tab#&gt;)</string>
		<string>ets:delete(Tab) -&gt; true</string>
		<string>ets:delete</string>
		<string>ets:delete(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>ets:delete(Tab, Key) -&gt; true</string>
		<string>ets:delete_all_objects</string>
		<string>ets:delete_all_objects(&lt;#Tab#&gt;)</string>
		<string>ets:delete_all_objects(Tab) -&gt; true</string>
		<string>ets:delete_object</string>
		<string>ets:delete_object(&lt;#Tab#&gt;, &lt;#Object#&gt;)</string>
		<string>ets:delete_object(Tab, Object) -&gt; true</string>
		<string>ets:file2tab</string>
		<string>ets:file2tab(&lt;#Filename#&gt;)</string>
		<string>ets:file2tab(Filename) -&gt; {ok, Tab} | {error, Reason}</string>
		<string>ets:file2tab</string>
		<string>ets:file2tab(&lt;#Filename#&gt;, &lt;#Options#&gt;)</string>
		<string>ets:file2tab(Filename, Options) -&gt; {ok, Tab} | {error, Reason}</string>
		<string>ets:filter</string>
		<string>ets:filter(&lt;#Tn :: tab()#&gt;, &lt;#F :: function()#&gt;, &lt;#A :: [term()]#&gt;)</string>
		<string>ets:filter(Tn :: tab(), F :: function(), A :: [term()]) -&gt; [term()]</string>
		<string>ets:first</string>
		<string>ets:first(&lt;#Tab#&gt;)</string>
		<string>ets:first(Tab) -&gt; Key | '$end_of_table'</string>
		<string>ets:foldl</string>
		<string>ets:foldl(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#Tab#&gt;)</string>
		<string>ets:foldl(Function, Acc0, Tab) -&gt; Acc1</string>
		<string>ets:foldr</string>
		<string>ets:foldr(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#Tab#&gt;)</string>
		<string>ets:foldr(Function, Acc0, Tab) -&gt; Acc1</string>
		<string>ets:from_dets</string>
		<string>ets:from_dets(&lt;#Tab#&gt;, &lt;#DetsTab#&gt;)</string>
		<string>ets:from_dets(Tab, DetsTab) -&gt; true</string>
		<string>ets:fun2ms</string>
		<string>ets:fun2ms(&lt;#LiteralFun#&gt;)</string>
		<string>ets:fun2ms(LiteralFun) -&gt; MatchSpec</string>
		<string>ets:give_away</string>
		<string>ets:give_away(&lt;#Tab#&gt;, &lt;#Pid#&gt;, &lt;#GiftData#&gt;)</string>
		<string>ets:give_away(Tab, Pid, GiftData) -&gt; true</string>
		<string>ets:i</string>
		<string>ets:i()</string>
		<string>ets:i() -&gt; ok</string>
		<string>ets:i</string>
		<string>ets:i(&lt;#Tab#&gt;)</string>
		<string>ets:i(Tab) -&gt; ok</string>
		<string>ets:i</string>
		<string>ets:i(&lt;#Tab :: tab()#&gt;, &lt;#Height :: integer() &gt;= 1#&gt;)</string>
		<string>ets:i(Tab :: tab(), Height :: integer() &gt;= 1) -&gt; ok</string>
		<string>ets:i</string>
		<string>ets:i(&lt;#Tab :: tab()#&gt;, &lt;#Height :: integer() &gt;= 1#&gt;, &lt;#Width :: integer() &gt;= 1#&gt;)</string>
		<string>ets:i(Tab :: tab(), Height :: integer() &gt;= 1, Width :: integer() &gt;= 1) -&gt; ok</string>
		<string>ets:info</string>
		<string>ets:info(&lt;#Tab#&gt;)</string>
		<string>ets:info(Tab) -&gt; InfoList | undefined</string>
		<string>ets:info</string>
		<string>ets:info(&lt;#Tab#&gt;, &lt;#Item#&gt;)</string>
		<string>ets:info(Tab, Item) -&gt; Value | undefined</string>
		<string>ets:init_table</string>
		<string>ets:init_table(&lt;#Tab#&gt;, &lt;#InitFun#&gt;)</string>
		<string>ets:init_table(Tab, InitFun) -&gt; true</string>
		<string>ets:insert</string>
		<string>ets:insert(&lt;#Tab#&gt;, &lt;#ObjectOrObjects#&gt;)</string>
		<string>ets:insert(Tab, ObjectOrObjects) -&gt; true</string>
		<string>ets:insert_new</string>
		<string>ets:insert_new(&lt;#Tab#&gt;, &lt;#ObjectOrObjects#&gt;)</string>
		<string>ets:insert_new(Tab, ObjectOrObjects) -&gt; boolean()</string>
		<string>ets:is_compiled_ms</string>
		<string>ets:is_compiled_ms(&lt;#Term#&gt;)</string>
		<string>ets:is_compiled_ms(Term) -&gt; boolean()</string>
		<string>ets:last</string>
		<string>ets:last(&lt;#Tab#&gt;)</string>
		<string>ets:last(Tab) -&gt; Key | '$end_of_table'</string>
		<string>ets:lookup</string>
		<string>ets:lookup(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>ets:lookup(Tab, Key) -&gt; [Object]</string>
		<string>ets:lookup_element</string>
		<string>ets:lookup_element(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#Pos#&gt;)</string>
		<string>ets:lookup_element(Tab, Key, Pos) -&gt; Elem</string>
		<string>ets:match</string>
		<string>ets:match(&lt;#Continuation#&gt;)</string>
		<string>ets:match(Continuation) -&gt; {[Match], Continuation} | '$end_of_table'</string>
		<string>ets:match</string>
		<string>ets:match(&lt;#Tab#&gt;, &lt;#Pattern#&gt;)</string>
		<string>ets:match(Tab, Pattern) -&gt; [Match]</string>
		<string>ets:match</string>
		<string>ets:match(&lt;#Tab#&gt;, &lt;#Pattern#&gt;, &lt;#Limit#&gt;)</string>
		<string>ets:match(Tab, Pattern, Limit) -&gt; {[Match], Continuation} | '$end_of_table'</string>
		<string>ets:match_delete</string>
		<string>ets:match_delete(&lt;#Tab#&gt;, &lt;#Pattern#&gt;)</string>
		<string>ets:match_delete(Tab, Pattern) -&gt; true</string>
		<string>ets:match_object</string>
		<string>ets:match_object(&lt;#Continuation#&gt;)</string>
		<string>ets:match_object(Continuation) -&gt; {[Match], Continuation} | '$end_of_table'</string>
		<string>ets:match_object</string>
		<string>ets:match_object(&lt;#Tab#&gt;, &lt;#Pattern#&gt;)</string>
		<string>ets:match_object(Tab, Pattern) -&gt; [Object]</string>
		<string>ets:match_object</string>
		<string>ets:match_object(&lt;#Tab#&gt;, &lt;#Pattern#&gt;, &lt;#Limit#&gt;)</string>
		<string>ets:match_object(Tab, Pattern, Limit) -&gt; {[Match], Continuation} | '$end_of_table'</string>
		<string>ets:match_spec_compile</string>
		<string>ets:match_spec_compile(&lt;#MatchSpec#&gt;)</string>
		<string>ets:match_spec_compile(MatchSpec) -&gt; CompiledMatchSpec</string>
		<string>ets:match_spec_run</string>
		<string>ets:match_spec_run(&lt;#List#&gt;, &lt;#CompiledMatchSpec#&gt;)</string>
		<string>ets:match_spec_run(List, CompiledMatchSpec) -&gt; list()</string>
		<string>ets:match_spec_run_r</string>
		<string>ets:match_spec_run_r(&lt;#List#&gt;, &lt;#CompiledMatchSpec#&gt;, &lt;#X3 :: list()#&gt;)</string>
		<string>ets:match_spec_run_r(List, CompiledMatchSpec, X3 :: list()) -&gt; list()</string>
		<string>ets:member</string>
		<string>ets:member(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>ets:member(Tab, Key) -&gt; boolean()</string>
		<string>ets:new</string>
		<string>ets:new(&lt;#Name#&gt;, &lt;#Options#&gt;)</string>
		<string>ets:new(Name, Options) -&gt; tid() | atom()</string>
		<string>ets:next</string>
		<string>ets:next(&lt;#Tab#&gt;, &lt;#Key1#&gt;)</string>
		<string>ets:next(Tab, Key1) -&gt; Key2 | '$end_of_table'</string>
		<string>ets:prev</string>
		<string>ets:prev(&lt;#Tab#&gt;, &lt;#Key1#&gt;)</string>
		<string>ets:prev(Tab, Key1) -&gt; Key2 | '$end_of_table'</string>
		<string>ets:rename</string>
		<string>ets:rename(&lt;#Tab#&gt;, &lt;#Name#&gt;)</string>
		<string>ets:rename(Tab, Name) -&gt; Name</string>
		<string>ets:repair_continuation</string>
		<string>ets:repair_continuation(&lt;#Continuation#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>ets:repair_continuation(Continuation, MatchSpec) -&gt; Continuation</string>
		<string>ets:safe_fixtable</string>
		<string>ets:safe_fixtable(&lt;#Tab#&gt;, &lt;#Fix#&gt;)</string>
		<string>ets:safe_fixtable(Tab, Fix) -&gt; true</string>
		<string>ets:select</string>
		<string>ets:select(&lt;#Continuation#&gt;)</string>
		<string>ets:select(Continuation) -&gt; {[Match], Continuation} | '$end_of_table'</string>
		<string>ets:select</string>
		<string>ets:select(&lt;#Tab#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>ets:select(Tab, MatchSpec) -&gt; [Match]</string>
		<string>ets:select</string>
		<string>ets:select(&lt;#Tab#&gt;, &lt;#MatchSpec#&gt;, &lt;#Limit#&gt;)</string>
		<string>ets:select(Tab, MatchSpec, Limit) -&gt; {[Match], Continuation} | '$end_of_table'</string>
		<string>ets:select_count</string>
		<string>ets:select_count(&lt;#Tab#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>ets:select_count(Tab, MatchSpec) -&gt; NumMatched</string>
		<string>ets:select_delete</string>
		<string>ets:select_delete(&lt;#Tab#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>ets:select_delete(Tab, MatchSpec) -&gt; NumDeleted</string>
		<string>ets:select_reverse</string>
		<string>ets:select_reverse(&lt;#Continuation#&gt;)</string>
		<string>ets:select_reverse(Continuation) -&gt; {[Match], Continuation} | '$end_of_table'</string>
		<string>ets:select_reverse</string>
		<string>ets:select_reverse(&lt;#Tab#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>ets:select_reverse(Tab, MatchSpec) -&gt; [Match]</string>
		<string>ets:select_reverse</string>
		<string>ets:select_reverse(&lt;#Tab#&gt;, &lt;#MatchSpec#&gt;, &lt;#Limit#&gt;)</string>
		<string>ets:select_reverse(Tab, MatchSpec, Limit) -&gt; {[Match], Continuation} | '$end_of_table'</string>
		<string>ets:setopts</string>
		<string>ets:setopts(&lt;#Tab#&gt;, &lt;#Opts#&gt;)</string>
		<string>ets:setopts(Tab, Opts) -&gt; true</string>
		<string>ets:slot</string>
		<string>ets:slot(&lt;#Tab#&gt;, &lt;#I#&gt;)</string>
		<string>ets:slot(Tab, I) -&gt; [Object] | '$end_of_table'</string>
		<string>ets:tab2file</string>
		<string>ets:tab2file(&lt;#Tab#&gt;, &lt;#Filename#&gt;)</string>
		<string>ets:tab2file(Tab, Filename) -&gt; ok | {error, Reason}</string>
		<string>ets:tab2file</string>
		<string>ets:tab2file(&lt;#Tab#&gt;, &lt;#Filename#&gt;, &lt;#Options#&gt;)</string>
		<string>ets:tab2file(Tab, Filename, Options) -&gt; ok | {error, Reason}</string>
		<string>ets:tab2list</string>
		<string>ets:tab2list(&lt;#Tab#&gt;)</string>
		<string>ets:tab2list(Tab) -&gt; [Object]</string>
		<string>ets:tabfile_info</string>
		<string>ets:tabfile_info(&lt;#Filename#&gt;)</string>
		<string>ets:tabfile_info(Filename) -&gt; {ok, TableInfo} | {error, Reason}</string>
		<string>ets:table</string>
		<string>ets:table(&lt;#Tab#&gt;)</string>
		<string>ets:table(Tab) -&gt; QueryHandle</string>
		<string>ets:table</string>
		<string>ets:table(&lt;#Tab#&gt;, &lt;#Options#&gt;)</string>
		<string>ets:table(Tab, Options) -&gt; QueryHandle</string>
		<string>ets:test_ms</string>
		<string>ets:test_ms(&lt;#Tuple#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>ets:test_ms(Tuple, MatchSpec) -&gt; {ok, Result} | {error, Errors}</string>
		<string>ets:to_dets</string>
		<string>ets:to_dets(&lt;#Tab#&gt;, &lt;#DetsTab#&gt;)</string>
		<string>ets:to_dets(Tab, DetsTab) -&gt; DetsTab</string>
		<string>ets:update_counter</string>
		<string>ets:update_counter(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#UpdateOp#&gt;)</string>
		<string>ets:update_counter(Tab, Key, UpdateOp) -&gt; Result</string>
		<string>ets:update_counter</string>
		<string>ets:update_counter(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#UpdateOp :: [UpdateOp]#&gt;)</string>
		<string>ets:update_counter(Tab, Key, UpdateOp :: [UpdateOp]) -&gt; [Result]</string>
		<string>ets:update_counter</string>
		<string>ets:update_counter(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#Incr#&gt;)</string>
		<string>ets:update_counter(Tab, Key, Incr) -&gt; Result</string>
		<string>ets:update_element</string>
		<string>ets:update_element(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#ElementSpec :: {Pos#&gt;, &lt;#Value}#&gt;)</string>
		<string>ets:update_element(Tab, Key, ElementSpec :: {Pos, Value}) -&gt; boolean()</string>
		<string>ets:update_element</string>
		<string>ets:update_element(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#ElementSpec :: [{Pos#&gt;, &lt;#Value}]#&gt;)</string>
		<string>ets:update_element(Tab, Key, ElementSpec :: [{Pos, Value}]) -&gt; boolean()</string>
		<string>eunit:start</string>
		<string>eunit:start()</string>
		<string>eunit:start() -&gt; term()</string>
		<string>eunit:stop</string>
		<string>eunit:stop()</string>
		<string>eunit:stop() -&gt; term()</string>
		<string>eunit:test</string>
		<string>eunit:test(&lt;#Tests#&gt;)</string>
		<string>eunit:test(Tests) -&gt; term()</string>
		<string>eunit:test</string>
		<string>eunit:test(&lt;#Tests::term()#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>eunit:test(Tests::term(), Options::[term()]) -&gt; ok | {error, term()}</string>
		<string>eunit_surefire:handle_begin</string>
		<string>eunit_surefire:handle_begin(&lt;#Kind#&gt;, &lt;#Data#&gt;, &lt;#St#&gt;)</string>
		<string>eunit_surefire:handle_begin(Kind, Data, St) -&gt; term()</string>
		<string>eunit_surefire:handle_cancel</string>
		<string>eunit_surefire:handle_cancel(&lt;#X1#&gt;, &lt;#Data#&gt;, &lt;#St#&gt;)</string>
		<string>eunit_surefire:handle_cancel(X1, Data, St) -&gt; term()</string>
		<string>eunit_surefire:handle_end</string>
		<string>eunit_surefire:handle_end(&lt;#X1#&gt;, &lt;#Data#&gt;, &lt;#St#&gt;)</string>
		<string>eunit_surefire:handle_end(X1, Data, St) -&gt; term()</string>
		<string>eunit_surefire:init</string>
		<string>eunit_surefire:init(&lt;#Options#&gt;)</string>
		<string>eunit_surefire:init(Options) -&gt; term()</string>
		<string>eunit_surefire:start</string>
		<string>eunit_surefire:start()</string>
		<string>eunit_surefire:start() -&gt; term()</string>
		<string>eunit_surefire:start</string>
		<string>eunit_surefire:start(&lt;#Options#&gt;)</string>
		<string>eunit_surefire:start(Options) -&gt; term()</string>
		<string>eunit_surefire:terminate</string>
		<string>eunit_surefire:terminate(&lt;#X1#&gt;, &lt;#St#&gt;)</string>
		<string>eunit_surefire:terminate(X1, St) -&gt; term()</string>
		<string>file:advise</string>
		<string>file:advise(&lt;#IoDevice#&gt;, &lt;#Offset#&gt;, &lt;#Length#&gt;, &lt;#Advise#&gt;)</string>
		<string>file:advise(IoDevice, Offset, Length, Advise) -&gt; ok | {error, Reason}</string>
		<string>file:allocate</string>
		<string>file:allocate(&lt;#File#&gt;, &lt;#Offset#&gt;, &lt;#Length#&gt;)</string>
		<string>file:allocate(File, Offset, Length) -&gt; ok | {error, posix()}</string>
		<string>file:altname</string>
		<string>file:altname(&lt;#Name :: name_all()#&gt;)</string>
		<string>file:altname(Name :: name_all()) -&gt; any()</string>
		<string>file:change_group</string>
		<string>file:change_group(&lt;#Filename#&gt;, &lt;#Gid#&gt;)</string>
		<string>file:change_group(Filename, Gid) -&gt; ok | {error, Reason}</string>
		<string>file:change_mode</string>
		<string>file:change_mode(&lt;#Filename#&gt;, &lt;#Mode#&gt;)</string>
		<string>file:change_mode(Filename, Mode) -&gt; ok | {error, Reason}</string>
		<string>file:change_owner</string>
		<string>file:change_owner(&lt;#Filename#&gt;, &lt;#Uid#&gt;)</string>
		<string>file:change_owner(Filename, Uid) -&gt; ok | {error, Reason}</string>
		<string>file:change_owner</string>
		<string>file:change_owner(&lt;#Filename#&gt;, &lt;#Uid#&gt;, &lt;#Gid#&gt;)</string>
		<string>file:change_owner(Filename, Uid, Gid) -&gt; ok | {error, Reason}</string>
		<string>file:change_time</string>
		<string>file:change_time(&lt;#Filename#&gt;, &lt;#Mtime#&gt;)</string>
		<string>file:change_time(Filename, Mtime) -&gt; ok | {error, Reason}</string>
		<string>file:change_time</string>
		<string>file:change_time(&lt;#Filename#&gt;, &lt;#Atime#&gt;, &lt;#Mtime#&gt;)</string>
		<string>file:change_time(Filename, Atime, Mtime) -&gt; ok | {error, Reason}</string>
		<string>file:close</string>
		<string>file:close(&lt;#IoDevice#&gt;)</string>
		<string>file:close(IoDevice) -&gt; ok | {error, Reason}</string>
		<string>file:consult</string>
		<string>file:consult(&lt;#Filename#&gt;)</string>
		<string>file:consult(Filename) -&gt; {ok, Terms} | {error, Reason}</string>
		<string>file:copy</string>
		<string>file:copy(&lt;#Source#&gt;, &lt;#Destination#&gt;)</string>
		<string>file:copy(Source, Destination) -&gt; {ok, BytesCopied} | {error, Reason}</string>
		<string>file:copy</string>
		<string>file:copy(&lt;#Source#&gt;, &lt;#Destination#&gt;, &lt;#ByteCount#&gt;)</string>
		<string>file:copy(Source, Destination, ByteCount) -&gt; {ok, BytesCopied} | {error, Reason}</string>
		<string>file:datasync</string>
		<string>file:datasync(&lt;#IoDevice#&gt;)</string>
		<string>file:datasync(IoDevice) -&gt; ok | {error, Reason}</string>
		<string>file:del_dir</string>
		<string>file:del_dir(&lt;#Dir#&gt;)</string>
		<string>file:del_dir(Dir) -&gt; ok | {error, Reason}</string>
		<string>file:delete</string>
		<string>file:delete(&lt;#Filename#&gt;)</string>
		<string>file:delete(Filename) -&gt; ok | {error, Reason}</string>
		<string>file:eval</string>
		<string>file:eval(&lt;#Filename#&gt;)</string>
		<string>file:eval(Filename) -&gt; ok | {error, Reason}</string>
		<string>file:eval</string>
		<string>file:eval(&lt;#Filename#&gt;, &lt;#Bindings#&gt;)</string>
		<string>file:eval(Filename, Bindings) -&gt; ok | {error, Reason}</string>
		<string>file:format_error</string>
		<string>file:format_error(&lt;#Reason#&gt;)</string>
		<string>file:format_error(Reason) -&gt; Chars</string>
		<string>file:get_cwd</string>
		<string>file:get_cwd()</string>
		<string>file:get_cwd() -&gt; {ok, Dir} | {error, Reason}</string>
		<string>file:get_cwd</string>
		<string>file:get_cwd(&lt;#Drive#&gt;)</string>
		<string>file:get_cwd(Drive) -&gt; {ok, Dir} | {error, Reason}</string>
		<string>file:list_dir</string>
		<string>file:list_dir(&lt;#Dir#&gt;)</string>
		<string>file:list_dir(Dir) -&gt; {ok, Filenames} | {error, Reason}</string>
		<string>file:list_dir_all</string>
		<string>file:list_dir_all(&lt;#Dir#&gt;)</string>
		<string>file:list_dir_all(Dir) -&gt; {ok, Filenames} | {error, Reason}</string>
		<string>file:make_dir</string>
		<string>file:make_dir(&lt;#Dir#&gt;)</string>
		<string>file:make_dir(Dir) -&gt; ok | {error, Reason}</string>
		<string>file:make_link</string>
		<string>file:make_link(&lt;#Existing#&gt;, &lt;#New#&gt;)</string>
		<string>file:make_link(Existing, New) -&gt; ok | {error, Reason}</string>
		<string>file:make_symlink</string>
		<string>file:make_symlink(&lt;#Existing#&gt;, &lt;#New#&gt;)</string>
		<string>file:make_symlink(Existing, New) -&gt; ok | {error, Reason}</string>
		<string>file:native_name_encoding</string>
		<string>file:native_name_encoding()</string>
		<string>file:native_name_encoding() -&gt; latin1 | utf8</string>
		<string>file:open</string>
		<string>file:open(&lt;#File#&gt;, &lt;#Modes#&gt;)</string>
		<string>file:open(File, Modes) -&gt; {ok, IoDevice} | {error, Reason}</string>
		<string>file:path_consult</string>
		<string>file:path_consult(&lt;#Path#&gt;, &lt;#Filename#&gt;)</string>
		<string>file:path_consult(Path, Filename) -&gt; {ok, Terms, FullName} | {error, Reason}</string>
		<string>file:path_eval</string>
		<string>file:path_eval(&lt;#Path#&gt;, &lt;#Filename#&gt;)</string>
		<string>file:path_eval(Path, Filename) -&gt; {ok, FullName} | {error, Reason}</string>
		<string>file:path_eval</string>
		<string>file:path_eval(&lt;#Path#&gt;, &lt;#Filename#&gt;, &lt;#Bindings#&gt;)</string>
		<string>file:path_eval(Path, Filename, Bindings) -&gt; {ok, FullName} | {error, Reason}</string>
		<string>file:path_open</string>
		<string>file:path_open(&lt;#Path#&gt;, &lt;#Filename#&gt;, &lt;#Modes#&gt;)</string>
		<string>file:path_open(Path, Filename, Modes) -&gt; {ok, IoDevice, FullName} | {error, Reason}</string>
		<string>file:path_script</string>
		<string>file:path_script(&lt;#Path#&gt;, &lt;#Filename#&gt;)</string>
		<string>file:path_script(Path, Filename) -&gt; {ok, Value, FullName} | {error, Reason}</string>
		<string>file:path_script</string>
		<string>file:path_script(&lt;#Path#&gt;, &lt;#Filename#&gt;, &lt;#Bindings#&gt;)</string>
		<string>file:path_script(Path, Filename, Bindings) -&gt; {ok, Value, FullName} | {error, Reason}</string>
		<string>file:pid2name</string>
		<string>file:pid2name(&lt;#Pid#&gt;)</string>
		<string>file:pid2name(Pid) -&gt; {ok, Filename} | undefined</string>
		<string>file:position</string>
		<string>file:position(&lt;#IoDevice#&gt;, &lt;#Location#&gt;)</string>
		<string>file:position(IoDevice, Location) -&gt; {ok, NewPosition} | {error, Reason}</string>
		<string>file:pread</string>
		<string>file:pread(&lt;#IoDevice#&gt;, &lt;#LocNums#&gt;)</string>
		<string>file:pread(IoDevice, LocNums) -&gt; {ok, DataL} | eof | {error, Reason}</string>
		<string>file:pread</string>
		<string>file:pread(&lt;#IoDevice#&gt;, &lt;#Location#&gt;, &lt;#Number#&gt;)</string>
		<string>file:pread(IoDevice, Location, Number) -&gt; {ok, Data} | eof | {error, Reason}</string>
		<string>file:pwrite</string>
		<string>file:pwrite(&lt;#IoDevice#&gt;, &lt;#LocBytes#&gt;)</string>
		<string>file:pwrite(IoDevice, LocBytes) -&gt; ok | {error, {N, Reason}}</string>
		<string>file:pwrite</string>
		<string>file:pwrite(&lt;#IoDevice#&gt;, &lt;#Location#&gt;, &lt;#Bytes#&gt;)</string>
		<string>file:pwrite(IoDevice, Location, Bytes) -&gt; ok | {error, Reason}</string>
		<string>file:read</string>
		<string>file:read(&lt;#IoDevice#&gt;, &lt;#Number#&gt;)</string>
		<string>file:read(IoDevice, Number) -&gt; {ok, Data} | eof | {error, Reason}</string>
		<string>file:read_file</string>
		<string>file:read_file(&lt;#Filename#&gt;)</string>
		<string>file:read_file(Filename) -&gt; {ok, Binary} | {error, Reason}</string>
		<string>file:read_file_info</string>
		<string>file:read_file_info(&lt;#Filename#&gt;)</string>
		<string>file:read_file_info(Filename) -&gt; {ok, FileInfo} | {error, Reason}</string>
		<string>file:read_file_info</string>
		<string>file:read_file_info(&lt;#Filename#&gt;, &lt;#Opts#&gt;)</string>
		<string>file:read_file_info(Filename, Opts) -&gt; {ok, FileInfo} | {error, Reason}</string>
		<string>file:read_line</string>
		<string>file:read_line(&lt;#IoDevice#&gt;)</string>
		<string>file:read_line(IoDevice) -&gt; {ok, Data} | eof | {error, Reason}</string>
		<string>file:read_link</string>
		<string>file:read_link(&lt;#Name#&gt;)</string>
		<string>file:read_link(Name) -&gt; {ok, Filename} | {error, Reason}</string>
		<string>file:read_link_all</string>
		<string>file:read_link_all(&lt;#Name#&gt;)</string>
		<string>file:read_link_all(Name) -&gt; {ok, Filename} | {error, Reason}</string>
		<string>file:read_link_info</string>
		<string>file:read_link_info(&lt;#Name#&gt;)</string>
		<string>file:read_link_info(Name) -&gt; {ok, FileInfo} | {error, Reason}</string>
		<string>file:read_link_info</string>
		<string>file:read_link_info(&lt;#Name#&gt;, &lt;#Opts#&gt;)</string>
		<string>file:read_link_info(Name, Opts) -&gt; {ok, FileInfo} | {error, Reason}</string>
		<string>file:rename</string>
		<string>file:rename(&lt;#Source#&gt;, &lt;#Destination#&gt;)</string>
		<string>file:rename(Source, Destination) -&gt; ok | {error, Reason}</string>
		<string>file:script</string>
		<string>file:script(&lt;#Filename#&gt;)</string>
		<string>file:script(Filename) -&gt; {ok, Value} | {error, Reason}</string>
		<string>file:script</string>
		<string>file:script(&lt;#Filename#&gt;, &lt;#Bindings#&gt;)</string>
		<string>file:script(Filename, Bindings) -&gt; {ok, Value} | {error, Reason}</string>
		<string>file:sendfile</string>
		<string>file:sendfile(&lt;#Filename#&gt;, &lt;#Socket#&gt;)</string>
		<string>file:sendfile(Filename, Socket) -&gt; {ok, integer() &gt;= 0} | {error, inet:posix() | closed | badarg | not_owner}</string>
		<string>file:sendfile</string>
		<string>file:sendfile(&lt;#RawFile#&gt;, &lt;#Socket#&gt;, &lt;#Offset#&gt;, &lt;#Bytes#&gt;, &lt;#Opts#&gt;)</string>
		<string>file:sendfile(RawFile, Socket, Offset, Bytes, Opts) -&gt; {ok, integer() &gt;= 0} | {error, inet:posix() | closed | badarg | not_owner}</string>
		<string>file:set_cwd</string>
		<string>file:set_cwd(&lt;#Dir#&gt;)</string>
		<string>file:set_cwd(Dir) -&gt; ok | {error, Reason}</string>
		<string>file:sync</string>
		<string>file:sync(&lt;#IoDevice#&gt;)</string>
		<string>file:sync(IoDevice) -&gt; ok | {error, Reason}</string>
		<string>file:truncate</string>
		<string>file:truncate(&lt;#IoDevice#&gt;)</string>
		<string>file:truncate(IoDevice) -&gt; ok | {error, Reason}</string>
		<string>file:write</string>
		<string>file:write(&lt;#IoDevice#&gt;, &lt;#Bytes#&gt;)</string>
		<string>file:write(IoDevice, Bytes) -&gt; ok | {error, Reason}</string>
		<string>file:write_file</string>
		<string>file:write_file(&lt;#Filename#&gt;, &lt;#Bytes#&gt;)</string>
		<string>file:write_file(Filename, Bytes) -&gt; ok | {error, Reason}</string>
		<string>file:write_file</string>
		<string>file:write_file(&lt;#Filename#&gt;, &lt;#Bytes#&gt;, &lt;#Modes#&gt;)</string>
		<string>file:write_file(Filename, Bytes, Modes) -&gt; ok | {error, Reason}</string>
		<string>file:write_file_info</string>
		<string>file:write_file_info(&lt;#Filename#&gt;, &lt;#FileInfo#&gt;)</string>
		<string>file:write_file_info(Filename, FileInfo) -&gt; ok | {error, Reason}</string>
		<string>file:write_file_info</string>
		<string>file:write_file_info(&lt;#Filename#&gt;, &lt;#FileInfo#&gt;, &lt;#Opts#&gt;)</string>
		<string>file:write_file_info(Filename, FileInfo, Opts) -&gt; ok | {error, Reason}</string>
		<string>file_sorter:check</string>
		<string>file_sorter:check(&lt;#FileName#&gt;)</string>
		<string>file_sorter:check(FileName) -&gt; Reply</string>
		<string>file_sorter:check</string>
		<string>file_sorter:check(&lt;#FileNames#&gt;, &lt;#Options#&gt;)</string>
		<string>file_sorter:check(FileNames, Options) -&gt; Reply</string>
		<string>file_sorter:keycheck</string>
		<string>file_sorter:keycheck(&lt;#KeyPos#&gt;, &lt;#FileName#&gt;)</string>
		<string>file_sorter:keycheck(KeyPos, FileName) -&gt; Reply</string>
		<string>file_sorter:keycheck</string>
		<string>file_sorter:keycheck(&lt;#KeyPos#&gt;, &lt;#FileNames#&gt;, &lt;#Options#&gt;)</string>
		<string>file_sorter:keycheck(KeyPos, FileNames, Options) -&gt; Reply</string>
		<string>file_sorter:keymerge</string>
		<string>file_sorter:keymerge(&lt;#KeyPos#&gt;, &lt;#FileNames#&gt;, &lt;#Output#&gt;)</string>
		<string>file_sorter:keymerge(KeyPos, FileNames, Output) -&gt; Reply</string>
		<string>file_sorter:keymerge</string>
		<string>file_sorter:keymerge(&lt;#KeyPos#&gt;, &lt;#FileNames#&gt;, &lt;#Output#&gt;, &lt;#Options#&gt;)</string>
		<string>file_sorter:keymerge(KeyPos, FileNames, Output, Options) -&gt; Reply</string>
		<string>file_sorter:keysort</string>
		<string>file_sorter:keysort(&lt;#KeyPos#&gt;, &lt;#FileName#&gt;)</string>
		<string>file_sorter:keysort(KeyPos, FileName) -&gt; Reply</string>
		<string>file_sorter:keysort</string>
		<string>file_sorter:keysort(&lt;#KeyPos#&gt;, &lt;#Input#&gt;, &lt;#Output#&gt;)</string>
		<string>file_sorter:keysort(KeyPos, Input, Output) -&gt; Reply</string>
		<string>file_sorter:keysort</string>
		<string>file_sorter:keysort(&lt;#KeyPos#&gt;, &lt;#Input#&gt;, &lt;#Output#&gt;, &lt;#Options#&gt;)</string>
		<string>file_sorter:keysort(KeyPos, Input, Output, Options) -&gt; Reply</string>
		<string>file_sorter:merge</string>
		<string>file_sorter:merge(&lt;#FileNames#&gt;, &lt;#Output#&gt;)</string>
		<string>file_sorter:merge(FileNames, Output) -&gt; Reply</string>
		<string>file_sorter:merge</string>
		<string>file_sorter:merge(&lt;#FileNames#&gt;, &lt;#Output#&gt;, &lt;#Options#&gt;)</string>
		<string>file_sorter:merge(FileNames, Output, Options) -&gt; Reply</string>
		<string>file_sorter:sort</string>
		<string>file_sorter:sort(&lt;#FileName#&gt;)</string>
		<string>file_sorter:sort(FileName) -&gt; Reply</string>
		<string>file_sorter:sort</string>
		<string>file_sorter:sort(&lt;#Input#&gt;, &lt;#Output#&gt;)</string>
		<string>file_sorter:sort(Input, Output) -&gt; Reply</string>
		<string>file_sorter:sort</string>
		<string>file_sorter:sort(&lt;#Input#&gt;, &lt;#Output#&gt;, &lt;#Options#&gt;)</string>
		<string>file_sorter:sort(Input, Output, Options) -&gt; Reply</string>
		<string>filelib:ensure_dir</string>
		<string>filelib:ensure_dir(&lt;#Name#&gt;)</string>
		<string>filelib:ensure_dir(Name) -&gt; ok | {error, Reason}</string>
		<string>filelib:file_size</string>
		<string>filelib:file_size(&lt;#Filename#&gt;)</string>
		<string>filelib:file_size(Filename) -&gt; integer() &gt;= 0</string>
		<string>filelib:file_size</string>
		<string>filelib:file_size(&lt;#File :: file:name()#&gt;, &lt;#Mod :: atom()#&gt;)</string>
		<string>filelib:file_size(File :: file:name(), Mod :: atom()) -&gt; integer() &gt;= 0</string>
		<string>filelib:fold_files</string>
		<string>filelib:fold_files(&lt;#Dir#&gt;, &lt;#RegExp#&gt;, &lt;#Recursive#&gt;, &lt;#Fun#&gt;, &lt;#AccIn#&gt;)</string>
		<string>filelib:fold_files(Dir, RegExp, Recursive, Fun, AccIn) -&gt; AccOut</string>
		<string>filelib:fold_files</string>
		<string>filelib:fold_files(&lt;#Dir :: file:name()#&gt;, &lt;#RegExp :: string()#&gt;, &lt;#Recursive :: boolean()#&gt;, &lt;#Fun :: fun((term()#&gt;, &lt;#term()#&gt;)</string>
		<string>filelib:fold_files(Dir :: file:name(), RegExp :: string(), Recursive :: boolean(), Fun :: fun((term(), term()) -&gt; term()), Acc :: term(), Mod :: atom()) -&gt;term()</string>
		<string>filelib:is_dir</string>
		<string>filelib:is_dir(&lt;#Name#&gt;)</string>
		<string>filelib:is_dir(Name) -&gt; boolean()</string>
		<string>filelib:is_dir</string>
		<string>filelib:is_dir(&lt;#Dir :: file:name_all()#&gt;, &lt;#Mod :: atom()#&gt;)</string>
		<string>filelib:is_dir(Dir :: file:name_all(), Mod :: atom()) -&gt; boolean()</string>
		<string>filelib:is_file</string>
		<string>filelib:is_file(&lt;#Name#&gt;)</string>
		<string>filelib:is_file(Name) -&gt; boolean()</string>
		<string>filelib:is_file</string>
		<string>filelib:is_file(&lt;#File :: file:name_all()#&gt;, &lt;#Mod :: atom()#&gt;)</string>
		<string>filelib:is_file(File :: file:name_all(), Mod :: atom()) -&gt; boolean()</string>
		<string>filelib:is_regular</string>
		<string>filelib:is_regular(&lt;#Name#&gt;)</string>
		<string>filelib:is_regular(Name) -&gt; boolean()</string>
		<string>filelib:is_regular</string>
		<string>filelib:is_regular(&lt;#File :: file:name_all()#&gt;, &lt;#Mod :: atom()#&gt;)</string>
		<string>filelib:is_regular(File :: file:name_all(), Mod :: atom()) -&gt; boolean()</string>
		<string>filelib:last_modified</string>
		<string>filelib:last_modified(&lt;#Name#&gt;)</string>
		<string>filelib:last_modified(Name) -&gt; file:date_time() | 0</string>
		<string>filelib:last_modified</string>
		<string>filelib:last_modified(&lt;#File :: file:name_all()#&gt;, &lt;#Mod :: atom()#&gt;)</string>
		<string>filelib:last_modified(File :: file:name_all(), Mod :: atom()) -&gt; file:date_time() | 0</string>
		<string>filelib:wildcard</string>
		<string>filelib:wildcard(&lt;#Wildcard#&gt;)</string>
		<string>filelib:wildcard(Wildcard) -&gt; [file:filename()]</string>
		<string>filelib:wildcard</string>
		<string>filelib:wildcard(&lt;#Wildcard#&gt;, &lt;#Cwd#&gt;)</string>
		<string>filelib:wildcard(Wildcard, Cwd) -&gt; [file:filename()]</string>
		<string>filelib:wildcard</string>
		<string>filelib:wildcard(&lt;#Pattern :: file:name()#&gt;, &lt;#Cwd :: file:name()#&gt;, &lt;#Mod :: atom()#&gt;)</string>
		<string>filelib:wildcard(Pattern :: file:name(), Cwd :: file:name(), Mod :: atom()) -&gt; [file:filename()]</string>
		<string>filename:absname</string>
		<string>filename:absname(&lt;#Filename#&gt;)</string>
		<string>filename:absname(Filename) -&gt; file:filename_all()</string>
		<string>filename:absname</string>
		<string>filename:absname(&lt;#Filename#&gt;, &lt;#Dir#&gt;)</string>
		<string>filename:absname(Filename, Dir) -&gt; file:filename_all()</string>
		<string>filename:absname_join</string>
		<string>filename:absname_join(&lt;#Dir#&gt;, &lt;#Filename#&gt;)</string>
		<string>filename:absname_join(Dir, Filename) -&gt; file:filename_all()</string>
		<string>filename:append</string>
		<string>filename:append(&lt;#Dir :: file:filename_all()#&gt;, &lt;#Name :: file:name_all()#&gt;)</string>
		<string>filename:append(Dir :: file:filename_all(), Name :: file:name_all()) -&gt; file:filename_all()</string>
		<string>filename:basename</string>
		<string>filename:basename(&lt;#Filename#&gt;)</string>
		<string>filename:basename(Filename) -&gt; file:filename_all()</string>
		<string>filename:basename</string>
		<string>filename:basename(&lt;#Filename#&gt;, &lt;#Ext#&gt;)</string>
		<string>filename:basename(Filename, Ext) -&gt; file:filename_all()</string>
		<string>filename:dirname</string>
		<string>filename:dirname(&lt;#Filename#&gt;)</string>
		<string>filename:dirname(Filename) -&gt; file:filename_all()</string>
		<string>filename:extension</string>
		<string>filename:extension(&lt;#Filename#&gt;)</string>
		<string>filename:extension(Filename) -&gt; file:filename_all()</string>
		<string>filename:find_src</string>
		<string>filename:find_src(&lt;#Beam#&gt;)</string>
		<string>filename:find_src(Beam) -&gt; {SourceFile, Options} | {error, {ErrorReason, Module}}</string>
		<string>filename:find_src</string>
		<string>filename:find_src(&lt;#Beam#&gt;, &lt;#Rules#&gt;)</string>
		<string>filename:find_src(Beam, Rules) -&gt; {SourceFile, Options} | {error, {ErrorReason, Module}}</string>
		<string>filename:flatten</string>
		<string>filename:flatten(&lt;#Filename#&gt;)</string>
		<string>filename:flatten(Filename) -&gt; file:filename_all()</string>
		<string>filename:join</string>
		<string>filename:join(&lt;#Components#&gt;)</string>
		<string>filename:join(Components) -&gt; file:filename_all()</string>
		<string>filename:join</string>
		<string>filename:join(&lt;#Name1#&gt;, &lt;#Name2#&gt;)</string>
		<string>filename:join(Name1, Name2) -&gt; file:filename_all()</string>
		<string>filename:nativename</string>
		<string>filename:nativename(&lt;#Path#&gt;)</string>
		<string>filename:nativename(Path) -&gt; file:filename_all()</string>
		<string>filename:pathtype</string>
		<string>filename:pathtype(&lt;#Path#&gt;)</string>
		<string>filename:pathtype(Path) -&gt; absolute | relative | volumerelative</string>
		<string>filename:rootname</string>
		<string>filename:rootname(&lt;#Filename#&gt;)</string>
		<string>filename:rootname(Filename) -&gt; file:filename_all()</string>
		<string>filename:rootname</string>
		<string>filename:rootname(&lt;#Filename#&gt;, &lt;#Ext#&gt;)</string>
		<string>filename:rootname(Filename, Ext) -&gt; file:filename_all()</string>
		<string>filename:split</string>
		<string>filename:split(&lt;#Filename#&gt;)</string>
		<string>filename:split(Filename) -&gt; Components</string>
		<string>fixed:create</string>
		<string>fixed:create(&lt;#Digits#&gt;, &lt;#Scale#&gt;, &lt;#Value#&gt;)</string>
		<string>fixed:create(Digits, Scale, Value) -&gt; Result</string>
		<string>fixed:get_typecode</string>
		<string>fixed:get_typecode(&lt;#Fixed#&gt;)</string>
		<string>fixed:get_typecode(Fixed) -&gt; Result</string>
		<string>fixed:add</string>
		<string>fixed:add(&lt;#Fixed1#&gt;, &lt;#Fixed2#&gt;)</string>
		<string>fixed:add(Fixed1, Fixed2) -&gt; Result</string>
		<string>fixed:subtract</string>
		<string>fixed:subtract(&lt;#Fixed1#&gt;, &lt;#Fixed2#&gt;)</string>
		<string>fixed:subtract(Fixed1, Fixed2) -&gt; Result</string>
		<string>fixed:multiply</string>
		<string>fixed:multiply(&lt;#Fixed1#&gt;, &lt;#Fixed2#&gt;)</string>
		<string>fixed:multiply(Fixed1, Fixed2) -&gt; Result</string>
		<string>fixed:divide</string>
		<string>fixed:divide(&lt;#Fixed1#&gt;, &lt;#Fixed2#&gt;)</string>
		<string>fixed:divide(Fixed1, Fixed2) -&gt; Result</string>
		<string>fixed:unary_minus</string>
		<string>fixed:unary_minus(&lt;#Fixed#&gt;)</string>
		<string>fixed:unary_minus(Fixed) -&gt; Result</string>
		<string>fprof:start</string>
		<string>fprof:start()</string>
		<string>fprof:start() -&gt; {ok, Pid} | {error, {already_started, Pid}}</string>
		<string>fprof:stop</string>
		<string>fprof:stop()</string>
		<string>fprof:stop() -&gt; ok</string>
		<string>fprof:stop</string>
		<string>fprof:stop(&lt;#Reason#&gt;)</string>
		<string>fprof:stop(Reason) -&gt; ok</string>
		<string>fprof:apply</string>
		<string>fprof:apply(&lt;#Func#&gt;, &lt;#Args#&gt;)</string>
		<string>fprof:apply(Func, Args) -&gt; term()</string>
		<string>fprof:apply</string>
		<string>fprof:apply(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>fprof:apply(Module, Function, Args) -&gt; term()</string>
		<string>fprof:apply</string>
		<string>fprof:apply(&lt;#Func#&gt;, &lt;#Args#&gt;, &lt;#OptionList#&gt;)</string>
		<string>fprof:apply(Func, Args, OptionList) -&gt; term()</string>
		<string>fprof:apply</string>
		<string>fprof:apply(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#OptionList#&gt;)</string>
		<string>fprof:apply(Module, Function, Args, OptionList) -&gt; term()</string>
		<string>fprof:trace</string>
		<string>fprof:trace(&lt;#start#&gt;, &lt;#Filename#&gt;)</string>
		<string>fprof:trace(start, Filename) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:trace</string>
		<string>fprof:trace(&lt;#verbose#&gt;, &lt;#Filename#&gt;)</string>
		<string>fprof:trace(verbose, Filename) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:trace</string>
		<string>fprof:trace(&lt;#OptionName#&gt;, &lt;#OptionValue#&gt;)</string>
		<string>fprof:trace(OptionName, OptionValue) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:trace</string>
		<string>fprof:trace(&lt;#verbose#&gt;)</string>
		<string>fprof:trace(verbose) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:trace</string>
		<string>fprof:trace(&lt;#OptionName#&gt;)</string>
		<string>fprof:trace(OptionName) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:trace</string>
		<string>fprof:trace(&lt;#{OptionName#&gt;, &lt;#OptionValue}#&gt;)</string>
		<string>fprof:trace({OptionName, OptionValue}) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:trace</string>
		<string>fprof:trace(&lt;#[Option]#&gt;)</string>
		<string>fprof:trace([Option]) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:profile</string>
		<string>fprof:profile()</string>
		<string>fprof:profile() -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:profile</string>
		<string>fprof:profile(&lt;#OptionName#&gt;, &lt;#OptionValue#&gt;)</string>
		<string>fprof:profile(OptionName, OptionValue) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:profile</string>
		<string>fprof:profile(&lt;#OptionName#&gt;)</string>
		<string>fprof:profile(OptionName) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:profile</string>
		<string>fprof:profile(&lt;#{OptionName#&gt;, &lt;#OptionValue}#&gt;)</string>
		<string>fprof:profile({OptionName, OptionValue}) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:profile</string>
		<string>fprof:profile(&lt;#[Option]#&gt;)</string>
		<string>fprof:profile([Option]) -&gt; ok | {ok, Tracer} | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:analyse</string>
		<string>fprof:analyse()</string>
		<string>fprof:analyse() -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:analyse</string>
		<string>fprof:analyse(&lt;#OptionName#&gt;, &lt;#OptionValue#&gt;)</string>
		<string>fprof:analyse(OptionName, OptionValue) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:analyse</string>
		<string>fprof:analyse(&lt;#OptionName#&gt;)</string>
		<string>fprof:analyse(OptionName) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:analyse</string>
		<string>fprof:analyse(&lt;#{OptionName#&gt;, &lt;#OptionValue}#&gt;)</string>
		<string>fprof:analyse({OptionName, OptionValue}) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>fprof:analyse</string>
		<string>fprof:analyse(&lt;#[Option]#&gt;)</string>
		<string>fprof:analyse([Option]) -&gt; ok | {error, Reason} | {'EXIT', ServerPid, Reason}</string>
		<string>ftp:account</string>
		<string>ftp:account(&lt;#Pid#&gt;, &lt;#Account#&gt;)</string>
		<string>ftp:account(Pid, Account) -&gt; ok | {error, Reason}</string>
		<string>ftp:append</string>
		<string>ftp:append(&lt;#Pid#&gt;, &lt;#LocalFile#&gt;)</string>
		<string>ftp:append(Pid, LocalFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:append</string>
		<string>ftp:append(&lt;#Pid#&gt;, &lt;#LocalFile#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ftp:append(Pid, LocalFile, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:append_bin</string>
		<string>ftp:append_bin(&lt;#Pid#&gt;, &lt;#Bin#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ftp:append_bin(Pid, Bin, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:append_chunk</string>
		<string>ftp:append_chunk(&lt;#Pid#&gt;, &lt;#Bin#&gt;)</string>
		<string>ftp:append_chunk(Pid, Bin) -&gt; ok | {error, Reason}</string>
		<string>ftp:append_chunk_start</string>
		<string>ftp:append_chunk_start(&lt;#Pid#&gt;, &lt;#File#&gt;)</string>
		<string>ftp:append_chunk_start(Pid, File) -&gt; ok | {error, Reason}</string>
		<string>ftp:append_chunk_end</string>
		<string>ftp:append_chunk_end(&lt;#Pid#&gt;)</string>
		<string>ftp:append_chunk_end(Pid) -&gt; ok | {error, Reason}</string>
		<string>ftp:cd</string>
		<string>ftp:cd(&lt;#Pid#&gt;, &lt;#Dir#&gt;)</string>
		<string>ftp:cd(Pid, Dir) -&gt; ok | {error, Reason}</string>
		<string>ftp:close</string>
		<string>ftp:close(&lt;#Pid#&gt;)</string>
		<string>ftp:close(Pid) -&gt; ok</string>
		<string>ftp:delete</string>
		<string>ftp:delete(&lt;#Pid#&gt;, &lt;#File#&gt;)</string>
		<string>ftp:delete(Pid, File) -&gt; ok | {error, Reason}</string>
		<string>ftp:formaterror</string>
		<string>ftp:formaterror(&lt;#Tag#&gt;)</string>
		<string>ftp:formaterror(Tag) -&gt; string()</string>
		<string>ftp:lcd</string>
		<string>ftp:lcd(&lt;#Pid#&gt;, &lt;#Dir#&gt;)</string>
		<string>ftp:lcd(Pid, Dir) -&gt; ok | {error, Reason}</string>
		<string>ftp:lpwd</string>
		<string>ftp:lpwd(&lt;#Pid#&gt;)</string>
		<string>ftp:lpwd(Pid) -&gt; {ok, Dir}</string>
		<string>ftp:ls</string>
		<string>ftp:ls(&lt;#Pid#&gt;)</string>
		<string>ftp:ls(Pid) -&gt; {ok, Listing} | {error, Reason}</string>
		<string>ftp:ls</string>
		<string>ftp:ls(&lt;#Pid#&gt;, &lt;#Pathname#&gt;)</string>
		<string>ftp:ls(Pid, Pathname) -&gt; {ok, Listing} | {error, Reason}</string>
		<string>ftp:mkdir</string>
		<string>ftp:mkdir(&lt;#Pid#&gt;, &lt;#Dir#&gt;)</string>
		<string>ftp:mkdir(Pid, Dir) -&gt; ok | {error, Reason}</string>
		<string>ftp:nlist</string>
		<string>ftp:nlist(&lt;#Pid#&gt;)</string>
		<string>ftp:nlist(Pid) -&gt; {ok, Listing} | {error, Reason}</string>
		<string>ftp:nlist</string>
		<string>ftp:nlist(&lt;#Pid#&gt;, &lt;#Pathname#&gt;)</string>
		<string>ftp:nlist(Pid, Pathname) -&gt; {ok, Listing} | {error, Reason}</string>
		<string>ftp:open</string>
		<string>ftp:open(&lt;#Host#&gt;)</string>
		<string>ftp:open(Host) -&gt; {ok, Pid} | {error, Reason}</string>
		<string>ftp:open</string>
		<string>ftp:open(&lt;#Host#&gt;, &lt;#Opts#&gt;)</string>
		<string>ftp:open(Host, Opts) -&gt; {ok, Pid} | {error, Reason}</string>
		<string>ftp:pwd</string>
		<string>ftp:pwd(&lt;#Pid#&gt;)</string>
		<string>ftp:pwd(Pid) -&gt; {ok, Dir} | {error, Reason}</string>
		<string>ftp:pwd</string>
		<string>ftp:pwd(&lt;#Pid#&gt;)</string>
		<string>ftp:pwd(Pid) -&gt; {ok, Dir} | {error, Reason}</string>
		<string>ftp:recv</string>
		<string>ftp:recv(&lt;#Pid#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ftp:recv(Pid, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:recv</string>
		<string>ftp:recv(&lt;#Pid#&gt;, &lt;#RemoteFile#&gt;, &lt;#LocalFile#&gt;)</string>
		<string>ftp:recv(Pid, RemoteFile, LocalFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:recv_bin</string>
		<string>ftp:recv_bin(&lt;#Pid#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ftp:recv_bin(Pid, RemoteFile) -&gt; {ok, Bin} | {error, Reason}</string>
		<string>ftp:recv_chunk_start</string>
		<string>ftp:recv_chunk_start(&lt;#Pid#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ftp:recv_chunk_start(Pid, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:recv_chunk</string>
		<string>ftp:recv_chunk(&lt;#Pid#&gt;)</string>
		<string>ftp:recv_chunk(Pid) -&gt; ok | {ok, Bin} | {error, Reason}</string>
		<string>ftp:rename</string>
		<string>ftp:rename(&lt;#Pid#&gt;, &lt;#Old#&gt;, &lt;#New#&gt;)</string>
		<string>ftp:rename(Pid, Old, New) -&gt; ok | {error, Reason}</string>
		<string>ftp:rmdir</string>
		<string>ftp:rmdir(&lt;#Pid#&gt;, &lt;#Dir#&gt;)</string>
		<string>ftp:rmdir(Pid, Dir) -&gt; ok | {error, Reason}</string>
		<string>ftp:send</string>
		<string>ftp:send(&lt;#Pid#&gt;, &lt;#LocalFile#&gt;)</string>
		<string>ftp:send(Pid, LocalFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:send</string>
		<string>ftp:send(&lt;#Pid#&gt;, &lt;#LocalFile#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ftp:send(Pid, LocalFile, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:send_bin</string>
		<string>ftp:send_bin(&lt;#Pid#&gt;, &lt;#Bin#&gt;, &lt;#RemoteFile#&gt;)</string>
		<string>ftp:send_bin(Pid, Bin, RemoteFile) -&gt; ok | {error, Reason}</string>
		<string>ftp:send_chunk</string>
		<string>ftp:send_chunk(&lt;#Pid#&gt;, &lt;#Bin#&gt;)</string>
		<string>ftp:send_chunk(Pid, Bin) -&gt; ok | {error, Reason}</string>
		<string>ftp:send_chunk_start</string>
		<string>ftp:send_chunk_start(&lt;#Pid#&gt;, &lt;#File#&gt;)</string>
		<string>ftp:send_chunk_start(Pid, File) -&gt; ok | {error, Reason}</string>
		<string>ftp:send_chunk_end</string>
		<string>ftp:send_chunk_end(&lt;#Pid#&gt;)</string>
		<string>ftp:send_chunk_end(Pid) -&gt; ok | {error, Reason}</string>
		<string>ftp:type</string>
		<string>ftp:type(&lt;#Pid#&gt;, &lt;#Type#&gt;)</string>
		<string>ftp:type(Pid, Type) -&gt; ok | {error, Reason}</string>
		<string>ftp:user</string>
		<string>ftp:user(&lt;#Pid#&gt;, &lt;#User#&gt;, &lt;#Password#&gt;)</string>
		<string>ftp:user(Pid, User, Password) -&gt; ok | {error, Reason}</string>
		<string>ftp:user</string>
		<string>ftp:user(&lt;#Pid#&gt;, &lt;#User#&gt;, &lt;#Password#&gt;, &lt;#Account#&gt;)</string>
		<string>ftp:user(Pid, User, Password, Account) -&gt; ok | {error, Reason}</string>
		<string>ftp:quote</string>
		<string>ftp:quote(&lt;#Pid#&gt;, &lt;#Command#&gt;)</string>
		<string>ftp:quote(Pid, Command) -&gt; [FTPLine]</string>
		<string>gb_sets:add</string>
		<string>gb_sets:add(&lt;#Element#&gt;, &lt;#Set1#&gt;)</string>
		<string>gb_sets:add(Element, Set1) -&gt; Set2</string>
		<string>gb_sets:add_element</string>
		<string>gb_sets:add_element(&lt;#Element#&gt;, &lt;#Set1#&gt;)</string>
		<string>gb_sets:add_element(Element, Set1) -&gt; Set2</string>
		<string>gb_sets:balance</string>
		<string>gb_sets:balance(&lt;#Set1#&gt;)</string>
		<string>gb_sets:balance(Set1) -&gt; Set2</string>
		<string>gb_sets:del_element</string>
		<string>gb_sets:del_element(&lt;#Element#&gt;, &lt;#Set1#&gt;)</string>
		<string>gb_sets:del_element(Element, Set1) -&gt; Set2</string>
		<string>gb_sets:delete</string>
		<string>gb_sets:delete(&lt;#Element#&gt;, &lt;#Set1#&gt;)</string>
		<string>gb_sets:delete(Element, Set1) -&gt; Set2</string>
		<string>gb_sets:delete_any</string>
		<string>gb_sets:delete_any(&lt;#Element#&gt;, &lt;#Set1#&gt;)</string>
		<string>gb_sets:delete_any(Element, Set1) -&gt; Set2</string>
		<string>gb_sets:difference</string>
		<string>gb_sets:difference(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>gb_sets:difference(Set1, Set2) -&gt; Set3</string>
		<string>gb_sets:empty</string>
		<string>gb_sets:empty()</string>
		<string>gb_sets:empty() -&gt; Set</string>
		<string>gb_sets:filter</string>
		<string>gb_sets:filter(&lt;#Pred#&gt;, &lt;#Set1#&gt;)</string>
		<string>gb_sets:filter(Pred, Set1) -&gt; Set2</string>
		<string>gb_sets:fold</string>
		<string>gb_sets:fold(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#Set#&gt;)</string>
		<string>gb_sets:fold(Function, Acc0, Set) -&gt; Acc1</string>
		<string>gb_sets:from_list</string>
		<string>gb_sets:from_list(&lt;#List#&gt;)</string>
		<string>gb_sets:from_list(List) -&gt; Set</string>
		<string>gb_sets:from_ordset</string>
		<string>gb_sets:from_ordset(&lt;#List#&gt;)</string>
		<string>gb_sets:from_ordset(List) -&gt; Set</string>
		<string>gb_sets:insert</string>
		<string>gb_sets:insert(&lt;#Element#&gt;, &lt;#Set1#&gt;)</string>
		<string>gb_sets:insert(Element, Set1) -&gt; Set2</string>
		<string>gb_sets:intersection</string>
		<string>gb_sets:intersection(&lt;#SetList#&gt;)</string>
		<string>gb_sets:intersection(SetList) -&gt; Set</string>
		<string>gb_sets:intersection</string>
		<string>gb_sets:intersection(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>gb_sets:intersection(Set1, Set2) -&gt; Set3</string>
		<string>gb_sets:is_disjoint</string>
		<string>gb_sets:is_disjoint(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>gb_sets:is_disjoint(Set1, Set2) -&gt; boolean()</string>
		<string>gb_sets:is_element</string>
		<string>gb_sets:is_element(&lt;#Element#&gt;, &lt;#Set#&gt;)</string>
		<string>gb_sets:is_element(Element, Set) -&gt; boolean()</string>
		<string>gb_sets:is_empty</string>
		<string>gb_sets:is_empty(&lt;#Set#&gt;)</string>
		<string>gb_sets:is_empty(Set) -&gt; boolean()</string>
		<string>gb_sets:is_member</string>
		<string>gb_sets:is_member(&lt;#Element#&gt;, &lt;#Set#&gt;)</string>
		<string>gb_sets:is_member(Element, Set) -&gt; boolean()</string>
		<string>gb_sets:is_set</string>
		<string>gb_sets:is_set(&lt;#Term#&gt;)</string>
		<string>gb_sets:is_set(Term) -&gt; boolean()</string>
		<string>gb_sets:is_subset</string>
		<string>gb_sets:is_subset(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>gb_sets:is_subset(Set1, Set2) -&gt; boolean()</string>
		<string>gb_sets:iterator</string>
		<string>gb_sets:iterator(&lt;#Set#&gt;)</string>
		<string>gb_sets:iterator(Set) -&gt; Iter</string>
		<string>gb_sets:largest</string>
		<string>gb_sets:largest(&lt;#Set#&gt;)</string>
		<string>gb_sets:largest(Set) -&gt; Element</string>
		<string>gb_sets:new</string>
		<string>gb_sets:new()</string>
		<string>gb_sets:new() -&gt; Set</string>
		<string>gb_sets:next</string>
		<string>gb_sets:next(&lt;#Iter1#&gt;)</string>
		<string>gb_sets:next(Iter1) -&gt; {Element, Iter2} | none</string>
		<string>gb_sets:singleton</string>
		<string>gb_sets:singleton(&lt;#Element#&gt;)</string>
		<string>gb_sets:singleton(Element) -&gt; set(Element)</string>
		<string>gb_sets:size</string>
		<string>gb_sets:size(&lt;#Set#&gt;)</string>
		<string>gb_sets:size(Set) -&gt; integer() &gt;= 0</string>
		<string>gb_sets:smallest</string>
		<string>gb_sets:smallest(&lt;#Set#&gt;)</string>
		<string>gb_sets:smallest(Set) -&gt; Element</string>
		<string>gb_sets:subtract</string>
		<string>gb_sets:subtract(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>gb_sets:subtract(Set1, Set2) -&gt; Set3</string>
		<string>gb_sets:take_largest</string>
		<string>gb_sets:take_largest(&lt;#Set1#&gt;)</string>
		<string>gb_sets:take_largest(Set1) -&gt; {Element, Set2}</string>
		<string>gb_sets:take_smallest</string>
		<string>gb_sets:take_smallest(&lt;#Set1#&gt;)</string>
		<string>gb_sets:take_smallest(Set1) -&gt; {Element, Set2}</string>
		<string>gb_sets:to_list</string>
		<string>gb_sets:to_list(&lt;#Set#&gt;)</string>
		<string>gb_sets:to_list(Set) -&gt; List</string>
		<string>gb_sets:union</string>
		<string>gb_sets:union(&lt;#SetList#&gt;)</string>
		<string>gb_sets:union(SetList) -&gt; Set</string>
		<string>gb_sets:union</string>
		<string>gb_sets:union(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>gb_sets:union(Set1, Set2) -&gt; Set3</string>
		<string>gb_trees:balance</string>
		<string>gb_trees:balance(&lt;#Tree1#&gt;)</string>
		<string>gb_trees:balance(Tree1) -&gt; Tree2</string>
		<string>gb_trees:delete</string>
		<string>gb_trees:delete(&lt;#Key#&gt;, &lt;#Tree1#&gt;)</string>
		<string>gb_trees:delete(Key, Tree1) -&gt; Tree2</string>
		<string>gb_trees:delete_any</string>
		<string>gb_trees:delete_any(&lt;#Key#&gt;, &lt;#Tree1#&gt;)</string>
		<string>gb_trees:delete_any(Key, Tree1) -&gt; Tree2</string>
		<string>gb_trees:empty</string>
		<string>gb_trees:empty()</string>
		<string>gb_trees:empty() -&gt; tree()</string>
		<string>gb_trees:enter</string>
		<string>gb_trees:enter(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Tree1#&gt;)</string>
		<string>gb_trees:enter(Key, Value, Tree1) -&gt; Tree2</string>
		<string>gb_trees:from_orddict</string>
		<string>gb_trees:from_orddict(&lt;#List#&gt;)</string>
		<string>gb_trees:from_orddict(List) -&gt; Tree</string>
		<string>gb_trees:get</string>
		<string>gb_trees:get(&lt;#Key#&gt;, &lt;#Tree#&gt;)</string>
		<string>gb_trees:get(Key, Tree) -&gt; Value</string>
		<string>gb_trees:insert</string>
		<string>gb_trees:insert(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Tree1#&gt;)</string>
		<string>gb_trees:insert(Key, Value, Tree1) -&gt; Tree2</string>
		<string>gb_trees:is_defined</string>
		<string>gb_trees:is_defined(&lt;#Key#&gt;, &lt;#Tree#&gt;)</string>
		<string>gb_trees:is_defined(Key, Tree) -&gt; boolean()</string>
		<string>gb_trees:is_empty</string>
		<string>gb_trees:is_empty(&lt;#Tree#&gt;)</string>
		<string>gb_trees:is_empty(Tree) -&gt; boolean()</string>
		<string>gb_trees:iterator</string>
		<string>gb_trees:iterator(&lt;#Tree#&gt;)</string>
		<string>gb_trees:iterator(Tree) -&gt; Iter</string>
		<string>gb_trees:keys</string>
		<string>gb_trees:keys(&lt;#Tree#&gt;)</string>
		<string>gb_trees:keys(Tree) -&gt; [Key]</string>
		<string>gb_trees:largest</string>
		<string>gb_trees:largest(&lt;#Tree#&gt;)</string>
		<string>gb_trees:largest(Tree) -&gt; {Key, Value}</string>
		<string>gb_trees:lookup</string>
		<string>gb_trees:lookup(&lt;#Key#&gt;, &lt;#Tree#&gt;)</string>
		<string>gb_trees:lookup(Key, Tree) -&gt; none | {value, Value}</string>
		<string>gb_trees:map</string>
		<string>gb_trees:map(&lt;#Function#&gt;, &lt;#Tree1#&gt;)</string>
		<string>gb_trees:map(Function, Tree1) -&gt; Tree2</string>
		<string>gb_trees:next</string>
		<string>gb_trees:next(&lt;#Iter1#&gt;)</string>
		<string>gb_trees:next(Iter1) -&gt; none | {Key, Value, Iter2}</string>
		<string>gb_trees:size</string>
		<string>gb_trees:size(&lt;#Tree#&gt;)</string>
		<string>gb_trees:size(Tree) -&gt; integer() &gt;= 0</string>
		<string>gb_trees:smallest</string>
		<string>gb_trees:smallest(&lt;#Tree#&gt;)</string>
		<string>gb_trees:smallest(Tree) -&gt; {Key, Value}</string>
		<string>gb_trees:take_largest</string>
		<string>gb_trees:take_largest(&lt;#Tree1#&gt;)</string>
		<string>gb_trees:take_largest(Tree1) -&gt; {Key, Value, Tree2}</string>
		<string>gb_trees:take_smallest</string>
		<string>gb_trees:take_smallest(&lt;#Tree1#&gt;)</string>
		<string>gb_trees:take_smallest(Tree1) -&gt; {Key, Value, Tree2}</string>
		<string>gb_trees:to_list</string>
		<string>gb_trees:to_list(&lt;#Tree#&gt;)</string>
		<string>gb_trees:to_list(Tree) -&gt; [{Key, Value}]</string>
		<string>gb_trees:update</string>
		<string>gb_trees:update(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Tree1#&gt;)</string>
		<string>gb_trees:update(Key, Value, Tree1) -&gt; Tree2</string>
		<string>gb_trees:values</string>
		<string>gb_trees:values(&lt;#Tree#&gt;)</string>
		<string>gb_trees:values(Tree) -&gt; [Value]</string>
		<string>gen_event:add_handler</string>
		<string>gen_event:add_handler(&lt;#M :: emgr_ref()#&gt;, &lt;#Handler :: handler()#&gt;, &lt;#Args :: term()#&gt;)</string>
		<string>gen_event:add_handler(M :: emgr_ref(), Handler :: handler(), Args :: term()) -&gt; term()</string>
		<string>gen_event:add_sup_handler</string>
		<string>gen_event:add_sup_handler(&lt;#M :: emgr_ref()#&gt;, &lt;#Handler :: handler()#&gt;, &lt;#Args :: term()#&gt;)</string>
		<string>gen_event:add_sup_handler(M :: emgr_ref(), Handler :: handler(), Args :: term()) -&gt; term()</string>
		<string>gen_event:call</string>
		<string>gen_event:call(&lt;#M :: emgr_ref()#&gt;, &lt;#Handler :: handler()#&gt;, &lt;#Query :: term()#&gt;)</string>
		<string>gen_event:call(M :: emgr_ref(), Handler :: handler(), Query :: term()) -&gt; term()</string>
		<string>gen_event:call</string>
		<string>gen_event:call(&lt;#M :: emgr_ref()#&gt;, &lt;#Handler :: handler()#&gt;, &lt;#Query :: term()#&gt;, &lt;#Timeout :: timeout()#&gt;)</string>
		<string>gen_event:call(M :: emgr_ref(), Handler :: handler(), Query :: term(), Timeout :: timeout()) -&gt; term()</string>
		<string>gen_event:delete_handler</string>
		<string>gen_event:delete_handler(&lt;#M :: emgr_ref()#&gt;, &lt;#Handler :: handler()#&gt;, &lt;#Args :: term()#&gt;)</string>
		<string>gen_event:delete_handler(M :: emgr_ref(), Handler :: handler(), Args :: term()) -&gt; term()</string>
		<string>gen_event:notify</string>
		<string>gen_event:notify(&lt;#M :: emgr_ref()#&gt;, &lt;#Event :: term()#&gt;)</string>
		<string>gen_event:notify(M :: emgr_ref(), Event :: term()) -&gt; ok</string>
		<string>gen_event:start</string>
		<string>gen_event:start()</string>
		<string>gen_event:start() -&gt; start_ret()</string>
		<string>gen_event:start</string>
		<string>gen_event:start(&lt;#Name :: emgr_name()#&gt;)</string>
		<string>gen_event:start(Name :: emgr_name()) -&gt; start_ret()</string>
		<string>gen_event:start_link</string>
		<string>gen_event:start_link()</string>
		<string>gen_event:start_link() -&gt; start_ret()</string>
		<string>gen_event:start_link</string>
		<string>gen_event:start_link(&lt;#Name :: emgr_name()#&gt;)</string>
		<string>gen_event:start_link(Name :: emgr_name()) -&gt; start_ret()</string>
		<string>gen_event:stop</string>
		<string>gen_event:stop(&lt;#M :: emgr_ref()#&gt;)</string>
		<string>gen_event:stop(M :: emgr_ref()) -&gt; ok</string>
		<string>gen_event:swap_handler</string>
		<string>gen_event:swap_handler(&lt;#M :: emgr_ref()#&gt;, &lt;#X2 :: {handler()#&gt;, &lt;#term()}#&gt;, &lt;#X3 :: {handler()#&gt;, &lt;#term()}#&gt;)</string>
		<string>gen_event:swap_handler(M :: emgr_ref(), X2 :: {handler(), term()}, X3 :: {handler(), term()}) -&gt; ok | {error, term()}</string>
		<string>gen_event:swap_sup_handler</string>
		<string>gen_event:swap_sup_handler(&lt;#M :: emgr_ref()#&gt;, &lt;#X2 :: {handler()#&gt;, &lt;#term()}#&gt;, &lt;#X3 :: {handler()#&gt;, &lt;#term()}#&gt;)</string>
		<string>gen_event:swap_sup_handler(M :: emgr_ref(), X2 :: {handler(), term()}, X3 :: {handler(), term()}) -&gt; ok | {error, term()}</string>
		<string>gen_event:sync_notify</string>
		<string>gen_event:sync_notify(&lt;#M :: emgr_ref()#&gt;, &lt;#Event :: term()#&gt;)</string>
		<string>gen_event:sync_notify(M :: emgr_ref(), Event :: term()) -&gt; ok</string>
		<string>gen_event:system_terminate</string>
		<string>gen_event:system_terminate(&lt;#Reason :: term()#&gt;, &lt;#Parent :: term()#&gt;, &lt;#Debug :: term()#&gt;, &lt;#X4 :: [term()]#&gt;)</string>
		<string>gen_event:system_terminate(Reason :: term(), Parent :: term(), Debug :: term(), X4 :: [term()]) -&gt; no_return()</string>
		<string>gen_event:which_handlers</string>
		<string>gen_event:which_handlers(&lt;#M :: emgr_ref()#&gt;)</string>
		<string>gen_event:which_handlers(M :: emgr_ref()) -&gt; [handler()]</string>
		<string>gen_fsm:system_terminate</string>
		<string>gen_fsm:system_terminate(&lt;#Reason :: term()#&gt;, &lt;#Parent :: term()#&gt;, &lt;#Debug :: term()#&gt;, &lt;#X4 :: [term()#&gt;, &lt;#...]#&gt;)</string>
		<string>gen_fsm:system_terminate(Reason :: term(), Parent :: term(), Debug :: term(), X4 :: [term(), ...]) -&gt; no_return()</string>
		<string>gen_sctp:abort</string>
		<string>gen_sctp:abort(&lt;#Socket#&gt;, &lt;#Assoc#&gt;)</string>
		<string>gen_sctp:abort(Socket, Assoc) -&gt; ok | {error, inet:posix()}</string>
		<string>gen_sctp:close</string>
		<string>gen_sctp:close(&lt;#Socket#&gt;)</string>
		<string>gen_sctp:close(Socket) -&gt; ok | {error, inet:posix()}</string>
		<string>gen_sctp:connect</string>
		<string>gen_sctp:connect(&lt;#Socket#&gt;, &lt;#Addr#&gt;, &lt;#Port#&gt;, &lt;#Opts#&gt;)</string>
		<string>gen_sctp:connect(Socket, Addr, Port, Opts) -&gt; {ok, Assoc} | {error, inet:posix()}</string>
		<string>gen_sctp:connect</string>
		<string>gen_sctp:connect(&lt;#Socket#&gt;, &lt;#Addr#&gt;, &lt;#Port#&gt;, &lt;#Opts#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gen_sctp:connect(Socket, Addr, Port, Opts, Timeout) -&gt; {ok, Assoc} | {error, inet:posix()}</string>
		<string>gen_sctp:connect_init</string>
		<string>gen_sctp:connect_init(&lt;#Socket#&gt;, &lt;#Addr#&gt;, &lt;#Port#&gt;, &lt;#Opts#&gt;)</string>
		<string>gen_sctp:connect_init(Socket, Addr, Port, Opts) -&gt; ok | {error, inet:posix()}</string>
		<string>gen_sctp:connect_init</string>
		<string>gen_sctp:connect_init(&lt;#Socket#&gt;, &lt;#Addr#&gt;, &lt;#Port#&gt;, &lt;#Opts#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gen_sctp:connect_init(Socket, Addr, Port, Opts, Timeout) -&gt; ok | {error, inet:posix()}</string>
		<string>gen_sctp:controlling_process</string>
		<string>gen_sctp:controlling_process(&lt;#Socket#&gt;, &lt;#Pid#&gt;)</string>
		<string>gen_sctp:controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</string>
		<string>gen_sctp:eof</string>
		<string>gen_sctp:eof(&lt;#Socket#&gt;, &lt;#Assoc#&gt;)</string>
		<string>gen_sctp:eof(Socket, Assoc) -&gt; ok | {error, Reason}</string>
		<string>gen_sctp:error_string</string>
		<string>gen_sctp:error_string(&lt;#ErrorNumber#&gt;)</string>
		<string>gen_sctp:error_string(ErrorNumber) -&gt; ok | string() | unknown_error</string>
		<string>gen_sctp:listen</string>
		<string>gen_sctp:listen(&lt;#Socket#&gt;, &lt;#IsServer#&gt;)</string>
		<string>gen_sctp:listen(Socket, IsServer) -&gt; ok | {error, Reason}</string>
		<string>gen_sctp:listen</string>
		<string>gen_sctp:listen(&lt;#Socket#&gt;, &lt;#Backlog#&gt;)</string>
		<string>gen_sctp:listen(Socket, Backlog) -&gt; ok | {error, Reason}</string>
		<string>gen_sctp:open</string>
		<string>gen_sctp:open()</string>
		<string>gen_sctp:open() -&gt; {ok, Socket} | {error, inet:posix()}</string>
		<string>gen_sctp:open</string>
		<string>gen_sctp:open(&lt;#Port#&gt;)</string>
		<string>gen_sctp:open(Port) -&gt; {ok, Socket} | {error, inet:posix()}</string>
		<string>gen_sctp:open</string>
		<string>gen_sctp:open(&lt;#Opts#&gt;)</string>
		<string>gen_sctp:open(Opts) -&gt; {ok, Socket} | {error, inet:posix()}</string>
		<string>gen_sctp:open</string>
		<string>gen_sctp:open(&lt;#Port#&gt;, &lt;#Opts#&gt;)</string>
		<string>gen_sctp:open(Port, Opts) -&gt; {ok, Socket} | {error, inet:posix()}</string>
		<string>gen_sctp:peeloff</string>
		<string>gen_sctp:peeloff(&lt;#Socket#&gt;, &lt;#Assoc#&gt;)</string>
		<string>gen_sctp:peeloff(Socket, Assoc) -&gt; {ok, NewSocket} | {error, Reason}</string>
		<string>gen_sctp:recv</string>
		<string>gen_sctp:recv(&lt;#Socket#&gt;)</string>
		<string>gen_sctp:recv(Socket) -&gt; {ok, {FromIP, FromPort, AncData, Data}} | {error, Reason}</string>
		<string>gen_sctp:recv</string>
		<string>gen_sctp:recv(&lt;#Socket#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gen_sctp:recv(Socket, Timeout) -&gt; {ok, {FromIP, FromPort, AncData, Data}} | {error, Reason}</string>
		<string>gen_sctp:send</string>
		<string>gen_sctp:send(&lt;#Socket#&gt;, &lt;#SndRcvInfo#&gt;, &lt;#Data#&gt;)</string>
		<string>gen_sctp:send(Socket, SndRcvInfo, Data) -&gt; ok | {error, Reason}</string>
		<string>gen_sctp:send</string>
		<string>gen_sctp:send(&lt;#Socket#&gt;, &lt;#Assoc#&gt;, &lt;#Stream#&gt;, &lt;#Data#&gt;)</string>
		<string>gen_sctp:send(Socket, Assoc, Stream, Data) -&gt; ok | {error, Reason}</string>
		<string>gen_server:system_terminate</string>
		<string>gen_server:system_terminate(&lt;#Reason :: term()#&gt;, &lt;#Parent :: term()#&gt;, &lt;#Debug :: term()#&gt;, &lt;#X4 :: [term()]#&gt;)</string>
		<string>gen_server:system_terminate(Reason :: term(), Parent :: term(), Debug :: term(), X4 :: [term()]) -&gt; no_return()</string>
		<string>gen_tcp:accept</string>
		<string>gen_tcp:accept(&lt;#ListenSocket#&gt;)</string>
		<string>gen_tcp:accept(ListenSocket) -&gt; {ok, Socket} | {error, Reason}</string>
		<string>gen_tcp:accept</string>
		<string>gen_tcp:accept(&lt;#ListenSocket#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gen_tcp:accept(ListenSocket, Timeout) -&gt; {ok, Socket} | {error, Reason}</string>
		<string>gen_tcp:close</string>
		<string>gen_tcp:close(&lt;#Socket#&gt;)</string>
		<string>gen_tcp:close(Socket) -&gt; ok</string>
		<string>gen_tcp:connect</string>
		<string>gen_tcp:connect(&lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Options#&gt;)</string>
		<string>gen_tcp:connect(Address, Port, Options) -&gt; {ok, Socket} | {error, Reason}</string>
		<string>gen_tcp:connect</string>
		<string>gen_tcp:connect(&lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Options#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gen_tcp:connect(Address, Port, Options, Timeout) -&gt; {ok, Socket} | {error, Reason}</string>
		<string>gen_tcp:controlling_process</string>
		<string>gen_tcp:controlling_process(&lt;#Socket#&gt;, &lt;#Pid#&gt;)</string>
		<string>gen_tcp:controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</string>
		<string>gen_tcp:listen</string>
		<string>gen_tcp:listen(&lt;#Port#&gt;, &lt;#Options#&gt;)</string>
		<string>gen_tcp:listen(Port, Options) -&gt; {ok, ListenSocket} | {error, Reason}</string>
		<string>gen_tcp:recv</string>
		<string>gen_tcp:recv(&lt;#Socket#&gt;, &lt;#Length#&gt;)</string>
		<string>gen_tcp:recv(Socket, Length) -&gt; {ok, Packet} | {error, Reason}</string>
		<string>gen_tcp:recv</string>
		<string>gen_tcp:recv(&lt;#Socket#&gt;, &lt;#Length#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gen_tcp:recv(Socket, Length, Timeout) -&gt; {ok, Packet} | {error, Reason}</string>
		<string>gen_tcp:send</string>
		<string>gen_tcp:send(&lt;#Socket#&gt;, &lt;#Packet#&gt;)</string>
		<string>gen_tcp:send(Socket, Packet) -&gt; ok | {error, Reason}</string>
		<string>gen_tcp:shutdown</string>
		<string>gen_tcp:shutdown(&lt;#Socket#&gt;, &lt;#How#&gt;)</string>
		<string>gen_tcp:shutdown(Socket, How) -&gt; ok | {error, Reason}</string>
		<string>gen_udp:close</string>
		<string>gen_udp:close(&lt;#Socket#&gt;)</string>
		<string>gen_udp:close(Socket) -&gt; ok</string>
		<string>gen_udp:controlling_process</string>
		<string>gen_udp:controlling_process(&lt;#Socket#&gt;, &lt;#Pid#&gt;)</string>
		<string>gen_udp:controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</string>
		<string>gen_udp:open</string>
		<string>gen_udp:open(&lt;#Port#&gt;)</string>
		<string>gen_udp:open(Port) -&gt; {ok, Socket} | {error, Reason}</string>
		<string>gen_udp:open</string>
		<string>gen_udp:open(&lt;#Port#&gt;, &lt;#Opts#&gt;)</string>
		<string>gen_udp:open(Port, Opts) -&gt; {ok, Socket} | {error, Reason}</string>
		<string>gen_udp:recv</string>
		<string>gen_udp:recv(&lt;#Socket#&gt;, &lt;#Length#&gt;)</string>
		<string>gen_udp:recv(Socket, Length) -&gt; {ok, {Address, Port, Packet}} | {error, Reason}</string>
		<string>gen_udp:recv</string>
		<string>gen_udp:recv(&lt;#Socket#&gt;, &lt;#Length#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gen_udp:recv(Socket, Length, Timeout) -&gt; {ok, {Address, Port, Packet}} | {error, Reason}</string>
		<string>gen_udp:send</string>
		<string>gen_udp:send(&lt;#Socket#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Packet#&gt;)</string>
		<string>gen_udp:send(Socket, Address, Port, Packet) -&gt; ok | {error, Reason}</string>
		<string>gl:clearIndex</string>
		<string>gl:clearIndex(&lt;#C#&gt;)</string>
		<string>gl:clearIndex(C) -&gt; ok</string>
		<string>gl:clearColor</string>
		<string>gl:clearColor(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:clearColor(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:clear</string>
		<string>gl:clear(&lt;#Mask#&gt;)</string>
		<string>gl:clear(Mask) -&gt; ok</string>
		<string>gl:indexMask</string>
		<string>gl:indexMask(&lt;#Mask#&gt;)</string>
		<string>gl:indexMask(Mask) -&gt; ok</string>
		<string>gl:colorMask</string>
		<string>gl:colorMask(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:colorMask(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:alphaFunc</string>
		<string>gl:alphaFunc(&lt;#Func#&gt;, &lt;#Ref#&gt;)</string>
		<string>gl:alphaFunc(Func, Ref) -&gt; ok</string>
		<string>gl:blendFunc</string>
		<string>gl:blendFunc(&lt;#Sfactor#&gt;, &lt;#Dfactor#&gt;)</string>
		<string>gl:blendFunc(Sfactor, Dfactor) -&gt; ok</string>
		<string>gl:logicOp</string>
		<string>gl:logicOp(&lt;#Opcode#&gt;)</string>
		<string>gl:logicOp(Opcode) -&gt; ok</string>
		<string>gl:cullFace</string>
		<string>gl:cullFace(&lt;#Mode#&gt;)</string>
		<string>gl:cullFace(Mode) -&gt; ok</string>
		<string>gl:frontFace</string>
		<string>gl:frontFace(&lt;#Mode#&gt;)</string>
		<string>gl:frontFace(Mode) -&gt; ok</string>
		<string>gl:pointSize</string>
		<string>gl:pointSize(&lt;#Size#&gt;)</string>
		<string>gl:pointSize(Size) -&gt; ok</string>
		<string>gl:lineWidth</string>
		<string>gl:lineWidth(&lt;#Width#&gt;)</string>
		<string>gl:lineWidth(Width) -&gt; ok</string>
		<string>gl:lineStipple</string>
		<string>gl:lineStipple(&lt;#Factor#&gt;, &lt;#Pattern#&gt;)</string>
		<string>gl:lineStipple(Factor, Pattern) -&gt; ok</string>
		<string>gl:polygonMode</string>
		<string>gl:polygonMode(&lt;#Face#&gt;, &lt;#Mode#&gt;)</string>
		<string>gl:polygonMode(Face, Mode) -&gt; ok</string>
		<string>gl:polygonOffset</string>
		<string>gl:polygonOffset(&lt;#Factor#&gt;, &lt;#Units#&gt;)</string>
		<string>gl:polygonOffset(Factor, Units) -&gt; ok</string>
		<string>gl:polygonStipple</string>
		<string>gl:polygonStipple(&lt;#Mask#&gt;)</string>
		<string>gl:polygonStipple(Mask) -&gt; ok</string>
		<string>gl:getPolygonStipple</string>
		<string>gl:getPolygonStipple()</string>
		<string>gl:getPolygonStipple() -&gt; binary()</string>
		<string>gl:edgeFlag</string>
		<string>gl:edgeFlag(&lt;#Flag#&gt;)</string>
		<string>gl:edgeFlag(Flag) -&gt; ok</string>
		<string>gl:edgeFlagv</string>
		<string>gl:edgeFlagv(&lt;#Flag#&gt;)</string>
		<string>gl:edgeFlagv(Flag) -&gt; ok</string>
		<string>gl:scissor</string>
		<string>gl:scissor(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:scissor(X, Y, Width, Height) -&gt; ok</string>
		<string>gl:clipPlane</string>
		<string>gl:clipPlane(&lt;#Plane#&gt;, &lt;#Equation#&gt;)</string>
		<string>gl:clipPlane(Plane, Equation) -&gt; ok</string>
		<string>gl:getClipPlane</string>
		<string>gl:getClipPlane(&lt;#Plane#&gt;)</string>
		<string>gl:getClipPlane(Plane) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:drawBuffer</string>
		<string>gl:drawBuffer(&lt;#Mode#&gt;)</string>
		<string>gl:drawBuffer(Mode) -&gt; ok</string>
		<string>gl:readBuffer</string>
		<string>gl:readBuffer(&lt;#Mode#&gt;)</string>
		<string>gl:readBuffer(Mode) -&gt; ok</string>
		<string>gl:enable</string>
		<string>gl:enable(&lt;#Cap#&gt;)</string>
		<string>gl:enable(Cap) -&gt; ok</string>
		<string>gl:disable</string>
		<string>gl:disable(&lt;#Cap#&gt;)</string>
		<string>gl:disable(Cap) -&gt; ok</string>
		<string>gl:isEnabled</string>
		<string>gl:isEnabled(&lt;#Cap#&gt;)</string>
		<string>gl:isEnabled(Cap) -&gt; 0 | 1</string>
		<string>gl:enableClientState</string>
		<string>gl:enableClientState(&lt;#Cap#&gt;)</string>
		<string>gl:enableClientState(Cap) -&gt; ok</string>
		<string>gl:disableClientState</string>
		<string>gl:disableClientState(&lt;#Cap#&gt;)</string>
		<string>gl:disableClientState(Cap) -&gt; ok</string>
		<string>gl:getBooleanv</string>
		<string>gl:getBooleanv(&lt;#Pname#&gt;)</string>
		<string>gl:getBooleanv(Pname) -&gt; [0 | 1]</string>
		<string>gl:getDoublev</string>
		<string>gl:getDoublev(&lt;#Pname#&gt;)</string>
		<string>gl:getDoublev(Pname) -&gt; [float()]</string>
		<string>gl:getFloatv</string>
		<string>gl:getFloatv(&lt;#Pname#&gt;)</string>
		<string>gl:getFloatv(Pname) -&gt; [float()]</string>
		<string>gl:getIntegerv</string>
		<string>gl:getIntegerv(&lt;#Pname#&gt;)</string>
		<string>gl:getIntegerv(Pname) -&gt; [integer()]</string>
		<string>gl:pushAttrib</string>
		<string>gl:pushAttrib(&lt;#Mask#&gt;)</string>
		<string>gl:pushAttrib(Mask) -&gt; ok</string>
		<string>gl:popAttrib</string>
		<string>gl:popAttrib()</string>
		<string>gl:popAttrib() -&gt; ok</string>
		<string>gl:pushClientAttrib</string>
		<string>gl:pushClientAttrib(&lt;#Mask#&gt;)</string>
		<string>gl:pushClientAttrib(Mask) -&gt; ok</string>
		<string>gl:popClientAttrib</string>
		<string>gl:popClientAttrib()</string>
		<string>gl:popClientAttrib() -&gt; ok</string>
		<string>gl:renderMode</string>
		<string>gl:renderMode(&lt;#Mode#&gt;)</string>
		<string>gl:renderMode(Mode) -&gt; integer()</string>
		<string>gl:getError</string>
		<string>gl:getError()</string>
		<string>gl:getError() -&gt; enum()</string>
		<string>gl:getString</string>
		<string>gl:getString(&lt;#Name#&gt;)</string>
		<string>gl:getString(Name) -&gt; string()</string>
		<string>gl:finish</string>
		<string>gl:finish()</string>
		<string>gl:finish() -&gt; ok</string>
		<string>gl:flush</string>
		<string>gl:flush()</string>
		<string>gl:flush() -&gt; ok</string>
		<string>gl:hint</string>
		<string>gl:hint(&lt;#Target#&gt;, &lt;#Mode#&gt;)</string>
		<string>gl:hint(Target, Mode) -&gt; ok</string>
		<string>gl:clearDepth</string>
		<string>gl:clearDepth(&lt;#Depth#&gt;)</string>
		<string>gl:clearDepth(Depth) -&gt; ok</string>
		<string>gl:depthFunc</string>
		<string>gl:depthFunc(&lt;#Func#&gt;)</string>
		<string>gl:depthFunc(Func) -&gt; ok</string>
		<string>gl:depthMask</string>
		<string>gl:depthMask(&lt;#Flag#&gt;)</string>
		<string>gl:depthMask(Flag) -&gt; ok</string>
		<string>gl:depthRange</string>
		<string>gl:depthRange(&lt;#Near_val#&gt;, &lt;#Far_val#&gt;)</string>
		<string>gl:depthRange(Near_val, Far_val) -&gt; ok</string>
		<string>gl:clearAccum</string>
		<string>gl:clearAccum(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:clearAccum(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:accum</string>
		<string>gl:accum(&lt;#Op#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:accum(Op, Value) -&gt; ok</string>
		<string>gl:matrixMode</string>
		<string>gl:matrixMode(&lt;#Mode#&gt;)</string>
		<string>gl:matrixMode(Mode) -&gt; ok</string>
		<string>gl:ortho</string>
		<string>gl:ortho(&lt;#Left#&gt;, &lt;#Right#&gt;, &lt;#Bottom#&gt;, &lt;#Top#&gt;, &lt;#Near_val#&gt;, &lt;#Far_val#&gt;)</string>
		<string>gl:ortho(Left, Right, Bottom, Top, Near_val, Far_val) -&gt; ok</string>
		<string>gl:frustum</string>
		<string>gl:frustum(&lt;#Left#&gt;, &lt;#Right#&gt;, &lt;#Bottom#&gt;, &lt;#Top#&gt;, &lt;#Near_val#&gt;, &lt;#Far_val#&gt;)</string>
		<string>gl:frustum(Left, Right, Bottom, Top, Near_val, Far_val) -&gt; ok</string>
		<string>gl:viewport</string>
		<string>gl:viewport(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:viewport(X, Y, Width, Height) -&gt; ok</string>
		<string>gl:pushMatrix</string>
		<string>gl:pushMatrix()</string>
		<string>gl:pushMatrix() -&gt; ok</string>
		<string>gl:popMatrix</string>
		<string>gl:popMatrix()</string>
		<string>gl:popMatrix() -&gt; ok</string>
		<string>gl:loadIdentity</string>
		<string>gl:loadIdentity()</string>
		<string>gl:loadIdentity() -&gt; ok</string>
		<string>gl:loadMatrixd</string>
		<string>gl:loadMatrixd(&lt;#M#&gt;)</string>
		<string>gl:loadMatrixd(M) -&gt; ok</string>
		<string>gl:loadMatrixf</string>
		<string>gl:loadMatrixf(&lt;#M#&gt;)</string>
		<string>gl:loadMatrixf(M) -&gt; ok</string>
		<string>gl:multMatrixd</string>
		<string>gl:multMatrixd(&lt;#M#&gt;)</string>
		<string>gl:multMatrixd(M) -&gt; ok</string>
		<string>gl:multMatrixf</string>
		<string>gl:multMatrixf(&lt;#M#&gt;)</string>
		<string>gl:multMatrixf(M) -&gt; ok</string>
		<string>gl:rotated</string>
		<string>gl:rotated(&lt;#Angle#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:rotated(Angle, X, Y, Z) -&gt; ok</string>
		<string>gl:rotatef</string>
		<string>gl:rotatef(&lt;#Angle#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:rotatef(Angle, X, Y, Z) -&gt; ok</string>
		<string>gl:scaled</string>
		<string>gl:scaled(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:scaled(X, Y, Z) -&gt; ok</string>
		<string>gl:scalef</string>
		<string>gl:scalef(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:scalef(X, Y, Z) -&gt; ok</string>
		<string>gl:translated</string>
		<string>gl:translated(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:translated(X, Y, Z) -&gt; ok</string>
		<string>gl:translatef</string>
		<string>gl:translatef(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:translatef(X, Y, Z) -&gt; ok</string>
		<string>gl:isList</string>
		<string>gl:isList(&lt;#List#&gt;)</string>
		<string>gl:isList(List) -&gt; 0 | 1</string>
		<string>gl:deleteLists</string>
		<string>gl:deleteLists(&lt;#List#&gt;, &lt;#Range#&gt;)</string>
		<string>gl:deleteLists(List, Range) -&gt; ok</string>
		<string>gl:genLists</string>
		<string>gl:genLists(&lt;#Range#&gt;)</string>
		<string>gl:genLists(Range) -&gt; integer()</string>
		<string>gl:newList</string>
		<string>gl:newList(&lt;#List#&gt;, &lt;#Mode#&gt;)</string>
		<string>gl:newList(List, Mode) -&gt; ok</string>
		<string>gl:endList</string>
		<string>gl:endList()</string>
		<string>gl:endList() -&gt; ok</string>
		<string>gl:callList</string>
		<string>gl:callList(&lt;#List#&gt;)</string>
		<string>gl:callList(List) -&gt; ok</string>
		<string>gl:callLists</string>
		<string>gl:callLists(&lt;#Lists#&gt;)</string>
		<string>gl:callLists(Lists) -&gt; ok</string>
		<string>gl:listBase</string>
		<string>gl:listBase(&lt;#Base#&gt;)</string>
		<string>gl:listBase(Base) -&gt; ok</string>
		<string>gl:begin</string>
		<string>gl:begin(&lt;#Mode#&gt;)</string>
		<string>gl:begin(Mode) -&gt; ok</string>
		<string>gl:end</string>
		<string>gl:end()</string>
		<string>gl:end() -&gt; ok</string>
		<string>gl:vertex2d</string>
		<string>gl:vertex2d(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertex2d(X, Y) -&gt; ok</string>
		<string>gl:vertex2f</string>
		<string>gl:vertex2f(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertex2f(X, Y) -&gt; ok</string>
		<string>gl:vertex2i</string>
		<string>gl:vertex2i(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertex2i(X, Y) -&gt; ok</string>
		<string>gl:vertex2s</string>
		<string>gl:vertex2s(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertex2s(X, Y) -&gt; ok</string>
		<string>gl:vertex3d</string>
		<string>gl:vertex3d(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertex3d(X, Y, Z) -&gt; ok</string>
		<string>gl:vertex3f</string>
		<string>gl:vertex3f(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertex3f(X, Y, Z) -&gt; ok</string>
		<string>gl:vertex3i</string>
		<string>gl:vertex3i(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertex3i(X, Y, Z) -&gt; ok</string>
		<string>gl:vertex3s</string>
		<string>gl:vertex3s(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertex3s(X, Y, Z) -&gt; ok</string>
		<string>gl:vertex4d</string>
		<string>gl:vertex4d(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertex4d(X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertex4f</string>
		<string>gl:vertex4f(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertex4f(X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertex4i</string>
		<string>gl:vertex4i(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertex4i(X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertex4s</string>
		<string>gl:vertex4s(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertex4s(X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertex2dv</string>
		<string>gl:vertex2dv(&lt;#V#&gt;)</string>
		<string>gl:vertex2dv(V) -&gt; ok</string>
		<string>gl:vertex2fv</string>
		<string>gl:vertex2fv(&lt;#V#&gt;)</string>
		<string>gl:vertex2fv(V) -&gt; ok</string>
		<string>gl:vertex2iv</string>
		<string>gl:vertex2iv(&lt;#V#&gt;)</string>
		<string>gl:vertex2iv(V) -&gt; ok</string>
		<string>gl:vertex2sv</string>
		<string>gl:vertex2sv(&lt;#V#&gt;)</string>
		<string>gl:vertex2sv(V) -&gt; ok</string>
		<string>gl:vertex3dv</string>
		<string>gl:vertex3dv(&lt;#V#&gt;)</string>
		<string>gl:vertex3dv(V) -&gt; ok</string>
		<string>gl:vertex3fv</string>
		<string>gl:vertex3fv(&lt;#V#&gt;)</string>
		<string>gl:vertex3fv(V) -&gt; ok</string>
		<string>gl:vertex3iv</string>
		<string>gl:vertex3iv(&lt;#V#&gt;)</string>
		<string>gl:vertex3iv(V) -&gt; ok</string>
		<string>gl:vertex3sv</string>
		<string>gl:vertex3sv(&lt;#V#&gt;)</string>
		<string>gl:vertex3sv(V) -&gt; ok</string>
		<string>gl:vertex4dv</string>
		<string>gl:vertex4dv(&lt;#V#&gt;)</string>
		<string>gl:vertex4dv(V) -&gt; ok</string>
		<string>gl:vertex4fv</string>
		<string>gl:vertex4fv(&lt;#V#&gt;)</string>
		<string>gl:vertex4fv(V) -&gt; ok</string>
		<string>gl:vertex4iv</string>
		<string>gl:vertex4iv(&lt;#V#&gt;)</string>
		<string>gl:vertex4iv(V) -&gt; ok</string>
		<string>gl:vertex4sv</string>
		<string>gl:vertex4sv(&lt;#V#&gt;)</string>
		<string>gl:vertex4sv(V) -&gt; ok</string>
		<string>gl:normal3b</string>
		<string>gl:normal3b(&lt;#Nx#&gt;, &lt;#Ny#&gt;, &lt;#Nz#&gt;)</string>
		<string>gl:normal3b(Nx, Ny, Nz) -&gt; ok</string>
		<string>gl:normal3d</string>
		<string>gl:normal3d(&lt;#Nx#&gt;, &lt;#Ny#&gt;, &lt;#Nz#&gt;)</string>
		<string>gl:normal3d(Nx, Ny, Nz) -&gt; ok</string>
		<string>gl:normal3f</string>
		<string>gl:normal3f(&lt;#Nx#&gt;, &lt;#Ny#&gt;, &lt;#Nz#&gt;)</string>
		<string>gl:normal3f(Nx, Ny, Nz) -&gt; ok</string>
		<string>gl:normal3i</string>
		<string>gl:normal3i(&lt;#Nx#&gt;, &lt;#Ny#&gt;, &lt;#Nz#&gt;)</string>
		<string>gl:normal3i(Nx, Ny, Nz) -&gt; ok</string>
		<string>gl:normal3s</string>
		<string>gl:normal3s(&lt;#Nx#&gt;, &lt;#Ny#&gt;, &lt;#Nz#&gt;)</string>
		<string>gl:normal3s(Nx, Ny, Nz) -&gt; ok</string>
		<string>gl:normal3bv</string>
		<string>gl:normal3bv(&lt;#V#&gt;)</string>
		<string>gl:normal3bv(V) -&gt; ok</string>
		<string>gl:normal3dv</string>
		<string>gl:normal3dv(&lt;#V#&gt;)</string>
		<string>gl:normal3dv(V) -&gt; ok</string>
		<string>gl:normal3fv</string>
		<string>gl:normal3fv(&lt;#V#&gt;)</string>
		<string>gl:normal3fv(V) -&gt; ok</string>
		<string>gl:normal3iv</string>
		<string>gl:normal3iv(&lt;#V#&gt;)</string>
		<string>gl:normal3iv(V) -&gt; ok</string>
		<string>gl:normal3sv</string>
		<string>gl:normal3sv(&lt;#V#&gt;)</string>
		<string>gl:normal3sv(V) -&gt; ok</string>
		<string>gl:indexd</string>
		<string>gl:indexd(&lt;#C#&gt;)</string>
		<string>gl:indexd(C) -&gt; ok</string>
		<string>gl:indexf</string>
		<string>gl:indexf(&lt;#C#&gt;)</string>
		<string>gl:indexf(C) -&gt; ok</string>
		<string>gl:indexi</string>
		<string>gl:indexi(&lt;#C#&gt;)</string>
		<string>gl:indexi(C) -&gt; ok</string>
		<string>gl:indexs</string>
		<string>gl:indexs(&lt;#C#&gt;)</string>
		<string>gl:indexs(C) -&gt; ok</string>
		<string>gl:indexub</string>
		<string>gl:indexub(&lt;#C#&gt;)</string>
		<string>gl:indexub(C) -&gt; ok</string>
		<string>gl:indexdv</string>
		<string>gl:indexdv(&lt;#C#&gt;)</string>
		<string>gl:indexdv(C) -&gt; ok</string>
		<string>gl:indexfv</string>
		<string>gl:indexfv(&lt;#C#&gt;)</string>
		<string>gl:indexfv(C) -&gt; ok</string>
		<string>gl:indexiv</string>
		<string>gl:indexiv(&lt;#C#&gt;)</string>
		<string>gl:indexiv(C) -&gt; ok</string>
		<string>gl:indexsv</string>
		<string>gl:indexsv(&lt;#C#&gt;)</string>
		<string>gl:indexsv(C) -&gt; ok</string>
		<string>gl:indexubv</string>
		<string>gl:indexubv(&lt;#C#&gt;)</string>
		<string>gl:indexubv(C) -&gt; ok</string>
		<string>gl:color3b</string>
		<string>gl:color3b(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:color3b(Red, Green, Blue) -&gt; ok</string>
		<string>gl:color3d</string>
		<string>gl:color3d(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:color3d(Red, Green, Blue) -&gt; ok</string>
		<string>gl:color3f</string>
		<string>gl:color3f(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:color3f(Red, Green, Blue) -&gt; ok</string>
		<string>gl:color3i</string>
		<string>gl:color3i(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:color3i(Red, Green, Blue) -&gt; ok</string>
		<string>gl:color3s</string>
		<string>gl:color3s(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:color3s(Red, Green, Blue) -&gt; ok</string>
		<string>gl:color3ub</string>
		<string>gl:color3ub(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:color3ub(Red, Green, Blue) -&gt; ok</string>
		<string>gl:color3ui</string>
		<string>gl:color3ui(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:color3ui(Red, Green, Blue) -&gt; ok</string>
		<string>gl:color3us</string>
		<string>gl:color3us(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:color3us(Red, Green, Blue) -&gt; ok</string>
		<string>gl:color4b</string>
		<string>gl:color4b(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:color4b(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:color4d</string>
		<string>gl:color4d(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:color4d(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:color4f</string>
		<string>gl:color4f(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:color4f(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:color4i</string>
		<string>gl:color4i(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:color4i(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:color4s</string>
		<string>gl:color4s(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:color4s(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:color4ub</string>
		<string>gl:color4ub(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:color4ub(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:color4ui</string>
		<string>gl:color4ui(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:color4ui(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:color4us</string>
		<string>gl:color4us(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:color4us(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:color3bv</string>
		<string>gl:color3bv(&lt;#V#&gt;)</string>
		<string>gl:color3bv(V) -&gt; ok</string>
		<string>gl:color3dv</string>
		<string>gl:color3dv(&lt;#V#&gt;)</string>
		<string>gl:color3dv(V) -&gt; ok</string>
		<string>gl:color3fv</string>
		<string>gl:color3fv(&lt;#V#&gt;)</string>
		<string>gl:color3fv(V) -&gt; ok</string>
		<string>gl:color3iv</string>
		<string>gl:color3iv(&lt;#V#&gt;)</string>
		<string>gl:color3iv(V) -&gt; ok</string>
		<string>gl:color3sv</string>
		<string>gl:color3sv(&lt;#V#&gt;)</string>
		<string>gl:color3sv(V) -&gt; ok</string>
		<string>gl:color3ubv</string>
		<string>gl:color3ubv(&lt;#V#&gt;)</string>
		<string>gl:color3ubv(V) -&gt; ok</string>
		<string>gl:color3uiv</string>
		<string>gl:color3uiv(&lt;#V#&gt;)</string>
		<string>gl:color3uiv(V) -&gt; ok</string>
		<string>gl:color3usv</string>
		<string>gl:color3usv(&lt;#V#&gt;)</string>
		<string>gl:color3usv(V) -&gt; ok</string>
		<string>gl:color4bv</string>
		<string>gl:color4bv(&lt;#V#&gt;)</string>
		<string>gl:color4bv(V) -&gt; ok</string>
		<string>gl:color4dv</string>
		<string>gl:color4dv(&lt;#V#&gt;)</string>
		<string>gl:color4dv(V) -&gt; ok</string>
		<string>gl:color4fv</string>
		<string>gl:color4fv(&lt;#V#&gt;)</string>
		<string>gl:color4fv(V) -&gt; ok</string>
		<string>gl:color4iv</string>
		<string>gl:color4iv(&lt;#V#&gt;)</string>
		<string>gl:color4iv(V) -&gt; ok</string>
		<string>gl:color4sv</string>
		<string>gl:color4sv(&lt;#V#&gt;)</string>
		<string>gl:color4sv(V) -&gt; ok</string>
		<string>gl:color4ubv</string>
		<string>gl:color4ubv(&lt;#V#&gt;)</string>
		<string>gl:color4ubv(V) -&gt; ok</string>
		<string>gl:color4uiv</string>
		<string>gl:color4uiv(&lt;#V#&gt;)</string>
		<string>gl:color4uiv(V) -&gt; ok</string>
		<string>gl:color4usv</string>
		<string>gl:color4usv(&lt;#V#&gt;)</string>
		<string>gl:color4usv(V) -&gt; ok</string>
		<string>gl:texCoord1d</string>
		<string>gl:texCoord1d(&lt;#S#&gt;)</string>
		<string>gl:texCoord1d(S) -&gt; ok</string>
		<string>gl:texCoord1f</string>
		<string>gl:texCoord1f(&lt;#S#&gt;)</string>
		<string>gl:texCoord1f(S) -&gt; ok</string>
		<string>gl:texCoord1i</string>
		<string>gl:texCoord1i(&lt;#S#&gt;)</string>
		<string>gl:texCoord1i(S) -&gt; ok</string>
		<string>gl:texCoord1s</string>
		<string>gl:texCoord1s(&lt;#S#&gt;)</string>
		<string>gl:texCoord1s(S) -&gt; ok</string>
		<string>gl:texCoord2d</string>
		<string>gl:texCoord2d(&lt;#S#&gt;, &lt;#T#&gt;)</string>
		<string>gl:texCoord2d(S, T) -&gt; ok</string>
		<string>gl:texCoord2f</string>
		<string>gl:texCoord2f(&lt;#S#&gt;, &lt;#T#&gt;)</string>
		<string>gl:texCoord2f(S, T) -&gt; ok</string>
		<string>gl:texCoord2i</string>
		<string>gl:texCoord2i(&lt;#S#&gt;, &lt;#T#&gt;)</string>
		<string>gl:texCoord2i(S, T) -&gt; ok</string>
		<string>gl:texCoord2s</string>
		<string>gl:texCoord2s(&lt;#S#&gt;, &lt;#T#&gt;)</string>
		<string>gl:texCoord2s(S, T) -&gt; ok</string>
		<string>gl:texCoord3d</string>
		<string>gl:texCoord3d(&lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;)</string>
		<string>gl:texCoord3d(S, T, R) -&gt; ok</string>
		<string>gl:texCoord3f</string>
		<string>gl:texCoord3f(&lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;)</string>
		<string>gl:texCoord3f(S, T, R) -&gt; ok</string>
		<string>gl:texCoord3i</string>
		<string>gl:texCoord3i(&lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;)</string>
		<string>gl:texCoord3i(S, T, R) -&gt; ok</string>
		<string>gl:texCoord3s</string>
		<string>gl:texCoord3s(&lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;)</string>
		<string>gl:texCoord3s(S, T, R) -&gt; ok</string>
		<string>gl:texCoord4d</string>
		<string>gl:texCoord4d(&lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;, &lt;#Q#&gt;)</string>
		<string>gl:texCoord4d(S, T, R, Q) -&gt; ok</string>
		<string>gl:texCoord4f</string>
		<string>gl:texCoord4f(&lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;, &lt;#Q#&gt;)</string>
		<string>gl:texCoord4f(S, T, R, Q) -&gt; ok</string>
		<string>gl:texCoord4i</string>
		<string>gl:texCoord4i(&lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;, &lt;#Q#&gt;)</string>
		<string>gl:texCoord4i(S, T, R, Q) -&gt; ok</string>
		<string>gl:texCoord4s</string>
		<string>gl:texCoord4s(&lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;, &lt;#Q#&gt;)</string>
		<string>gl:texCoord4s(S, T, R, Q) -&gt; ok</string>
		<string>gl:texCoord1dv</string>
		<string>gl:texCoord1dv(&lt;#V#&gt;)</string>
		<string>gl:texCoord1dv(V) -&gt; ok</string>
		<string>gl:texCoord1fv</string>
		<string>gl:texCoord1fv(&lt;#V#&gt;)</string>
		<string>gl:texCoord1fv(V) -&gt; ok</string>
		<string>gl:texCoord1iv</string>
		<string>gl:texCoord1iv(&lt;#V#&gt;)</string>
		<string>gl:texCoord1iv(V) -&gt; ok</string>
		<string>gl:texCoord1sv</string>
		<string>gl:texCoord1sv(&lt;#V#&gt;)</string>
		<string>gl:texCoord1sv(V) -&gt; ok</string>
		<string>gl:texCoord2dv</string>
		<string>gl:texCoord2dv(&lt;#V#&gt;)</string>
		<string>gl:texCoord2dv(V) -&gt; ok</string>
		<string>gl:texCoord2fv</string>
		<string>gl:texCoord2fv(&lt;#V#&gt;)</string>
		<string>gl:texCoord2fv(V) -&gt; ok</string>
		<string>gl:texCoord2iv</string>
		<string>gl:texCoord2iv(&lt;#V#&gt;)</string>
		<string>gl:texCoord2iv(V) -&gt; ok</string>
		<string>gl:texCoord2sv</string>
		<string>gl:texCoord2sv(&lt;#V#&gt;)</string>
		<string>gl:texCoord2sv(V) -&gt; ok</string>
		<string>gl:texCoord3dv</string>
		<string>gl:texCoord3dv(&lt;#V#&gt;)</string>
		<string>gl:texCoord3dv(V) -&gt; ok</string>
		<string>gl:texCoord3fv</string>
		<string>gl:texCoord3fv(&lt;#V#&gt;)</string>
		<string>gl:texCoord3fv(V) -&gt; ok</string>
		<string>gl:texCoord3iv</string>
		<string>gl:texCoord3iv(&lt;#V#&gt;)</string>
		<string>gl:texCoord3iv(V) -&gt; ok</string>
		<string>gl:texCoord3sv</string>
		<string>gl:texCoord3sv(&lt;#V#&gt;)</string>
		<string>gl:texCoord3sv(V) -&gt; ok</string>
		<string>gl:texCoord4dv</string>
		<string>gl:texCoord4dv(&lt;#V#&gt;)</string>
		<string>gl:texCoord4dv(V) -&gt; ok</string>
		<string>gl:texCoord4fv</string>
		<string>gl:texCoord4fv(&lt;#V#&gt;)</string>
		<string>gl:texCoord4fv(V) -&gt; ok</string>
		<string>gl:texCoord4iv</string>
		<string>gl:texCoord4iv(&lt;#V#&gt;)</string>
		<string>gl:texCoord4iv(V) -&gt; ok</string>
		<string>gl:texCoord4sv</string>
		<string>gl:texCoord4sv(&lt;#V#&gt;)</string>
		<string>gl:texCoord4sv(V) -&gt; ok</string>
		<string>gl:rasterPos2d</string>
		<string>gl:rasterPos2d(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:rasterPos2d(X, Y) -&gt; ok</string>
		<string>gl:rasterPos2f</string>
		<string>gl:rasterPos2f(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:rasterPos2f(X, Y) -&gt; ok</string>
		<string>gl:rasterPos2i</string>
		<string>gl:rasterPos2i(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:rasterPos2i(X, Y) -&gt; ok</string>
		<string>gl:rasterPos2s</string>
		<string>gl:rasterPos2s(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:rasterPos2s(X, Y) -&gt; ok</string>
		<string>gl:rasterPos3d</string>
		<string>gl:rasterPos3d(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:rasterPos3d(X, Y, Z) -&gt; ok</string>
		<string>gl:rasterPos3f</string>
		<string>gl:rasterPos3f(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:rasterPos3f(X, Y, Z) -&gt; ok</string>
		<string>gl:rasterPos3i</string>
		<string>gl:rasterPos3i(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:rasterPos3i(X, Y, Z) -&gt; ok</string>
		<string>gl:rasterPos3s</string>
		<string>gl:rasterPos3s(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:rasterPos3s(X, Y, Z) -&gt; ok</string>
		<string>gl:rasterPos4d</string>
		<string>gl:rasterPos4d(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:rasterPos4d(X, Y, Z, W) -&gt; ok</string>
		<string>gl:rasterPos4f</string>
		<string>gl:rasterPos4f(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:rasterPos4f(X, Y, Z, W) -&gt; ok</string>
		<string>gl:rasterPos4i</string>
		<string>gl:rasterPos4i(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:rasterPos4i(X, Y, Z, W) -&gt; ok</string>
		<string>gl:rasterPos4s</string>
		<string>gl:rasterPos4s(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:rasterPos4s(X, Y, Z, W) -&gt; ok</string>
		<string>gl:rasterPos2dv</string>
		<string>gl:rasterPos2dv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos2dv(V) -&gt; ok</string>
		<string>gl:rasterPos2fv</string>
		<string>gl:rasterPos2fv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos2fv(V) -&gt; ok</string>
		<string>gl:rasterPos2iv</string>
		<string>gl:rasterPos2iv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos2iv(V) -&gt; ok</string>
		<string>gl:rasterPos2sv</string>
		<string>gl:rasterPos2sv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos2sv(V) -&gt; ok</string>
		<string>gl:rasterPos3dv</string>
		<string>gl:rasterPos3dv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos3dv(V) -&gt; ok</string>
		<string>gl:rasterPos3fv</string>
		<string>gl:rasterPos3fv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos3fv(V) -&gt; ok</string>
		<string>gl:rasterPos3iv</string>
		<string>gl:rasterPos3iv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos3iv(V) -&gt; ok</string>
		<string>gl:rasterPos3sv</string>
		<string>gl:rasterPos3sv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos3sv(V) -&gt; ok</string>
		<string>gl:rasterPos4dv</string>
		<string>gl:rasterPos4dv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos4dv(V) -&gt; ok</string>
		<string>gl:rasterPos4fv</string>
		<string>gl:rasterPos4fv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos4fv(V) -&gt; ok</string>
		<string>gl:rasterPos4iv</string>
		<string>gl:rasterPos4iv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos4iv(V) -&gt; ok</string>
		<string>gl:rasterPos4sv</string>
		<string>gl:rasterPos4sv(&lt;#V#&gt;)</string>
		<string>gl:rasterPos4sv(V) -&gt; ok</string>
		<string>gl:rectd</string>
		<string>gl:rectd(&lt;#X1#&gt;, &lt;#Y1#&gt;, &lt;#X2#&gt;, &lt;#Y2#&gt;)</string>
		<string>gl:rectd(X1, Y1, X2, Y2) -&gt; ok</string>
		<string>gl:rectf</string>
		<string>gl:rectf(&lt;#X1#&gt;, &lt;#Y1#&gt;, &lt;#X2#&gt;, &lt;#Y2#&gt;)</string>
		<string>gl:rectf(X1, Y1, X2, Y2) -&gt; ok</string>
		<string>gl:recti</string>
		<string>gl:recti(&lt;#X1#&gt;, &lt;#Y1#&gt;, &lt;#X2#&gt;, &lt;#Y2#&gt;)</string>
		<string>gl:recti(X1, Y1, X2, Y2) -&gt; ok</string>
		<string>gl:rects</string>
		<string>gl:rects(&lt;#X1#&gt;, &lt;#Y1#&gt;, &lt;#X2#&gt;, &lt;#Y2#&gt;)</string>
		<string>gl:rects(X1, Y1, X2, Y2) -&gt; ok</string>
		<string>gl:rectdv</string>
		<string>gl:rectdv(&lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:rectdv(V1, V2) -&gt; ok</string>
		<string>gl:rectfv</string>
		<string>gl:rectfv(&lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:rectfv(V1, V2) -&gt; ok</string>
		<string>gl:rectiv</string>
		<string>gl:rectiv(&lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:rectiv(V1, V2) -&gt; ok</string>
		<string>gl:rectsv</string>
		<string>gl:rectsv(&lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:rectsv(V1, V2) -&gt; ok</string>
		<string>gl:vertexPointer</string>
		<string>gl:vertexPointer(&lt;#Size#&gt;, &lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Ptr#&gt;)</string>
		<string>gl:vertexPointer(Size, Type, Stride, Ptr) -&gt; ok</string>
		<string>gl:normalPointer</string>
		<string>gl:normalPointer(&lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Ptr#&gt;)</string>
		<string>gl:normalPointer(Type, Stride, Ptr) -&gt; ok</string>
		<string>gl:colorPointer</string>
		<string>gl:colorPointer(&lt;#Size#&gt;, &lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Ptr#&gt;)</string>
		<string>gl:colorPointer(Size, Type, Stride, Ptr) -&gt; ok</string>
		<string>gl:indexPointer</string>
		<string>gl:indexPointer(&lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Ptr#&gt;)</string>
		<string>gl:indexPointer(Type, Stride, Ptr) -&gt; ok</string>
		<string>gl:texCoordPointer</string>
		<string>gl:texCoordPointer(&lt;#Size#&gt;, &lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Ptr#&gt;)</string>
		<string>gl:texCoordPointer(Size, Type, Stride, Ptr) -&gt; ok</string>
		<string>gl:edgeFlagPointer</string>
		<string>gl:edgeFlagPointer(&lt;#Stride#&gt;, &lt;#Ptr#&gt;)</string>
		<string>gl:edgeFlagPointer(Stride, Ptr) -&gt; ok</string>
		<string>gl:arrayElement</string>
		<string>gl:arrayElement(&lt;#I#&gt;)</string>
		<string>gl:arrayElement(I) -&gt; ok</string>
		<string>gl:drawArrays</string>
		<string>gl:drawArrays(&lt;#Mode#&gt;, &lt;#First#&gt;, &lt;#Count#&gt;)</string>
		<string>gl:drawArrays(Mode, First, Count) -&gt; ok</string>
		<string>gl:drawElements</string>
		<string>gl:drawElements(&lt;#Mode#&gt;, &lt;#Count#&gt;, &lt;#Type#&gt;, &lt;#Indices#&gt;)</string>
		<string>gl:drawElements(Mode, Count, Type, Indices) -&gt; ok</string>
		<string>gl:interleavedArrays</string>
		<string>gl:interleavedArrays(&lt;#Format#&gt;, &lt;#Stride#&gt;, &lt;#Pointer#&gt;)</string>
		<string>gl:interleavedArrays(Format, Stride, Pointer) -&gt; ok</string>
		<string>gl:shadeModel</string>
		<string>gl:shadeModel(&lt;#Mode#&gt;)</string>
		<string>gl:shadeModel(Mode) -&gt; ok</string>
		<string>gl:lightf</string>
		<string>gl:lightf(&lt;#Light#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:lightf(Light, Pname, Param) -&gt; ok</string>
		<string>gl:lighti</string>
		<string>gl:lighti(&lt;#Light#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:lighti(Light, Pname, Param) -&gt; ok</string>
		<string>gl:lightfv</string>
		<string>gl:lightfv(&lt;#Light#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:lightfv(Light, Pname, Params) -&gt; ok</string>
		<string>gl:lightiv</string>
		<string>gl:lightiv(&lt;#Light#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:lightiv(Light, Pname, Params) -&gt; ok</string>
		<string>gl:getLightfv</string>
		<string>gl:getLightfv(&lt;#Light#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getLightfv(Light, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getLightiv</string>
		<string>gl:getLightiv(&lt;#Light#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getLightiv(Light, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:lightModelf</string>
		<string>gl:lightModelf(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:lightModelf(Pname, Param) -&gt; ok</string>
		<string>gl:lightModeli</string>
		<string>gl:lightModeli(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:lightModeli(Pname, Param) -&gt; ok</string>
		<string>gl:lightModelfv</string>
		<string>gl:lightModelfv(&lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:lightModelfv(Pname, Params) -&gt; ok</string>
		<string>gl:lightModeliv</string>
		<string>gl:lightModeliv(&lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:lightModeliv(Pname, Params) -&gt; ok</string>
		<string>gl:materialf</string>
		<string>gl:materialf(&lt;#Face#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:materialf(Face, Pname, Param) -&gt; ok</string>
		<string>gl:materiali</string>
		<string>gl:materiali(&lt;#Face#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:materiali(Face, Pname, Param) -&gt; ok</string>
		<string>gl:materialfv</string>
		<string>gl:materialfv(&lt;#Face#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:materialfv(Face, Pname, Params) -&gt; ok</string>
		<string>gl:materialiv</string>
		<string>gl:materialiv(&lt;#Face#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:materialiv(Face, Pname, Params) -&gt; ok</string>
		<string>gl:getMaterialfv</string>
		<string>gl:getMaterialfv(&lt;#Face#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getMaterialfv(Face, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getMaterialiv</string>
		<string>gl:getMaterialiv(&lt;#Face#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getMaterialiv(Face, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:colorMaterial</string>
		<string>gl:colorMaterial(&lt;#Face#&gt;, &lt;#Mode#&gt;)</string>
		<string>gl:colorMaterial(Face, Mode) -&gt; ok</string>
		<string>gl:pixelZoom</string>
		<string>gl:pixelZoom(&lt;#Xfactor#&gt;, &lt;#Yfactor#&gt;)</string>
		<string>gl:pixelZoom(Xfactor, Yfactor) -&gt; ok</string>
		<string>gl:pixelStoref</string>
		<string>gl:pixelStoref(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:pixelStoref(Pname, Param) -&gt; ok</string>
		<string>gl:pixelStorei</string>
		<string>gl:pixelStorei(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:pixelStorei(Pname, Param) -&gt; ok</string>
		<string>gl:pixelTransferf</string>
		<string>gl:pixelTransferf(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:pixelTransferf(Pname, Param) -&gt; ok</string>
		<string>gl:pixelTransferi</string>
		<string>gl:pixelTransferi(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:pixelTransferi(Pname, Param) -&gt; ok</string>
		<string>gl:pixelMapfv</string>
		<string>gl:pixelMapfv(&lt;#Map#&gt;, &lt;#Mapsize#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:pixelMapfv(Map, Mapsize, Values) -&gt; ok</string>
		<string>gl:pixelMapuiv</string>
		<string>gl:pixelMapuiv(&lt;#Map#&gt;, &lt;#Mapsize#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:pixelMapuiv(Map, Mapsize, Values) -&gt; ok</string>
		<string>gl:pixelMapusv</string>
		<string>gl:pixelMapusv(&lt;#Map#&gt;, &lt;#Mapsize#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:pixelMapusv(Map, Mapsize, Values) -&gt; ok</string>
		<string>gl:getPixelMapfv</string>
		<string>gl:getPixelMapfv(&lt;#Map#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:getPixelMapfv(Map, Values) -&gt; ok</string>
		<string>gl:getPixelMapuiv</string>
		<string>gl:getPixelMapuiv(&lt;#Map#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:getPixelMapuiv(Map, Values) -&gt; ok</string>
		<string>gl:getPixelMapusv</string>
		<string>gl:getPixelMapusv(&lt;#Map#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:getPixelMapusv(Map, Values) -&gt; ok</string>
		<string>gl:bitmap</string>
		<string>gl:bitmap(&lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Xorig#&gt;, &lt;#Yorig#&gt;, &lt;#Xmove#&gt;, &lt;#Ymove#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>gl:bitmap(Width, Height, Xorig, Yorig, Xmove, Ymove, Bitmap) -&gt; ok</string>
		<string>gl:readPixels</string>
		<string>gl:readPixels(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:readPixels(X, Y, Width, Height, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:drawPixels</string>
		<string>gl:drawPixels(&lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:drawPixels(Width, Height, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:copyPixels</string>
		<string>gl:copyPixels(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Type#&gt;)</string>
		<string>gl:copyPixels(X, Y, Width, Height, Type) -&gt; ok</string>
		<string>gl:stencilFunc</string>
		<string>gl:stencilFunc(&lt;#Func#&gt;, &lt;#Ref#&gt;, &lt;#Mask#&gt;)</string>
		<string>gl:stencilFunc(Func, Ref, Mask) -&gt; ok</string>
		<string>gl:stencilMask</string>
		<string>gl:stencilMask(&lt;#Mask#&gt;)</string>
		<string>gl:stencilMask(Mask) -&gt; ok</string>
		<string>gl:stencilOp</string>
		<string>gl:stencilOp(&lt;#Fail#&gt;, &lt;#Zfail#&gt;, &lt;#Zpass#&gt;)</string>
		<string>gl:stencilOp(Fail, Zfail, Zpass) -&gt; ok</string>
		<string>gl:clearStencil</string>
		<string>gl:clearStencil(&lt;#S#&gt;)</string>
		<string>gl:clearStencil(S) -&gt; ok</string>
		<string>gl:texGend</string>
		<string>gl:texGend(&lt;#Coord#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:texGend(Coord, Pname, Param) -&gt; ok</string>
		<string>gl:texGenf</string>
		<string>gl:texGenf(&lt;#Coord#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:texGenf(Coord, Pname, Param) -&gt; ok</string>
		<string>gl:texGeni</string>
		<string>gl:texGeni(&lt;#Coord#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:texGeni(Coord, Pname, Param) -&gt; ok</string>
		<string>gl:texGendv</string>
		<string>gl:texGendv(&lt;#Coord#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texGendv(Coord, Pname, Params) -&gt; ok</string>
		<string>gl:texGenfv</string>
		<string>gl:texGenfv(&lt;#Coord#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texGenfv(Coord, Pname, Params) -&gt; ok</string>
		<string>gl:texGeniv</string>
		<string>gl:texGeniv(&lt;#Coord#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texGeniv(Coord, Pname, Params) -&gt; ok</string>
		<string>gl:getTexGendv</string>
		<string>gl:getTexGendv(&lt;#Coord#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexGendv(Coord, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getTexGenfv</string>
		<string>gl:getTexGenfv(&lt;#Coord#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexGenfv(Coord, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getTexGeniv</string>
		<string>gl:getTexGeniv(&lt;#Coord#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexGeniv(Coord, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:texEnvf</string>
		<string>gl:texEnvf(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:texEnvf(Target, Pname, Param) -&gt; ok</string>
		<string>gl:texEnvi</string>
		<string>gl:texEnvi(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:texEnvi(Target, Pname, Param) -&gt; ok</string>
		<string>gl:texEnvfv</string>
		<string>gl:texEnvfv(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texEnvfv(Target, Pname, Params) -&gt; ok</string>
		<string>gl:texEnviv</string>
		<string>gl:texEnviv(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texEnviv(Target, Pname, Params) -&gt; ok</string>
		<string>gl:getTexEnvfv</string>
		<string>gl:getTexEnvfv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexEnvfv(Target, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getTexEnviv</string>
		<string>gl:getTexEnviv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexEnviv(Target, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:texParameterf</string>
		<string>gl:texParameterf(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:texParameterf(Target, Pname, Param) -&gt; ok</string>
		<string>gl:texParameteri</string>
		<string>gl:texParameteri(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:texParameteri(Target, Pname, Param) -&gt; ok</string>
		<string>gl:texParameterfv</string>
		<string>gl:texParameterfv(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texParameterfv(Target, Pname, Params) -&gt; ok</string>
		<string>gl:texParameteriv</string>
		<string>gl:texParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texParameteriv(Target, Pname, Params) -&gt; ok</string>
		<string>gl:getTexParameterfv</string>
		<string>gl:getTexParameterfv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexParameterfv(Target, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getTexParameteriv</string>
		<string>gl:getTexParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexParameteriv(Target, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:getTexLevelParameterfv</string>
		<string>gl:getTexLevelParameterfv(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexLevelParameterfv(Target, Level, Pname) -&gt; {float()}</string>
		<string>gl:getTexLevelParameteriv</string>
		<string>gl:getTexLevelParameteriv(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexLevelParameteriv(Target, Level, Pname) -&gt; {integer()}</string>
		<string>gl:texImage1D</string>
		<string>gl:texImage1D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Border#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:texImage1D(Target, Level, InternalFormat, Width, Border, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:texImage2D</string>
		<string>gl:texImage2D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Border#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:texImage2D(Target, Level, InternalFormat, Width, Height, Border, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:getTexImage</string>
		<string>gl:getTexImage(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:getTexImage(Target, Level, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:genTextures</string>
		<string>gl:genTextures(&lt;#N#&gt;)</string>
		<string>gl:genTextures(N) -&gt; [integer()]</string>
		<string>gl:deleteTextures</string>
		<string>gl:deleteTextures(&lt;#Textures#&gt;)</string>
		<string>gl:deleteTextures(Textures) -&gt; ok</string>
		<string>gl:bindTexture</string>
		<string>gl:bindTexture(&lt;#Target#&gt;, &lt;#Texture#&gt;)</string>
		<string>gl:bindTexture(Target, Texture) -&gt; ok</string>
		<string>gl:prioritizeTextures</string>
		<string>gl:prioritizeTextures(&lt;#Textures#&gt;, &lt;#Priorities#&gt;)</string>
		<string>gl:prioritizeTextures(Textures, Priorities) -&gt; ok</string>
		<string>gl:areTexturesResident</string>
		<string>gl:areTexturesResident(&lt;#Textures#&gt;)</string>
		<string>gl:areTexturesResident(Textures) -&gt; {0 | 1, Residences::[0 | 1]}</string>
		<string>gl:isTexture</string>
		<string>gl:isTexture(&lt;#Texture#&gt;)</string>
		<string>gl:isTexture(Texture) -&gt; 0 | 1</string>
		<string>gl:texSubImage1D</string>
		<string>gl:texSubImage1D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#Width#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:texSubImage1D(Target, Level, Xoffset, Width, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:texSubImage2D</string>
		<string>gl:texSubImage2D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#Yoffset#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:texSubImage2D(Target, Level, Xoffset, Yoffset, Width, Height, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:copyTexImage1D</string>
		<string>gl:copyTexImage1D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Internalformat#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Border#&gt;)</string>
		<string>gl:copyTexImage1D(Target, Level, Internalformat, X, Y, Width, Border) -&gt; ok</string>
		<string>gl:copyTexImage2D</string>
		<string>gl:copyTexImage2D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Internalformat#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Border#&gt;)</string>
		<string>gl:copyTexImage2D(Target, Level, Internalformat, X, Y, Width, Height, Border) -&gt; ok</string>
		<string>gl:copyTexSubImage1D</string>
		<string>gl:copyTexSubImage1D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;)</string>
		<string>gl:copyTexSubImage1D(Target, Level, Xoffset, X, Y, Width) -&gt; ok</string>
		<string>gl:copyTexSubImage2D</string>
		<string>gl:copyTexSubImage2D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#Yoffset#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:copyTexSubImage2D(Target, Level, Xoffset, Yoffset, X, Y, Width, Height) -&gt; ok</string>
		<string>gl:map1d</string>
		<string>gl:map1d(&lt;#Target#&gt;, &lt;#U1#&gt;, &lt;#U2#&gt;, &lt;#Stride#&gt;, &lt;#Order#&gt;, &lt;#Points#&gt;)</string>
		<string>gl:map1d(Target, U1, U2, Stride, Order, Points) -&gt; ok</string>
		<string>gl:map1f</string>
		<string>gl:map1f(&lt;#Target#&gt;, &lt;#U1#&gt;, &lt;#U2#&gt;, &lt;#Stride#&gt;, &lt;#Order#&gt;, &lt;#Points#&gt;)</string>
		<string>gl:map1f(Target, U1, U2, Stride, Order, Points) -&gt; ok</string>
		<string>gl:map2d</string>
		<string>gl:map2d(&lt;#Target#&gt;, &lt;#U1#&gt;, &lt;#U2#&gt;, &lt;#Ustride#&gt;, &lt;#Uorder#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#Vstride#&gt;, &lt;#Vorder#&gt;, &lt;#Points#&gt;)</string>
		<string>gl:map2d(Target, U1, U2, Ustride, Uorder, V1, V2, Vstride, Vorder, Points) -&gt; ok</string>
		<string>gl:map2f</string>
		<string>gl:map2f(&lt;#Target#&gt;, &lt;#U1#&gt;, &lt;#U2#&gt;, &lt;#Ustride#&gt;, &lt;#Uorder#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#Vstride#&gt;, &lt;#Vorder#&gt;, &lt;#Points#&gt;)</string>
		<string>gl:map2f(Target, U1, U2, Ustride, Uorder, V1, V2, Vstride, Vorder, Points) -&gt; ok</string>
		<string>gl:getMapdv</string>
		<string>gl:getMapdv(&lt;#Target#&gt;, &lt;#Query#&gt;, &lt;#V#&gt;)</string>
		<string>gl:getMapdv(Target, Query, V) -&gt; ok</string>
		<string>gl:getMapfv</string>
		<string>gl:getMapfv(&lt;#Target#&gt;, &lt;#Query#&gt;, &lt;#V#&gt;)</string>
		<string>gl:getMapfv(Target, Query, V) -&gt; ok</string>
		<string>gl:getMapiv</string>
		<string>gl:getMapiv(&lt;#Target#&gt;, &lt;#Query#&gt;, &lt;#V#&gt;)</string>
		<string>gl:getMapiv(Target, Query, V) -&gt; ok</string>
		<string>gl:evalCoord1d</string>
		<string>gl:evalCoord1d(&lt;#U#&gt;)</string>
		<string>gl:evalCoord1d(U) -&gt; ok</string>
		<string>gl:evalCoord1f</string>
		<string>gl:evalCoord1f(&lt;#U#&gt;)</string>
		<string>gl:evalCoord1f(U) -&gt; ok</string>
		<string>gl:evalCoord1dv</string>
		<string>gl:evalCoord1dv(&lt;#U#&gt;)</string>
		<string>gl:evalCoord1dv(U) -&gt; ok</string>
		<string>gl:evalCoord1fv</string>
		<string>gl:evalCoord1fv(&lt;#U#&gt;)</string>
		<string>gl:evalCoord1fv(U) -&gt; ok</string>
		<string>gl:evalCoord2d</string>
		<string>gl:evalCoord2d(&lt;#U#&gt;, &lt;#V#&gt;)</string>
		<string>gl:evalCoord2d(U, V) -&gt; ok</string>
		<string>gl:evalCoord2f</string>
		<string>gl:evalCoord2f(&lt;#U#&gt;, &lt;#V#&gt;)</string>
		<string>gl:evalCoord2f(U, V) -&gt; ok</string>
		<string>gl:evalCoord2dv</string>
		<string>gl:evalCoord2dv(&lt;#U#&gt;)</string>
		<string>gl:evalCoord2dv(U) -&gt; ok</string>
		<string>gl:evalCoord2fv</string>
		<string>gl:evalCoord2fv(&lt;#U#&gt;)</string>
		<string>gl:evalCoord2fv(U) -&gt; ok</string>
		<string>gl:mapGrid1d</string>
		<string>gl:mapGrid1d(&lt;#Un#&gt;, &lt;#U1#&gt;, &lt;#U2#&gt;)</string>
		<string>gl:mapGrid1d(Un, U1, U2) -&gt; ok</string>
		<string>gl:mapGrid1f</string>
		<string>gl:mapGrid1f(&lt;#Un#&gt;, &lt;#U1#&gt;, &lt;#U2#&gt;)</string>
		<string>gl:mapGrid1f(Un, U1, U2) -&gt; ok</string>
		<string>gl:mapGrid2d</string>
		<string>gl:mapGrid2d(&lt;#Un#&gt;, &lt;#U1#&gt;, &lt;#U2#&gt;, &lt;#Vn#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:mapGrid2d(Un, U1, U2, Vn, V1, V2) -&gt; ok</string>
		<string>gl:mapGrid2f</string>
		<string>gl:mapGrid2f(&lt;#Un#&gt;, &lt;#U1#&gt;, &lt;#U2#&gt;, &lt;#Vn#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:mapGrid2f(Un, U1, U2, Vn, V1, V2) -&gt; ok</string>
		<string>gl:evalPoint1</string>
		<string>gl:evalPoint1(&lt;#I#&gt;)</string>
		<string>gl:evalPoint1(I) -&gt; ok</string>
		<string>gl:evalPoint2</string>
		<string>gl:evalPoint2(&lt;#I#&gt;, &lt;#J#&gt;)</string>
		<string>gl:evalPoint2(I, J) -&gt; ok</string>
		<string>gl:evalMesh1</string>
		<string>gl:evalMesh1(&lt;#Mode#&gt;, &lt;#I1#&gt;, &lt;#I2#&gt;)</string>
		<string>gl:evalMesh1(Mode, I1, I2) -&gt; ok</string>
		<string>gl:evalMesh2</string>
		<string>gl:evalMesh2(&lt;#Mode#&gt;, &lt;#I1#&gt;, &lt;#I2#&gt;, &lt;#J1#&gt;, &lt;#J2#&gt;)</string>
		<string>gl:evalMesh2(Mode, I1, I2, J1, J2) -&gt; ok</string>
		<string>gl:fogf</string>
		<string>gl:fogf(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:fogf(Pname, Param) -&gt; ok</string>
		<string>gl:fogi</string>
		<string>gl:fogi(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:fogi(Pname, Param) -&gt; ok</string>
		<string>gl:fogfv</string>
		<string>gl:fogfv(&lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:fogfv(Pname, Params) -&gt; ok</string>
		<string>gl:fogiv</string>
		<string>gl:fogiv(&lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:fogiv(Pname, Params) -&gt; ok</string>
		<string>gl:feedbackBuffer</string>
		<string>gl:feedbackBuffer(&lt;#Size#&gt;, &lt;#Type#&gt;, &lt;#Buffer#&gt;)</string>
		<string>gl:feedbackBuffer(Size, Type, Buffer) -&gt; ok</string>
		<string>gl:passThrough</string>
		<string>gl:passThrough(&lt;#Token#&gt;)</string>
		<string>gl:passThrough(Token) -&gt; ok</string>
		<string>gl:selectBuffer</string>
		<string>gl:selectBuffer(&lt;#Size#&gt;, &lt;#Buffer#&gt;)</string>
		<string>gl:selectBuffer(Size, Buffer) -&gt; ok</string>
		<string>gl:initNames</string>
		<string>gl:initNames()</string>
		<string>gl:initNames() -&gt; ok</string>
		<string>gl:loadName</string>
		<string>gl:loadName(&lt;#Name#&gt;)</string>
		<string>gl:loadName(Name) -&gt; ok</string>
		<string>gl:pushName</string>
		<string>gl:pushName(&lt;#Name#&gt;)</string>
		<string>gl:pushName(Name) -&gt; ok</string>
		<string>gl:popName</string>
		<string>gl:popName()</string>
		<string>gl:popName() -&gt; ok</string>
		<string>gl:blendColor</string>
		<string>gl:blendColor(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;, &lt;#Alpha#&gt;)</string>
		<string>gl:blendColor(Red, Green, Blue, Alpha) -&gt; ok</string>
		<string>gl:blendEquation</string>
		<string>gl:blendEquation(&lt;#Mode#&gt;)</string>
		<string>gl:blendEquation(Mode) -&gt; ok</string>
		<string>gl:drawRangeElements</string>
		<string>gl:drawRangeElements(&lt;#Mode#&gt;, &lt;#Start#&gt;, &lt;#End#&gt;, &lt;#Count#&gt;, &lt;#Type#&gt;, &lt;#Indices#&gt;)</string>
		<string>gl:drawRangeElements(Mode, Start, End, Count, Type, Indices) -&gt; ok</string>
		<string>gl:texImage3D</string>
		<string>gl:texImage3D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Depth#&gt;, &lt;#Border#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:texImage3D(Target, Level, InternalFormat, Width, Height, Depth, Border, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:texSubImage3D</string>
		<string>gl:texSubImage3D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#Yoffset#&gt;, &lt;#Zoffset#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Depth#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Pixels#&gt;)</string>
		<string>gl:texSubImage3D(Target, Level, Xoffset, Yoffset, Zoffset, Width, Height, Depth, Format, Type, Pixels) -&gt; ok</string>
		<string>gl:copyTexSubImage3D</string>
		<string>gl:copyTexSubImage3D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#Yoffset#&gt;, &lt;#Zoffset#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:copyTexSubImage3D(Target, Level, Xoffset, Yoffset, Zoffset, X, Y, Width, Height) -&gt; ok</string>
		<string>gl:colorTable</string>
		<string>gl:colorTable(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Table#&gt;)</string>
		<string>gl:colorTable(Target, Internalformat, Width, Format, Type, Table) -&gt; ok</string>
		<string>gl:colorTableParameterfv</string>
		<string>gl:colorTableParameterfv(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:colorTableParameterfv(Target, Pname, Params) -&gt; ok</string>
		<string>gl:colorTableParameteriv</string>
		<string>gl:colorTableParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:colorTableParameteriv(Target, Pname, Params) -&gt; ok</string>
		<string>gl:copyColorTable</string>
		<string>gl:copyColorTable(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;)</string>
		<string>gl:copyColorTable(Target, Internalformat, X, Y, Width) -&gt; ok</string>
		<string>gl:getColorTable</string>
		<string>gl:getColorTable(&lt;#Target#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Table#&gt;)</string>
		<string>gl:getColorTable(Target, Format, Type, Table) -&gt; ok</string>
		<string>gl:getColorTableParameterfv</string>
		<string>gl:getColorTableParameterfv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getColorTableParameterfv(Target, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getColorTableParameteriv</string>
		<string>gl:getColorTableParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getColorTableParameteriv(Target, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:colorSubTable</string>
		<string>gl:colorSubTable(&lt;#Target#&gt;, &lt;#Start#&gt;, &lt;#Count#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:colorSubTable(Target, Start, Count, Format, Type, Data) -&gt; ok</string>
		<string>gl:copyColorSubTable</string>
		<string>gl:copyColorSubTable(&lt;#Target#&gt;, &lt;#Start#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;)</string>
		<string>gl:copyColorSubTable(Target, Start, X, Y, Width) -&gt; ok</string>
		<string>gl:convolutionFilter1D</string>
		<string>gl:convolutionFilter1D(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Image#&gt;)</string>
		<string>gl:convolutionFilter1D(Target, Internalformat, Width, Format, Type, Image) -&gt; ok</string>
		<string>gl:convolutionFilter2D</string>
		<string>gl:convolutionFilter2D(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Image#&gt;)</string>
		<string>gl:convolutionFilter2D(Target, Internalformat, Width, Height, Format, Type, Image) -&gt; ok</string>
		<string>gl:convolutionParameterf</string>
		<string>gl:convolutionParameterf(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:convolutionParameterf(Target, Pname, Params) -&gt; ok</string>
		<string>gl:convolutionParameterfv</string>
		<string>gl:convolutionParameterfv(&lt;#Target::enum()#&gt;, &lt;#Pname::enum()#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:convolutionParameterfv(Target::enum(), Pname::enum(), Params) -&gt; ok</string>
		<string>gl:convolutionParameteri</string>
		<string>gl:convolutionParameteri(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:convolutionParameteri(Target, Pname, Params) -&gt; ok</string>
		<string>gl:convolutionParameteriv</string>
		<string>gl:convolutionParameteriv(&lt;#Target::enum()#&gt;, &lt;#Pname::enum()#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:convolutionParameteriv(Target::enum(), Pname::enum(), Params) -&gt; ok</string>
		<string>gl:copyConvolutionFilter1D</string>
		<string>gl:copyConvolutionFilter1D(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;)</string>
		<string>gl:copyConvolutionFilter1D(Target, Internalformat, X, Y, Width) -&gt; ok</string>
		<string>gl:copyConvolutionFilter2D</string>
		<string>gl:copyConvolutionFilter2D(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:copyConvolutionFilter2D(Target, Internalformat, X, Y, Width, Height) -&gt; ok</string>
		<string>gl:getConvolutionFilter</string>
		<string>gl:getConvolutionFilter(&lt;#Target#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Image#&gt;)</string>
		<string>gl:getConvolutionFilter(Target, Format, Type, Image) -&gt; ok</string>
		<string>gl:getConvolutionParameterfv</string>
		<string>gl:getConvolutionParameterfv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getConvolutionParameterfv(Target, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getConvolutionParameteriv</string>
		<string>gl:getConvolutionParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getConvolutionParameteriv(Target, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:separableFilter2D</string>
		<string>gl:separableFilter2D(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Row#&gt;, &lt;#Column#&gt;)</string>
		<string>gl:separableFilter2D(Target, Internalformat, Width, Height, Format, Type, Row, Column) -&gt; ok</string>
		<string>gl:getHistogram</string>
		<string>gl:getHistogram(&lt;#Target#&gt;, &lt;#Reset#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:getHistogram(Target, Reset, Format, Type, Values) -&gt; ok</string>
		<string>gl:getHistogramParameterfv</string>
		<string>gl:getHistogramParameterfv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getHistogramParameterfv(Target, Pname) -&gt; {float()}</string>
		<string>gl:getHistogramParameteriv</string>
		<string>gl:getHistogramParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getHistogramParameteriv(Target, Pname) -&gt; {integer()}</string>
		<string>gl:getMinmax</string>
		<string>gl:getMinmax(&lt;#Target#&gt;, &lt;#Reset#&gt;, &lt;#Format#&gt;, &lt;#Types#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:getMinmax(Target, Reset, Format, Types, Values) -&gt; ok</string>
		<string>gl:getMinmaxParameterfv</string>
		<string>gl:getMinmaxParameterfv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getMinmaxParameterfv(Target, Pname) -&gt; {float()}</string>
		<string>gl:getMinmaxParameteriv</string>
		<string>gl:getMinmaxParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getMinmaxParameteriv(Target, Pname) -&gt; {integer()}</string>
		<string>gl:histogram</string>
		<string>gl:histogram(&lt;#Target#&gt;, &lt;#Width#&gt;, &lt;#Internalformat#&gt;, &lt;#Sink#&gt;)</string>
		<string>gl:histogram(Target, Width, Internalformat, Sink) -&gt; ok</string>
		<string>gl:minmax</string>
		<string>gl:minmax(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#Sink#&gt;)</string>
		<string>gl:minmax(Target, Internalformat, Sink) -&gt; ok</string>
		<string>gl:resetHistogram</string>
		<string>gl:resetHistogram(&lt;#Target#&gt;)</string>
		<string>gl:resetHistogram(Target) -&gt; ok</string>
		<string>gl:resetMinmax</string>
		<string>gl:resetMinmax(&lt;#Target#&gt;)</string>
		<string>gl:resetMinmax(Target) -&gt; ok</string>
		<string>gl:activeTexture</string>
		<string>gl:activeTexture(&lt;#Texture#&gt;)</string>
		<string>gl:activeTexture(Texture) -&gt; ok</string>
		<string>gl:sampleCoverage</string>
		<string>gl:sampleCoverage(&lt;#Value#&gt;, &lt;#Invert#&gt;)</string>
		<string>gl:sampleCoverage(Value, Invert) -&gt; ok</string>
		<string>gl:compressedTexImage3D</string>
		<string>gl:compressedTexImage3D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Depth#&gt;, &lt;#Border#&gt;, &lt;#ImageSize#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:compressedTexImage3D(Target, Level, Internalformat, Width, Height, Depth, Border, ImageSize, Data) -&gt; ok</string>
		<string>gl:compressedTexImage2D</string>
		<string>gl:compressedTexImage2D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Border#&gt;, &lt;#ImageSize#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:compressedTexImage2D(Target, Level, Internalformat, Width, Height, Border, ImageSize, Data) -&gt; ok</string>
		<string>gl:compressedTexImage1D</string>
		<string>gl:compressedTexImage1D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Border#&gt;, &lt;#ImageSize#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:compressedTexImage1D(Target, Level, Internalformat, Width, Border, ImageSize, Data) -&gt; ok</string>
		<string>gl:compressedTexSubImage3D</string>
		<string>gl:compressedTexSubImage3D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#Yoffset#&gt;, &lt;#Zoffset#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Depth#&gt;, &lt;#Format#&gt;, &lt;#ImageSize#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:compressedTexSubImage3D(Target, Level, Xoffset, Yoffset, Zoffset, Width, Height, Depth, Format, ImageSize, Data) -&gt; ok</string>
		<string>gl:compressedTexSubImage2D</string>
		<string>gl:compressedTexSubImage2D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#Yoffset#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Format#&gt;, &lt;#ImageSize#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:compressedTexSubImage2D(Target, Level, Xoffset, Yoffset, Width, Height, Format, ImageSize, Data) -&gt; ok</string>
		<string>gl:compressedTexSubImage1D</string>
		<string>gl:compressedTexSubImage1D(&lt;#Target#&gt;, &lt;#Level#&gt;, &lt;#Xoffset#&gt;, &lt;#Width#&gt;, &lt;#Format#&gt;, &lt;#ImageSize#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:compressedTexSubImage1D(Target, Level, Xoffset, Width, Format, ImageSize, Data) -&gt; ok</string>
		<string>gl:getCompressedTexImage</string>
		<string>gl:getCompressedTexImage(&lt;#Target#&gt;, &lt;#Lod#&gt;, &lt;#Img#&gt;)</string>
		<string>gl:getCompressedTexImage(Target, Lod, Img) -&gt; ok</string>
		<string>gl:clientActiveTexture</string>
		<string>gl:clientActiveTexture(&lt;#Texture#&gt;)</string>
		<string>gl:clientActiveTexture(Texture) -&gt; ok</string>
		<string>gl:multiTexCoord1d</string>
		<string>gl:multiTexCoord1d(&lt;#Target#&gt;, &lt;#S#&gt;)</string>
		<string>gl:multiTexCoord1d(Target, S) -&gt; ok</string>
		<string>gl:multiTexCoord1dv</string>
		<string>gl:multiTexCoord1dv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord1dv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord1f</string>
		<string>gl:multiTexCoord1f(&lt;#Target#&gt;, &lt;#S#&gt;)</string>
		<string>gl:multiTexCoord1f(Target, S) -&gt; ok</string>
		<string>gl:multiTexCoord1fv</string>
		<string>gl:multiTexCoord1fv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord1fv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord1i</string>
		<string>gl:multiTexCoord1i(&lt;#Target#&gt;, &lt;#S#&gt;)</string>
		<string>gl:multiTexCoord1i(Target, S) -&gt; ok</string>
		<string>gl:multiTexCoord1iv</string>
		<string>gl:multiTexCoord1iv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord1iv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord1s</string>
		<string>gl:multiTexCoord1s(&lt;#Target#&gt;, &lt;#S#&gt;)</string>
		<string>gl:multiTexCoord1s(Target, S) -&gt; ok</string>
		<string>gl:multiTexCoord1sv</string>
		<string>gl:multiTexCoord1sv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord1sv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord2d</string>
		<string>gl:multiTexCoord2d(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;)</string>
		<string>gl:multiTexCoord2d(Target, S, T) -&gt; ok</string>
		<string>gl:multiTexCoord2dv</string>
		<string>gl:multiTexCoord2dv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord2dv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord2f</string>
		<string>gl:multiTexCoord2f(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;)</string>
		<string>gl:multiTexCoord2f(Target, S, T) -&gt; ok</string>
		<string>gl:multiTexCoord2fv</string>
		<string>gl:multiTexCoord2fv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord2fv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord2i</string>
		<string>gl:multiTexCoord2i(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;)</string>
		<string>gl:multiTexCoord2i(Target, S, T) -&gt; ok</string>
		<string>gl:multiTexCoord2iv</string>
		<string>gl:multiTexCoord2iv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord2iv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord2s</string>
		<string>gl:multiTexCoord2s(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;)</string>
		<string>gl:multiTexCoord2s(Target, S, T) -&gt; ok</string>
		<string>gl:multiTexCoord2sv</string>
		<string>gl:multiTexCoord2sv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord2sv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord3d</string>
		<string>gl:multiTexCoord3d(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;)</string>
		<string>gl:multiTexCoord3d(Target, S, T, R) -&gt; ok</string>
		<string>gl:multiTexCoord3dv</string>
		<string>gl:multiTexCoord3dv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord3dv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord3f</string>
		<string>gl:multiTexCoord3f(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;)</string>
		<string>gl:multiTexCoord3f(Target, S, T, R) -&gt; ok</string>
		<string>gl:multiTexCoord3fv</string>
		<string>gl:multiTexCoord3fv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord3fv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord3i</string>
		<string>gl:multiTexCoord3i(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;)</string>
		<string>gl:multiTexCoord3i(Target, S, T, R) -&gt; ok</string>
		<string>gl:multiTexCoord3iv</string>
		<string>gl:multiTexCoord3iv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord3iv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord3s</string>
		<string>gl:multiTexCoord3s(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;)</string>
		<string>gl:multiTexCoord3s(Target, S, T, R) -&gt; ok</string>
		<string>gl:multiTexCoord3sv</string>
		<string>gl:multiTexCoord3sv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord3sv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord4d</string>
		<string>gl:multiTexCoord4d(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;, &lt;#Q#&gt;)</string>
		<string>gl:multiTexCoord4d(Target, S, T, R, Q) -&gt; ok</string>
		<string>gl:multiTexCoord4dv</string>
		<string>gl:multiTexCoord4dv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord4dv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord4f</string>
		<string>gl:multiTexCoord4f(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;, &lt;#Q#&gt;)</string>
		<string>gl:multiTexCoord4f(Target, S, T, R, Q) -&gt; ok</string>
		<string>gl:multiTexCoord4fv</string>
		<string>gl:multiTexCoord4fv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord4fv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord4i</string>
		<string>gl:multiTexCoord4i(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;, &lt;#Q#&gt;)</string>
		<string>gl:multiTexCoord4i(Target, S, T, R, Q) -&gt; ok</string>
		<string>gl:multiTexCoord4iv</string>
		<string>gl:multiTexCoord4iv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord4iv(Target::enum(), V) -&gt; ok</string>
		<string>gl:multiTexCoord4s</string>
		<string>gl:multiTexCoord4s(&lt;#Target#&gt;, &lt;#S#&gt;, &lt;#T#&gt;, &lt;#R#&gt;, &lt;#Q#&gt;)</string>
		<string>gl:multiTexCoord4s(Target, S, T, R, Q) -&gt; ok</string>
		<string>gl:multiTexCoord4sv</string>
		<string>gl:multiTexCoord4sv(&lt;#Target::enum()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:multiTexCoord4sv(Target::enum(), V) -&gt; ok</string>
		<string>gl:loadTransposeMatrixf</string>
		<string>gl:loadTransposeMatrixf(&lt;#M#&gt;)</string>
		<string>gl:loadTransposeMatrixf(M) -&gt; ok</string>
		<string>gl:loadTransposeMatrixd</string>
		<string>gl:loadTransposeMatrixd(&lt;#M#&gt;)</string>
		<string>gl:loadTransposeMatrixd(M) -&gt; ok</string>
		<string>gl:multTransposeMatrixf</string>
		<string>gl:multTransposeMatrixf(&lt;#M#&gt;)</string>
		<string>gl:multTransposeMatrixf(M) -&gt; ok</string>
		<string>gl:multTransposeMatrixd</string>
		<string>gl:multTransposeMatrixd(&lt;#M#&gt;)</string>
		<string>gl:multTransposeMatrixd(M) -&gt; ok</string>
		<string>gl:blendFuncSeparate</string>
		<string>gl:blendFuncSeparate(&lt;#SfactorRGB#&gt;, &lt;#DfactorRGB#&gt;, &lt;#SfactorAlpha#&gt;, &lt;#DfactorAlpha#&gt;)</string>
		<string>gl:blendFuncSeparate(SfactorRGB, DfactorRGB, SfactorAlpha, DfactorAlpha) -&gt; ok</string>
		<string>gl:multiDrawArrays</string>
		<string>gl:multiDrawArrays(&lt;#Mode#&gt;, &lt;#First#&gt;, &lt;#Count#&gt;)</string>
		<string>gl:multiDrawArrays(Mode, First, Count) -&gt; ok</string>
		<string>gl:pointParameterf</string>
		<string>gl:pointParameterf(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:pointParameterf(Pname, Param) -&gt; ok</string>
		<string>gl:pointParameterfv</string>
		<string>gl:pointParameterfv(&lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:pointParameterfv(Pname, Params) -&gt; ok</string>
		<string>gl:pointParameteri</string>
		<string>gl:pointParameteri(&lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:pointParameteri(Pname, Param) -&gt; ok</string>
		<string>gl:pointParameteriv</string>
		<string>gl:pointParameteriv(&lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:pointParameteriv(Pname, Params) -&gt; ok</string>
		<string>gl:fogCoordf</string>
		<string>gl:fogCoordf(&lt;#Coord#&gt;)</string>
		<string>gl:fogCoordf(Coord) -&gt; ok</string>
		<string>gl:fogCoordfv</string>
		<string>gl:fogCoordfv(&lt;#Coord#&gt;)</string>
		<string>gl:fogCoordfv(Coord) -&gt; ok</string>
		<string>gl:fogCoordd</string>
		<string>gl:fogCoordd(&lt;#Coord#&gt;)</string>
		<string>gl:fogCoordd(Coord) -&gt; ok</string>
		<string>gl:fogCoorddv</string>
		<string>gl:fogCoorddv(&lt;#Coord#&gt;)</string>
		<string>gl:fogCoorddv(Coord) -&gt; ok</string>
		<string>gl:fogCoordPointer</string>
		<string>gl:fogCoordPointer(&lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Pointer#&gt;)</string>
		<string>gl:fogCoordPointer(Type, Stride, Pointer) -&gt; ok</string>
		<string>gl:secondaryColor3b</string>
		<string>gl:secondaryColor3b(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:secondaryColor3b(Red, Green, Blue) -&gt; ok</string>
		<string>gl:secondaryColor3bv</string>
		<string>gl:secondaryColor3bv(&lt;#V#&gt;)</string>
		<string>gl:secondaryColor3bv(V) -&gt; ok</string>
		<string>gl:secondaryColor3d</string>
		<string>gl:secondaryColor3d(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:secondaryColor3d(Red, Green, Blue) -&gt; ok</string>
		<string>gl:secondaryColor3dv</string>
		<string>gl:secondaryColor3dv(&lt;#V#&gt;)</string>
		<string>gl:secondaryColor3dv(V) -&gt; ok</string>
		<string>gl:secondaryColor3f</string>
		<string>gl:secondaryColor3f(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:secondaryColor3f(Red, Green, Blue) -&gt; ok</string>
		<string>gl:secondaryColor3fv</string>
		<string>gl:secondaryColor3fv(&lt;#V#&gt;)</string>
		<string>gl:secondaryColor3fv(V) -&gt; ok</string>
		<string>gl:secondaryColor3i</string>
		<string>gl:secondaryColor3i(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:secondaryColor3i(Red, Green, Blue) -&gt; ok</string>
		<string>gl:secondaryColor3iv</string>
		<string>gl:secondaryColor3iv(&lt;#V#&gt;)</string>
		<string>gl:secondaryColor3iv(V) -&gt; ok</string>
		<string>gl:secondaryColor3s</string>
		<string>gl:secondaryColor3s(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:secondaryColor3s(Red, Green, Blue) -&gt; ok</string>
		<string>gl:secondaryColor3sv</string>
		<string>gl:secondaryColor3sv(&lt;#V#&gt;)</string>
		<string>gl:secondaryColor3sv(V) -&gt; ok</string>
		<string>gl:secondaryColor3ub</string>
		<string>gl:secondaryColor3ub(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:secondaryColor3ub(Red, Green, Blue) -&gt; ok</string>
		<string>gl:secondaryColor3ubv</string>
		<string>gl:secondaryColor3ubv(&lt;#V#&gt;)</string>
		<string>gl:secondaryColor3ubv(V) -&gt; ok</string>
		<string>gl:secondaryColor3ui</string>
		<string>gl:secondaryColor3ui(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:secondaryColor3ui(Red, Green, Blue) -&gt; ok</string>
		<string>gl:secondaryColor3uiv</string>
		<string>gl:secondaryColor3uiv(&lt;#V#&gt;)</string>
		<string>gl:secondaryColor3uiv(V) -&gt; ok</string>
		<string>gl:secondaryColor3us</string>
		<string>gl:secondaryColor3us(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>gl:secondaryColor3us(Red, Green, Blue) -&gt; ok</string>
		<string>gl:secondaryColor3usv</string>
		<string>gl:secondaryColor3usv(&lt;#V#&gt;)</string>
		<string>gl:secondaryColor3usv(V) -&gt; ok</string>
		<string>gl:secondaryColorPointer</string>
		<string>gl:secondaryColorPointer(&lt;#Size#&gt;, &lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Pointer#&gt;)</string>
		<string>gl:secondaryColorPointer(Size, Type, Stride, Pointer) -&gt; ok</string>
		<string>gl:windowPos2d</string>
		<string>gl:windowPos2d(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:windowPos2d(X, Y) -&gt; ok</string>
		<string>gl:windowPos2dv</string>
		<string>gl:windowPos2dv(&lt;#V#&gt;)</string>
		<string>gl:windowPos2dv(V) -&gt; ok</string>
		<string>gl:windowPos2f</string>
		<string>gl:windowPos2f(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:windowPos2f(X, Y) -&gt; ok</string>
		<string>gl:windowPos2fv</string>
		<string>gl:windowPos2fv(&lt;#V#&gt;)</string>
		<string>gl:windowPos2fv(V) -&gt; ok</string>
		<string>gl:windowPos2i</string>
		<string>gl:windowPos2i(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:windowPos2i(X, Y) -&gt; ok</string>
		<string>gl:windowPos2iv</string>
		<string>gl:windowPos2iv(&lt;#V#&gt;)</string>
		<string>gl:windowPos2iv(V) -&gt; ok</string>
		<string>gl:windowPos2s</string>
		<string>gl:windowPos2s(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:windowPos2s(X, Y) -&gt; ok</string>
		<string>gl:windowPos2sv</string>
		<string>gl:windowPos2sv(&lt;#V#&gt;)</string>
		<string>gl:windowPos2sv(V) -&gt; ok</string>
		<string>gl:windowPos3d</string>
		<string>gl:windowPos3d(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:windowPos3d(X, Y, Z) -&gt; ok</string>
		<string>gl:windowPos3dv</string>
		<string>gl:windowPos3dv(&lt;#V#&gt;)</string>
		<string>gl:windowPos3dv(V) -&gt; ok</string>
		<string>gl:windowPos3f</string>
		<string>gl:windowPos3f(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:windowPos3f(X, Y, Z) -&gt; ok</string>
		<string>gl:windowPos3fv</string>
		<string>gl:windowPos3fv(&lt;#V#&gt;)</string>
		<string>gl:windowPos3fv(V) -&gt; ok</string>
		<string>gl:windowPos3i</string>
		<string>gl:windowPos3i(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:windowPos3i(X, Y, Z) -&gt; ok</string>
		<string>gl:windowPos3iv</string>
		<string>gl:windowPos3iv(&lt;#V#&gt;)</string>
		<string>gl:windowPos3iv(V) -&gt; ok</string>
		<string>gl:windowPos3s</string>
		<string>gl:windowPos3s(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:windowPos3s(X, Y, Z) -&gt; ok</string>
		<string>gl:windowPos3sv</string>
		<string>gl:windowPos3sv(&lt;#V#&gt;)</string>
		<string>gl:windowPos3sv(V) -&gt; ok</string>
		<string>gl:genQueries</string>
		<string>gl:genQueries(&lt;#N#&gt;)</string>
		<string>gl:genQueries(N) -&gt; [integer()]</string>
		<string>gl:deleteQueries</string>
		<string>gl:deleteQueries(&lt;#Ids#&gt;)</string>
		<string>gl:deleteQueries(Ids) -&gt; ok</string>
		<string>gl:isQuery</string>
		<string>gl:isQuery(&lt;#Id#&gt;)</string>
		<string>gl:isQuery(Id) -&gt; 0 | 1</string>
		<string>gl:beginQuery</string>
		<string>gl:beginQuery(&lt;#Target#&gt;, &lt;#Id#&gt;)</string>
		<string>gl:beginQuery(Target, Id) -&gt; ok</string>
		<string>gl:endQuery</string>
		<string>gl:endQuery(&lt;#Target#&gt;)</string>
		<string>gl:endQuery(Target) -&gt; ok</string>
		<string>gl:getQueryiv</string>
		<string>gl:getQueryiv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getQueryiv(Target, Pname) -&gt; integer()</string>
		<string>gl:getQueryObjectiv</string>
		<string>gl:getQueryObjectiv(&lt;#Id#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getQueryObjectiv(Id, Pname) -&gt; integer()</string>
		<string>gl:getQueryObjectuiv</string>
		<string>gl:getQueryObjectuiv(&lt;#Id#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getQueryObjectuiv(Id, Pname) -&gt; integer()</string>
		<string>gl:bindBuffer</string>
		<string>gl:bindBuffer(&lt;#Target#&gt;, &lt;#Buffer#&gt;)</string>
		<string>gl:bindBuffer(Target, Buffer) -&gt; ok</string>
		<string>gl:deleteBuffers</string>
		<string>gl:deleteBuffers(&lt;#Buffers#&gt;)</string>
		<string>gl:deleteBuffers(Buffers) -&gt; ok</string>
		<string>gl:genBuffers</string>
		<string>gl:genBuffers(&lt;#N#&gt;)</string>
		<string>gl:genBuffers(N) -&gt; [integer()]</string>
		<string>gl:isBuffer</string>
		<string>gl:isBuffer(&lt;#Buffer#&gt;)</string>
		<string>gl:isBuffer(Buffer) -&gt; 0 | 1</string>
		<string>gl:bufferData</string>
		<string>gl:bufferData(&lt;#Target#&gt;, &lt;#Size#&gt;, &lt;#Data#&gt;, &lt;#Usage#&gt;)</string>
		<string>gl:bufferData(Target, Size, Data, Usage) -&gt; ok</string>
		<string>gl:bufferSubData</string>
		<string>gl:bufferSubData(&lt;#Target#&gt;, &lt;#Offset#&gt;, &lt;#Size#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:bufferSubData(Target, Offset, Size, Data) -&gt; ok</string>
		<string>gl:getBufferSubData</string>
		<string>gl:getBufferSubData(&lt;#Target#&gt;, &lt;#Offset#&gt;, &lt;#Size#&gt;, &lt;#Data#&gt;)</string>
		<string>gl:getBufferSubData(Target, Offset, Size, Data) -&gt; ok</string>
		<string>gl:getBufferParameteriv</string>
		<string>gl:getBufferParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getBufferParameteriv(Target, Pname) -&gt; integer()</string>
		<string>gl:blendEquationSeparate</string>
		<string>gl:blendEquationSeparate(&lt;#ModeRGB#&gt;, &lt;#ModeAlpha#&gt;)</string>
		<string>gl:blendEquationSeparate(ModeRGB, ModeAlpha) -&gt; ok</string>
		<string>gl:drawBuffers</string>
		<string>gl:drawBuffers(&lt;#Bufs#&gt;)</string>
		<string>gl:drawBuffers(Bufs) -&gt; ok</string>
		<string>gl:stencilOpSeparate</string>
		<string>gl:stencilOpSeparate(&lt;#Face#&gt;, &lt;#Sfail#&gt;, &lt;#Dpfail#&gt;, &lt;#Dppass#&gt;)</string>
		<string>gl:stencilOpSeparate(Face, Sfail, Dpfail, Dppass) -&gt; ok</string>
		<string>gl:stencilFuncSeparate</string>
		<string>gl:stencilFuncSeparate(&lt;#Face#&gt;, &lt;#Func#&gt;, &lt;#Ref#&gt;, &lt;#Mask#&gt;)</string>
		<string>gl:stencilFuncSeparate(Face, Func, Ref, Mask) -&gt; ok</string>
		<string>gl:stencilMaskSeparate</string>
		<string>gl:stencilMaskSeparate(&lt;#Face#&gt;, &lt;#Mask#&gt;)</string>
		<string>gl:stencilMaskSeparate(Face, Mask) -&gt; ok</string>
		<string>gl:attachShader</string>
		<string>gl:attachShader(&lt;#Program#&gt;, &lt;#Shader#&gt;)</string>
		<string>gl:attachShader(Program, Shader) -&gt; ok</string>
		<string>gl:bindAttribLocation</string>
		<string>gl:bindAttribLocation(&lt;#Program#&gt;, &lt;#Index#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:bindAttribLocation(Program, Index, Name) -&gt; ok</string>
		<string>gl:compileShader</string>
		<string>gl:compileShader(&lt;#Shader#&gt;)</string>
		<string>gl:compileShader(Shader) -&gt; ok</string>
		<string>gl:createProgram</string>
		<string>gl:createProgram()</string>
		<string>gl:createProgram() -&gt; integer()</string>
		<string>gl:createShader</string>
		<string>gl:createShader(&lt;#Type#&gt;)</string>
		<string>gl:createShader(Type) -&gt; integer()</string>
		<string>gl:deleteProgram</string>
		<string>gl:deleteProgram(&lt;#Program#&gt;)</string>
		<string>gl:deleteProgram(Program) -&gt; ok</string>
		<string>gl:deleteShader</string>
		<string>gl:deleteShader(&lt;#Shader#&gt;)</string>
		<string>gl:deleteShader(Shader) -&gt; ok</string>
		<string>gl:detachShader</string>
		<string>gl:detachShader(&lt;#Program#&gt;, &lt;#Shader#&gt;)</string>
		<string>gl:detachShader(Program, Shader) -&gt; ok</string>
		<string>gl:disableVertexAttribArray</string>
		<string>gl:disableVertexAttribArray(&lt;#Index#&gt;)</string>
		<string>gl:disableVertexAttribArray(Index) -&gt; ok</string>
		<string>gl:enableVertexAttribArray</string>
		<string>gl:enableVertexAttribArray(&lt;#Index#&gt;)</string>
		<string>gl:enableVertexAttribArray(Index) -&gt; ok</string>
		<string>gl:getActiveAttrib</string>
		<string>gl:getActiveAttrib(&lt;#Program#&gt;, &lt;#Index#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getActiveAttrib(Program, Index, BufSize) -&gt; {Size::integer(), Type::enum(), Name::string()}</string>
		<string>gl:getActiveUniform</string>
		<string>gl:getActiveUniform(&lt;#Program#&gt;, &lt;#Index#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getActiveUniform(Program, Index, BufSize) -&gt; {Size::integer(), Type::enum(), Name::string()}</string>
		<string>gl:getAttachedShaders</string>
		<string>gl:getAttachedShaders(&lt;#Program#&gt;, &lt;#MaxCount#&gt;)</string>
		<string>gl:getAttachedShaders(Program, MaxCount) -&gt; [integer()]</string>
		<string>gl:getAttribLocation</string>
		<string>gl:getAttribLocation(&lt;#Program#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:getAttribLocation(Program, Name) -&gt; integer()</string>
		<string>gl:getProgramiv</string>
		<string>gl:getProgramiv(&lt;#Program#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getProgramiv(Program, Pname) -&gt; integer()</string>
		<string>gl:getProgramInfoLog</string>
		<string>gl:getProgramInfoLog(&lt;#Program#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getProgramInfoLog(Program, BufSize) -&gt; string()</string>
		<string>gl:getShaderiv</string>
		<string>gl:getShaderiv(&lt;#Shader#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getShaderiv(Shader, Pname) -&gt; integer()</string>
		<string>gl:getShaderInfoLog</string>
		<string>gl:getShaderInfoLog(&lt;#Shader#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getShaderInfoLog(Shader, BufSize) -&gt; string()</string>
		<string>gl:getShaderSource</string>
		<string>gl:getShaderSource(&lt;#Shader#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getShaderSource(Shader, BufSize) -&gt; string()</string>
		<string>gl:getUniformLocation</string>
		<string>gl:getUniformLocation(&lt;#Program#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:getUniformLocation(Program, Name) -&gt; integer()</string>
		<string>gl:getUniformfv</string>
		<string>gl:getUniformfv(&lt;#Program#&gt;, &lt;#Location#&gt;)</string>
		<string>gl:getUniformfv(Program, Location) -&gt; matrix()</string>
		<string>gl:getUniformiv</string>
		<string>gl:getUniformiv(&lt;#Program#&gt;, &lt;#Location#&gt;)</string>
		<string>gl:getUniformiv(Program, Location) -&gt; {integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer()}</string>
		<string>gl:getVertexAttribdv</string>
		<string>gl:getVertexAttribdv(&lt;#Index#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getVertexAttribdv(Index, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getVertexAttribfv</string>
		<string>gl:getVertexAttribfv(&lt;#Index#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getVertexAttribfv(Index, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getVertexAttribiv</string>
		<string>gl:getVertexAttribiv(&lt;#Index#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getVertexAttribiv(Index, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:isProgram</string>
		<string>gl:isProgram(&lt;#Program#&gt;)</string>
		<string>gl:isProgram(Program) -&gt; 0 | 1</string>
		<string>gl:isShader</string>
		<string>gl:isShader(&lt;#Shader#&gt;)</string>
		<string>gl:isShader(Shader) -&gt; 0 | 1</string>
		<string>gl:linkProgram</string>
		<string>gl:linkProgram(&lt;#Program#&gt;)</string>
		<string>gl:linkProgram(Program) -&gt; ok</string>
		<string>gl:shaderSource</string>
		<string>gl:shaderSource(&lt;#Shader#&gt;, &lt;#String#&gt;)</string>
		<string>gl:shaderSource(Shader, String) -&gt; ok</string>
		<string>gl:useProgram</string>
		<string>gl:useProgram(&lt;#Program#&gt;)</string>
		<string>gl:useProgram(Program) -&gt; ok</string>
		<string>gl:uniform1f</string>
		<string>gl:uniform1f(&lt;#Location#&gt;, &lt;#V0#&gt;)</string>
		<string>gl:uniform1f(Location, V0) -&gt; ok</string>
		<string>gl:uniform2f</string>
		<string>gl:uniform2f(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;)</string>
		<string>gl:uniform2f(Location, V0, V1) -&gt; ok</string>
		<string>gl:uniform3f</string>
		<string>gl:uniform3f(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:uniform3f(Location, V0, V1, V2) -&gt; ok</string>
		<string>gl:uniform4f</string>
		<string>gl:uniform4f(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#V3#&gt;)</string>
		<string>gl:uniform4f(Location, V0, V1, V2, V3) -&gt; ok</string>
		<string>gl:uniform1i</string>
		<string>gl:uniform1i(&lt;#Location#&gt;, &lt;#V0#&gt;)</string>
		<string>gl:uniform1i(Location, V0) -&gt; ok</string>
		<string>gl:uniform2i</string>
		<string>gl:uniform2i(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;)</string>
		<string>gl:uniform2i(Location, V0, V1) -&gt; ok</string>
		<string>gl:uniform3i</string>
		<string>gl:uniform3i(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:uniform3i(Location, V0, V1, V2) -&gt; ok</string>
		<string>gl:uniform4i</string>
		<string>gl:uniform4i(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#V3#&gt;)</string>
		<string>gl:uniform4i(Location, V0, V1, V2, V3) -&gt; ok</string>
		<string>gl:uniform1fv</string>
		<string>gl:uniform1fv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform1fv(Location, Value) -&gt; ok</string>
		<string>gl:uniform2fv</string>
		<string>gl:uniform2fv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform2fv(Location, Value) -&gt; ok</string>
		<string>gl:uniform3fv</string>
		<string>gl:uniform3fv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform3fv(Location, Value) -&gt; ok</string>
		<string>gl:uniform4fv</string>
		<string>gl:uniform4fv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform4fv(Location, Value) -&gt; ok</string>
		<string>gl:uniform1iv</string>
		<string>gl:uniform1iv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform1iv(Location, Value) -&gt; ok</string>
		<string>gl:uniform2iv</string>
		<string>gl:uniform2iv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform2iv(Location, Value) -&gt; ok</string>
		<string>gl:uniform3iv</string>
		<string>gl:uniform3iv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform3iv(Location, Value) -&gt; ok</string>
		<string>gl:uniform4iv</string>
		<string>gl:uniform4iv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform4iv(Location, Value) -&gt; ok</string>
		<string>gl:uniformMatrix2fv</string>
		<string>gl:uniformMatrix2fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix2fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix3fv</string>
		<string>gl:uniformMatrix3fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix3fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix4fv</string>
		<string>gl:uniformMatrix4fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix4fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:validateProgram</string>
		<string>gl:validateProgram(&lt;#Program#&gt;)</string>
		<string>gl:validateProgram(Program) -&gt; ok</string>
		<string>gl:vertexAttrib1d</string>
		<string>gl:vertexAttrib1d(&lt;#Index#&gt;, &lt;#X#&gt;)</string>
		<string>gl:vertexAttrib1d(Index, X) -&gt; ok</string>
		<string>gl:vertexAttrib1dv</string>
		<string>gl:vertexAttrib1dv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib1dv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib1f</string>
		<string>gl:vertexAttrib1f(&lt;#Index#&gt;, &lt;#X#&gt;)</string>
		<string>gl:vertexAttrib1f(Index, X) -&gt; ok</string>
		<string>gl:vertexAttrib1fv</string>
		<string>gl:vertexAttrib1fv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib1fv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib1s</string>
		<string>gl:vertexAttrib1s(&lt;#Index#&gt;, &lt;#X#&gt;)</string>
		<string>gl:vertexAttrib1s(Index, X) -&gt; ok</string>
		<string>gl:vertexAttrib1sv</string>
		<string>gl:vertexAttrib1sv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib1sv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib2d</string>
		<string>gl:vertexAttrib2d(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertexAttrib2d(Index, X, Y) -&gt; ok</string>
		<string>gl:vertexAttrib2dv</string>
		<string>gl:vertexAttrib2dv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib2dv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib2f</string>
		<string>gl:vertexAttrib2f(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertexAttrib2f(Index, X, Y) -&gt; ok</string>
		<string>gl:vertexAttrib2fv</string>
		<string>gl:vertexAttrib2fv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib2fv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib2s</string>
		<string>gl:vertexAttrib2s(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertexAttrib2s(Index, X, Y) -&gt; ok</string>
		<string>gl:vertexAttrib2sv</string>
		<string>gl:vertexAttrib2sv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib2sv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib3d</string>
		<string>gl:vertexAttrib3d(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertexAttrib3d(Index, X, Y, Z) -&gt; ok</string>
		<string>gl:vertexAttrib3dv</string>
		<string>gl:vertexAttrib3dv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib3dv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib3f</string>
		<string>gl:vertexAttrib3f(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertexAttrib3f(Index, X, Y, Z) -&gt; ok</string>
		<string>gl:vertexAttrib3fv</string>
		<string>gl:vertexAttrib3fv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib3fv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib3s</string>
		<string>gl:vertexAttrib3s(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertexAttrib3s(Index, X, Y, Z) -&gt; ok</string>
		<string>gl:vertexAttrib3sv</string>
		<string>gl:vertexAttrib3sv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib3sv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib4Nbv</string>
		<string>gl:vertexAttrib4Nbv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4Nbv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4Niv</string>
		<string>gl:vertexAttrib4Niv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4Niv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4Nsv</string>
		<string>gl:vertexAttrib4Nsv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4Nsv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4Nub</string>
		<string>gl:vertexAttrib4Nub(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertexAttrib4Nub(Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertexAttrib4Nubv</string>
		<string>gl:vertexAttrib4Nubv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4Nubv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib4Nuiv</string>
		<string>gl:vertexAttrib4Nuiv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4Nuiv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4Nusv</string>
		<string>gl:vertexAttrib4Nusv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4Nusv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4bv</string>
		<string>gl:vertexAttrib4bv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4bv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4d</string>
		<string>gl:vertexAttrib4d(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertexAttrib4d(Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertexAttrib4dv</string>
		<string>gl:vertexAttrib4dv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4dv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib4f</string>
		<string>gl:vertexAttrib4f(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertexAttrib4f(Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertexAttrib4fv</string>
		<string>gl:vertexAttrib4fv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4fv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib4iv</string>
		<string>gl:vertexAttrib4iv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4iv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4s</string>
		<string>gl:vertexAttrib4s(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertexAttrib4s(Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertexAttrib4sv</string>
		<string>gl:vertexAttrib4sv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4sv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttrib4ubv</string>
		<string>gl:vertexAttrib4ubv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4ubv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4uiv</string>
		<string>gl:vertexAttrib4uiv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4uiv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttrib4usv</string>
		<string>gl:vertexAttrib4usv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttrib4usv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttribPointer</string>
		<string>gl:vertexAttribPointer(&lt;#Index#&gt;, &lt;#Size#&gt;, &lt;#Type#&gt;, &lt;#Normalized#&gt;, &lt;#Stride#&gt;, &lt;#Pointer#&gt;)</string>
		<string>gl:vertexAttribPointer(Index, Size, Type, Normalized, Stride, Pointer) -&gt; ok</string>
		<string>gl:uniformMatrix2x3fv</string>
		<string>gl:uniformMatrix2x3fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix2x3fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix3x2fv</string>
		<string>gl:uniformMatrix3x2fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix3x2fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix2x4fv</string>
		<string>gl:uniformMatrix2x4fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix2x4fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix4x2fv</string>
		<string>gl:uniformMatrix4x2fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix4x2fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix3x4fv</string>
		<string>gl:uniformMatrix3x4fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix3x4fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix4x3fv</string>
		<string>gl:uniformMatrix4x3fv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix4x3fv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:colorMaski</string>
		<string>gl:colorMaski(&lt;#Index#&gt;, &lt;#R#&gt;, &lt;#G#&gt;, &lt;#B#&gt;, &lt;#A#&gt;)</string>
		<string>gl:colorMaski(Index, R, G, B, A) -&gt; ok</string>
		<string>gl:getBooleani_v</string>
		<string>gl:getBooleani_v(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getBooleani_v(Target, Index) -&gt; [0 | 1]</string>
		<string>gl:getIntegeri_v</string>
		<string>gl:getIntegeri_v(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getIntegeri_v(Target, Index) -&gt; [integer()]</string>
		<string>gl:enablei</string>
		<string>gl:enablei(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:enablei(Target, Index) -&gt; ok</string>
		<string>gl:disablei</string>
		<string>gl:disablei(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:disablei(Target, Index) -&gt; ok</string>
		<string>gl:isEnabledi</string>
		<string>gl:isEnabledi(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:isEnabledi(Target, Index) -&gt; 0 | 1</string>
		<string>gl:beginTransformFeedback</string>
		<string>gl:beginTransformFeedback(&lt;#PrimitiveMode#&gt;)</string>
		<string>gl:beginTransformFeedback(PrimitiveMode) -&gt; ok</string>
		<string>gl:endTransformFeedback</string>
		<string>gl:endTransformFeedback()</string>
		<string>gl:endTransformFeedback() -&gt; ok</string>
		<string>gl:bindBufferRange</string>
		<string>gl:bindBufferRange(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#Buffer#&gt;, &lt;#Offset#&gt;, &lt;#Size#&gt;)</string>
		<string>gl:bindBufferRange(Target, Index, Buffer, Offset, Size) -&gt; ok</string>
		<string>gl:bindBufferBase</string>
		<string>gl:bindBufferBase(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#Buffer#&gt;)</string>
		<string>gl:bindBufferBase(Target, Index, Buffer) -&gt; ok</string>
		<string>gl:transformFeedbackVaryings</string>
		<string>gl:transformFeedbackVaryings(&lt;#Program#&gt;, &lt;#Varyings#&gt;, &lt;#BufferMode#&gt;)</string>
		<string>gl:transformFeedbackVaryings(Program, Varyings, BufferMode) -&gt; ok</string>
		<string>gl:getTransformFeedbackVarying</string>
		<string>gl:getTransformFeedbackVarying(&lt;#Program#&gt;, &lt;#Index#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getTransformFeedbackVarying(Program, Index, BufSize) -&gt; {Size::integer(), Type::enum(), Name::string()}</string>
		<string>gl:clampColor</string>
		<string>gl:clampColor(&lt;#Target#&gt;, &lt;#Clamp#&gt;)</string>
		<string>gl:clampColor(Target, Clamp) -&gt; ok</string>
		<string>gl:beginConditionalRender</string>
		<string>gl:beginConditionalRender(&lt;#Id#&gt;, &lt;#Mode#&gt;)</string>
		<string>gl:beginConditionalRender(Id, Mode) -&gt; ok</string>
		<string>gl:endConditionalRender</string>
		<string>gl:endConditionalRender()</string>
		<string>gl:endConditionalRender() -&gt; ok</string>
		<string>gl:vertexAttribIPointer</string>
		<string>gl:vertexAttribIPointer(&lt;#Index#&gt;, &lt;#Size#&gt;, &lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Pointer#&gt;)</string>
		<string>gl:vertexAttribIPointer(Index, Size, Type, Stride, Pointer) -&gt; ok</string>
		<string>gl:getVertexAttribIiv</string>
		<string>gl:getVertexAttribIiv(&lt;#Index#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getVertexAttribIiv(Index, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:getVertexAttribIuiv</string>
		<string>gl:getVertexAttribIuiv(&lt;#Index#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getVertexAttribIuiv(Index, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:vertexAttribI1i</string>
		<string>gl:vertexAttribI1i(&lt;#Index#&gt;, &lt;#X#&gt;)</string>
		<string>gl:vertexAttribI1i(Index, X) -&gt; ok</string>
		<string>gl:vertexAttribI2i</string>
		<string>gl:vertexAttribI2i(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertexAttribI2i(Index, X, Y) -&gt; ok</string>
		<string>gl:vertexAttribI3i</string>
		<string>gl:vertexAttribI3i(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertexAttribI3i(Index, X, Y, Z) -&gt; ok</string>
		<string>gl:vertexAttribI4i</string>
		<string>gl:vertexAttribI4i(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertexAttribI4i(Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertexAttribI1ui</string>
		<string>gl:vertexAttribI1ui(&lt;#Index#&gt;, &lt;#X#&gt;)</string>
		<string>gl:vertexAttribI1ui(Index, X) -&gt; ok</string>
		<string>gl:vertexAttribI2ui</string>
		<string>gl:vertexAttribI2ui(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertexAttribI2ui(Index, X, Y) -&gt; ok</string>
		<string>gl:vertexAttribI3ui</string>
		<string>gl:vertexAttribI3ui(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertexAttribI3ui(Index, X, Y, Z) -&gt; ok</string>
		<string>gl:vertexAttribI4ui</string>
		<string>gl:vertexAttribI4ui(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertexAttribI4ui(Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertexAttribI1iv</string>
		<string>gl:vertexAttribI1iv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI1iv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribI2iv</string>
		<string>gl:vertexAttribI2iv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI2iv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribI3iv</string>
		<string>gl:vertexAttribI3iv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI3iv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribI4iv</string>
		<string>gl:vertexAttribI4iv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI4iv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribI1uiv</string>
		<string>gl:vertexAttribI1uiv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI1uiv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribI2uiv</string>
		<string>gl:vertexAttribI2uiv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI2uiv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribI3uiv</string>
		<string>gl:vertexAttribI3uiv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI3uiv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribI4uiv</string>
		<string>gl:vertexAttribI4uiv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI4uiv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribI4bv</string>
		<string>gl:vertexAttribI4bv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI4bv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttribI4sv</string>
		<string>gl:vertexAttribI4sv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI4sv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttribI4ubv</string>
		<string>gl:vertexAttribI4ubv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI4ubv(Index, V) -&gt; ok</string>
		<string>gl:vertexAttribI4usv</string>
		<string>gl:vertexAttribI4usv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribI4usv(Index, V) -&gt; ok</string>
		<string>gl:getUniformuiv</string>
		<string>gl:getUniformuiv(&lt;#Program#&gt;, &lt;#Location#&gt;)</string>
		<string>gl:getUniformuiv(Program, Location) -&gt; {integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer()}</string>
		<string>gl:bindFragDataLocation</string>
		<string>gl:bindFragDataLocation(&lt;#Program#&gt;, &lt;#Color#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:bindFragDataLocation(Program, Color, Name) -&gt; ok</string>
		<string>gl:getFragDataLocation</string>
		<string>gl:getFragDataLocation(&lt;#Program#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:getFragDataLocation(Program, Name) -&gt; integer()</string>
		<string>gl:uniform1ui</string>
		<string>gl:uniform1ui(&lt;#Location#&gt;, &lt;#V0#&gt;)</string>
		<string>gl:uniform1ui(Location, V0) -&gt; ok</string>
		<string>gl:uniform2ui</string>
		<string>gl:uniform2ui(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;)</string>
		<string>gl:uniform2ui(Location, V0, V1) -&gt; ok</string>
		<string>gl:uniform3ui</string>
		<string>gl:uniform3ui(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:uniform3ui(Location, V0, V1, V2) -&gt; ok</string>
		<string>gl:uniform4ui</string>
		<string>gl:uniform4ui(&lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#V3#&gt;)</string>
		<string>gl:uniform4ui(Location, V0, V1, V2, V3) -&gt; ok</string>
		<string>gl:uniform1uiv</string>
		<string>gl:uniform1uiv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform1uiv(Location, Value) -&gt; ok</string>
		<string>gl:uniform2uiv</string>
		<string>gl:uniform2uiv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform2uiv(Location, Value) -&gt; ok</string>
		<string>gl:uniform3uiv</string>
		<string>gl:uniform3uiv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform3uiv(Location, Value) -&gt; ok</string>
		<string>gl:uniform4uiv</string>
		<string>gl:uniform4uiv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform4uiv(Location, Value) -&gt; ok</string>
		<string>gl:texParameterIiv</string>
		<string>gl:texParameterIiv(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texParameterIiv(Target, Pname, Params) -&gt; ok</string>
		<string>gl:texParameterIuiv</string>
		<string>gl:texParameterIuiv(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:texParameterIuiv(Target, Pname, Params) -&gt; ok</string>
		<string>gl:getTexParameterIiv</string>
		<string>gl:getTexParameterIiv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexParameterIiv(Target, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:getTexParameterIuiv</string>
		<string>gl:getTexParameterIuiv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getTexParameterIuiv(Target, Pname) -&gt; {integer(), integer(), integer(), integer()}</string>
		<string>gl:clearBufferiv</string>
		<string>gl:clearBufferiv(&lt;#Buffer#&gt;, &lt;#Drawbuffer#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:clearBufferiv(Buffer, Drawbuffer, Value) -&gt; ok</string>
		<string>gl:clearBufferuiv</string>
		<string>gl:clearBufferuiv(&lt;#Buffer#&gt;, &lt;#Drawbuffer#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:clearBufferuiv(Buffer, Drawbuffer, Value) -&gt; ok</string>
		<string>gl:clearBufferfv</string>
		<string>gl:clearBufferfv(&lt;#Buffer#&gt;, &lt;#Drawbuffer#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:clearBufferfv(Buffer, Drawbuffer, Value) -&gt; ok</string>
		<string>gl:clearBufferfi</string>
		<string>gl:clearBufferfi(&lt;#Buffer#&gt;, &lt;#Drawbuffer#&gt;, &lt;#Depth#&gt;, &lt;#Stencil#&gt;)</string>
		<string>gl:clearBufferfi(Buffer, Drawbuffer, Depth, Stencil) -&gt; ok</string>
		<string>gl:getStringi</string>
		<string>gl:getStringi(&lt;#Name#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getStringi(Name, Index) -&gt; string()</string>
		<string>gl:drawArraysInstanced</string>
		<string>gl:drawArraysInstanced(&lt;#Mode#&gt;, &lt;#First#&gt;, &lt;#Count#&gt;, &lt;#Primcount#&gt;)</string>
		<string>gl:drawArraysInstanced(Mode, First, Count, Primcount) -&gt; ok</string>
		<string>gl:drawElementsInstanced</string>
		<string>gl:drawElementsInstanced(&lt;#Mode#&gt;, &lt;#Count#&gt;, &lt;#Type#&gt;, &lt;#Indices#&gt;, &lt;#Primcount#&gt;)</string>
		<string>gl:drawElementsInstanced(Mode, Count, Type, Indices, Primcount) -&gt; ok</string>
		<string>gl:texBuffer</string>
		<string>gl:texBuffer(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#Buffer#&gt;)</string>
		<string>gl:texBuffer(Target, Internalformat, Buffer) -&gt; ok</string>
		<string>gl:primitiveRestartIndex</string>
		<string>gl:primitiveRestartIndex(&lt;#Index#&gt;)</string>
		<string>gl:primitiveRestartIndex(Index) -&gt; ok</string>
		<string>gl:getInteger64i_v</string>
		<string>gl:getInteger64i_v(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getInteger64i_v(Target, Index) -&gt; [integer()]</string>
		<string>gl:getBufferParameteri64v</string>
		<string>gl:getBufferParameteri64v(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getBufferParameteri64v(Target, Pname) -&gt; [integer()]</string>
		<string>gl:framebufferTexture</string>
		<string>gl:framebufferTexture(&lt;#Target#&gt;, &lt;#Attachment#&gt;, &lt;#Texture#&gt;, &lt;#Level#&gt;)</string>
		<string>gl:framebufferTexture(Target, Attachment, Texture, Level) -&gt; ok</string>
		<string>gl:vertexAttribDivisor</string>
		<string>gl:vertexAttribDivisor(&lt;#Index#&gt;, &lt;#Divisor#&gt;)</string>
		<string>gl:vertexAttribDivisor(Index, Divisor) -&gt; ok</string>
		<string>gl:minSampleShading</string>
		<string>gl:minSampleShading(&lt;#Value#&gt;)</string>
		<string>gl:minSampleShading(Value) -&gt; ok</string>
		<string>gl:blendEquationi</string>
		<string>gl:blendEquationi(&lt;#Buf#&gt;, &lt;#Mode#&gt;)</string>
		<string>gl:blendEquationi(Buf, Mode) -&gt; ok</string>
		<string>gl:blendEquationSeparatei</string>
		<string>gl:blendEquationSeparatei(&lt;#Buf#&gt;, &lt;#ModeRGB#&gt;, &lt;#ModeAlpha#&gt;)</string>
		<string>gl:blendEquationSeparatei(Buf, ModeRGB, ModeAlpha) -&gt; ok</string>
		<string>gl:blendFunci</string>
		<string>gl:blendFunci(&lt;#Buf#&gt;, &lt;#Src#&gt;, &lt;#Dst#&gt;)</string>
		<string>gl:blendFunci(Buf, Src, Dst) -&gt; ok</string>
		<string>gl:blendFuncSeparatei</string>
		<string>gl:blendFuncSeparatei(&lt;#Buf#&gt;, &lt;#SrcRGB#&gt;, &lt;#DstRGB#&gt;, &lt;#SrcAlpha#&gt;, &lt;#DstAlpha#&gt;)</string>
		<string>gl:blendFuncSeparatei(Buf, SrcRGB, DstRGB, SrcAlpha, DstAlpha) -&gt; ok</string>
		<string>gl:loadTransposeMatrixfARB</string>
		<string>gl:loadTransposeMatrixfARB(&lt;#M#&gt;)</string>
		<string>gl:loadTransposeMatrixfARB(M) -&gt; ok</string>
		<string>gl:loadTransposeMatrixdARB</string>
		<string>gl:loadTransposeMatrixdARB(&lt;#M#&gt;)</string>
		<string>gl:loadTransposeMatrixdARB(M) -&gt; ok</string>
		<string>gl:multTransposeMatrixfARB</string>
		<string>gl:multTransposeMatrixfARB(&lt;#M#&gt;)</string>
		<string>gl:multTransposeMatrixfARB(M) -&gt; ok</string>
		<string>gl:multTransposeMatrixdARB</string>
		<string>gl:multTransposeMatrixdARB(&lt;#M#&gt;)</string>
		<string>gl:multTransposeMatrixdARB(M) -&gt; ok</string>
		<string>gl:weightbvARB</string>
		<string>gl:weightbvARB(&lt;#Weights#&gt;)</string>
		<string>gl:weightbvARB(Weights) -&gt; ok</string>
		<string>gl:weightsvARB</string>
		<string>gl:weightsvARB(&lt;#Weights#&gt;)</string>
		<string>gl:weightsvARB(Weights) -&gt; ok</string>
		<string>gl:weightivARB</string>
		<string>gl:weightivARB(&lt;#Weights#&gt;)</string>
		<string>gl:weightivARB(Weights) -&gt; ok</string>
		<string>gl:weightfvARB</string>
		<string>gl:weightfvARB(&lt;#Weights#&gt;)</string>
		<string>gl:weightfvARB(Weights) -&gt; ok</string>
		<string>gl:weightdvARB</string>
		<string>gl:weightdvARB(&lt;#Weights#&gt;)</string>
		<string>gl:weightdvARB(Weights) -&gt; ok</string>
		<string>gl:weightubvARB</string>
		<string>gl:weightubvARB(&lt;#Weights#&gt;)</string>
		<string>gl:weightubvARB(Weights) -&gt; ok</string>
		<string>gl:weightusvARB</string>
		<string>gl:weightusvARB(&lt;#Weights#&gt;)</string>
		<string>gl:weightusvARB(Weights) -&gt; ok</string>
		<string>gl:weightuivARB</string>
		<string>gl:weightuivARB(&lt;#Weights#&gt;)</string>
		<string>gl:weightuivARB(Weights) -&gt; ok</string>
		<string>gl:vertexBlendARB</string>
		<string>gl:vertexBlendARB(&lt;#Count#&gt;)</string>
		<string>gl:vertexBlendARB(Count) -&gt; ok</string>
		<string>gl:currentPaletteMatrixARB</string>
		<string>gl:currentPaletteMatrixARB(&lt;#Index#&gt;)</string>
		<string>gl:currentPaletteMatrixARB(Index) -&gt; ok</string>
		<string>gl:matrixIndexubvARB</string>
		<string>gl:matrixIndexubvARB(&lt;#Indices#&gt;)</string>
		<string>gl:matrixIndexubvARB(Indices) -&gt; ok</string>
		<string>gl:matrixIndexusvARB</string>
		<string>gl:matrixIndexusvARB(&lt;#Indices#&gt;)</string>
		<string>gl:matrixIndexusvARB(Indices) -&gt; ok</string>
		<string>gl:matrixIndexuivARB</string>
		<string>gl:matrixIndexuivARB(&lt;#Indices#&gt;)</string>
		<string>gl:matrixIndexuivARB(Indices) -&gt; ok</string>
		<string>gl:programStringARB</string>
		<string>gl:programStringARB(&lt;#Target#&gt;, &lt;#Format#&gt;, &lt;#String#&gt;)</string>
		<string>gl:programStringARB(Target, Format, String) -&gt; ok</string>
		<string>gl:bindProgramARB</string>
		<string>gl:bindProgramARB(&lt;#Target#&gt;, &lt;#Program#&gt;)</string>
		<string>gl:bindProgramARB(Target, Program) -&gt; ok</string>
		<string>gl:deleteProgramsARB</string>
		<string>gl:deleteProgramsARB(&lt;#Programs#&gt;)</string>
		<string>gl:deleteProgramsARB(Programs) -&gt; ok</string>
		<string>gl:genProgramsARB</string>
		<string>gl:genProgramsARB(&lt;#N#&gt;)</string>
		<string>gl:genProgramsARB(N) -&gt; [integer()]</string>
		<string>gl:programEnvParameter4dARB</string>
		<string>gl:programEnvParameter4dARB(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:programEnvParameter4dARB(Target, Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:programEnvParameter4dvARB</string>
		<string>gl:programEnvParameter4dvARB(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:programEnvParameter4dvARB(Target, Index, Params) -&gt; ok</string>
		<string>gl:programEnvParameter4fARB</string>
		<string>gl:programEnvParameter4fARB(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:programEnvParameter4fARB(Target, Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:programEnvParameter4fvARB</string>
		<string>gl:programEnvParameter4fvARB(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:programEnvParameter4fvARB(Target, Index, Params) -&gt; ok</string>
		<string>gl:programLocalParameter4dARB</string>
		<string>gl:programLocalParameter4dARB(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:programLocalParameter4dARB(Target, Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:programLocalParameter4dvARB</string>
		<string>gl:programLocalParameter4dvARB(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:programLocalParameter4dvARB(Target, Index, Params) -&gt; ok</string>
		<string>gl:programLocalParameter4fARB</string>
		<string>gl:programLocalParameter4fARB(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:programLocalParameter4fARB(Target, Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:programLocalParameter4fvARB</string>
		<string>gl:programLocalParameter4fvARB(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:programLocalParameter4fvARB(Target, Index, Params) -&gt; ok</string>
		<string>gl:getProgramEnvParameterdvARB</string>
		<string>gl:getProgramEnvParameterdvARB(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getProgramEnvParameterdvARB(Target, Index) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getProgramEnvParameterfvARB</string>
		<string>gl:getProgramEnvParameterfvARB(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getProgramEnvParameterfvARB(Target, Index) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getProgramLocalParameterdvARB</string>
		<string>gl:getProgramLocalParameterdvARB(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getProgramLocalParameterdvARB(Target, Index) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getProgramLocalParameterfvARB</string>
		<string>gl:getProgramLocalParameterfvARB(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getProgramLocalParameterfvARB(Target, Index) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:getProgramStringARB</string>
		<string>gl:getProgramStringARB(&lt;#Target#&gt;, &lt;#Pname#&gt;, &lt;#String#&gt;)</string>
		<string>gl:getProgramStringARB(Target, Pname, String) -&gt; ok</string>
		<string>gl:getBufferParameterivARB</string>
		<string>gl:getBufferParameterivARB(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getBufferParameterivARB(Target, Pname) -&gt; [integer()]</string>
		<string>gl:deleteObjectARB</string>
		<string>gl:deleteObjectARB(&lt;#Obj#&gt;)</string>
		<string>gl:deleteObjectARB(Obj) -&gt; ok</string>
		<string>gl:getHandleARB</string>
		<string>gl:getHandleARB(&lt;#Pname#&gt;)</string>
		<string>gl:getHandleARB(Pname) -&gt; integer()</string>
		<string>gl:detachObjectARB</string>
		<string>gl:detachObjectARB(&lt;#ContainerObj#&gt;, &lt;#AttachedObj#&gt;)</string>
		<string>gl:detachObjectARB(ContainerObj, AttachedObj) -&gt; ok</string>
		<string>gl:createShaderObjectARB</string>
		<string>gl:createShaderObjectARB(&lt;#ShaderType#&gt;)</string>
		<string>gl:createShaderObjectARB(ShaderType) -&gt; integer()</string>
		<string>gl:shaderSourceARB</string>
		<string>gl:shaderSourceARB(&lt;#ShaderObj#&gt;, &lt;#String#&gt;)</string>
		<string>gl:shaderSourceARB(ShaderObj, String) -&gt; ok</string>
		<string>gl:compileShaderARB</string>
		<string>gl:compileShaderARB(&lt;#ShaderObj#&gt;)</string>
		<string>gl:compileShaderARB(ShaderObj) -&gt; ok</string>
		<string>gl:createProgramObjectARB</string>
		<string>gl:createProgramObjectARB()</string>
		<string>gl:createProgramObjectARB() -&gt; integer()</string>
		<string>gl:attachObjectARB</string>
		<string>gl:attachObjectARB(&lt;#ContainerObj#&gt;, &lt;#Obj#&gt;)</string>
		<string>gl:attachObjectARB(ContainerObj, Obj) -&gt; ok</string>
		<string>gl:linkProgramARB</string>
		<string>gl:linkProgramARB(&lt;#ProgramObj#&gt;)</string>
		<string>gl:linkProgramARB(ProgramObj) -&gt; ok</string>
		<string>gl:useProgramObjectARB</string>
		<string>gl:useProgramObjectARB(&lt;#ProgramObj#&gt;)</string>
		<string>gl:useProgramObjectARB(ProgramObj) -&gt; ok</string>
		<string>gl:validateProgramARB</string>
		<string>gl:validateProgramARB(&lt;#ProgramObj#&gt;)</string>
		<string>gl:validateProgramARB(ProgramObj) -&gt; ok</string>
		<string>gl:getObjectParameterfvARB</string>
		<string>gl:getObjectParameterfvARB(&lt;#Obj#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getObjectParameterfvARB(Obj, Pname) -&gt; float()</string>
		<string>gl:getObjectParameterivARB</string>
		<string>gl:getObjectParameterivARB(&lt;#Obj#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getObjectParameterivARB(Obj, Pname) -&gt; integer()</string>
		<string>gl:getInfoLogARB</string>
		<string>gl:getInfoLogARB(&lt;#Obj#&gt;, &lt;#MaxLength#&gt;)</string>
		<string>gl:getInfoLogARB(Obj, MaxLength) -&gt; string()</string>
		<string>gl:getAttachedObjectsARB</string>
		<string>gl:getAttachedObjectsARB(&lt;#ContainerObj#&gt;, &lt;#MaxCount#&gt;)</string>
		<string>gl:getAttachedObjectsARB(ContainerObj, MaxCount) -&gt; [integer()]</string>
		<string>gl:getUniformLocationARB</string>
		<string>gl:getUniformLocationARB(&lt;#ProgramObj#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:getUniformLocationARB(ProgramObj, Name) -&gt; integer()</string>
		<string>gl:getActiveUniformARB</string>
		<string>gl:getActiveUniformARB(&lt;#ProgramObj#&gt;, &lt;#Index#&gt;, &lt;#MaxLength#&gt;)</string>
		<string>gl:getActiveUniformARB(ProgramObj, Index, MaxLength) -&gt; {Size::integer(), Type::enum(), Name::string()}</string>
		<string>gl:getUniformfvARB</string>
		<string>gl:getUniformfvARB(&lt;#ProgramObj#&gt;, &lt;#Location#&gt;)</string>
		<string>gl:getUniformfvARB(ProgramObj, Location) -&gt; matrix()</string>
		<string>gl:getUniformivARB</string>
		<string>gl:getUniformivARB(&lt;#ProgramObj#&gt;, &lt;#Location#&gt;)</string>
		<string>gl:getUniformivARB(ProgramObj, Location) -&gt; {integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer()}</string>
		<string>gl:getShaderSourceARB</string>
		<string>gl:getShaderSourceARB(&lt;#Obj#&gt;, &lt;#MaxLength#&gt;)</string>
		<string>gl:getShaderSourceARB(Obj, MaxLength) -&gt; string()</string>
		<string>gl:bindAttribLocationARB</string>
		<string>gl:bindAttribLocationARB(&lt;#ProgramObj#&gt;, &lt;#Index#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:bindAttribLocationARB(ProgramObj, Index, Name) -&gt; ok</string>
		<string>gl:getActiveAttribARB</string>
		<string>gl:getActiveAttribARB(&lt;#ProgramObj#&gt;, &lt;#Index#&gt;, &lt;#MaxLength#&gt;)</string>
		<string>gl:getActiveAttribARB(ProgramObj, Index, MaxLength) -&gt; {Size::integer(), Type::enum(), Name::string()}</string>
		<string>gl:getAttribLocationARB</string>
		<string>gl:getAttribLocationARB(&lt;#ProgramObj#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:getAttribLocationARB(ProgramObj, Name) -&gt; integer()</string>
		<string>gl:isRenderbuffer</string>
		<string>gl:isRenderbuffer(&lt;#Renderbuffer#&gt;)</string>
		<string>gl:isRenderbuffer(Renderbuffer) -&gt; 0 | 1</string>
		<string>gl:bindRenderbuffer</string>
		<string>gl:bindRenderbuffer(&lt;#Target#&gt;, &lt;#Renderbuffer#&gt;)</string>
		<string>gl:bindRenderbuffer(Target, Renderbuffer) -&gt; ok</string>
		<string>gl:deleteRenderbuffers</string>
		<string>gl:deleteRenderbuffers(&lt;#Renderbuffers#&gt;)</string>
		<string>gl:deleteRenderbuffers(Renderbuffers) -&gt; ok</string>
		<string>gl:genRenderbuffers</string>
		<string>gl:genRenderbuffers(&lt;#N#&gt;)</string>
		<string>gl:genRenderbuffers(N) -&gt; [integer()]</string>
		<string>gl:renderbufferStorage</string>
		<string>gl:renderbufferStorage(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:renderbufferStorage(Target, Internalformat, Width, Height) -&gt; ok</string>
		<string>gl:getRenderbufferParameteriv</string>
		<string>gl:getRenderbufferParameteriv(&lt;#Target#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getRenderbufferParameteriv(Target, Pname) -&gt; integer()</string>
		<string>gl:isFramebuffer</string>
		<string>gl:isFramebuffer(&lt;#Framebuffer#&gt;)</string>
		<string>gl:isFramebuffer(Framebuffer) -&gt; 0 | 1</string>
		<string>gl:bindFramebuffer</string>
		<string>gl:bindFramebuffer(&lt;#Target#&gt;, &lt;#Framebuffer#&gt;)</string>
		<string>gl:bindFramebuffer(Target, Framebuffer) -&gt; ok</string>
		<string>gl:deleteFramebuffers</string>
		<string>gl:deleteFramebuffers(&lt;#Framebuffers#&gt;)</string>
		<string>gl:deleteFramebuffers(Framebuffers) -&gt; ok</string>
		<string>gl:genFramebuffers</string>
		<string>gl:genFramebuffers(&lt;#N#&gt;)</string>
		<string>gl:genFramebuffers(N) -&gt; [integer()]</string>
		<string>gl:checkFramebufferStatus</string>
		<string>gl:checkFramebufferStatus(&lt;#Target#&gt;)</string>
		<string>gl:checkFramebufferStatus(Target) -&gt; enum()</string>
		<string>gl:framebufferTexture1D</string>
		<string>gl:framebufferTexture1D(&lt;#Target#&gt;, &lt;#Attachment#&gt;, &lt;#Textarget#&gt;, &lt;#Texture#&gt;, &lt;#Level#&gt;)</string>
		<string>gl:framebufferTexture1D(Target, Attachment, Textarget, Texture, Level) -&gt; ok</string>
		<string>gl:framebufferTexture2D</string>
		<string>gl:framebufferTexture2D(&lt;#Target#&gt;, &lt;#Attachment#&gt;, &lt;#Textarget#&gt;, &lt;#Texture#&gt;, &lt;#Level#&gt;)</string>
		<string>gl:framebufferTexture2D(Target, Attachment, Textarget, Texture, Level) -&gt; ok</string>
		<string>gl:framebufferTexture3D</string>
		<string>gl:framebufferTexture3D(&lt;#Target#&gt;, &lt;#Attachment#&gt;, &lt;#Textarget#&gt;, &lt;#Texture#&gt;, &lt;#Level#&gt;, &lt;#Zoffset#&gt;)</string>
		<string>gl:framebufferTexture3D(Target, Attachment, Textarget, Texture, Level, Zoffset) -&gt; ok</string>
		<string>gl:framebufferRenderbuffer</string>
		<string>gl:framebufferRenderbuffer(&lt;#Target#&gt;, &lt;#Attachment#&gt;, &lt;#Renderbuffertarget#&gt;, &lt;#Renderbuffer#&gt;)</string>
		<string>gl:framebufferRenderbuffer(Target, Attachment, Renderbuffertarget, Renderbuffer) -&gt; ok</string>
		<string>gl:getFramebufferAttachmentParameteriv</string>
		<string>gl:getFramebufferAttachmentParameteriv(&lt;#Target#&gt;, &lt;#Attachment#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getFramebufferAttachmentParameteriv(Target, Attachment, Pname) -&gt; integer()</string>
		<string>gl:generateMipmap</string>
		<string>gl:generateMipmap(&lt;#Target#&gt;)</string>
		<string>gl:generateMipmap(Target) -&gt; ok</string>
		<string>gl:blitFramebuffer</string>
		<string>gl:blitFramebuffer(&lt;#SrcX0#&gt;, &lt;#SrcY0#&gt;, &lt;#SrcX1#&gt;, &lt;#SrcY1#&gt;, &lt;#DstX0#&gt;, &lt;#DstY0#&gt;, &lt;#DstX1#&gt;, &lt;#DstY1#&gt;, &lt;#Mask#&gt;, &lt;#Filter#&gt;)</string>
		<string>gl:blitFramebuffer(SrcX0, SrcY0, SrcX1, SrcY1, DstX0, DstY0, DstX1, DstY1, Mask, Filter) -&gt; ok</string>
		<string>gl:renderbufferStorageMultisample</string>
		<string>gl:renderbufferStorageMultisample(&lt;#Target#&gt;, &lt;#Samples#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:renderbufferStorageMultisample(Target, Samples, Internalformat, Width, Height) -&gt; ok</string>
		<string>gl:framebufferTextureLayer</string>
		<string>gl:framebufferTextureLayer(&lt;#Target#&gt;, &lt;#Attachment#&gt;, &lt;#Texture#&gt;, &lt;#Level#&gt;, &lt;#Layer#&gt;)</string>
		<string>gl:framebufferTextureLayer(Target, Attachment, Texture, Level, Layer) -&gt; ok</string>
		<string>gl:framebufferTextureFaceARB</string>
		<string>gl:framebufferTextureFaceARB(&lt;#Target#&gt;, &lt;#Attachment#&gt;, &lt;#Texture#&gt;, &lt;#Level#&gt;, &lt;#Face#&gt;)</string>
		<string>gl:framebufferTextureFaceARB(Target, Attachment, Texture, Level, Face) -&gt; ok</string>
		<string>gl:flushMappedBufferRange</string>
		<string>gl:flushMappedBufferRange(&lt;#Target#&gt;, &lt;#Offset#&gt;, &lt;#Length#&gt;)</string>
		<string>gl:flushMappedBufferRange(Target, Offset, Length) -&gt; ok</string>
		<string>gl:bindVertexArray</string>
		<string>gl:bindVertexArray(&lt;#Array#&gt;)</string>
		<string>gl:bindVertexArray(Array) -&gt; ok</string>
		<string>gl:deleteVertexArrays</string>
		<string>gl:deleteVertexArrays(&lt;#Arrays#&gt;)</string>
		<string>gl:deleteVertexArrays(Arrays) -&gt; ok</string>
		<string>gl:genVertexArrays</string>
		<string>gl:genVertexArrays(&lt;#N#&gt;)</string>
		<string>gl:genVertexArrays(N) -&gt; [integer()]</string>
		<string>gl:isVertexArray</string>
		<string>gl:isVertexArray(&lt;#Array#&gt;)</string>
		<string>gl:isVertexArray(Array) -&gt; 0 | 1</string>
		<string>gl:getUniformIndices</string>
		<string>gl:getUniformIndices(&lt;#Program#&gt;, &lt;#UniformNames#&gt;)</string>
		<string>gl:getUniformIndices(Program, UniformNames) -&gt; [integer()]</string>
		<string>gl:getActiveUniformsiv</string>
		<string>gl:getActiveUniformsiv(&lt;#Program#&gt;, &lt;#UniformIndices#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getActiveUniformsiv(Program, UniformIndices, Pname) -&gt; [integer()]</string>
		<string>gl:getActiveUniformName</string>
		<string>gl:getActiveUniformName(&lt;#Program#&gt;, &lt;#UniformIndex#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getActiveUniformName(Program, UniformIndex, BufSize) -&gt; string()</string>
		<string>gl:getUniformBlockIndex</string>
		<string>gl:getUniformBlockIndex(&lt;#Program#&gt;, &lt;#UniformBlockName#&gt;)</string>
		<string>gl:getUniformBlockIndex(Program, UniformBlockName) -&gt; integer()</string>
		<string>gl:getActiveUniformBlockiv</string>
		<string>gl:getActiveUniformBlockiv(&lt;#Program#&gt;, &lt;#UniformBlockIndex#&gt;, &lt;#Pname#&gt;, &lt;#Params#&gt;)</string>
		<string>gl:getActiveUniformBlockiv(Program, UniformBlockIndex, Pname, Params) -&gt; ok</string>
		<string>gl:getActiveUniformBlockName</string>
		<string>gl:getActiveUniformBlockName(&lt;#Program#&gt;, &lt;#UniformBlockIndex#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getActiveUniformBlockName(Program, UniformBlockIndex, BufSize) -&gt; string()</string>
		<string>gl:uniformBlockBinding</string>
		<string>gl:uniformBlockBinding(&lt;#Program#&gt;, &lt;#UniformBlockIndex#&gt;, &lt;#UniformBlockBinding#&gt;)</string>
		<string>gl:uniformBlockBinding(Program, UniformBlockIndex, UniformBlockBinding) -&gt; ok</string>
		<string>gl:copyBufferSubData</string>
		<string>gl:copyBufferSubData(&lt;#ReadTarget#&gt;, &lt;#WriteTarget#&gt;, &lt;#ReadOffset#&gt;, &lt;#WriteOffset#&gt;, &lt;#Size#&gt;)</string>
		<string>gl:copyBufferSubData(ReadTarget, WriteTarget, ReadOffset, WriteOffset, Size) -&gt; ok</string>
		<string>gl:drawElementsBaseVertex</string>
		<string>gl:drawElementsBaseVertex(&lt;#Mode#&gt;, &lt;#Count#&gt;, &lt;#Type#&gt;, &lt;#Indices#&gt;, &lt;#Basevertex#&gt;)</string>
		<string>gl:drawElementsBaseVertex(Mode, Count, Type, Indices, Basevertex) -&gt; ok</string>
		<string>gl:drawRangeElementsBaseVertex</string>
		<string>gl:drawRangeElementsBaseVertex(&lt;#Mode#&gt;, &lt;#Start#&gt;, &lt;#End#&gt;, &lt;#Count#&gt;, &lt;#Type#&gt;, &lt;#Indices#&gt;, &lt;#Basevertex#&gt;)</string>
		<string>gl:drawRangeElementsBaseVertex(Mode, Start, End, Count, Type, Indices, Basevertex) -&gt; ok</string>
		<string>gl:drawElementsInstancedBaseVertex</string>
		<string>gl:drawElementsInstancedBaseVertex(&lt;#Mode#&gt;, &lt;#Count#&gt;, &lt;#Type#&gt;, &lt;#Indices#&gt;, &lt;#Primcount#&gt;, &lt;#Basevertex#&gt;)</string>
		<string>gl:drawElementsInstancedBaseVertex(Mode, Count, Type, Indices, Primcount, Basevertex) -&gt; ok</string>
		<string>gl:provokingVertex</string>
		<string>gl:provokingVertex(&lt;#Mode#&gt;)</string>
		<string>gl:provokingVertex(Mode) -&gt; ok</string>
		<string>gl:fenceSync</string>
		<string>gl:fenceSync(&lt;#Condition#&gt;, &lt;#Flags#&gt;)</string>
		<string>gl:fenceSync(Condition, Flags) -&gt; integer()</string>
		<string>gl:isSync</string>
		<string>gl:isSync(&lt;#Sync#&gt;)</string>
		<string>gl:isSync(Sync) -&gt; 0 | 1</string>
		<string>gl:deleteSync</string>
		<string>gl:deleteSync(&lt;#Sync#&gt;)</string>
		<string>gl:deleteSync(Sync) -&gt; ok</string>
		<string>gl:clientWaitSync</string>
		<string>gl:clientWaitSync(&lt;#Sync#&gt;, &lt;#Flags#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gl:clientWaitSync(Sync, Flags, Timeout) -&gt; enum()</string>
		<string>gl:waitSync</string>
		<string>gl:waitSync(&lt;#Sync#&gt;, &lt;#Flags#&gt;, &lt;#Timeout#&gt;)</string>
		<string>gl:waitSync(Sync, Flags, Timeout) -&gt; ok</string>
		<string>gl:getInteger64v</string>
		<string>gl:getInteger64v(&lt;#Pname#&gt;)</string>
		<string>gl:getInteger64v(Pname) -&gt; [integer()]</string>
		<string>gl:getSynciv</string>
		<string>gl:getSynciv(&lt;#Sync#&gt;, &lt;#Pname#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getSynciv(Sync, Pname, BufSize) -&gt; [integer()]</string>
		<string>gl:texImage2DMultisample</string>
		<string>gl:texImage2DMultisample(&lt;#Target#&gt;, &lt;#Samples#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Fixedsamplelocations#&gt;)</string>
		<string>gl:texImage2DMultisample(Target, Samples, Internalformat, Width, Height, Fixedsamplelocations) -&gt; ok</string>
		<string>gl:texImage3DMultisample</string>
		<string>gl:texImage3DMultisample(&lt;#Target#&gt;, &lt;#Samples#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Depth#&gt;, &lt;#Fixedsamplelocations#&gt;)</string>
		<string>gl:texImage3DMultisample(Target, Samples, Internalformat, Width, Height, Depth, Fixedsamplelocations) -&gt; ok</string>
		<string>gl:getMultisamplefv</string>
		<string>gl:getMultisamplefv(&lt;#Pname#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getMultisamplefv(Pname, Index) -&gt; {float(), float()}</string>
		<string>gl:sampleMaski</string>
		<string>gl:sampleMaski(&lt;#Index#&gt;, &lt;#Mask#&gt;)</string>
		<string>gl:sampleMaski(Index, Mask) -&gt; ok</string>
		<string>gl:namedStringARB</string>
		<string>gl:namedStringARB(&lt;#Type#&gt;, &lt;#Name#&gt;, &lt;#String#&gt;)</string>
		<string>gl:namedStringARB(Type, Name, String) -&gt; ok</string>
		<string>gl:deleteNamedStringARB</string>
		<string>gl:deleteNamedStringARB(&lt;#Name#&gt;)</string>
		<string>gl:deleteNamedStringARB(Name) -&gt; ok</string>
		<string>gl:compileShaderIncludeARB</string>
		<string>gl:compileShaderIncludeARB(&lt;#Shader#&gt;, &lt;#Path#&gt;)</string>
		<string>gl:compileShaderIncludeARB(Shader, Path) -&gt; ok</string>
		<string>gl:isNamedStringARB</string>
		<string>gl:isNamedStringARB(&lt;#Name#&gt;)</string>
		<string>gl:isNamedStringARB(Name) -&gt; 0 | 1</string>
		<string>gl:getNamedStringARB</string>
		<string>gl:getNamedStringARB(&lt;#Name#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getNamedStringARB(Name, BufSize) -&gt; string()</string>
		<string>gl:getNamedStringivARB</string>
		<string>gl:getNamedStringivARB(&lt;#Name#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getNamedStringivARB(Name, Pname) -&gt; integer()</string>
		<string>gl:bindFragDataLocationIndexed</string>
		<string>gl:bindFragDataLocationIndexed(&lt;#Program#&gt;, &lt;#ColorNumber#&gt;, &lt;#Index#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:bindFragDataLocationIndexed(Program, ColorNumber, Index, Name) -&gt; ok</string>
		<string>gl:getFragDataIndex</string>
		<string>gl:getFragDataIndex(&lt;#Program#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:getFragDataIndex(Program, Name) -&gt; integer()</string>
		<string>gl:genSamplers</string>
		<string>gl:genSamplers(&lt;#Count#&gt;)</string>
		<string>gl:genSamplers(Count) -&gt; [integer()]</string>
		<string>gl:deleteSamplers</string>
		<string>gl:deleteSamplers(&lt;#Samplers#&gt;)</string>
		<string>gl:deleteSamplers(Samplers) -&gt; ok</string>
		<string>gl:isSampler</string>
		<string>gl:isSampler(&lt;#Sampler#&gt;)</string>
		<string>gl:isSampler(Sampler) -&gt; 0 | 1</string>
		<string>gl:bindSampler</string>
		<string>gl:bindSampler(&lt;#Unit#&gt;, &lt;#Sampler#&gt;)</string>
		<string>gl:bindSampler(Unit, Sampler) -&gt; ok</string>
		<string>gl:samplerParameteri</string>
		<string>gl:samplerParameteri(&lt;#Sampler#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:samplerParameteri(Sampler, Pname, Param) -&gt; ok</string>
		<string>gl:samplerParameteriv</string>
		<string>gl:samplerParameteriv(&lt;#Sampler#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:samplerParameteriv(Sampler, Pname, Param) -&gt; ok</string>
		<string>gl:samplerParameterf</string>
		<string>gl:samplerParameterf(&lt;#Sampler#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:samplerParameterf(Sampler, Pname, Param) -&gt; ok</string>
		<string>gl:samplerParameterfv</string>
		<string>gl:samplerParameterfv(&lt;#Sampler#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:samplerParameterfv(Sampler, Pname, Param) -&gt; ok</string>
		<string>gl:samplerParameterIiv</string>
		<string>gl:samplerParameterIiv(&lt;#Sampler#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:samplerParameterIiv(Sampler, Pname, Param) -&gt; ok</string>
		<string>gl:samplerParameterIuiv</string>
		<string>gl:samplerParameterIuiv(&lt;#Sampler#&gt;, &lt;#Pname#&gt;, &lt;#Param#&gt;)</string>
		<string>gl:samplerParameterIuiv(Sampler, Pname, Param) -&gt; ok</string>
		<string>gl:getSamplerParameteriv</string>
		<string>gl:getSamplerParameteriv(&lt;#Sampler#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getSamplerParameteriv(Sampler, Pname) -&gt; [integer()]</string>
		<string>gl:getSamplerParameterIiv</string>
		<string>gl:getSamplerParameterIiv(&lt;#Sampler#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getSamplerParameterIiv(Sampler, Pname) -&gt; [integer()]</string>
		<string>gl:getSamplerParameterfv</string>
		<string>gl:getSamplerParameterfv(&lt;#Sampler#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getSamplerParameterfv(Sampler, Pname) -&gt; [float()]</string>
		<string>gl:getSamplerParameterIuiv</string>
		<string>gl:getSamplerParameterIuiv(&lt;#Sampler#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getSamplerParameterIuiv(Sampler, Pname) -&gt; [integer()]</string>
		<string>gl:queryCounter</string>
		<string>gl:queryCounter(&lt;#Id#&gt;, &lt;#Target#&gt;)</string>
		<string>gl:queryCounter(Id, Target) -&gt; ok</string>
		<string>gl:getQueryObjecti64v</string>
		<string>gl:getQueryObjecti64v(&lt;#Id#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getQueryObjecti64v(Id, Pname) -&gt; integer()</string>
		<string>gl:getQueryObjectui64v</string>
		<string>gl:getQueryObjectui64v(&lt;#Id#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getQueryObjectui64v(Id, Pname) -&gt; integer()</string>
		<string>gl:drawArraysIndirect</string>
		<string>gl:drawArraysIndirect(&lt;#Mode#&gt;, &lt;#Indirect#&gt;)</string>
		<string>gl:drawArraysIndirect(Mode, Indirect) -&gt; ok</string>
		<string>gl:drawElementsIndirect</string>
		<string>gl:drawElementsIndirect(&lt;#Mode#&gt;, &lt;#Type#&gt;, &lt;#Indirect#&gt;)</string>
		<string>gl:drawElementsIndirect(Mode, Type, Indirect) -&gt; ok</string>
		<string>gl:uniform1d</string>
		<string>gl:uniform1d(&lt;#Location#&gt;, &lt;#X#&gt;)</string>
		<string>gl:uniform1d(Location, X) -&gt; ok</string>
		<string>gl:uniform2d</string>
		<string>gl:uniform2d(&lt;#Location#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:uniform2d(Location, X, Y) -&gt; ok</string>
		<string>gl:uniform3d</string>
		<string>gl:uniform3d(&lt;#Location#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:uniform3d(Location, X, Y, Z) -&gt; ok</string>
		<string>gl:uniform4d</string>
		<string>gl:uniform4d(&lt;#Location#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:uniform4d(Location, X, Y, Z, W) -&gt; ok</string>
		<string>gl:uniform1dv</string>
		<string>gl:uniform1dv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform1dv(Location, Value) -&gt; ok</string>
		<string>gl:uniform2dv</string>
		<string>gl:uniform2dv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform2dv(Location, Value) -&gt; ok</string>
		<string>gl:uniform3dv</string>
		<string>gl:uniform3dv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform3dv(Location, Value) -&gt; ok</string>
		<string>gl:uniform4dv</string>
		<string>gl:uniform4dv(&lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniform4dv(Location, Value) -&gt; ok</string>
		<string>gl:uniformMatrix2dv</string>
		<string>gl:uniformMatrix2dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix2dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix3dv</string>
		<string>gl:uniformMatrix3dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix3dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix4dv</string>
		<string>gl:uniformMatrix4dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix4dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix2x3dv</string>
		<string>gl:uniformMatrix2x3dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix2x3dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix2x4dv</string>
		<string>gl:uniformMatrix2x4dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix2x4dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix3x2dv</string>
		<string>gl:uniformMatrix3x2dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix3x2dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix3x4dv</string>
		<string>gl:uniformMatrix3x4dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix3x4dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix4x2dv</string>
		<string>gl:uniformMatrix4x2dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix4x2dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:uniformMatrix4x3dv</string>
		<string>gl:uniformMatrix4x3dv(&lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:uniformMatrix4x3dv(Location, Transpose, Value) -&gt; ok</string>
		<string>gl:getUniformdv</string>
		<string>gl:getUniformdv(&lt;#Program#&gt;, &lt;#Location#&gt;)</string>
		<string>gl:getUniformdv(Program, Location) -&gt; matrix()</string>
		<string>gl:getSubroutineUniformLocation</string>
		<string>gl:getSubroutineUniformLocation(&lt;#Program#&gt;, &lt;#Shadertype#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:getSubroutineUniformLocation(Program, Shadertype, Name) -&gt; integer()</string>
		<string>gl:getSubroutineIndex</string>
		<string>gl:getSubroutineIndex(&lt;#Program#&gt;, &lt;#Shadertype#&gt;, &lt;#Name#&gt;)</string>
		<string>gl:getSubroutineIndex(Program, Shadertype, Name) -&gt; integer()</string>
		<string>gl:getActiveSubroutineUniformName</string>
		<string>gl:getActiveSubroutineUniformName(&lt;#Program#&gt;, &lt;#Shadertype#&gt;, &lt;#Index#&gt;, &lt;#Bufsize#&gt;)</string>
		<string>gl:getActiveSubroutineUniformName(Program, Shadertype, Index, Bufsize) -&gt; string()</string>
		<string>gl:getActiveSubroutineName</string>
		<string>gl:getActiveSubroutineName(&lt;#Program#&gt;, &lt;#Shadertype#&gt;, &lt;#Index#&gt;, &lt;#Bufsize#&gt;)</string>
		<string>gl:getActiveSubroutineName(Program, Shadertype, Index, Bufsize) -&gt; string()</string>
		<string>gl:uniformSubroutinesuiv</string>
		<string>gl:uniformSubroutinesuiv(&lt;#Shadertype#&gt;, &lt;#Indices#&gt;)</string>
		<string>gl:uniformSubroutinesuiv(Shadertype, Indices) -&gt; ok</string>
		<string>gl:getUniformSubroutineuiv</string>
		<string>gl:getUniformSubroutineuiv(&lt;#Shadertype#&gt;, &lt;#Location#&gt;)</string>
		<string>gl:getUniformSubroutineuiv(Shadertype, Location) -&gt; {integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer(), integer()}</string>
		<string>gl:getProgramStageiv</string>
		<string>gl:getProgramStageiv(&lt;#Program#&gt;, &lt;#Shadertype#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getProgramStageiv(Program, Shadertype, Pname) -&gt; integer()</string>
		<string>gl:patchParameteri</string>
		<string>gl:patchParameteri(&lt;#Pname#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:patchParameteri(Pname, Value) -&gt; ok</string>
		<string>gl:patchParameterfv</string>
		<string>gl:patchParameterfv(&lt;#Pname#&gt;, &lt;#Values#&gt;)</string>
		<string>gl:patchParameterfv(Pname, Values) -&gt; ok</string>
		<string>gl:bindTransformFeedback</string>
		<string>gl:bindTransformFeedback(&lt;#Target#&gt;, &lt;#Id#&gt;)</string>
		<string>gl:bindTransformFeedback(Target, Id) -&gt; ok</string>
		<string>gl:deleteTransformFeedbacks</string>
		<string>gl:deleteTransformFeedbacks(&lt;#Ids#&gt;)</string>
		<string>gl:deleteTransformFeedbacks(Ids) -&gt; ok</string>
		<string>gl:genTransformFeedbacks</string>
		<string>gl:genTransformFeedbacks(&lt;#N#&gt;)</string>
		<string>gl:genTransformFeedbacks(N) -&gt; [integer()]</string>
		<string>gl:isTransformFeedback</string>
		<string>gl:isTransformFeedback(&lt;#Id#&gt;)</string>
		<string>gl:isTransformFeedback(Id) -&gt; 0 | 1</string>
		<string>gl:pauseTransformFeedback</string>
		<string>gl:pauseTransformFeedback()</string>
		<string>gl:pauseTransformFeedback() -&gt; ok</string>
		<string>gl:resumeTransformFeedback</string>
		<string>gl:resumeTransformFeedback()</string>
		<string>gl:resumeTransformFeedback() -&gt; ok</string>
		<string>gl:drawTransformFeedback</string>
		<string>gl:drawTransformFeedback(&lt;#Mode#&gt;, &lt;#Id#&gt;)</string>
		<string>gl:drawTransformFeedback(Mode, Id) -&gt; ok</string>
		<string>gl:drawTransformFeedbackStream</string>
		<string>gl:drawTransformFeedbackStream(&lt;#Mode#&gt;, &lt;#Id#&gt;, &lt;#Stream#&gt;)</string>
		<string>gl:drawTransformFeedbackStream(Mode, Id, Stream) -&gt; ok</string>
		<string>gl:beginQueryIndexed</string>
		<string>gl:beginQueryIndexed(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#Id#&gt;)</string>
		<string>gl:beginQueryIndexed(Target, Index, Id) -&gt; ok</string>
		<string>gl:endQueryIndexed</string>
		<string>gl:endQueryIndexed(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:endQueryIndexed(Target, Index) -&gt; ok</string>
		<string>gl:getQueryIndexediv</string>
		<string>gl:getQueryIndexediv(&lt;#Target#&gt;, &lt;#Index#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getQueryIndexediv(Target, Index, Pname) -&gt; integer()</string>
		<string>gl:releaseShaderCompiler</string>
		<string>gl:releaseShaderCompiler()</string>
		<string>gl:releaseShaderCompiler() -&gt; ok</string>
		<string>gl:shaderBinary</string>
		<string>gl:shaderBinary(&lt;#Shaders#&gt;, &lt;#Binaryformat#&gt;, &lt;#Binary#&gt;)</string>
		<string>gl:shaderBinary(Shaders, Binaryformat, Binary) -&gt; ok</string>
		<string>gl:getShaderPrecisionFormat</string>
		<string>gl:getShaderPrecisionFormat(&lt;#Shadertype#&gt;, &lt;#Precisiontype#&gt;)</string>
		<string>gl:getShaderPrecisionFormat(Shadertype, Precisiontype) -&gt; {Range::{integer(), integer()}, Precision::integer()}</string>
		<string>gl:depthRangef</string>
		<string>gl:depthRangef(&lt;#N#&gt;, &lt;#F#&gt;)</string>
		<string>gl:depthRangef(N, F) -&gt; ok</string>
		<string>gl:clearDepthf</string>
		<string>gl:clearDepthf(&lt;#D#&gt;)</string>
		<string>gl:clearDepthf(D) -&gt; ok</string>
		<string>gl:getProgramBinary</string>
		<string>gl:getProgramBinary(&lt;#Program#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getProgramBinary(Program, BufSize) -&gt; {BinaryFormat::enum(), Binary::binary()}</string>
		<string>gl:programBinary</string>
		<string>gl:programBinary(&lt;#Program#&gt;, &lt;#BinaryFormat#&gt;, &lt;#Binary#&gt;)</string>
		<string>gl:programBinary(Program, BinaryFormat, Binary) -&gt; ok</string>
		<string>gl:programParameteri</string>
		<string>gl:programParameteri(&lt;#Program#&gt;, &lt;#Pname#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programParameteri(Program, Pname, Value) -&gt; ok</string>
		<string>gl:useProgramStages</string>
		<string>gl:useProgramStages(&lt;#Pipeline#&gt;, &lt;#Stages#&gt;, &lt;#Program#&gt;)</string>
		<string>gl:useProgramStages(Pipeline, Stages, Program) -&gt; ok</string>
		<string>gl:activeShaderProgram</string>
		<string>gl:activeShaderProgram(&lt;#Pipeline#&gt;, &lt;#Program#&gt;)</string>
		<string>gl:activeShaderProgram(Pipeline, Program) -&gt; ok</string>
		<string>gl:createShaderProgramv</string>
		<string>gl:createShaderProgramv(&lt;#Type#&gt;, &lt;#Strings#&gt;)</string>
		<string>gl:createShaderProgramv(Type, Strings) -&gt; integer()</string>
		<string>gl:bindProgramPipeline</string>
		<string>gl:bindProgramPipeline(&lt;#Pipeline#&gt;)</string>
		<string>gl:bindProgramPipeline(Pipeline) -&gt; ok</string>
		<string>gl:deleteProgramPipelines</string>
		<string>gl:deleteProgramPipelines(&lt;#Pipelines#&gt;)</string>
		<string>gl:deleteProgramPipelines(Pipelines) -&gt; ok</string>
		<string>gl:genProgramPipelines</string>
		<string>gl:genProgramPipelines(&lt;#N#&gt;)</string>
		<string>gl:genProgramPipelines(N) -&gt; [integer()]</string>
		<string>gl:isProgramPipeline</string>
		<string>gl:isProgramPipeline(&lt;#Pipeline#&gt;)</string>
		<string>gl:isProgramPipeline(Pipeline) -&gt; 0 | 1</string>
		<string>gl:getProgramPipelineiv</string>
		<string>gl:getProgramPipelineiv(&lt;#Pipeline#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getProgramPipelineiv(Pipeline, Pname) -&gt; integer()</string>
		<string>gl:programUniform1i</string>
		<string>gl:programUniform1i(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;)</string>
		<string>gl:programUniform1i(Program, Location, V0) -&gt; ok</string>
		<string>gl:programUniform1iv</string>
		<string>gl:programUniform1iv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform1iv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform1f</string>
		<string>gl:programUniform1f(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;)</string>
		<string>gl:programUniform1f(Program, Location, V0) -&gt; ok</string>
		<string>gl:programUniform1fv</string>
		<string>gl:programUniform1fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform1fv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform1d</string>
		<string>gl:programUniform1d(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;)</string>
		<string>gl:programUniform1d(Program, Location, V0) -&gt; ok</string>
		<string>gl:programUniform1dv</string>
		<string>gl:programUniform1dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform1dv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform1ui</string>
		<string>gl:programUniform1ui(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;)</string>
		<string>gl:programUniform1ui(Program, Location, V0) -&gt; ok</string>
		<string>gl:programUniform1uiv</string>
		<string>gl:programUniform1uiv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform1uiv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform2i</string>
		<string>gl:programUniform2i(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;)</string>
		<string>gl:programUniform2i(Program, Location, V0, V1) -&gt; ok</string>
		<string>gl:programUniform2iv</string>
		<string>gl:programUniform2iv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform2iv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform2f</string>
		<string>gl:programUniform2f(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;)</string>
		<string>gl:programUniform2f(Program, Location, V0, V1) -&gt; ok</string>
		<string>gl:programUniform2fv</string>
		<string>gl:programUniform2fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform2fv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform2d</string>
		<string>gl:programUniform2d(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;)</string>
		<string>gl:programUniform2d(Program, Location, V0, V1) -&gt; ok</string>
		<string>gl:programUniform2dv</string>
		<string>gl:programUniform2dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform2dv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform2ui</string>
		<string>gl:programUniform2ui(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;)</string>
		<string>gl:programUniform2ui(Program, Location, V0, V1) -&gt; ok</string>
		<string>gl:programUniform2uiv</string>
		<string>gl:programUniform2uiv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform2uiv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform3i</string>
		<string>gl:programUniform3i(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:programUniform3i(Program, Location, V0, V1, V2) -&gt; ok</string>
		<string>gl:programUniform3iv</string>
		<string>gl:programUniform3iv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform3iv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform3f</string>
		<string>gl:programUniform3f(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:programUniform3f(Program, Location, V0, V1, V2) -&gt; ok</string>
		<string>gl:programUniform3fv</string>
		<string>gl:programUniform3fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform3fv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform3d</string>
		<string>gl:programUniform3d(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:programUniform3d(Program, Location, V0, V1, V2) -&gt; ok</string>
		<string>gl:programUniform3dv</string>
		<string>gl:programUniform3dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform3dv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform3ui</string>
		<string>gl:programUniform3ui(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;)</string>
		<string>gl:programUniform3ui(Program, Location, V0, V1, V2) -&gt; ok</string>
		<string>gl:programUniform3uiv</string>
		<string>gl:programUniform3uiv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform3uiv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform4i</string>
		<string>gl:programUniform4i(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#V3#&gt;)</string>
		<string>gl:programUniform4i(Program, Location, V0, V1, V2, V3) -&gt; ok</string>
		<string>gl:programUniform4iv</string>
		<string>gl:programUniform4iv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform4iv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform4f</string>
		<string>gl:programUniform4f(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#V3#&gt;)</string>
		<string>gl:programUniform4f(Program, Location, V0, V1, V2, V3) -&gt; ok</string>
		<string>gl:programUniform4fv</string>
		<string>gl:programUniform4fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform4fv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform4d</string>
		<string>gl:programUniform4d(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#V3#&gt;)</string>
		<string>gl:programUniform4d(Program, Location, V0, V1, V2, V3) -&gt; ok</string>
		<string>gl:programUniform4dv</string>
		<string>gl:programUniform4dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform4dv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniform4ui</string>
		<string>gl:programUniform4ui(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#V0#&gt;, &lt;#V1#&gt;, &lt;#V2#&gt;, &lt;#V3#&gt;)</string>
		<string>gl:programUniform4ui(Program, Location, V0, V1, V2, V3) -&gt; ok</string>
		<string>gl:programUniform4uiv</string>
		<string>gl:programUniform4uiv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniform4uiv(Program, Location, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix2fv</string>
		<string>gl:programUniformMatrix2fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix2fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix3fv</string>
		<string>gl:programUniformMatrix3fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix3fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix4fv</string>
		<string>gl:programUniformMatrix4fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix4fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix2dv</string>
		<string>gl:programUniformMatrix2dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix2dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix3dv</string>
		<string>gl:programUniformMatrix3dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix3dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix4dv</string>
		<string>gl:programUniformMatrix4dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix4dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix2x3fv</string>
		<string>gl:programUniformMatrix2x3fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix2x3fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix3x2fv</string>
		<string>gl:programUniformMatrix3x2fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix3x2fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix2x4fv</string>
		<string>gl:programUniformMatrix2x4fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix2x4fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix4x2fv</string>
		<string>gl:programUniformMatrix4x2fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix4x2fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix3x4fv</string>
		<string>gl:programUniformMatrix3x4fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix3x4fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix4x3fv</string>
		<string>gl:programUniformMatrix4x3fv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix4x3fv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix2x3dv</string>
		<string>gl:programUniformMatrix2x3dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix2x3dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix3x2dv</string>
		<string>gl:programUniformMatrix3x2dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix3x2dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix2x4dv</string>
		<string>gl:programUniformMatrix2x4dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix2x4dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix4x2dv</string>
		<string>gl:programUniformMatrix4x2dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix4x2dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix3x4dv</string>
		<string>gl:programUniformMatrix3x4dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix3x4dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:programUniformMatrix4x3dv</string>
		<string>gl:programUniformMatrix4x3dv(&lt;#Program#&gt;, &lt;#Location#&gt;, &lt;#Transpose#&gt;, &lt;#Value#&gt;)</string>
		<string>gl:programUniformMatrix4x3dv(Program, Location, Transpose, Value) -&gt; ok</string>
		<string>gl:validateProgramPipeline</string>
		<string>gl:validateProgramPipeline(&lt;#Pipeline#&gt;)</string>
		<string>gl:validateProgramPipeline(Pipeline) -&gt; ok</string>
		<string>gl:getProgramPipelineInfoLog</string>
		<string>gl:getProgramPipelineInfoLog(&lt;#Pipeline#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getProgramPipelineInfoLog(Pipeline, BufSize) -&gt; string()</string>
		<string>gl:vertexAttribL1d</string>
		<string>gl:vertexAttribL1d(&lt;#Index#&gt;, &lt;#X#&gt;)</string>
		<string>gl:vertexAttribL1d(Index, X) -&gt; ok</string>
		<string>gl:vertexAttribL2d</string>
		<string>gl:vertexAttribL2d(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>gl:vertexAttribL2d(Index, X, Y) -&gt; ok</string>
		<string>gl:vertexAttribL3d</string>
		<string>gl:vertexAttribL3d(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>gl:vertexAttribL3d(Index, X, Y, Z) -&gt; ok</string>
		<string>gl:vertexAttribL4d</string>
		<string>gl:vertexAttribL4d(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#W#&gt;)</string>
		<string>gl:vertexAttribL4d(Index, X, Y, Z, W) -&gt; ok</string>
		<string>gl:vertexAttribL1dv</string>
		<string>gl:vertexAttribL1dv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribL1dv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribL2dv</string>
		<string>gl:vertexAttribL2dv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribL2dv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribL3dv</string>
		<string>gl:vertexAttribL3dv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribL3dv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribL4dv</string>
		<string>gl:vertexAttribL4dv(&lt;#Index::integer()#&gt;, &lt;#V#&gt;)</string>
		<string>gl:vertexAttribL4dv(Index::integer(), V) -&gt; ok</string>
		<string>gl:vertexAttribLPointer</string>
		<string>gl:vertexAttribLPointer(&lt;#Index#&gt;, &lt;#Size#&gt;, &lt;#Type#&gt;, &lt;#Stride#&gt;, &lt;#Pointer#&gt;)</string>
		<string>gl:vertexAttribLPointer(Index, Size, Type, Stride, Pointer) -&gt; ok</string>
		<string>gl:getVertexAttribLdv</string>
		<string>gl:getVertexAttribLdv(&lt;#Index#&gt;, &lt;#Pname#&gt;)</string>
		<string>gl:getVertexAttribLdv(Index, Pname) -&gt; {float(), float(), float(), float()}</string>
		<string>gl:viewportArrayv</string>
		<string>gl:viewportArrayv(&lt;#First#&gt;, &lt;#V#&gt;)</string>
		<string>gl:viewportArrayv(First, V) -&gt; ok</string>
		<string>gl:viewportIndexedf</string>
		<string>gl:viewportIndexedf(&lt;#Index#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>gl:viewportIndexedf(Index, X, Y, W, H) -&gt; ok</string>
		<string>gl:viewportIndexedfv</string>
		<string>gl:viewportIndexedfv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:viewportIndexedfv(Index, V) -&gt; ok</string>
		<string>gl:scissorArrayv</string>
		<string>gl:scissorArrayv(&lt;#First#&gt;, &lt;#V#&gt;)</string>
		<string>gl:scissorArrayv(First, V) -&gt; ok</string>
		<string>gl:scissorIndexed</string>
		<string>gl:scissorIndexed(&lt;#Index#&gt;, &lt;#Left#&gt;, &lt;#Bottom#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:scissorIndexed(Index, Left, Bottom, Width, Height) -&gt; ok</string>
		<string>gl:scissorIndexedv</string>
		<string>gl:scissorIndexedv(&lt;#Index#&gt;, &lt;#V#&gt;)</string>
		<string>gl:scissorIndexedv(Index, V) -&gt; ok</string>
		<string>gl:depthRangeArrayv</string>
		<string>gl:depthRangeArrayv(&lt;#First#&gt;, &lt;#V#&gt;)</string>
		<string>gl:depthRangeArrayv(First, V) -&gt; ok</string>
		<string>gl:depthRangeIndexed</string>
		<string>gl:depthRangeIndexed(&lt;#Index#&gt;, &lt;#N#&gt;, &lt;#F#&gt;)</string>
		<string>gl:depthRangeIndexed(Index, N, F) -&gt; ok</string>
		<string>gl:getFloati_v</string>
		<string>gl:getFloati_v(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getFloati_v(Target, Index) -&gt; [float()]</string>
		<string>gl:getDoublei_v</string>
		<string>gl:getDoublei_v(&lt;#Target#&gt;, &lt;#Index#&gt;)</string>
		<string>gl:getDoublei_v(Target, Index) -&gt; [float()]</string>
		<string>gl:debugMessageControlARB</string>
		<string>gl:debugMessageControlARB(&lt;#Source#&gt;, &lt;#Type#&gt;, &lt;#Severity#&gt;, &lt;#Ids#&gt;, &lt;#Enabled#&gt;)</string>
		<string>gl:debugMessageControlARB(Source, Type, Severity, Ids, Enabled) -&gt; ok</string>
		<string>gl:debugMessageInsertARB</string>
		<string>gl:debugMessageInsertARB(&lt;#Source#&gt;, &lt;#Type#&gt;, &lt;#Id#&gt;, &lt;#Severity#&gt;, &lt;#Buf#&gt;)</string>
		<string>gl:debugMessageInsertARB(Source, Type, Id, Severity, Buf) -&gt; ok</string>
		<string>gl:getDebugMessageLogARB</string>
		<string>gl:getDebugMessageLogARB(&lt;#Count#&gt;, &lt;#Bufsize#&gt;)</string>
		<string>gl:getDebugMessageLogARB(Count, Bufsize) -&gt; {integer(), Sources::[enum()], Types::[enum()], Ids::[integer()], Severities::[enum()], MessageLog::[string()]}</string>
		<string>gl:getGraphicsResetStatusARB</string>
		<string>gl:getGraphicsResetStatusARB()</string>
		<string>gl:getGraphicsResetStatusARB() -&gt; enum()</string>
		<string>gl:drawArraysInstancedBaseInstance</string>
		<string>gl:drawArraysInstancedBaseInstance(&lt;#Mode#&gt;, &lt;#First#&gt;, &lt;#Count#&gt;, &lt;#Primcount#&gt;, &lt;#Baseinstance#&gt;)</string>
		<string>gl:drawArraysInstancedBaseInstance(Mode, First, Count, Primcount, Baseinstance) -&gt; ok</string>
		<string>gl:drawElementsInstancedBaseInstance</string>
		<string>gl:drawElementsInstancedBaseInstance(&lt;#Mode#&gt;, &lt;#Count#&gt;, &lt;#Type#&gt;, &lt;#Indices#&gt;, &lt;#Primcount#&gt;, &lt;#Baseinstance#&gt;)</string>
		<string>gl:drawElementsInstancedBaseInstance(Mode, Count, Type, Indices, Primcount, Baseinstance) -&gt; ok</string>
		<string>gl:drawElementsInstancedBaseVertexBaseInstance</string>
		<string>gl:drawElementsInstancedBaseVertexBaseInstance(&lt;#Mode#&gt;, &lt;#Count#&gt;, &lt;#Type#&gt;, &lt;#Indices#&gt;, &lt;#Primcount#&gt;, &lt;#Basevertex#&gt;, &lt;#Baseinstance#&gt;)</string>
		<string>gl:drawElementsInstancedBaseVertexBaseInstance(Mode, Count, Type, Indices, Primcount, Basevertex, Baseinstance) -&gt; ok</string>
		<string>gl:drawTransformFeedbackInstanced</string>
		<string>gl:drawTransformFeedbackInstanced(&lt;#Mode#&gt;, &lt;#Id#&gt;, &lt;#Primcount#&gt;)</string>
		<string>gl:drawTransformFeedbackInstanced(Mode, Id, Primcount) -&gt; ok</string>
		<string>gl:drawTransformFeedbackStreamInstanced</string>
		<string>gl:drawTransformFeedbackStreamInstanced(&lt;#Mode#&gt;, &lt;#Id#&gt;, &lt;#Stream#&gt;, &lt;#Primcount#&gt;)</string>
		<string>gl:drawTransformFeedbackStreamInstanced(Mode, Id, Stream, Primcount) -&gt; ok</string>
		<string>gl:getInternalformativ</string>
		<string>gl:getInternalformativ(&lt;#Target#&gt;, &lt;#Internalformat#&gt;, &lt;#Pname#&gt;, &lt;#BufSize#&gt;)</string>
		<string>gl:getInternalformativ(Target, Internalformat, Pname, BufSize) -&gt; [integer()]</string>
		<string>gl:bindImageTexture</string>
		<string>gl:bindImageTexture(&lt;#Unit#&gt;, &lt;#Texture#&gt;, &lt;#Level#&gt;, &lt;#Layered#&gt;, &lt;#Layer#&gt;, &lt;#Access#&gt;, &lt;#Format#&gt;)</string>
		<string>gl:bindImageTexture(Unit, Texture, Level, Layered, Layer, Access, Format) -&gt; ok</string>
		<string>gl:memoryBarrier</string>
		<string>gl:memoryBarrier(&lt;#Barriers#&gt;)</string>
		<string>gl:memoryBarrier(Barriers) -&gt; ok</string>
		<string>gl:texStorage1D</string>
		<string>gl:texStorage1D(&lt;#Target#&gt;, &lt;#Levels#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;)</string>
		<string>gl:texStorage1D(Target, Levels, Internalformat, Width) -&gt; ok</string>
		<string>gl:texStorage2D</string>
		<string>gl:texStorage2D(&lt;#Target#&gt;, &lt;#Levels#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>gl:texStorage2D(Target, Levels, Internalformat, Width, Height) -&gt; ok</string>
		<string>gl:texStorage3D</string>
		<string>gl:texStorage3D(&lt;#Target#&gt;, &lt;#Levels#&gt;, &lt;#Internalformat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Depth#&gt;)</string>
		<string>gl:texStorage3D(Target, Levels, Internalformat, Width, Height, Depth) -&gt; ok</string>
		<string>gl:depthBoundsEXT</string>
		<string>gl:depthBoundsEXT(&lt;#Zmin#&gt;, &lt;#Zmax#&gt;)</string>
		<string>gl:depthBoundsEXT(Zmin, Zmax) -&gt; ok</string>
		<string>gl:stencilClearTagEXT</string>
		<string>gl:stencilClearTagEXT(&lt;#StencilTagBits#&gt;, &lt;#StencilClearTag#&gt;)</string>
		<string>gl:stencilClearTagEXT(StencilTagBits, StencilClearTag) -&gt; ok</string>
		<string>global:code_change</string>
		<string>global:code_change(&lt;#OldVsn :: term()#&gt;, &lt;#S :: state()#&gt;, &lt;#Extra :: term()#&gt;)</string>
		<string>global:code_change(OldVsn :: term(), S :: state(), Extra :: term()) -&gt; {ok, state()}</string>
		<string>global:del_lock</string>
		<string>global:del_lock(&lt;#Id#&gt;)</string>
		<string>global:del_lock(Id) -&gt; true</string>
		<string>global:del_lock</string>
		<string>global:del_lock(&lt;#Id#&gt;, &lt;#Nodes#&gt;)</string>
		<string>global:del_lock(Id, Nodes) -&gt; true</string>
		<string>global:handle_call</string>
		<string>global:handle_call(&lt;#Request :: term()#&gt;, &lt;#From :: {pid()#&gt;, &lt;#term()}#&gt;, &lt;#S :: state()#&gt;)</string>
		<string>global:handle_call(Request :: term(), From :: {pid(), term()}, S :: state()) -&gt; {noreply, state()} | {reply, term(), state()} | {stop, normal, stopped, state()}</string>
		<string>global:handle_cast</string>
		<string>global:handle_cast(&lt;#Request :: term()#&gt;, &lt;#S :: state()#&gt;)</string>
		<string>global:handle_cast(Request :: term(), S :: state()) -&gt; {noreply, state()}</string>
		<string>global:handle_info</string>
		<string>global:handle_info(&lt;#Exit :: term()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>global:handle_info(Exit :: term(), State :: state()) -&gt; {noreply, state()} | {stop, term(), state()}</string>
		<string>global:init</string>
		<string>global:init(&lt;#X1 :: []#&gt;)</string>
		<string>global:init(X1 :: []) -&gt; {ok, state()}</string>
		<string>global:notify_all_name</string>
		<string>global:notify_all_name(&lt;#Name#&gt;, &lt;#Pid1#&gt;, &lt;#Pid2#&gt;)</string>
		<string>global:notify_all_name(Name, Pid1, Pid2) -&gt; none</string>
		<string>global:random_exit_name</string>
		<string>global:random_exit_name(&lt;#Name#&gt;, &lt;#Pid1#&gt;, &lt;#Pid2#&gt;)</string>
		<string>global:random_exit_name(Name, Pid1, Pid2) -&gt; pid()</string>
		<string>global:random_notify_name</string>
		<string>global:random_notify_name(&lt;#Name#&gt;, &lt;#Pid1#&gt;, &lt;#Pid2#&gt;)</string>
		<string>global:random_notify_name(Name, Pid1, Pid2) -&gt; pid()</string>
		<string>global:re_register_name</string>
		<string>global:re_register_name(&lt;#Name#&gt;, &lt;#Pid#&gt;)</string>
		<string>global:re_register_name(Name, Pid) -&gt; yes</string>
		<string>global:re_register_name</string>
		<string>global:re_register_name(&lt;#Name#&gt;, &lt;#Pid#&gt;, &lt;#Resolve#&gt;)</string>
		<string>global:re_register_name(Name, Pid, Resolve) -&gt; yes</string>
		<string>global:register_name</string>
		<string>global:register_name(&lt;#Name#&gt;, &lt;#Pid#&gt;)</string>
		<string>global:register_name(Name, Pid) -&gt; yes | no</string>
		<string>global:register_name</string>
		<string>global:register_name(&lt;#Name#&gt;, &lt;#Pid#&gt;, &lt;#Resolve#&gt;)</string>
		<string>global:register_name(Name, Pid, Resolve) -&gt; yes | no</string>
		<string>global:registered_names</string>
		<string>global:registered_names()</string>
		<string>global:registered_names() -&gt; [Name]</string>
		<string>global:send</string>
		<string>global:send(&lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>global:send(Name, Msg) -&gt; Pid</string>
		<string>global:set_lock</string>
		<string>global:set_lock(&lt;#Id#&gt;)</string>
		<string>global:set_lock(Id) -&gt; boolean()</string>
		<string>global:set_lock</string>
		<string>global:set_lock(&lt;#Id#&gt;, &lt;#Nodes#&gt;)</string>
		<string>global:set_lock(Id, Nodes) -&gt; boolean()</string>
		<string>global:set_lock</string>
		<string>global:set_lock(&lt;#Id#&gt;, &lt;#Nodes#&gt;, &lt;#Retries#&gt;)</string>
		<string>global:set_lock(Id, Nodes, Retries) -&gt; boolean()</string>
		<string>global:sync</string>
		<string>global:sync()</string>
		<string>global:sync() -&gt; ok | {error, Reason :: term()}</string>
		<string>global:sync</string>
		<string>global:sync(&lt;#Nodes :: [node()]#&gt;)</string>
		<string>global:sync(Nodes :: [node()]) -&gt; ok | {error, Reason :: term()}</string>
		<string>global:terminate</string>
		<string>global:terminate(&lt;#Reason :: term()#&gt;, &lt;#S :: state()#&gt;)</string>
		<string>global:terminate(Reason :: term(), S :: state()) -&gt; ok</string>
		<string>global:trans</string>
		<string>global:trans(&lt;#Id#&gt;, &lt;#Fun#&gt;)</string>
		<string>global:trans(Id, Fun) -&gt; Res | aborted</string>
		<string>global:trans</string>
		<string>global:trans(&lt;#Id#&gt;, &lt;#Fun#&gt;, &lt;#Nodes#&gt;)</string>
		<string>global:trans(Id, Fun, Nodes) -&gt; Res | aborted</string>
		<string>global:trans</string>
		<string>global:trans(&lt;#Id#&gt;, &lt;#Fun#&gt;, &lt;#Nodes#&gt;, &lt;#Retries#&gt;)</string>
		<string>global:trans(Id, Fun, Nodes, Retries) -&gt; Res | aborted</string>
		<string>global:unregister_name</string>
		<string>global:unregister_name(&lt;#Name#&gt;)</string>
		<string>global:unregister_name(Name) -&gt; term()</string>
		<string>global:whereis_name</string>
		<string>global:whereis_name(&lt;#Name#&gt;)</string>
		<string>global:whereis_name(Name) -&gt; pid() | undefined</string>
		<string>global_group:global_groups</string>
		<string>global_group:global_groups()</string>
		<string>global_group:global_groups() -&gt; {GroupName, GroupNames} | undefined</string>
		<string>global_group:info</string>
		<string>global_group:info()</string>
		<string>global_group:info() -&gt; [info_item()]</string>
		<string>global_group:monitor_nodes</string>
		<string>global_group:monitor_nodes(&lt;#Flag#&gt;)</string>
		<string>global_group:monitor_nodes(Flag) -&gt; ok</string>
		<string>global_group:own_nodes</string>
		<string>global_group:own_nodes()</string>
		<string>global_group:own_nodes() -&gt; Nodes</string>
		<string>global_group:registered_names</string>
		<string>global_group:registered_names(&lt;#Where#&gt;)</string>
		<string>global_group:registered_names(Where) -&gt; Names</string>
		<string>global_group:send</string>
		<string>global_group:send(&lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>global_group:send(Name, Msg) -&gt; pid() | {badarg, {Name, Msg}}</string>
		<string>global_group:send</string>
		<string>global_group:send(&lt;#Where#&gt;, &lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>global_group:send(Where, Name, Msg) -&gt; pid() | {badarg, {Name, Msg}}</string>
		<string>global_group:sync</string>
		<string>global_group:sync()</string>
		<string>global_group:sync() -&gt; ok</string>
		<string>global_group:sync_init</string>
		<string>global_group:sync_init(&lt;#Type :: term()#&gt;, &lt;#Cname :: term()#&gt;, &lt;#PubType :: term()#&gt;, &lt;#Nodes :: term()#&gt;)</string>
		<string>global_group:sync_init(Type :: term(), Cname :: term(), PubType :: term(), Nodes :: term()) -&gt; no_return()</string>
		<string>global_group:whereis_name</string>
		<string>global_group:whereis_name(&lt;#Name#&gt;)</string>
		<string>global_group:whereis_name(Name) -&gt; pid() | undefined</string>
		<string>global_group:whereis_name</string>
		<string>global_group:whereis_name(&lt;#Where#&gt;, &lt;#Name#&gt;)</string>
		<string>global_group:whereis_name(Where, Name) -&gt; pid() | undefined</string>
		<string>glu:tesselate</string>
		<string>glu:tesselate(&lt;#Normal#&gt;, &lt;#Vs::[Vs]#&gt;)</string>
		<string>glu:tesselate(Normal, Vs::[Vs]) -&gt; {Triangles, VertexPos}</string>
		<string>glu:build1DMipmapLevels</string>
		<string>glu:build1DMipmapLevels(&lt;#Target#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Level#&gt;, &lt;#Base#&gt;, &lt;#Max#&gt;, &lt;#Data#&gt;)</string>
		<string>glu:build1DMipmapLevels(Target, InternalFormat, Width, Format, Type, Level, Base, Max, Data) -&gt; integer()</string>
		<string>glu:build1DMipmaps</string>
		<string>glu:build1DMipmaps(&lt;#Target#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Data#&gt;)</string>
		<string>glu:build1DMipmaps(Target, InternalFormat, Width, Format, Type, Data) -&gt; integer()</string>
		<string>glu:build2DMipmapLevels</string>
		<string>glu:build2DMipmapLevels(&lt;#Target#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Level#&gt;, &lt;#Base#&gt;, &lt;#Max#&gt;, &lt;#Data#&gt;)</string>
		<string>glu:build2DMipmapLevels(Target, InternalFormat, Width, Height, Format, Type, Level, Base, Max, Data) -&gt; integer()</string>
		<string>glu:build2DMipmaps</string>
		<string>glu:build2DMipmaps(&lt;#Target#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Data#&gt;)</string>
		<string>glu:build2DMipmaps(Target, InternalFormat, Width, Height, Format, Type, Data) -&gt; integer()</string>
		<string>glu:build3DMipmapLevels</string>
		<string>glu:build3DMipmapLevels(&lt;#Target#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Depth#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Level#&gt;, &lt;#Base#&gt;, &lt;#Max#&gt;, &lt;#Data#&gt;)</string>
		<string>glu:build3DMipmapLevels(Target, InternalFormat, Width, Height, Depth, Format, Type, Level, Base, Max, Data) -&gt; integer()</string>
		<string>glu:build3DMipmaps</string>
		<string>glu:build3DMipmaps(&lt;#Target#&gt;, &lt;#InternalFormat#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Depth#&gt;, &lt;#Format#&gt;, &lt;#Type#&gt;, &lt;#Data#&gt;)</string>
		<string>glu:build3DMipmaps(Target, InternalFormat, Width, Height, Depth, Format, Type, Data) -&gt; integer()</string>
		<string>glu:checkExtension</string>
		<string>glu:checkExtension(&lt;#ExtName#&gt;, &lt;#ExtString#&gt;)</string>
		<string>glu:checkExtension(ExtName, ExtString) -&gt; 0 | 1</string>
		<string>glu:cylinder</string>
		<string>glu:cylinder(&lt;#Quad#&gt;, &lt;#Base#&gt;, &lt;#Top#&gt;, &lt;#Height#&gt;, &lt;#Slices#&gt;, &lt;#Stacks#&gt;)</string>
		<string>glu:cylinder(Quad, Base, Top, Height, Slices, Stacks) -&gt; ok</string>
		<string>glu:deleteQuadric</string>
		<string>glu:deleteQuadric(&lt;#Quad#&gt;)</string>
		<string>glu:deleteQuadric(Quad) -&gt; ok</string>
		<string>glu:disk</string>
		<string>glu:disk(&lt;#Quad#&gt;, &lt;#Inner#&gt;, &lt;#Outer#&gt;, &lt;#Slices#&gt;, &lt;#Loops#&gt;)</string>
		<string>glu:disk(Quad, Inner, Outer, Slices, Loops) -&gt; ok</string>
		<string>glu:errorString</string>
		<string>glu:errorString(&lt;#Error#&gt;)</string>
		<string>glu:errorString(Error) -&gt; string()</string>
		<string>glu:getString</string>
		<string>glu:getString(&lt;#Name#&gt;)</string>
		<string>glu:getString(Name) -&gt; string()</string>
		<string>glu:lookAt</string>
		<string>glu:lookAt(&lt;#EyeX#&gt;, &lt;#EyeY#&gt;, &lt;#EyeZ#&gt;, &lt;#CenterX#&gt;, &lt;#CenterY#&gt;, &lt;#CenterZ#&gt;, &lt;#UpX#&gt;, &lt;#UpY#&gt;, &lt;#UpZ#&gt;)</string>
		<string>glu:lookAt(EyeX, EyeY, EyeZ, CenterX, CenterY, CenterZ, UpX, UpY, UpZ) -&gt; ok</string>
		<string>glu:newQuadric</string>
		<string>glu:newQuadric()</string>
		<string>glu:newQuadric() -&gt; integer()</string>
		<string>glu:ortho2D</string>
		<string>glu:ortho2D(&lt;#Left#&gt;, &lt;#Right#&gt;, &lt;#Bottom#&gt;, &lt;#Top#&gt;)</string>
		<string>glu:ortho2D(Left, Right, Bottom, Top) -&gt; ok</string>
		<string>glu:partialDisk</string>
		<string>glu:partialDisk(&lt;#Quad#&gt;, &lt;#Inner#&gt;, &lt;#Outer#&gt;, &lt;#Slices#&gt;, &lt;#Loops#&gt;, &lt;#Start#&gt;, &lt;#Sweep#&gt;)</string>
		<string>glu:partialDisk(Quad, Inner, Outer, Slices, Loops, Start, Sweep) -&gt; ok</string>
		<string>glu:perspective</string>
		<string>glu:perspective(&lt;#Fovy#&gt;, &lt;#Aspect#&gt;, &lt;#ZNear#&gt;, &lt;#ZFar#&gt;)</string>
		<string>glu:perspective(Fovy, Aspect, ZNear, ZFar) -&gt; ok</string>
		<string>glu:pickMatrix</string>
		<string>glu:pickMatrix(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#DelX#&gt;, &lt;#DelY#&gt;, &lt;#Viewport#&gt;)</string>
		<string>glu:pickMatrix(X, Y, DelX, DelY, Viewport) -&gt; ok</string>
		<string>glu:project</string>
		<string>glu:project(&lt;#ObjX#&gt;, &lt;#ObjY#&gt;, &lt;#ObjZ#&gt;, &lt;#Model#&gt;, &lt;#Proj#&gt;, &lt;#View#&gt;)</string>
		<string>glu:project(ObjX, ObjY, ObjZ, Model, Proj, View) -&gt; {integer(), WinX::float(), WinY::float(), WinZ::float()}</string>
		<string>glu:quadricDrawStyle</string>
		<string>glu:quadricDrawStyle(&lt;#Quad#&gt;, &lt;#Draw#&gt;)</string>
		<string>glu:quadricDrawStyle(Quad, Draw) -&gt; ok</string>
		<string>glu:quadricNormals</string>
		<string>glu:quadricNormals(&lt;#Quad#&gt;, &lt;#Normal#&gt;)</string>
		<string>glu:quadricNormals(Quad, Normal) -&gt; ok</string>
		<string>glu:quadricOrientation</string>
		<string>glu:quadricOrientation(&lt;#Quad#&gt;, &lt;#Orientation#&gt;)</string>
		<string>glu:quadricOrientation(Quad, Orientation) -&gt; ok</string>
		<string>glu:quadricTexture</string>
		<string>glu:quadricTexture(&lt;#Quad#&gt;, &lt;#Texture#&gt;)</string>
		<string>glu:quadricTexture(Quad, Texture) -&gt; ok</string>
		<string>glu:scaleImage</string>
		<string>glu:scaleImage(&lt;#Format#&gt;, &lt;#WIn#&gt;, &lt;#HIn#&gt;, &lt;#TypeIn#&gt;, &lt;#DataIn#&gt;, &lt;#WOut#&gt;, &lt;#HOut#&gt;, &lt;#TypeOut#&gt;, &lt;#DataOut#&gt;)</string>
		<string>glu:scaleImage(Format, WIn, HIn, TypeIn, DataIn, WOut, HOut, TypeOut, DataOut) -&gt; integer()</string>
		<string>glu:sphere</string>
		<string>glu:sphere(&lt;#Quad#&gt;, &lt;#Radius#&gt;, &lt;#Slices#&gt;, &lt;#Stacks#&gt;)</string>
		<string>glu:sphere(Quad, Radius, Slices, Stacks) -&gt; ok</string>
		<string>glu:unProject</string>
		<string>glu:unProject(&lt;#WinX#&gt;, &lt;#WinY#&gt;, &lt;#WinZ#&gt;, &lt;#Model#&gt;, &lt;#Proj#&gt;, &lt;#View#&gt;)</string>
		<string>glu:unProject(WinX, WinY, WinZ, Model, Proj, View) -&gt; {integer(), ObjX::float(), ObjY::float(), ObjZ::float()}</string>
		<string>glu:unProject4</string>
		<string>glu:unProject4(&lt;#WinX#&gt;, &lt;#WinY#&gt;, &lt;#WinZ#&gt;, &lt;#ClipW#&gt;, &lt;#Model#&gt;, &lt;#Proj#&gt;, &lt;#View#&gt;, &lt;#NearVal#&gt;, &lt;#FarVal#&gt;)</string>
		<string>glu:unProject4(WinX, WinY, WinZ, ClipW, Model, Proj, View, NearVal, FarVal) -&gt; {integer(), ObjX::float(), ObjY::float(), ObjZ::float(), ObjW::float()}</string>
		<string>gs:config</string>
		<string>gs:config(&lt;#GSObj#&gt;, &lt;#Options#&gt;)</string>
		<string>gs:config(GSObj, Options) -&gt; ok</string>
		<string>gs:create</string>
		<string>gs:create(&lt;#ObjType#&gt;, &lt;#Parent#&gt;)</string>
		<string>gs:create(ObjType, Parent) -&gt; ObjId</string>
		<string>gs:create</string>
		<string>gs:create(&lt;#ObjType#&gt;, &lt;#Parent#&gt;, &lt;#Options#&gt;)</string>
		<string>gs:create(ObjType, Parent, Options) -&gt; ObjId</string>
		<string>gs:create</string>
		<string>gs:create(&lt;#ObjType#&gt;, &lt;#Name#&gt;, &lt;#Parent#&gt;, &lt;#Options#&gt;)</string>
		<string>gs:create(ObjType, Name, Parent, Options) -&gt; ObjId</string>
		<string>gs:create_tree</string>
		<string>gs:create_tree(&lt;#Parent#&gt;, &lt;#Tree#&gt;)</string>
		<string>gs:create_tree(Parent, Tree) -&gt; ok</string>
		<string>gs:destroy</string>
		<string>gs:destroy(&lt;#GSObj#&gt;)</string>
		<string>gs:destroy(GSObj) -&gt; void()</string>
		<string>gs:ObjType</string>
		<string>gs:ObjType(&lt;#Parent#&gt;)</string>
		<string>gs:ObjType(Parent)</string>
		<string>gs:ObjType</string>
		<string>gs:ObjType(&lt;#Parent#&gt;, &lt;#Options#&gt;)</string>
		<string>gs:ObjType(Parent, Options)</string>
		<string>gs:ObjType</string>
		<string>gs:ObjType(&lt;#Name#&gt;, &lt;#Parent#&gt;, &lt;#Options#&gt;)</string>
		<string>gs:ObjType(Name, Parent, Options)</string>
		<string>gs:read</string>
		<string>gs:read(&lt;#GSObj#&gt;, &lt;#Key#&gt;)</string>
		<string>gs:read(GSObj, Key) -&gt; Value</string>
		<string>gs:start</string>
		<string>gs:start()</string>
		<string>gs:start() -&gt; ObjId</string>
		<string>gs:stop</string>
		<string>gs:stop()</string>
		<string>gs:stop() -&gt; void()</string>
		<string>heart:clear_cmd</string>
		<string>heart:clear_cmd()</string>
		<string>heart:clear_cmd() -&gt; ok</string>
		<string>heart:cycle</string>
		<string>heart:cycle()</string>
		<string>heart:cycle() -&gt; ok | {error, term()}</string>
		<string>heart:get_cmd</string>
		<string>heart:get_cmd()</string>
		<string>heart:get_cmd() -&gt; {ok, Cmd}</string>
		<string>heart:init</string>
		<string>heart:init(&lt;#Starter :: pid()#&gt;, &lt;#Parent :: pid()#&gt;)</string>
		<string>heart:init(Starter :: pid(), Parent :: pid()) -&gt; {no_heart, pid()} | {start_error, pid()}</string>
		<string>heart:set_cmd</string>
		<string>heart:set_cmd(&lt;#Cmd#&gt;)</string>
		<string>heart:set_cmd(Cmd) -&gt; ok | {error, {bad_cmd, Cmd}}</string>
		<string>heart:start</string>
		<string>heart:start()</string>
		<string>heart:start() -&gt; ignore | {error, term()} | {ok, pid()}</string>
		<string>http_uri:scheme_defaults</string>
		<string>http_uri:scheme_defaults()</string>
		<string>http_uri:scheme_defaults() -&gt; SchemeDefaults</string>
		<string>http_uri:parse</string>
		<string>http_uri:parse(&lt;#URI#&gt;)</string>
		<string>http_uri:parse(URI) -&gt; {ok, Result} | {error, Reason}</string>
		<string>http_uri:parse</string>
		<string>http_uri:parse(&lt;#URI#&gt;, &lt;#Options#&gt;)</string>
		<string>http_uri:parse(URI, Options) -&gt; {ok, Result} | {error, Reason}</string>
		<string>http_uri:encode</string>
		<string>http_uri:encode(&lt;#URI#&gt;)</string>
		<string>http_uri:encode(URI) -&gt; HexEncodedURI</string>
		<string>http_uri:decode</string>
		<string>http_uri:decode(&lt;#HexEncodedURI#&gt;)</string>
		<string>http_uri:decode(HexEncodedURI) -&gt; URI</string>
		<string>httpc:request</string>
		<string>httpc:request(&lt;#Url#&gt;)</string>
		<string>httpc:request(Url) -&gt; {ok, Result} | {error, Reason}</string>
		<string>httpc:request</string>
		<string>httpc:request(&lt;#Url#&gt;, &lt;#Profile#&gt;)</string>
		<string>httpc:request(Url, Profile) -&gt; {ok, Result} | {error, Reason}</string>
		<string>httpc:request</string>
		<string>httpc:request(&lt;#Method#&gt;, &lt;#Request#&gt;, &lt;#HTTPOptions#&gt;, &lt;#Options#&gt;)</string>
		<string>httpc:request(Method, Request, HTTPOptions, Options) -&gt; {ok, Result} | {ok, saved_to_file} | {error, Reason}</string>
		<string>httpc:request</string>
		<string>httpc:request(&lt;#Method#&gt;, &lt;#Request#&gt;, &lt;#HTTPOptions#&gt;, &lt;#Options#&gt;, &lt;#Profile#&gt;)</string>
		<string>httpc:request(Method, Request, HTTPOptions, Options, Profile) -&gt; {ok, Result} | {ok, saved_to_file} | {error, Reason}</string>
		<string>httpc:cancel_request</string>
		<string>httpc:cancel_request(&lt;#RequestId#&gt;)</string>
		<string>httpc:cancel_request(RequestId) -&gt; ok</string>
		<string>httpc:cancel_request</string>
		<string>httpc:cancel_request(&lt;#RequestId#&gt;, &lt;#Profile#&gt;)</string>
		<string>httpc:cancel_request(RequestId, Profile) -&gt; ok</string>
		<string>httpc:set_options</string>
		<string>httpc:set_options(&lt;#Options#&gt;)</string>
		<string>httpc:set_options(Options) -&gt; ok | {error, Reason}</string>
		<string>httpc:set_options</string>
		<string>httpc:set_options(&lt;#Options#&gt;, &lt;#Profile#&gt;)</string>
		<string>httpc:set_options(Options, Profile) -&gt; ok | {error, Reason}</string>
		<string>httpc:get_options</string>
		<string>httpc:get_options(&lt;#OptionItems#&gt;)</string>
		<string>httpc:get_options(OptionItems) -&gt; {ok, Values} | {error, Reason}</string>
		<string>httpc:get_options</string>
		<string>httpc:get_options(&lt;#OptionItems#&gt;, &lt;#Profile#&gt;)</string>
		<string>httpc:get_options(OptionItems, Profile) -&gt; {ok, Values} | {error, Reason}</string>
		<string>httpc:stream_next</string>
		<string>httpc:stream_next(&lt;#Pid#&gt;)</string>
		<string>httpc:stream_next(Pid) -&gt; ok</string>
		<string>httpc:store_cookies</string>
		<string>httpc:store_cookies(&lt;#SetCookieHeaders#&gt;, &lt;#Url#&gt;)</string>
		<string>httpc:store_cookies(SetCookieHeaders, Url) -&gt; ok | {error, Reason}</string>
		<string>httpc:store_cookies</string>
		<string>httpc:store_cookies(&lt;#SetCookieHeaders#&gt;, &lt;#Url#&gt;, &lt;#Profile#&gt;)</string>
		<string>httpc:store_cookies(SetCookieHeaders, Url, Profile) -&gt; ok | {error, Reason}</string>
		<string>httpc:cookie_header</string>
		<string>httpc:cookie_header(&lt;#Url#&gt;)</string>
		<string>httpc:cookie_header(Url) -&gt; header() | {error, Reason}</string>
		<string>httpc:cookie_header</string>
		<string>httpc:cookie_header(&lt;#Url#&gt;, &lt;#Profile | Opts#&gt;)</string>
		<string>httpc:cookie_header(Url, Profile | Opts) -&gt; header() | {error, Reason}</string>
		<string>httpc:cookie_header</string>
		<string>httpc:cookie_header(&lt;#Url#&gt;, &lt;#Opts#&gt;, &lt;#Profile#&gt;)</string>
		<string>httpc:cookie_header(Url, Opts, Profile) -&gt; header() | {error, Reason}</string>
		<string>httpc:reset_cookies</string>
		<string>httpc:reset_cookies()</string>
		<string>httpc:reset_cookies() -&gt; void()</string>
		<string>httpc:reset_cookies</string>
		<string>httpc:reset_cookies(&lt;#Profile#&gt;)</string>
		<string>httpc:reset_cookies(Profile) -&gt; void()</string>
		<string>httpc:which_cookies</string>
		<string>httpc:which_cookies()</string>
		<string>httpc:which_cookies() -&gt; cookies()</string>
		<string>httpc:which_cookies</string>
		<string>httpc:which_cookies(&lt;#Profile#&gt;)</string>
		<string>httpc:which_cookies(Profile) -&gt; cookies()</string>
		<string>httpc:which_sessions</string>
		<string>httpc:which_sessions()</string>
		<string>httpc:which_sessions() -&gt; session_info()</string>
		<string>httpc:which_sessions</string>
		<string>httpc:which_sessions(&lt;#Profile#&gt;)</string>
		<string>httpc:which_sessions(Profile) -&gt; session_info()</string>
		<string>httpc:info</string>
		<string>httpc:info()</string>
		<string>httpc:info() -&gt; list()</string>
		<string>httpc:info</string>
		<string>httpc:info(&lt;#Profile#&gt;)</string>
		<string>httpc:info(Profile) -&gt; list()</string>
		<string>httpd:info</string>
		<string>httpd:info(&lt;#Pid#&gt;)</string>
		<string>httpd:info(Pid) -&gt; [{Option, Value}]</string>
		<string>httpd:info</string>
		<string>httpd:info(&lt;#Pid#&gt;, &lt;#Properties#&gt;)</string>
		<string>httpd:info(Pid, Properties) -&gt; [{Option, Value}]</string>
		<string>httpd:info</string>
		<string>httpd:info(&lt;#Address#&gt;, &lt;#Port#&gt;)</string>
		<string>httpd:info(Address, Port) -&gt; [{Option, Value}] </string>
		<string>httpd:info</string>
		<string>httpd:info(&lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Properties#&gt;)</string>
		<string>httpd:info(Address, Port, Properties) -&gt; [{Option, Value}] </string>
		<string>httpd:reload_config</string>
		<string>httpd:reload_config(&lt;#Config#&gt;, &lt;#Mode#&gt;)</string>
		<string>httpd:reload_config(Config, Mode) -&gt; ok | {error, Reason}</string>
		<string>httpd_conf:check_enum</string>
		<string>httpd_conf:check_enum(&lt;#EnumString#&gt;, &lt;#ValidEnumStrings#&gt;)</string>
		<string>httpd_conf:check_enum(EnumString, ValidEnumStrings) -&gt; Result</string>
		<string>httpd_conf:clean</string>
		<string>httpd_conf:clean(&lt;#String#&gt;)</string>
		<string>httpd_conf:clean(String) -&gt; Stripped</string>
		<string>httpd_conf:custom_clean</string>
		<string>httpd_conf:custom_clean(&lt;#String#&gt;, &lt;#Before#&gt;, &lt;#After#&gt;)</string>
		<string>httpd_conf:custom_clean(String, Before, After) -&gt; Stripped</string>
		<string>httpd_conf:is_directory</string>
		<string>httpd_conf:is_directory(&lt;#FilePath#&gt;)</string>
		<string>httpd_conf:is_directory(FilePath) -&gt; Result</string>
		<string>httpd_conf:is_file</string>
		<string>httpd_conf:is_file(&lt;#FilePath#&gt;)</string>
		<string>httpd_conf:is_file(FilePath) -&gt; Result</string>
		<string>httpd_conf:make_integer</string>
		<string>httpd_conf:make_integer(&lt;#String#&gt;)</string>
		<string>httpd_conf:make_integer(String) -&gt; Result</string>
		<string>httpd_socket:deliver</string>
		<string>httpd_socket:deliver(&lt;#SocketType#&gt;, &lt;#Socket#&gt;, &lt;#Data#&gt;)</string>
		<string>httpd_socket:deliver(SocketType, Socket, Data) -&gt; Result</string>
		<string>httpd_socket:peername</string>
		<string>httpd_socket:peername(&lt;#SocketType#&gt;, &lt;#Socket#&gt;)</string>
		<string>httpd_socket:peername(SocketType, Socket) -&gt; {Port, IPAddress}</string>
		<string>httpd_socket:resolve</string>
		<string>httpd_socket:resolve()</string>
		<string>httpd_socket:resolve() -&gt; HostName</string>
		<string>httpd_util:convert_request_date</string>
		<string>httpd_util:convert_request_date(&lt;#DateString#&gt;)</string>
		<string>httpd_util:convert_request_date(DateString) -&gt; ErlDate | bad_date</string>
		<string>httpd_util:create_etag</string>
		<string>httpd_util:create_etag(&lt;#FileInfo#&gt;)</string>
		<string>httpd_util:create_etag(FileInfo) -&gt; Etag</string>
		<string>httpd_util:decode_hex</string>
		<string>httpd_util:decode_hex(&lt;#HexValue#&gt;)</string>
		<string>httpd_util:decode_hex(HexValue) -&gt; DecValue</string>
		<string>httpd_util:day</string>
		<string>httpd_util:day(&lt;#NthDayOfWeek#&gt;)</string>
		<string>httpd_util:day(NthDayOfWeek) -&gt; DayOfWeek</string>
		<string>httpd_util:flatlength</string>
		<string>httpd_util:flatlength(&lt;#NestedList#&gt;)</string>
		<string>httpd_util:flatlength(NestedList) -&gt; Size</string>
		<string>httpd_util:hexlist_to_integer</string>
		<string>httpd_util:hexlist_to_integer(&lt;#HexString#&gt;)</string>
		<string>httpd_util:hexlist_to_integer(HexString) -&gt; Number</string>
		<string>httpd_util:integer_to_hexlist</string>
		<string>httpd_util:integer_to_hexlist(&lt;#Number#&gt;)</string>
		<string>httpd_util:integer_to_hexlist(Number) -&gt; HexString</string>
		<string>httpd_util:lookup</string>
		<string>httpd_util:lookup(&lt;#ETSTable#&gt;, &lt;#Key#&gt;)</string>
		<string>httpd_util:lookup(ETSTable, Key) -&gt; Result</string>
		<string>httpd_util:lookup</string>
		<string>httpd_util:lookup(&lt;#ETSTable#&gt;, &lt;#Key#&gt;, &lt;#Undefined#&gt;)</string>
		<string>httpd_util:lookup(ETSTable, Key, Undefined) -&gt; Result</string>
		<string>httpd_util:lookup_mime</string>
		<string>httpd_util:lookup_mime(&lt;#ConfigDB#&gt;, &lt;#Suffix#&gt;)</string>
		<string>httpd_util:lookup_mime(ConfigDB, Suffix) -&gt; MimeType</string>
		<string>httpd_util:lookup_mime</string>
		<string>httpd_util:lookup_mime(&lt;#ConfigDB#&gt;, &lt;#Suffix#&gt;, &lt;#Undefined#&gt;)</string>
		<string>httpd_util:lookup_mime(ConfigDB, Suffix, Undefined) -&gt; MimeType</string>
		<string>httpd_util:lookup_mime_default</string>
		<string>httpd_util:lookup_mime_default(&lt;#ConfigDB#&gt;, &lt;#Suffix#&gt;)</string>
		<string>httpd_util:lookup_mime_default(ConfigDB, Suffix) -&gt; MimeType</string>
		<string>httpd_util:lookup_mime_default</string>
		<string>httpd_util:lookup_mime_default(&lt;#ConfigDB#&gt;, &lt;#Suffix#&gt;, &lt;#Undefined#&gt;)</string>
		<string>httpd_util:lookup_mime_default(ConfigDB, Suffix, Undefined) -&gt; MimeType</string>
		<string>httpd_util:message</string>
		<string>httpd_util:message(&lt;#StatusCode#&gt;, &lt;#PhraseArgs#&gt;, &lt;#ConfigDB#&gt;)</string>
		<string>httpd_util:message(StatusCode, PhraseArgs, ConfigDB) -&gt; Message</string>
		<string>httpd_util:month</string>
		<string>httpd_util:month(&lt;#NthMonth#&gt;)</string>
		<string>httpd_util:month(NthMonth) -&gt; Month</string>
		<string>httpd_util:multi_lookup</string>
		<string>httpd_util:multi_lookup(&lt;#ETSTable#&gt;, &lt;#Key#&gt;)</string>
		<string>httpd_util:multi_lookup(ETSTable, Key) -&gt; Result</string>
		<string>httpd_util:reason_phrase</string>
		<string>httpd_util:reason_phrase(&lt;#StatusCode#&gt;)</string>
		<string>httpd_util:reason_phrase(StatusCode) -&gt; Description</string>
		<string>httpd_util:rfc1123_date</string>
		<string>httpd_util:rfc1123_date()</string>
		<string>httpd_util:rfc1123_date() -&gt; RFC1123Date</string>
		<string>httpd_util:rfc1123_date</string>
		<string>httpd_util:rfc1123_date(&lt;#{{YYYY#&gt;, &lt;#MM#&gt;, &lt;#DD}#&gt;, &lt;#{Hour#&gt;, &lt;#Min#&gt;, &lt;#Sec}}#&gt;)</string>
		<string>httpd_util:rfc1123_date({{YYYY, MM, DD}, {Hour, Min, Sec}}) -&gt; RFC1123Date</string>
		<string>httpd_util:split</string>
		<string>httpd_util:split(&lt;#String#&gt;, &lt;#RegExp#&gt;, &lt;#N#&gt;)</string>
		<string>httpd_util:split(String, RegExp, N) -&gt; SplitRes</string>
		<string>httpd_util:split_script_path</string>
		<string>httpd_util:split_script_path(&lt;#RequestLine#&gt;)</string>
		<string>httpd_util:split_script_path(RequestLine) -&gt; Splitted</string>
		<string>httpd_util:split_path</string>
		<string>httpd_util:split_path(&lt;#RequestLine#&gt;)</string>
		<string>httpd_util:split_path(RequestLine) -&gt; {Path, QueryStringOrPathInfo}</string>
		<string>httpd_util:strip</string>
		<string>httpd_util:strip(&lt;#String#&gt;)</string>
		<string>httpd_util:strip(String) -&gt; Stripped</string>
		<string>httpd_util:suffix</string>
		<string>httpd_util:suffix(&lt;#FileName#&gt;)</string>
		<string>httpd_util:suffix(FileName) -&gt; Suffix</string>
		<string>i:im</string>
		<string>i:im()</string>
		<string>i:im() -&gt; pid()</string>
		<string>i:ii</string>
		<string>i:ii(&lt;#AbsModules#&gt;)</string>
		<string>i:ii(AbsModules) -&gt; ok</string>
		<string>i:ii</string>
		<string>i:ii(&lt;#AbsModule#&gt;)</string>
		<string>i:ii(AbsModule) -&gt; {module, Module} | error</string>
		<string>i:ini</string>
		<string>i:ini(&lt;#AbsModules#&gt;)</string>
		<string>i:ini(AbsModules) -&gt; ok</string>
		<string>i:ini</string>
		<string>i:ini(&lt;#AbsModule#&gt;)</string>
		<string>i:ini(AbsModule) -&gt; {module, Module} | error</string>
		<string>i:iq</string>
		<string>i:iq(&lt;#AbsModule#&gt;)</string>
		<string>i:iq(AbsModule) -&gt; ok</string>
		<string>i:inq</string>
		<string>i:inq(&lt;#AbsModule#&gt;)</string>
		<string>i:inq(AbsModule) -&gt; ok</string>
		<string>i:il</string>
		<string>i:il()</string>
		<string>i:il() -&gt; ok</string>
		<string>i:ip</string>
		<string>i:ip()</string>
		<string>i:ip() -&gt; ok</string>
		<string>i:ic</string>
		<string>i:ic()</string>
		<string>i:ic() -&gt; ok</string>
		<string>i:iaa</string>
		<string>i:iaa(&lt;#Flags#&gt;)</string>
		<string>i:iaa(Flags) -&gt; true</string>
		<string>i:iaa</string>
		<string>i:iaa(&lt;#Flags#&gt;, &lt;#Function#&gt;)</string>
		<string>i:iaa(Flags, Function) -&gt; true</string>
		<string>i:ist</string>
		<string>i:ist(&lt;#Flag#&gt;)</string>
		<string>i:ist(Flag) -&gt; true</string>
		<string>i:ia</string>
		<string>i:ia(&lt;#Pid#&gt;)</string>
		<string>i:ia(Pid) -&gt; ok | no_proc</string>
		<string>i:ia</string>
		<string>i:ia(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>i:ia(X, Y, Z) -&gt; ok | no_proc</string>
		<string>i:ia</string>
		<string>i:ia(&lt;#Pid#&gt;, &lt;#Function#&gt;)</string>
		<string>i:ia(Pid, Function) -&gt; ok | no_proc</string>
		<string>i:ia</string>
		<string>i:ia(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;, &lt;#Function#&gt;)</string>
		<string>i:ia(X, Y, Z, Function) -&gt; ok | no_proc</string>
		<string>i:ib</string>
		<string>i:ib(&lt;#Module#&gt;, &lt;#Line#&gt;)</string>
		<string>i:ib(Module, Line) -&gt; ok | {error, break_exists}</string>
		<string>i:ib</string>
		<string>i:ib(&lt;#Module#&gt;, &lt;#Name#&gt;, &lt;#Arity#&gt;)</string>
		<string>i:ib(Module, Name, Arity) -&gt; ok | {error, function_not_found}      </string>
		<string>i:ir</string>
		<string>i:ir()</string>
		<string>i:ir() -&gt; ok</string>
		<string>i:ir</string>
		<string>i:ir(&lt;#Module#&gt;)</string>
		<string>i:ir(Module) -&gt; ok</string>
		<string>i:ir</string>
		<string>i:ir(&lt;#Module#&gt;, &lt;#Line#&gt;)</string>
		<string>i:ir(Module, Line) -&gt; ok</string>
		<string>i:ir</string>
		<string>i:ir(&lt;#Module#&gt;, &lt;#Name#&gt;, &lt;#Arity#&gt;)</string>
		<string>i:ir(Module, Name, Arity) -&gt; ok | {error, function_not_found}      </string>
		<string>i:ibd</string>
		<string>i:ibd(&lt;#Module#&gt;, &lt;#Line#&gt;)</string>
		<string>i:ibd(Module, Line) -&gt; ok</string>
		<string>i:ibe</string>
		<string>i:ibe(&lt;#Module#&gt;, &lt;#Line#&gt;)</string>
		<string>i:ibe(Module, Line) -&gt; ok</string>
		<string>i:iba</string>
		<string>i:iba(&lt;#Module#&gt;, &lt;#Line#&gt;, &lt;#Action#&gt;)</string>
		<string>i:iba(Module, Line, Action) -&gt; ok</string>
		<string>i:ibc</string>
		<string>i:ibc(&lt;#Module#&gt;, &lt;#Line#&gt;, &lt;#Function#&gt;)</string>
		<string>i:ibc(Module, Line, Function) -&gt; ok</string>
		<string>i:ipb</string>
		<string>i:ipb()</string>
		<string>i:ipb() -&gt; ok</string>
		<string>i:ipb</string>
		<string>i:ipb(&lt;#Module#&gt;)</string>
		<string>i:ipb(Module) -&gt; ok</string>
		<string>i:iv</string>
		<string>i:iv()</string>
		<string>i:iv() -&gt; atom()</string>
		<string>i:help</string>
		<string>i:help()</string>
		<string>i:help() -&gt; ok</string>
		<string>ic:ic:gen</string>
		<string>ic:ic:gen(&lt;#FileName#&gt;)</string>
		<string>ic:ic:gen(FileName) -&gt; Result</string>
		<string>ic:ic:gen</string>
		<string>ic:ic:gen(&lt;#FileName#&gt;, &lt;#[Option]#&gt;)</string>
		<string>ic:ic:gen(FileName, [Option]) -&gt; Result</string>
		<string>igor:create_stubs</string>
		<string>igor:create_stubs(&lt;#Stubs::[stubDescriptor()]#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>igor:create_stubs(Stubs::[stubDescriptor()], Options::[term()]) -&gt; [string()]</string>
		<string>igor:merge</string>
		<string>igor:merge(&lt;#Name::atom()#&gt;, &lt;#Files::[filename()]#&gt;)</string>
		<string>igor:merge(Name::atom(), Files::[filename()]) -&gt; [filename()]</string>
		<string>igor:merge</string>
		<string>igor:merge(&lt;#Name::atom()#&gt;, &lt;#Files::[filename()]#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>igor:merge(Name::atom(), Files::[filename()], Options::[term()]) -&gt; [filename()]</string>
		<string>igor:merge_files</string>
		<string>igor:merge_files(&lt;#Name::atom()#&gt;, &lt;#Files::[filename()]#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>igor:merge_files(Name::atom(), Files::[filename()], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</string>
		<string>igor:merge_files</string>
		<string>igor:merge_files(&lt;#Name::atom()#&gt;, &lt;#Sources::[Forms]#&gt;, &lt;#Files::[filename()]#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>igor:merge_files(Name::atom(), Sources::[Forms], Files::[filename()], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</string>
		<string>igor:merge_sources</string>
		<string>igor:merge_sources(&lt;#Name::atom()#&gt;, &lt;#Sources::[Forms]#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>igor:merge_sources(Name::atom(), Sources::[Forms], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</string>
		<string>igor:parse_transform</string>
		<string>igor:parse_transform(&lt;#Forms::[syntaxTree()]#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>igor:parse_transform(Forms::[syntaxTree()], Options::[term()]) -&gt; [syntaxTree()]</string>
		<string>igor:rename</string>
		<string>igor:rename(&lt;#Files::[filename()]#&gt;, &lt;#Renamings#&gt;)</string>
		<string>igor:rename(Files::[filename()], Renamings) -&gt; [string()]</string>
		<string>igor:rename</string>
		<string>igor:rename(&lt;#Files::[filename()]#&gt;, &lt;#Renamings#&gt;, &lt;#Options::[term()]#&gt;)</string>
		<string>igor:rename(Files::[filename()], Renamings, Options::[term()]) -&gt; [string()]</string>
		<string>inet:close</string>
		<string>inet:close(&lt;#Socket#&gt;)</string>
		<string>inet:close(Socket) -&gt; ok</string>
		<string>inet:fdopen</string>
		<string>inet:fdopen(&lt;#Fd :: integer() &gt;= 0#&gt;, &lt;#Opts :: [socket_setopt()]#&gt;, &lt;#Protocol :: socket_protocol()#&gt;, &lt;#Family :: address_family()#&gt;, &lt;#Type :: socket_type()#&gt;, &lt;#Module :: atom()#&gt;)</string>
		<string>inet:fdopen(Fd :: integer() &gt;= 0, Opts :: [socket_setopt()], Protocol :: socket_protocol(), Family :: address_family(), Type :: socket_type(), Module :: atom()) -&gt; {ok, socket()} | {error, posix()}</string>
		<string>inet:format_error</string>
		<string>inet:format_error(&lt;#Reason#&gt;)</string>
		<string>inet:format_error(Reason) -&gt; string()</string>
		<string>inet:get_rc</string>
		<string>inet:get_rc()</string>
		<string>inet:get_rc() -&gt; [{Par :: any(), Val :: any()}]</string>
		<string>inet:getaddr</string>
		<string>inet:getaddr(&lt;#Host#&gt;, &lt;#Family#&gt;)</string>
		<string>inet:getaddr(Host, Family) -&gt; {ok, Address} | {error, posix()}</string>
		<string>inet:getaddr</string>
		<string>inet:getaddr(&lt;#Host :: ip_address() | hostname()#&gt;, &lt;#Family :: address_family()#&gt;, &lt;#Timeout :: integer() &gt;= 0 | infinity#&gt;)</string>
		<string>inet:getaddr(Host :: ip_address() | hostname(), Family :: address_family(), Timeout :: integer() &gt;= 0 | infinity) -&gt; {ok, ip_address()} | {error, posix()}</string>
		<string>inet:getaddrs</string>
		<string>inet:getaddrs(&lt;#Host#&gt;, &lt;#Family#&gt;)</string>
		<string>inet:getaddrs(Host, Family) -&gt; {ok, Addresses} | {error, posix()}</string>
		<string>inet:getaddrs</string>
		<string>inet:getaddrs(&lt;#Host :: ip_address() | string() | atom()#&gt;, &lt;#Family :: address_family()#&gt;, &lt;#Timeout :: integer() &gt;= 0 | infinity#&gt;)</string>
		<string>inet:getaddrs(Host :: ip_address() | string() | atom(), Family :: address_family(), Timeout :: integer() &gt;= 0 | infinity) -&gt; {ok, [ip_address()]} | {error, posix()}</string>
		<string>inet:getfd</string>
		<string>inet:getfd(&lt;#Socket :: socket()#&gt;)</string>
		<string>inet:getfd(Socket :: socket()) -&gt; {ok, integer() &gt;= 0} | {error, posix()}</string>
		<string>inet:gethostbyaddr</string>
		<string>inet:gethostbyaddr(&lt;#Address#&gt;)</string>
		<string>inet:gethostbyaddr(Address) -&gt; {ok, Hostent} | {error, posix()}</string>
		<string>inet:gethostbyaddr</string>
		<string>inet:gethostbyaddr(&lt;#Address :: string() | ip_address()#&gt;, &lt;#Timeout :: integer() &gt;= 0 | infinity#&gt;)</string>
		<string>inet:gethostbyaddr(Address :: string() | ip_address(), Timeout :: integer() &gt;= 0 | infinity) -&gt; {ok, #hostent{h_name = undefined | inet:hostname(), h_aliases = [inet:hostname()], h_addrtype = undefined | inet | inet6, h_length = undefined | integer() &gt;= 0, h_addr_list = [inet:ip_address()]}} | {error, posix()}</string>
		<string>inet:gethostbyname</string>
		<string>inet:gethostbyname(&lt;#Hostname#&gt;)</string>
		<string>inet:gethostbyname(Hostname) -&gt; {ok, Hostent} | {error, posix()}</string>
		<string>inet:gethostbyname</string>
		<string>inet:gethostbyname(&lt;#Hostname#&gt;, &lt;#Family#&gt;)</string>
		<string>inet:gethostbyname(Hostname, Family) -&gt; {ok, Hostent} | {error, posix()}</string>
		<string>inet:gethostbyname</string>
		<string>inet:gethostbyname(&lt;#Name :: hostname()#&gt;, &lt;#Family :: address_family()#&gt;, &lt;#Timeout :: integer() &gt;= 0 | infinity#&gt;)</string>
		<string>inet:gethostbyname(Name :: hostname(), Family :: address_family(), Timeout :: integer() &gt;= 0 | infinity) -&gt; {ok, #hostent{h_name = undefined | inet:hostname(), h_aliases = [inet:hostname()], h_addrtype = undefined | inet | inet6, h_length = undefined | integer() &gt;= 0, h_addr_list = [inet:ip_address()]}} | {error, posix()}</string>
		<string>inet:gethostname</string>
		<string>inet:gethostname()</string>
		<string>inet:gethostname() -&gt; {ok, Hostname}</string>
		<string>inet:gethostname</string>
		<string>inet:gethostname(&lt;#Socket :: socket()#&gt;)</string>
		<string>inet:gethostname(Socket :: socket()) -&gt; {ok, string()} | {error, posix()}</string>
		<string>inet:getif</string>
		<string>inet:getif()</string>
		<string>inet:getif() -&gt; {ok, [{ip_address(), ip_address() | undefined, ip_address()}]} | {error, posix()}</string>
		<string>inet:getif</string>
		<string>inet:getif(&lt;#Socket :: socket()#&gt;)</string>
		<string>inet:getif(Socket :: socket()) -&gt; {ok, [{ip_address(), ip_address() | undefined, ip_address()}]} | {error, posix()}</string>
		<string>inet:getifaddrs</string>
		<string>inet:getifaddrs()</string>
		<string>inet:getifaddrs() -&gt; {ok, Iflist} | {error, posix()}</string>
		<string>inet:getifaddrs</string>
		<string>inet:getifaddrs(&lt;#Socket :: socket()#&gt;)</string>
		<string>inet:getifaddrs(Socket :: socket()) -&gt; {ok, [string()]} | {error, posix()}</string>
		<string>inet:getiflist</string>
		<string>inet:getiflist()</string>
		<string>inet:getiflist() -&gt; {ok, [string()]} | {error, posix()}</string>
		<string>inet:getiflist</string>
		<string>inet:getiflist(&lt;#Socket :: socket()#&gt;)</string>
		<string>inet:getiflist(Socket :: socket()) -&gt; {ok, [string()]} | {error, posix()}</string>
		<string>inet:getll</string>
		<string>inet:getll(&lt;#Socket :: socket()#&gt;)</string>
		<string>inet:getll(Socket :: socket()) -&gt; {ok, socket()}</string>
		<string>inet:getopts</string>
		<string>inet:getopts(&lt;#Socket#&gt;, &lt;#Options#&gt;)</string>
		<string>inet:getopts(Socket, Options) -&gt; {ok, OptionValues} | {error, posix()}</string>
		<string>inet:getservbyname</string>
		<string>inet:getservbyname(&lt;#Name :: atom() | string()#&gt;, &lt;#Protocol :: atom() | string()#&gt;)</string>
		<string>inet:getservbyname(Name :: atom() | string(), Protocol :: atom() | string()) -&gt; {ok, port_number()} | {error, posix()}</string>
		<string>inet:getservbyport</string>
		<string>inet:getservbyport(&lt;#Port :: port_number()#&gt;, &lt;#Protocol :: atom() | string()#&gt;)</string>
		<string>inet:getservbyport(Port :: port_number(), Protocol :: atom() | string()) -&gt; {ok, string()} | {error, posix()}</string>
		<string>inet:getstat</string>
		<string>inet:getstat(&lt;#Socket#&gt;)</string>
		<string>inet:getstat(Socket) -&gt; {ok, OptionValues} | {error, posix()}</string>
		<string>inet:getstat</string>
		<string>inet:getstat(&lt;#Socket#&gt;, &lt;#Options#&gt;)</string>
		<string>inet:getstat(Socket, Options) -&gt; {ok, OptionValues} | {error, posix()}</string>
		<string>inet:ifget</string>
		<string>inet:ifget(&lt;#Name :: string() | atom()#&gt;, &lt;#Opts :: [if_getopt()]#&gt;)</string>
		<string>inet:ifget(Name :: string() | atom(), Opts :: [if_getopt()]) -&gt; {ok, [if_getopt_result()]} | {error, posix()}</string>
		<string>inet:ifget</string>
		<string>inet:ifget(&lt;#Socket :: socket()#&gt;, &lt;#Name :: string() | atom()#&gt;, &lt;#Opts :: [if_getopt()]#&gt;)</string>
		<string>inet:ifget(Socket :: socket(), Name :: string() | atom(), Opts :: [if_getopt()]) -&gt; {ok, [if_getopt_result()]} | {error, posix()}</string>
		<string>inet:ifset</string>
		<string>inet:ifset(&lt;#Name :: string() | atom()#&gt;, &lt;#Opts :: [if_setopt()]#&gt;)</string>
		<string>inet:ifset(Name :: string() | atom(), Opts :: [if_setopt()]) -&gt; ok | {error, posix()}</string>
		<string>inet:ifset</string>
		<string>inet:ifset(&lt;#Socket :: socket()#&gt;, &lt;#Name :: string() | atom()#&gt;, &lt;#Opts :: [if_setopt()]#&gt;)</string>
		<string>inet:ifset(Socket :: socket(), Name :: string() | atom(), Opts :: [if_setopt()]) -&gt; ok | {error, posix()}</string>
		<string>inet:ip</string>
		<string>inet:ip(&lt;#Ip :: ip_address() | string() | atom()#&gt;)</string>
		<string>inet:ip(Ip :: ip_address() | string() | atom()) -&gt; {ok, ip_address()} | {error, posix()}</string>
		<string>inet:ntoa</string>
		<string>inet:ntoa(&lt;#IpAddress#&gt;)</string>
		<string>inet:ntoa(IpAddress) -&gt; Address | {error, einval}</string>
		<string>inet:open</string>
		<string>inet:open(&lt;#Fd_or_OpenOpts :: integer() | list()#&gt;, &lt;#Addr :: ip_address()#&gt;, &lt;#Port :: port_number()#&gt;, &lt;#Opts :: [socket_setopt()]#&gt;, &lt;#Protocol :: socket_protocol()#&gt;, &lt;#Family :: address_family()#&gt;, &lt;#Type :: socket_type()#&gt;, &lt;#Module :: atom()#&gt;)</string>
		<string>inet:open(Fd_or_OpenOpts :: integer() | list(), Addr :: ip_address(), Port :: port_number(), Opts :: [socket_setopt()], Protocol :: socket_protocol(), Family :: address_family(), Type :: socket_type(), Module :: atom()) -&gt; {ok, socket()} | {error, posix()}</string>
		<string>inet:parse_address</string>
		<string>inet:parse_address(&lt;#Address#&gt;)</string>
		<string>inet:parse_address(Address) -&gt; {ok, IPAddress} | {error, einval}</string>
		<string>inet:parse_ipv4_address</string>
		<string>inet:parse_ipv4_address(&lt;#Address#&gt;)</string>
		<string>inet:parse_ipv4_address(Address) -&gt; {ok, IPv4Address} | {error, einval}</string>
		<string>inet:parse_ipv4strict_address</string>
		<string>inet:parse_ipv4strict_address(&lt;#Address#&gt;)</string>
		<string>inet:parse_ipv4strict_address(Address) -&gt; {ok, IPv4Address} | {error, einval}</string>
		<string>inet:parse_ipv6_address</string>
		<string>inet:parse_ipv6_address(&lt;#Address#&gt;)</string>
		<string>inet:parse_ipv6_address(Address) -&gt; {ok, IPv6Address} | {error, einval}</string>
		<string>inet:parse_ipv6strict_address</string>
		<string>inet:parse_ipv6strict_address(&lt;#Address#&gt;)</string>
		<string>inet:parse_ipv6strict_address(Address) -&gt; {ok, IPv6Address} | {error, einval}</string>
		<string>inet:parse_strict_address</string>
		<string>inet:parse_strict_address(&lt;#Address#&gt;)</string>
		<string>inet:parse_strict_address(Address) -&gt; {ok, IPAddress} | {error, einval}</string>
		<string>inet:peername</string>
		<string>inet:peername(&lt;#Socket#&gt;)</string>
		<string>inet:peername(Socket) -&gt; {ok, {Address, Port}} | {error, posix()}</string>
		<string>inet:peernames</string>
		<string>inet:peernames(&lt;#Socket#&gt;)</string>
		<string>inet:peernames(Socket) -&gt; {ok, [{Address, Port}]} | {error, posix()}</string>
		<string>inet:peernames</string>
		<string>inet:peernames(&lt;#Socket#&gt;, &lt;#Assoc#&gt;)</string>
		<string>inet:peernames(Socket, Assoc) -&gt; {ok, [{Address, Port}]} | {error, posix()}</string>
		<string>inet:port</string>
		<string>inet:port(&lt;#Socket#&gt;)</string>
		<string>inet:port(Socket) -&gt; {ok, Port} | {error, any()}</string>
		<string>inet:send</string>
		<string>inet:send(&lt;#Socket :: socket()#&gt;, &lt;#Packet :: iolist()#&gt;)</string>
		<string>inet:send(Socket :: socket(), Packet :: iolist()) -&gt; ok | {error, posix()}</string>
		<string>inet:setopts</string>
		<string>inet:setopts(&lt;#Socket#&gt;, &lt;#Options#&gt;)</string>
		<string>inet:setopts(Socket, Options) -&gt; ok | {error, posix()}</string>
		<string>inet:setpeername</string>
		<string>inet:setpeername(&lt;#Socket :: socket()#&gt;, &lt;#Address :: {ip_address()#&gt;, &lt;#port_number()}#&gt;)</string>
		<string>inet:setpeername(Socket :: socket(), Address :: {ip_address(), port_number()}) -&gt; ok | {error, any()}</string>
		<string>inet:setsockname</string>
		<string>inet:setsockname(&lt;#Socket :: socket()#&gt;, &lt;#Address :: {ip_address()#&gt;, &lt;#port_number()}#&gt;)</string>
		<string>inet:setsockname(Socket :: socket(), Address :: {ip_address(), port_number()}) -&gt; ok | {error, any()}</string>
		<string>inet:sockname</string>
		<string>inet:sockname(&lt;#Socket#&gt;)</string>
		<string>inet:sockname(Socket) -&gt; {ok, {Address, Port}} | {error, posix()}</string>
		<string>inet:socknames</string>
		<string>inet:socknames(&lt;#Socket#&gt;)</string>
		<string>inet:socknames(Socket) -&gt; {ok, [{Address, Port}]} | {error, posix()}</string>
		<string>inet:socknames</string>
		<string>inet:socknames(&lt;#Socket#&gt;, &lt;#Assoc#&gt;)</string>
		<string>inet:socknames(Socket, Assoc) -&gt; {ok, [{Address, Port}]} | {error, posix()}</string>
		<string>inet:stats</string>
		<string>inet:stats()</string>
		<string>inet:stats() -&gt; [stat_option(), ...]</string>
		<string>inet_res:getbyname</string>
		<string>inet_res:getbyname(&lt;#Name#&gt;, &lt;#Type#&gt;)</string>
		<string>inet_res:getbyname(Name, Type) -&gt; {ok, Hostent} | {error, Reason}</string>
		<string>inet_res:getbyname</string>
		<string>inet_res:getbyname(&lt;#Name#&gt;, &lt;#Type#&gt;, &lt;#Timeout#&gt;)</string>
		<string>inet_res:getbyname(Name, Type, Timeout) -&gt; {ok, Hostent} | {error, Reason}</string>
		<string>inet_res:gethostbyaddr</string>
		<string>inet_res:gethostbyaddr(&lt;#Address#&gt;)</string>
		<string>inet_res:gethostbyaddr(Address) -&gt; {ok, Hostent} | {error, Reason}</string>
		<string>inet_res:gethostbyaddr</string>
		<string>inet_res:gethostbyaddr(&lt;#Address#&gt;, &lt;#Timeout#&gt;)</string>
		<string>inet_res:gethostbyaddr(Address, Timeout) -&gt; {ok, Hostent} | {error, Reason}</string>
		<string>inet_res:gethostbyname</string>
		<string>inet_res:gethostbyname(&lt;#Name#&gt;)</string>
		<string>inet_res:gethostbyname(Name) -&gt; {ok, Hostent} | {error, Reason}</string>
		<string>inet_res:gethostbyname</string>
		<string>inet_res:gethostbyname(&lt;#Name#&gt;, &lt;#Family#&gt;)</string>
		<string>inet_res:gethostbyname(Name, Family) -&gt; {ok, Hostent} | {error, Reason}</string>
		<string>inet_res:gethostbyname</string>
		<string>inet_res:gethostbyname(&lt;#Name#&gt;, &lt;#Family#&gt;, &lt;#Timeout#&gt;)</string>
		<string>inet_res:gethostbyname(Name, Family, Timeout) -&gt; {ok, Hostent} | {error, Reason}</string>
		<string>inet_res:lookup</string>
		<string>inet_res:lookup(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;)</string>
		<string>inet_res:lookup(Name, Class, Type) -&gt; [dns_data()]</string>
		<string>inet_res:lookup</string>
		<string>inet_res:lookup(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;, &lt;#Opts#&gt;)</string>
		<string>inet_res:lookup(Name, Class, Type, Opts) -&gt; [dns_data()]</string>
		<string>inet_res:lookup</string>
		<string>inet_res:lookup(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;, &lt;#Opts#&gt;, &lt;#Timeout#&gt;)</string>
		<string>inet_res:lookup(Name, Class, Type, Opts, Timeout) -&gt; [dns_data()]</string>
		<string>inet_res:nnslookup</string>
		<string>inet_res:nnslookup(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;, &lt;#Nameservers#&gt;)</string>
		<string>inet_res:nnslookup(Name, Class, Type, Nameservers) -&gt; {ok, dns_msg()} | {error, Reason}</string>
		<string>inet_res:nnslookup</string>
		<string>inet_res:nnslookup(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;, &lt;#Nameservers#&gt;, &lt;#Timeout#&gt;)</string>
		<string>inet_res:nnslookup(Name, Class, Type, Nameservers, Timeout) -&gt; {ok, dns_msg()} | {error, Reason}</string>
		<string>inet_res:nslookup</string>
		<string>inet_res:nslookup(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;)</string>
		<string>inet_res:nslookup(Name, Class, Type) -&gt; {ok, dns_msg()} | {error, Reason}</string>
		<string>inet_res:nslookup</string>
		<string>inet_res:nslookup(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;, &lt;#Timeout#&gt;)</string>
		<string>inet_res:nslookup(Name, Class, Type, Timeout) -&gt; {ok, dns_msg()} | {error, Reason}</string>
		<string>inet_res:nslookup</string>
		<string>inet_res:nslookup(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;, &lt;#Nameservers#&gt;)</string>
		<string>inet_res:nslookup(Name, Class, Type, Nameservers) -&gt; {ok, dns_msg()} | {error, Reason}</string>
		<string>inet_res:resolve</string>
		<string>inet_res:resolve(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;)</string>
		<string>inet_res:resolve(Name, Class, Type) -&gt; {ok, dns_msg()} | Error</string>
		<string>inet_res:resolve</string>
		<string>inet_res:resolve(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;, &lt;#Opts#&gt;)</string>
		<string>inet_res:resolve(Name, Class, Type, Opts) -&gt; {ok, dns_msg()} | Error</string>
		<string>inet_res:resolve</string>
		<string>inet_res:resolve(&lt;#Name#&gt;, &lt;#Class#&gt;, &lt;#Type#&gt;, &lt;#Opts#&gt;, &lt;#Timeout#&gt;)</string>
		<string>inet_res:resolve(Name, Class, Type, Opts, Timeout) -&gt; {ok, dns_msg()} | Error</string>
		<string>inets:services</string>
		<string>inets:services()</string>
		<string>inets:services() -&gt; [{Service, Pid}]</string>
		<string>inets:services_info</string>
		<string>inets:services_info()</string>
		<string>inets:services_info() -&gt; [{Service, Pid, Info}]</string>
		<string>inets:service_names</string>
		<string>inets:service_names()</string>
		<string>inets:service_names() -&gt; [Service] </string>
		<string>inets:start</string>
		<string>inets:start()</string>
		<string>inets:start() -&gt; ok | {error, Reason}</string>
		<string>inets:start</string>
		<string>inets:start(&lt;#Type#&gt;)</string>
		<string>inets:start(Type) -&gt; ok | {error, Reason}</string>
		<string>inets:stop</string>
		<string>inets:stop()</string>
		<string>inets:stop() -&gt; ok </string>
		<string>inets:start</string>
		<string>inets:start(&lt;#Service#&gt;, &lt;#ServiceConfig#&gt;)</string>
		<string>inets:start(Service, ServiceConfig) -&gt; {ok, Pid} | {error, Reason}</string>
		<string>inets:start</string>
		<string>inets:start(&lt;#Service#&gt;, &lt;#ServiceConfig#&gt;, &lt;#How#&gt;)</string>
		<string>inets:start(Service, ServiceConfig, How) -&gt; {ok, Pid} | {error, Reason}</string>
		<string>inets:stop</string>
		<string>inets:stop(&lt;#Service#&gt;, &lt;#Reference#&gt;)</string>
		<string>inets:stop(Service, Reference) -&gt; ok | {error, Reason} </string>
		<string>init:archive_extension</string>
		<string>init:archive_extension()</string>
		<string>init:archive_extension() -&gt; nonempty_string()</string>
		<string>init:boot</string>
		<string>init:boot(&lt;#BootArgs#&gt;)</string>
		<string>init:boot(BootArgs) -&gt; no_return()</string>
		<string>init:code_path_choice</string>
		<string>init:code_path_choice()</string>
		<string>init:code_path_choice() -&gt; relaxed | strict</string>
		<string>init:ensure_loaded</string>
		<string>init:ensure_loaded(&lt;#Module :: atom()#&gt;)</string>
		<string>init:ensure_loaded(Module :: atom()) -&gt; not_allowed | {module, atom()}</string>
		<string>init:fetch_loaded</string>
		<string>init:fetch_loaded()</string>
		<string>init:fetch_loaded() -&gt; [atom()]</string>
		<string>init:get_argument</string>
		<string>init:get_argument(&lt;#Flag#&gt;)</string>
		<string>init:get_argument(Flag) -&gt; {ok, Arg} | error</string>
		<string>init:get_arguments</string>
		<string>init:get_arguments()</string>
		<string>init:get_arguments() -&gt; Flags</string>
		<string>init:get_plain_arguments</string>
		<string>init:get_plain_arguments()</string>
		<string>init:get_plain_arguments() -&gt; [Arg]</string>
		<string>init:get_status</string>
		<string>init:get_status()</string>
		<string>init:get_status() -&gt; {InternalStatus, ProvidedStatus}</string>
		<string>init:make_permanent</string>
		<string>init:make_permanent(&lt;#Boot :: file:filename()#&gt;, &lt;#Config :: false | file:filename()#&gt;)</string>
		<string>init:make_permanent(Boot :: file:filename(), Config :: false | file:filename()) -&gt; ok | {error, term()}</string>
		<string>init:notify_when_started</string>
		<string>init:notify_when_started(&lt;#Pid :: pid()#&gt;)</string>
		<string>init:notify_when_started(Pid :: pid()) -&gt; ok | started</string>
		<string>init:objfile_extension</string>
		<string>init:objfile_extension()</string>
		<string>init:objfile_extension() -&gt; nonempty_string()</string>
		<string>init:reboot</string>
		<string>init:reboot()</string>
		<string>init:reboot() -&gt; ok</string>
		<string>init:restart</string>
		<string>init:restart()</string>
		<string>init:restart() -&gt; ok</string>
		<string>init:script_id</string>
		<string>init:script_id()</string>
		<string>init:script_id() -&gt; Id</string>
		<string>init:stop</string>
		<string>init:stop()</string>
		<string>init:stop() -&gt; ok</string>
		<string>init:stop</string>
		<string>init:stop(&lt;#Status#&gt;)</string>
		<string>init:stop(Status) -&gt; ok</string>
		<string>init:wait_until_started</string>
		<string>init:wait_until_started()</string>
		<string>init:wait_until_started() -&gt; ok</string>
		<string>instrument:allocator_descr</string>
		<string>instrument:allocator_descr(&lt;#MemoryData#&gt;, &lt;#TypeNo#&gt;)</string>
		<string>instrument:allocator_descr(MemoryData, TypeNo) -&gt; AllocDescr | invalid_type | "unknown"</string>
		<string>instrument:block_header_size</string>
		<string>instrument:block_header_size(&lt;#MemoryData#&gt;)</string>
		<string>instrument:block_header_size(MemoryData) -&gt; int()</string>
		<string>instrument:class_descr</string>
		<string>instrument:class_descr(&lt;#MemoryData#&gt;, &lt;#TypeNo#&gt;)</string>
		<string>instrument:class_descr(MemoryData, TypeNo) -&gt; ClassDescr | invalid_type | "unknown"</string>
		<string>instrument:descr</string>
		<string>instrument:descr(&lt;#MemoryData#&gt;)</string>
		<string>instrument:descr(MemoryData) -&gt; DescrMemoryData</string>
		<string>instrument:holes</string>
		<string>instrument:holes(&lt;#MemoryData#&gt;)</string>
		<string>instrument:holes(MemoryData) -&gt; ok</string>
		<string>instrument:mem_limits</string>
		<string>instrument:mem_limits(&lt;#MemoryData#&gt;)</string>
		<string>instrument:mem_limits(MemoryData) -&gt; {Low, High}</string>
		<string>instrument:memory_data</string>
		<string>instrument:memory_data()</string>
		<string>instrument:memory_data() -&gt; MemoryData | false</string>
		<string>instrument:memory_status</string>
		<string>instrument:memory_status(&lt;#StatusType#&gt;)</string>
		<string>instrument:memory_status(StatusType) -&gt; [StatusInfo] | false</string>
		<string>instrument:read_memory_data</string>
		<string>instrument:read_memory_data(&lt;#File#&gt;)</string>
		<string>instrument:read_memory_data(File) -&gt; MemoryData | {error, Reason}</string>
		<string>instrument:read_memory_status</string>
		<string>instrument:read_memory_status(&lt;#File#&gt;)</string>
		<string>instrument:read_memory_status(File) -&gt; MemoryStatus | {error, Reason}</string>
		<string>instrument:sort</string>
		<string>instrument:sort(&lt;#MemoryData#&gt;)</string>
		<string>instrument:sort(MemoryData) -&gt; MemoryData</string>
		<string>instrument:store_memory_data</string>
		<string>instrument:store_memory_data(&lt;#File#&gt;)</string>
		<string>instrument:store_memory_data(File) -&gt; true | false</string>
		<string>instrument:store_memory_status</string>
		<string>instrument:store_memory_status(&lt;#File#&gt;)</string>
		<string>instrument:store_memory_status(File) -&gt; true | false</string>
		<string>instrument:sum_blocks</string>
		<string>instrument:sum_blocks(&lt;#MemoryData#&gt;)</string>
		<string>instrument:sum_blocks(MemoryData) -&gt; int()</string>
		<string>instrument:type_descr</string>
		<string>instrument:type_descr(&lt;#MemoryData#&gt;, &lt;#TypeNo#&gt;)</string>
		<string>instrument:type_descr(MemoryData, TypeNo) -&gt; TypeDescr | invalid_type</string>
		<string>instrument:type_no_range</string>
		<string>instrument:type_no_range(&lt;#MemoryData#&gt;)</string>
		<string>instrument:type_no_range(MemoryData) -&gt; {Min, Max}</string>
		<string>int:i</string>
		<string>int:i(&lt;#AbsModule#&gt;)</string>
		<string>int:i(AbsModule) -&gt; {module, Module} | error</string>
		<string>int:i</string>
		<string>int:i(&lt;#AbsModules#&gt;)</string>
		<string>int:i(AbsModules) -&gt; ok</string>
		<string>int:ni</string>
		<string>int:ni(&lt;#AbsModule#&gt;)</string>
		<string>int:ni(AbsModule) -&gt; {module, Module} | error</string>
		<string>int:ni</string>
		<string>int:ni(&lt;#AbsModules#&gt;)</string>
		<string>int:ni(AbsModules) -&gt; ok</string>
		<string>int:n</string>
		<string>int:n(&lt;#AbsModule#&gt;)</string>
		<string>int:n(AbsModule) -&gt; ok</string>
		<string>int:nn</string>
		<string>int:nn(&lt;#AbsModule#&gt;)</string>
		<string>int:nn(AbsModule) -&gt; ok</string>
		<string>int:interpreted</string>
		<string>int:interpreted()</string>
		<string>int:interpreted() -&gt; [Module]</string>
		<string>int:file</string>
		<string>int:file(&lt;#Module#&gt;)</string>
		<string>int:file(Module) -&gt; File | {error, not_loaded}</string>
		<string>int:interpretable</string>
		<string>int:interpretable(&lt;#AbsModule#&gt;)</string>
		<string>int:interpretable(AbsModule) -&gt; true | {error, Reason}</string>
		<string>int:auto_attach</string>
		<string>int:auto_attach()</string>
		<string>int:auto_attach() -&gt; false | {Flags, Function}</string>
		<string>int:auto_attach</string>
		<string>int:auto_attach(&lt;#false#&gt;)</string>
		<string>int:auto_attach(false)</string>
		<string>int:auto_attach</string>
		<string>int:auto_attach(&lt;#Flags#&gt;, &lt;#Function#&gt;)</string>
		<string>int:auto_attach(Flags, Function)</string>
		<string>int:stack_trace</string>
		<string>int:stack_trace()</string>
		<string>int:stack_trace() -&gt; Flag</string>
		<string>int:stack_trace</string>
		<string>int:stack_trace(&lt;#Flag#&gt;)</string>
		<string>int:stack_trace(Flag)</string>
		<string>int:break</string>
		<string>int:break(&lt;#Module#&gt;, &lt;#Line#&gt;)</string>
		<string>int:break(Module, Line) -&gt; ok | {error, break_exists}</string>
		<string>int:delete_break</string>
		<string>int:delete_break(&lt;#Module#&gt;, &lt;#Line#&gt;)</string>
		<string>int:delete_break(Module, Line) -&gt; ok</string>
		<string>int:break_in</string>
		<string>int:break_in(&lt;#Module#&gt;, &lt;#Name#&gt;, &lt;#Arity#&gt;)</string>
		<string>int:break_in(Module, Name, Arity) -&gt; ok | {error, function_not_found}</string>
		<string>int:del_break_in</string>
		<string>int:del_break_in(&lt;#Module#&gt;, &lt;#Name#&gt;, &lt;#Arity#&gt;)</string>
		<string>int:del_break_in(Module, Name, Arity) -&gt; ok | {error, function_not_found}</string>
		<string>int:no_break</string>
		<string>int:no_break()</string>
		<string>int:no_break() -&gt; ok</string>
		<string>int:no_break</string>
		<string>int:no_break(&lt;#Module#&gt;)</string>
		<string>int:no_break(Module) -&gt; ok</string>
		<string>int:disable_break</string>
		<string>int:disable_break(&lt;#Module#&gt;, &lt;#Line#&gt;)</string>
		<string>int:disable_break(Module, Line) -&gt; ok</string>
		<string>int:enable_break</string>
		<string>int:enable_break(&lt;#Module#&gt;, &lt;#Line#&gt;)</string>
		<string>int:enable_break(Module, Line) -&gt; ok</string>
		<string>int:action_at_break</string>
		<string>int:action_at_break(&lt;#Module#&gt;, &lt;#Line#&gt;, &lt;#Action#&gt;)</string>
		<string>int:action_at_break(Module, Line, Action) -&gt; ok</string>
		<string>int:test_at_break</string>
		<string>int:test_at_break(&lt;#Module#&gt;, &lt;#Line#&gt;, &lt;#Function#&gt;)</string>
		<string>int:test_at_break(Module, Line, Function) -&gt; ok</string>
		<string>int:get_binding</string>
		<string>int:get_binding(&lt;#Var#&gt;, &lt;#Bindings#&gt;)</string>
		<string>int:get_binding(Var, Bindings) -&gt; {value, Value} | unbound</string>
		<string>int:all_breaks</string>
		<string>int:all_breaks()</string>
		<string>int:all_breaks() -&gt; [Break]</string>
		<string>int:all_breaks</string>
		<string>int:all_breaks(&lt;#Module#&gt;)</string>
		<string>int:all_breaks(Module) -&gt; [Break]</string>
		<string>int:snapshot</string>
		<string>int:snapshot()</string>
		<string>int:snapshot() -&gt; [Snapshot]</string>
		<string>int:clear</string>
		<string>int:clear()</string>
		<string>int:clear() -&gt; ok</string>
		<string>int:continue</string>
		<string>int:continue(&lt;#Pid#&gt;)</string>
		<string>int:continue(Pid) -&gt; ok | {error, not_interpreted}</string>
		<string>int:continue</string>
		<string>int:continue(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Z#&gt;)</string>
		<string>int:continue(X, Y, Z) -&gt; ok | {error, not_interpreted}</string>
		<string>interceptors:new_in_connection</string>
		<string>interceptors:new_in_connection(&lt;#Ref#&gt;, &lt;#PeerHost#&gt;, &lt;#PeerPort#&gt;)</string>
		<string>interceptors:new_in_connection(Ref, PeerHost, PeerPort) -&gt; NewRef</string>
		<string>interceptors:new_in_connection</string>
		<string>interceptors:new_in_connection(&lt;#Ref#&gt;, &lt;#PeerHost#&gt;, &lt;#PeerPort#&gt;, &lt;#SocketHost#&gt;, &lt;#SocketPort#&gt;)</string>
		<string>interceptors:new_in_connection(Ref, PeerHost, PeerPort, SocketHost, SocketPort) -&gt; NewRef</string>
		<string>interceptors:new_out_connection</string>
		<string>interceptors:new_out_connection(&lt;#Ref#&gt;, &lt;#PeerHost#&gt;, &lt;#PeerPort#&gt;)</string>
		<string>interceptors:new_out_connection(Ref, PeerHost, PeerPort) -&gt; NewRef</string>
		<string>interceptors:new_out_connection</string>
		<string>interceptors:new_out_connection(&lt;#Ref#&gt;, &lt;#PeerHost#&gt;, &lt;#PeerPort#&gt;, &lt;#SocketHost#&gt;, &lt;#SocketPort#&gt;)</string>
		<string>interceptors:new_out_connection(Ref, PeerHost, PeerPort, SocketHost, SocketPort) -&gt; NewRef</string>
		<string>interceptors:closed_in_connection</string>
		<string>interceptors:closed_in_connection(&lt;#Ref#&gt;)</string>
		<string>interceptors:closed_in_connection(Ref) -&gt; NewRef</string>
		<string>interceptors:closed_out_connection</string>
		<string>interceptors:closed_out_connection(&lt;#Ref#&gt;)</string>
		<string>interceptors:closed_out_connection(Ref) -&gt; NewRef</string>
		<string>interceptors:in_reply</string>
		<string>interceptors:in_reply(&lt;#Ref#&gt;, &lt;#Obj#&gt;, &lt;#Ctx#&gt;, &lt;#Op#&gt;, &lt;#Data#&gt;, &lt;#Extra#&gt;)</string>
		<string>interceptors:in_reply(Ref, Obj, Ctx, Op, Data, Extra) -&gt; Reply</string>
		<string>interceptors:in_reply_encoded</string>
		<string>interceptors:in_reply_encoded(&lt;#Ref#&gt;, &lt;#Obj#&gt;, &lt;#Ctx#&gt;, &lt;#Op#&gt;, &lt;#Bin#&gt;, &lt;#Extra#&gt;)</string>
		<string>interceptors:in_reply_encoded(Ref, Obj, Ctx, Op, Bin, Extra) -&gt; Reply</string>
		<string>interceptors:in_request</string>
		<string>interceptors:in_request(&lt;#Ref#&gt;, &lt;#Obj#&gt;, &lt;#Ctx#&gt;, &lt;#Op#&gt;, &lt;#Args#&gt;, &lt;#Extra#&gt;)</string>
		<string>interceptors:in_request(Ref, Obj, Ctx, Op, Args, Extra) -&gt; Reply</string>
		<string>interceptors:in_request_encoded</string>
		<string>interceptors:in_request_encoded(&lt;#Ref#&gt;, &lt;#Obj#&gt;, &lt;#Ctx#&gt;, &lt;#Op#&gt;, &lt;#Bin#&gt;, &lt;#Extra#&gt;)</string>
		<string>interceptors:in_request_encoded(Ref, Obj, Ctx, Op, Bin, Extra) -&gt; Reply</string>
		<string>interceptors:out_reply</string>
		<string>interceptors:out_reply(&lt;#Ref#&gt;, &lt;#Obj#&gt;, &lt;#Ctx#&gt;, &lt;#Op#&gt;, &lt;#Data#&gt;, &lt;#Extra#&gt;)</string>
		<string>interceptors:out_reply(Ref, Obj, Ctx, Op, Data, Extra) -&gt; Reply</string>
		<string>interceptors:out_reply_encoded</string>
		<string>interceptors:out_reply_encoded(&lt;#Ref#&gt;, &lt;#Obj#&gt;, &lt;#Ctx#&gt;, &lt;#Op#&gt;, &lt;#Bin#&gt;, &lt;#Extra#&gt;)</string>
		<string>interceptors:out_reply_encoded(Ref, Obj, Ctx, Op, Bin, Extra) -&gt; Reply</string>
		<string>interceptors:out_request</string>
		<string>interceptors:out_request(&lt;#Ref#&gt;, &lt;#Obj#&gt;, &lt;#Ctx#&gt;, &lt;#Op#&gt;, &lt;#Args#&gt;, &lt;#Extra#&gt;)</string>
		<string>interceptors:out_request(Ref, Obj, Ctx, Op, Args, Extra) -&gt; Reply</string>
		<string>interceptors:out_request_encoded</string>
		<string>interceptors:out_request_encoded(&lt;#Ref#&gt;, &lt;#Obj#&gt;, &lt;#Ctx#&gt;, &lt;#Op#&gt;, &lt;#Bin#&gt;, &lt;#Extra#&gt;)</string>
		<string>interceptors:out_request_encoded(Ref, Obj, Ctx, Op, Bin, Extra) -&gt; Reply</string>
		<string>io:columns</string>
		<string>io:columns()</string>
		<string>io:columns() -&gt; {ok, integer() &gt;= 1} | {error, enotsup}</string>
		<string>io:columns</string>
		<string>io:columns(&lt;#IoDevice#&gt;)</string>
		<string>io:columns(IoDevice) -&gt; {ok, integer() &gt;= 1} | {error, enotsup}</string>
		<string>io:format</string>
		<string>io:format(&lt;#Format#&gt;)</string>
		<string>io:format(Format) -&gt; ok</string>
		<string>io:format</string>
		<string>io:format(&lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>io:format(Format, Data) -&gt; ok</string>
		<string>io:format</string>
		<string>io:format(&lt;#IoDevice#&gt;, &lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>io:format(IoDevice, Format, Data) -&gt; ok</string>
		<string>io:fread</string>
		<string>io:fread(&lt;#Prompt#&gt;, &lt;#Format#&gt;)</string>
		<string>io:fread(Prompt, Format) -&gt; Result</string>
		<string>io:fread</string>
		<string>io:fread(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#Format#&gt;)</string>
		<string>io:fread(IoDevice, Prompt, Format) -&gt; Result</string>
		<string>io:fwrite</string>
		<string>io:fwrite(&lt;#Format#&gt;)</string>
		<string>io:fwrite(Format) -&gt; ok</string>
		<string>io:fwrite</string>
		<string>io:fwrite(&lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>io:fwrite(Format, Data) -&gt; ok</string>
		<string>io:fwrite</string>
		<string>io:fwrite(&lt;#IoDevice#&gt;, &lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>io:fwrite(IoDevice, Format, Data) -&gt; ok</string>
		<string>io:get_chars</string>
		<string>io:get_chars(&lt;#Prompt#&gt;, &lt;#Count#&gt;)</string>
		<string>io:get_chars(Prompt, Count) -&gt; Data | server_no_data()</string>
		<string>io:get_chars</string>
		<string>io:get_chars(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#Count#&gt;)</string>
		<string>io:get_chars(IoDevice, Prompt, Count) -&gt; Data | server_no_data()</string>
		<string>io:get_line</string>
		<string>io:get_line(&lt;#Prompt#&gt;)</string>
		<string>io:get_line(Prompt) -&gt; Data | server_no_data()</string>
		<string>io:get_line</string>
		<string>io:get_line(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;)</string>
		<string>io:get_line(IoDevice, Prompt) -&gt; Data | server_no_data()</string>
		<string>io:getopts</string>
		<string>io:getopts()</string>
		<string>io:getopts() -&gt; [opt_pair()] | {error, Reason}</string>
		<string>io:getopts</string>
		<string>io:getopts(&lt;#IoDevice#&gt;)</string>
		<string>io:getopts(IoDevice) -&gt; [opt_pair()] | {error, Reason}</string>
		<string>io:nl</string>
		<string>io:nl()</string>
		<string>io:nl() -&gt; ok</string>
		<string>io:nl</string>
		<string>io:nl(&lt;#IoDevice#&gt;)</string>
		<string>io:nl(IoDevice) -&gt; ok</string>
		<string>io:parse_erl_exprs</string>
		<string>io:parse_erl_exprs(&lt;#Prompt#&gt;)</string>
		<string>io:parse_erl_exprs(Prompt) -&gt; Result</string>
		<string>io:parse_erl_exprs</string>
		<string>io:parse_erl_exprs(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;)</string>
		<string>io:parse_erl_exprs(IoDevice, Prompt) -&gt; Result</string>
		<string>io:parse_erl_exprs</string>
		<string>io:parse_erl_exprs(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;)</string>
		<string>io:parse_erl_exprs(IoDevice, Prompt, StartLocation) -&gt; Result</string>
		<string>io:parse_erl_exprs</string>
		<string>io:parse_erl_exprs(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;, &lt;#Options#&gt;)</string>
		<string>io:parse_erl_exprs(IoDevice, Prompt, StartLocation, Options) -&gt; Result</string>
		<string>io:parse_erl_form</string>
		<string>io:parse_erl_form(&lt;#Prompt#&gt;)</string>
		<string>io:parse_erl_form(Prompt) -&gt; Result</string>
		<string>io:parse_erl_form</string>
		<string>io:parse_erl_form(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;)</string>
		<string>io:parse_erl_form(IoDevice, Prompt) -&gt; Result</string>
		<string>io:parse_erl_form</string>
		<string>io:parse_erl_form(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;)</string>
		<string>io:parse_erl_form(IoDevice, Prompt, StartLocation) -&gt; Result</string>
		<string>io:parse_erl_form</string>
		<string>io:parse_erl_form(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;, &lt;#Options#&gt;)</string>
		<string>io:parse_erl_form(IoDevice, Prompt, StartLocation, Options) -&gt; Result</string>
		<string>io:printable_range</string>
		<string>io:printable_range()</string>
		<string>io:printable_range() -&gt; unicode | latin1</string>
		<string>io:put_chars</string>
		<string>io:put_chars(&lt;#CharData#&gt;)</string>
		<string>io:put_chars(CharData) -&gt; ok</string>
		<string>io:put_chars</string>
		<string>io:put_chars(&lt;#IoDevice#&gt;, &lt;#CharData#&gt;)</string>
		<string>io:put_chars(IoDevice, CharData) -&gt; ok</string>
		<string>io:read</string>
		<string>io:read(&lt;#Prompt#&gt;)</string>
		<string>io:read(Prompt) -&gt; Result</string>
		<string>io:read</string>
		<string>io:read(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;)</string>
		<string>io:read(IoDevice, Prompt) -&gt; Result</string>
		<string>io:read</string>
		<string>io:read(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;)</string>
		<string>io:read(IoDevice, Prompt, StartLocation) -&gt; Result</string>
		<string>io:read</string>
		<string>io:read(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;, &lt;#Options#&gt;)</string>
		<string>io:read(IoDevice, Prompt, StartLocation, Options) -&gt; Result</string>
		<string>io:rows</string>
		<string>io:rows()</string>
		<string>io:rows() -&gt; {ok, integer() &gt;= 1} | {error, enotsup}</string>
		<string>io:rows</string>
		<string>io:rows(&lt;#IoDevice#&gt;)</string>
		<string>io:rows(IoDevice) -&gt; {ok, integer() &gt;= 1} | {error, enotsup}</string>
		<string>io:scan_erl_exprs</string>
		<string>io:scan_erl_exprs(&lt;#Prompt#&gt;)</string>
		<string>io:scan_erl_exprs(Prompt) -&gt; Result</string>
		<string>io:scan_erl_exprs</string>
		<string>io:scan_erl_exprs(&lt;#Device#&gt;, &lt;#Prompt#&gt;)</string>
		<string>io:scan_erl_exprs(Device, Prompt) -&gt; Result</string>
		<string>io:scan_erl_exprs</string>
		<string>io:scan_erl_exprs(&lt;#Device#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;)</string>
		<string>io:scan_erl_exprs(Device, Prompt, StartLocation) -&gt; Result</string>
		<string>io:scan_erl_exprs</string>
		<string>io:scan_erl_exprs(&lt;#Device#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;, &lt;#Options#&gt;)</string>
		<string>io:scan_erl_exprs(Device, Prompt, StartLocation, Options) -&gt; Result</string>
		<string>io:scan_erl_form</string>
		<string>io:scan_erl_form(&lt;#Prompt#&gt;)</string>
		<string>io:scan_erl_form(Prompt) -&gt; Result</string>
		<string>io:scan_erl_form</string>
		<string>io:scan_erl_form(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;)</string>
		<string>io:scan_erl_form(IoDevice, Prompt) -&gt; Result</string>
		<string>io:scan_erl_form</string>
		<string>io:scan_erl_form(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;)</string>
		<string>io:scan_erl_form(IoDevice, Prompt, StartLocation) -&gt; Result</string>
		<string>io:scan_erl_form</string>
		<string>io:scan_erl_form(&lt;#IoDevice#&gt;, &lt;#Prompt#&gt;, &lt;#StartLocation#&gt;, &lt;#Options#&gt;)</string>
		<string>io:scan_erl_form(IoDevice, Prompt, StartLocation, Options) -&gt; Result</string>
		<string>io:setopts</string>
		<string>io:setopts(&lt;#Opts#&gt;)</string>
		<string>io:setopts(Opts) -&gt; ok | {error, Reason}</string>
		<string>io:setopts</string>
		<string>io:setopts(&lt;#IoDevice#&gt;, &lt;#Opts#&gt;)</string>
		<string>io:setopts(IoDevice, Opts) -&gt; ok | {error, Reason}</string>
		<string>io:write</string>
		<string>io:write(&lt;#Term#&gt;)</string>
		<string>io:write(Term) -&gt; ok</string>
		<string>io:write</string>
		<string>io:write(&lt;#IoDevice#&gt;, &lt;#Term#&gt;)</string>
		<string>io:write(IoDevice, Term) -&gt; ok</string>
		<string>io_lib:char_list</string>
		<string>io_lib:char_list(&lt;#Term#&gt;)</string>
		<string>io_lib:char_list(Term) -&gt; boolean()</string>
		<string>io_lib:deep_char_list</string>
		<string>io_lib:deep_char_list(&lt;#Term#&gt;)</string>
		<string>io_lib:deep_char_list(Term) -&gt; boolean()</string>
		<string>io_lib:deep_latin1_char_list</string>
		<string>io_lib:deep_latin1_char_list(&lt;#Term#&gt;)</string>
		<string>io_lib:deep_latin1_char_list(Term) -&gt; boolean()</string>
		<string>io_lib:format</string>
		<string>io_lib:format(&lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>io_lib:format(Format, Data) -&gt; chars()</string>
		<string>io_lib:format_prompt</string>
		<string>io_lib:format_prompt(&lt;#Prompt :: term()#&gt;)</string>
		<string>io_lib:format_prompt(Prompt :: term()) -&gt; chars()</string>
		<string>io_lib:format_prompt</string>
		<string>io_lib:format_prompt(&lt;#Prompt :: term()#&gt;, &lt;#Encoding :: atom()#&gt;)</string>
		<string>io_lib:format_prompt(Prompt :: term(), Encoding :: atom()) -&gt; chars()</string>
		<string>io_lib:fread</string>
		<string>io_lib:fread(&lt;#Format#&gt;, &lt;#String#&gt;)</string>
		<string>io_lib:fread(Format, String) -&gt; Result</string>
		<string>io_lib:fread</string>
		<string>io_lib:fread(&lt;#Continuation#&gt;, &lt;#CharSpec#&gt;, &lt;#Format#&gt;)</string>
		<string>io_lib:fread(Continuation, CharSpec, Format) -&gt; Return</string>
		<string>io_lib:fwrite</string>
		<string>io_lib:fwrite(&lt;#Format#&gt;, &lt;#Data#&gt;)</string>
		<string>io_lib:fwrite(Format, Data) -&gt; chars()</string>
		<string>io_lib:indentation</string>
		<string>io_lib:indentation(&lt;#String#&gt;, &lt;#StartIndent#&gt;)</string>
		<string>io_lib:indentation(String, StartIndent) -&gt; integer()</string>
		<string>io_lib:latin1_char_list</string>
		<string>io_lib:latin1_char_list(&lt;#Term#&gt;)</string>
		<string>io_lib:latin1_char_list(Term) -&gt; boolean()</string>
		<string>io_lib:nl</string>
		<string>io_lib:nl()</string>
		<string>io_lib:nl() -&gt; string()</string>
		<string>io_lib:print</string>
		<string>io_lib:print(&lt;#Term#&gt;)</string>
		<string>io_lib:print(Term) -&gt; chars()</string>
		<string>io_lib:print</string>
		<string>io_lib:print(&lt;#Term#&gt;, &lt;#Column#&gt;, &lt;#LineLength#&gt;, &lt;#Depth#&gt;)</string>
		<string>io_lib:print(Term, Column, LineLength, Depth) -&gt; chars()</string>
		<string>io_lib:printable_latin1_list</string>
		<string>io_lib:printable_latin1_list(&lt;#Term#&gt;)</string>
		<string>io_lib:printable_latin1_list(Term) -&gt; boolean()</string>
		<string>io_lib:printable_list</string>
		<string>io_lib:printable_list(&lt;#Term#&gt;)</string>
		<string>io_lib:printable_list(Term) -&gt; boolean()</string>
		<string>io_lib:printable_unicode_list</string>
		<string>io_lib:printable_unicode_list(&lt;#Term#&gt;)</string>
		<string>io_lib:printable_unicode_list(Term) -&gt; boolean()</string>
		<string>io_lib:quote_atom</string>
		<string>io_lib:quote_atom(&lt;#Atom :: atom()#&gt;, &lt;#Cs0 :: chars()#&gt;)</string>
		<string>io_lib:quote_atom(Atom :: atom(), Cs0 :: chars()) -&gt; boolean()</string>
		<string>io_lib:write</string>
		<string>io_lib:write(&lt;#Term#&gt;)</string>
		<string>io_lib:write(Term) -&gt; chars()</string>
		<string>io_lib:write</string>
		<string>io_lib:write(&lt;#Term#&gt;, &lt;#Depth#&gt;)</string>
		<string>io_lib:write(Term, Depth) -&gt; chars()</string>
		<string>io_lib:write</string>
		<string>io_lib:write(&lt;#Term :: term()#&gt;, &lt;#D :: depth()#&gt;, &lt;#X3 :: boolean()#&gt;)</string>
		<string>io_lib:write(Term :: term(), D :: depth(), X3 :: boolean()) -&gt; chars()</string>
		<string>io_lib:write_atom</string>
		<string>io_lib:write_atom(&lt;#Atom#&gt;)</string>
		<string>io_lib:write_atom(Atom) -&gt; chars()</string>
		<string>io_lib:write_char</string>
		<string>io_lib:write_char(&lt;#Char#&gt;)</string>
		<string>io_lib:write_char(Char) -&gt; chars()</string>
		<string>io_lib:write_char_as_latin1</string>
		<string>io_lib:write_char_as_latin1(&lt;#Char#&gt;)</string>
		<string>io_lib:write_char_as_latin1(Char) -&gt; latin1_string()</string>
		<string>io_lib:write_latin1_char</string>
		<string>io_lib:write_latin1_char(&lt;#Latin1Char#&gt;)</string>
		<string>io_lib:write_latin1_char(Latin1Char) -&gt; latin1_string()</string>
		<string>io_lib:write_latin1_string</string>
		<string>io_lib:write_latin1_string(&lt;#Latin1String#&gt;)</string>
		<string>io_lib:write_latin1_string(Latin1String) -&gt; latin1_string()</string>
		<string>io_lib:write_latin1_string</string>
		<string>io_lib:write_latin1_string(&lt;#S :: latin1_string()#&gt;, &lt;#Q :: char()#&gt;)</string>
		<string>io_lib:write_latin1_string(S :: latin1_string(), Q :: char()) -&gt; latin1_string()</string>
		<string>io_lib:write_string</string>
		<string>io_lib:write_string(&lt;#String#&gt;)</string>
		<string>io_lib:write_string(String) -&gt; chars()</string>
		<string>io_lib:write_string</string>
		<string>io_lib:write_string(&lt;#S :: string()#&gt;, &lt;#Q :: char()#&gt;)</string>
		<string>io_lib:write_string(S :: string(), Q :: char()) -&gt; chars()</string>
		<string>io_lib:write_string_as_latin1</string>
		<string>io_lib:write_string_as_latin1(&lt;#String#&gt;)</string>
		<string>io_lib:write_string_as_latin1(String) -&gt; latin1_string()</string>
		<string>io_lib:write_string_as_latin1</string>
		<string>io_lib:write_string_as_latin1(&lt;#S :: string()#&gt;, &lt;#Q :: char()#&gt;)</string>
		<string>io_lib:write_string_as_latin1(S :: string(), Q :: char()) -&gt; latin1_string()</string>
		<string>lcnt:start</string>
		<string>lcnt:start()</string>
		<string>lcnt:start() -&gt; {ok, Pid} | {error, {already_started, Pid}} </string>
		<string>lcnt:stop</string>
		<string>lcnt:stop()</string>
		<string>lcnt:stop() -&gt; ok</string>
		<string>lcnt:collect</string>
		<string>lcnt:collect()</string>
		<string>lcnt:collect() -&gt; ok</string>
		<string>lcnt:collect</string>
		<string>lcnt:collect(&lt;#Node#&gt;)</string>
		<string>lcnt:collect(Node) -&gt; ok</string>
		<string>lcnt:clear</string>
		<string>lcnt:clear()</string>
		<string>lcnt:clear() -&gt; ok</string>
		<string>lcnt:clear</string>
		<string>lcnt:clear(&lt;#Node#&gt;)</string>
		<string>lcnt:clear(Node) -&gt; ok</string>
		<string>lcnt:conflicts</string>
		<string>lcnt:conflicts()</string>
		<string>lcnt:conflicts() -&gt; ok</string>
		<string>lcnt:conflicts</string>
		<string>lcnt:conflicts(&lt;#[Option]#&gt;)</string>
		<string>lcnt:conflicts([Option]) -&gt; ok</string>
		<string>lcnt:locations</string>
		<string>lcnt:locations()</string>
		<string>lcnt:locations() -&gt; ok</string>
		<string>lcnt:locations</string>
		<string>lcnt:locations(&lt;#[Option]#&gt;)</string>
		<string>lcnt:locations([Option]) -&gt; ok</string>
		<string>lcnt:inspect</string>
		<string>lcnt:inspect(&lt;#Lock#&gt;)</string>
		<string>lcnt:inspect(Lock) -&gt; ok</string>
		<string>lcnt:inspect</string>
		<string>lcnt:inspect(&lt;#Lock#&gt;, &lt;#[Option]#&gt;)</string>
		<string>lcnt:inspect(Lock, [Option]) -&gt; ok</string>
		<string>lcnt:information</string>
		<string>lcnt:information()</string>
		<string>lcnt:information() -&gt; ok</string>
		<string>lcnt:swap_pid_keys</string>
		<string>lcnt:swap_pid_keys()</string>
		<string>lcnt:swap_pid_keys() -&gt; ok</string>
		<string>lcnt:load</string>
		<string>lcnt:load(&lt;#Filename#&gt;)</string>
		<string>lcnt:load(Filename) -&gt; ok</string>
		<string>lcnt:save</string>
		<string>lcnt:save(&lt;#Filename#&gt;)</string>
		<string>lcnt:save(Filename) -&gt; ok</string>
		<string>leex:file</string>
		<string>leex:file(&lt;#FileName#&gt;, &lt;#[#&gt;, &lt;#Options]#&gt;)</string>
		<string>leex:file(FileName, [, Options]) -&gt; LeexRet</string>
		<string>leex:format_error</string>
		<string>leex:format_error(&lt;#ErrorInfo#&gt;)</string>
		<string>leex:format_error(ErrorInfo) -&gt; Chars</string>
		<string>lib:error_message</string>
		<string>lib:error_message(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>lib:error_message(Format, Args) -&gt; ok</string>
		<string>lib:eval_str</string>
		<string>lib:eval_str(&lt;#Str :: string() | unicode:latin1_binary()#&gt;)</string>
		<string>lib:eval_str(Str :: string() | unicode:latin1_binary()) -&gt; {ok, string()} | {error, string()}</string>
		<string>lib:flush_receive</string>
		<string>lib:flush_receive()</string>
		<string>lib:flush_receive() -&gt; ok</string>
		<string>lib:nonl</string>
		<string>lib:nonl(&lt;#String1#&gt;)</string>
		<string>lib:nonl(String1) -&gt; String2</string>
		<string>lib:progname</string>
		<string>lib:progname()</string>
		<string>lib:progname() -&gt; atom()</string>
		<string>lib:send</string>
		<string>lib:send(&lt;#To#&gt;, &lt;#Msg#&gt;)</string>
		<string>lib:send(To, Msg) -&gt; Msg</string>
		<string>lib:sendw</string>
		<string>lib:sendw(&lt;#To#&gt;, &lt;#Msg#&gt;)</string>
		<string>lib:sendw(To, Msg) -&gt; Msg</string>
		<string>lists:all</string>
		<string>lists:all(&lt;#Pred#&gt;, &lt;#List#&gt;)</string>
		<string>lists:all(Pred, List) -&gt; boolean()</string>
		<string>lists:any</string>
		<string>lists:any(&lt;#Pred#&gt;, &lt;#List#&gt;)</string>
		<string>lists:any(Pred, List) -&gt; boolean()</string>
		<string>lists:append</string>
		<string>lists:append(&lt;#ListOfLists#&gt;)</string>
		<string>lists:append(ListOfLists) -&gt; List1</string>
		<string>lists:append</string>
		<string>lists:append(&lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:append(List1, List2) -&gt; List3</string>
		<string>lists:concat</string>
		<string>lists:concat(&lt;#Things#&gt;)</string>
		<string>lists:concat(Things) -&gt; string()</string>
		<string>lists:delete</string>
		<string>lists:delete(&lt;#Elem#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:delete(Elem, List1) -&gt; List2</string>
		<string>lists:droplast</string>
		<string>lists:droplast(&lt;#List#&gt;)</string>
		<string>lists:droplast(List) -&gt; InitList</string>
		<string>lists:dropwhile</string>
		<string>lists:dropwhile(&lt;#Pred#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:dropwhile(Pred, List1) -&gt; List2</string>
		<string>lists:duplicate</string>
		<string>lists:duplicate(&lt;#N#&gt;, &lt;#Elem#&gt;)</string>
		<string>lists:duplicate(N, Elem) -&gt; List</string>
		<string>lists:filter</string>
		<string>lists:filter(&lt;#Pred#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:filter(Pred, List1) -&gt; List2</string>
		<string>lists:filtermap</string>
		<string>lists:filtermap(&lt;#Fun#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:filtermap(Fun, List1) -&gt; List2</string>
		<string>lists:flatlength</string>
		<string>lists:flatlength(&lt;#DeepList#&gt;)</string>
		<string>lists:flatlength(DeepList) -&gt; integer() &gt;= 0</string>
		<string>lists:flatmap</string>
		<string>lists:flatmap(&lt;#Fun#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:flatmap(Fun, List1) -&gt; List2</string>
		<string>lists:flatten</string>
		<string>lists:flatten(&lt;#DeepList#&gt;)</string>
		<string>lists:flatten(DeepList) -&gt; List</string>
		<string>lists:flatten</string>
		<string>lists:flatten(&lt;#DeepList#&gt;, &lt;#Tail#&gt;)</string>
		<string>lists:flatten(DeepList, Tail) -&gt; List</string>
		<string>lists:foldl</string>
		<string>lists:foldl(&lt;#Fun#&gt;, &lt;#Acc0#&gt;, &lt;#List#&gt;)</string>
		<string>lists:foldl(Fun, Acc0, List) -&gt; Acc1</string>
		<string>lists:foldr</string>
		<string>lists:foldr(&lt;#Fun#&gt;, &lt;#Acc0#&gt;, &lt;#List#&gt;)</string>
		<string>lists:foldr(Fun, Acc0, List) -&gt; Acc1</string>
		<string>lists:foreach</string>
		<string>lists:foreach(&lt;#Fun#&gt;, &lt;#List#&gt;)</string>
		<string>lists:foreach(Fun, List) -&gt; ok</string>
		<string>lists:keydelete</string>
		<string>lists:keydelete(&lt;#Key#&gt;, &lt;#N#&gt;, &lt;#TupleList1#&gt;)</string>
		<string>lists:keydelete(Key, N, TupleList1) -&gt; TupleList2</string>
		<string>lists:keyfind</string>
		<string>lists:keyfind(&lt;#Key#&gt;, &lt;#N#&gt;, &lt;#TupleList#&gt;)</string>
		<string>lists:keyfind(Key, N, TupleList) -&gt; Tuple | false</string>
		<string>lists:keymap</string>
		<string>lists:keymap(&lt;#Fun#&gt;, &lt;#N#&gt;, &lt;#TupleList1#&gt;)</string>
		<string>lists:keymap(Fun, N, TupleList1) -&gt; TupleList2</string>
		<string>lists:keymember</string>
		<string>lists:keymember(&lt;#Key#&gt;, &lt;#N#&gt;, &lt;#TupleList#&gt;)</string>
		<string>lists:keymember(Key, N, TupleList) -&gt; boolean()</string>
		<string>lists:keymerge</string>
		<string>lists:keymerge(&lt;#N#&gt;, &lt;#TupleList1#&gt;, &lt;#TupleList2#&gt;)</string>
		<string>lists:keymerge(N, TupleList1, TupleList2) -&gt; TupleList3</string>
		<string>lists:keyreplace</string>
		<string>lists:keyreplace(&lt;#Key#&gt;, &lt;#N#&gt;, &lt;#TupleList1#&gt;, &lt;#NewTuple#&gt;)</string>
		<string>lists:keyreplace(Key, N, TupleList1, NewTuple) -&gt; TupleList2</string>
		<string>lists:keysearch</string>
		<string>lists:keysearch(&lt;#Key#&gt;, &lt;#N#&gt;, &lt;#TupleList#&gt;)</string>
		<string>lists:keysearch(Key, N, TupleList) -&gt; {value, Tuple} | false</string>
		<string>lists:keysort</string>
		<string>lists:keysort(&lt;#N#&gt;, &lt;#TupleList1#&gt;)</string>
		<string>lists:keysort(N, TupleList1) -&gt; TupleList2</string>
		<string>lists:keystore</string>
		<string>lists:keystore(&lt;#Key#&gt;, &lt;#N#&gt;, &lt;#TupleList1#&gt;, &lt;#NewTuple#&gt;)</string>
		<string>lists:keystore(Key, N, TupleList1, NewTuple) -&gt; TupleList2</string>
		<string>lists:keytake</string>
		<string>lists:keytake(&lt;#Key#&gt;, &lt;#N#&gt;, &lt;#TupleList1#&gt;)</string>
		<string>lists:keytake(Key, N, TupleList1) -&gt; {value, Tuple, TupleList2} | false</string>
		<string>lists:last</string>
		<string>lists:last(&lt;#List#&gt;)</string>
		<string>lists:last(List) -&gt; Last</string>
		<string>lists:map</string>
		<string>lists:map(&lt;#Fun#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:map(Fun, List1) -&gt; List2</string>
		<string>lists:mapfoldl</string>
		<string>lists:mapfoldl(&lt;#Fun#&gt;, &lt;#Acc0#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:mapfoldl(Fun, Acc0, List1) -&gt; {List2, Acc1}</string>
		<string>lists:mapfoldr</string>
		<string>lists:mapfoldr(&lt;#Fun#&gt;, &lt;#Acc0#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:mapfoldr(Fun, Acc0, List1) -&gt; {List2, Acc1}</string>
		<string>lists:max</string>
		<string>lists:max(&lt;#List#&gt;)</string>
		<string>lists:max(List) -&gt; Max</string>
		<string>lists:member</string>
		<string>lists:member(&lt;#Elem#&gt;, &lt;#List#&gt;)</string>
		<string>lists:member(Elem, List) -&gt; boolean()</string>
		<string>lists:merge</string>
		<string>lists:merge(&lt;#ListOfLists#&gt;)</string>
		<string>lists:merge(ListOfLists) -&gt; List1</string>
		<string>lists:merge</string>
		<string>lists:merge(&lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:merge(List1, List2) -&gt; List3</string>
		<string>lists:merge</string>
		<string>lists:merge(&lt;#Fun#&gt;, &lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:merge(Fun, List1, List2) -&gt; List3</string>
		<string>lists:merge3</string>
		<string>lists:merge3(&lt;#List1#&gt;, &lt;#List2#&gt;, &lt;#List3#&gt;)</string>
		<string>lists:merge3(List1, List2, List3) -&gt; List4</string>
		<string>lists:min</string>
		<string>lists:min(&lt;#List#&gt;)</string>
		<string>lists:min(List) -&gt; Min</string>
		<string>lists:nth</string>
		<string>lists:nth(&lt;#N#&gt;, &lt;#List#&gt;)</string>
		<string>lists:nth(N, List) -&gt; Elem</string>
		<string>lists:nthtail</string>
		<string>lists:nthtail(&lt;#N#&gt;, &lt;#List#&gt;)</string>
		<string>lists:nthtail(N, List) -&gt; Tail</string>
		<string>lists:partition</string>
		<string>lists:partition(&lt;#Pred#&gt;, &lt;#List#&gt;)</string>
		<string>lists:partition(Pred, List) -&gt; {Satisfying, NotSatisfying}</string>
		<string>lists:prefix</string>
		<string>lists:prefix(&lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:prefix(List1, List2) -&gt; boolean()</string>
		<string>lists:reverse</string>
		<string>lists:reverse(&lt;#List1#&gt;)</string>
		<string>lists:reverse(List1) -&gt; List2</string>
		<string>lists:reverse</string>
		<string>lists:reverse(&lt;#List1#&gt;, &lt;#Tail#&gt;)</string>
		<string>lists:reverse(List1, Tail) -&gt; List2</string>
		<string>lists:rkeymerge</string>
		<string>lists:rkeymerge(&lt;#Index :: integer() &gt;= 1#&gt;, &lt;#X :: [X]#&gt;, &lt;#Y :: [Y]#&gt;)</string>
		<string>lists:rkeymerge(Index :: integer() &gt;= 1, X :: [X], Y :: [Y]) -&gt; [R]</string>
		<string>lists:rmerge</string>
		<string>lists:rmerge(&lt;#X :: [X]#&gt;, &lt;#Y :: [Y]#&gt;)</string>
		<string>lists:rmerge(X :: [X], Y :: [Y]) -&gt; [(X | Y)]</string>
		<string>lists:rmerge</string>
		<string>lists:rmerge(&lt;#Fun :: fun((X#&gt;, &lt;#Y#&gt;)</string>
		<string>lists:rmerge(Fun :: fun((X, Y) -&gt; boolean()), X :: [X], Y :: [Y]) -&gt;[(X | Y)]</string>
		<string>lists:rmerge3</string>
		<string>lists:rmerge3(&lt;#X :: [X]#&gt;, &lt;#Y :: [Y]#&gt;, &lt;#Z :: [Z]#&gt;)</string>
		<string>lists:rmerge3(X :: [X], Y :: [Y], Z :: [Z]) -&gt; [(X | Y | Z)]</string>
		<string>lists:rukeymerge</string>
		<string>lists:rukeymerge(&lt;#Index :: integer() &gt;= 1#&gt;, &lt;#X :: [X]#&gt;, &lt;#Y :: [Y]#&gt;)</string>
		<string>lists:rukeymerge(Index :: integer() &gt;= 1, X :: [X], Y :: [Y]) -&gt; [(X | Y)]</string>
		<string>lists:rumerge</string>
		<string>lists:rumerge(&lt;#X :: [X]#&gt;, &lt;#Y :: [Y]#&gt;)</string>
		<string>lists:rumerge(X :: [X], Y :: [Y]) -&gt; [(X | Y)]</string>
		<string>lists:rumerge</string>
		<string>lists:rumerge(&lt;#Fun :: fun((X#&gt;, &lt;#Y#&gt;)</string>
		<string>lists:rumerge(Fun :: fun((X, Y) -&gt; boolean()), X :: [X], Y :: [Y]) -&gt;[(X | Y)]</string>
		<string>lists:rumerge3</string>
		<string>lists:rumerge3(&lt;#X :: [X]#&gt;, &lt;#Y :: [Y]#&gt;, &lt;#Z :: [Z]#&gt;)</string>
		<string>lists:rumerge3(X :: [X], Y :: [Y], Z :: [Z]) -&gt; [(X | Y | Z)]</string>
		<string>lists:seq</string>
		<string>lists:seq(&lt;#From#&gt;, &lt;#To#&gt;)</string>
		<string>lists:seq(From, To) -&gt; Seq</string>
		<string>lists:seq</string>
		<string>lists:seq(&lt;#From#&gt;, &lt;#To#&gt;, &lt;#Incr#&gt;)</string>
		<string>lists:seq(From, To, Incr) -&gt; Seq</string>
		<string>lists:sort</string>
		<string>lists:sort(&lt;#List1#&gt;)</string>
		<string>lists:sort(List1) -&gt; List2</string>
		<string>lists:sort</string>
		<string>lists:sort(&lt;#Fun#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:sort(Fun, List1) -&gt; List2</string>
		<string>lists:split</string>
		<string>lists:split(&lt;#N#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:split(N, List1) -&gt; {List2, List3}</string>
		<string>lists:splitwith</string>
		<string>lists:splitwith(&lt;#Pred#&gt;, &lt;#List#&gt;)</string>
		<string>lists:splitwith(Pred, List) -&gt; {List1, List2}</string>
		<string>lists:sublist</string>
		<string>lists:sublist(&lt;#List1#&gt;, &lt;#Len#&gt;)</string>
		<string>lists:sublist(List1, Len) -&gt; List2</string>
		<string>lists:sublist</string>
		<string>lists:sublist(&lt;#List1#&gt;, &lt;#Start#&gt;, &lt;#Len#&gt;)</string>
		<string>lists:sublist(List1, Start, Len) -&gt; List2</string>
		<string>lists:subtract</string>
		<string>lists:subtract(&lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:subtract(List1, List2) -&gt; List3</string>
		<string>lists:suffix</string>
		<string>lists:suffix(&lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:suffix(List1, List2) -&gt; boolean()</string>
		<string>lists:sum</string>
		<string>lists:sum(&lt;#List#&gt;)</string>
		<string>lists:sum(List) -&gt; number()</string>
		<string>lists:takewhile</string>
		<string>lists:takewhile(&lt;#Pred#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:takewhile(Pred, List1) -&gt; List2</string>
		<string>lists:ukeymerge</string>
		<string>lists:ukeymerge(&lt;#N#&gt;, &lt;#TupleList1#&gt;, &lt;#TupleList2#&gt;)</string>
		<string>lists:ukeymerge(N, TupleList1, TupleList2) -&gt; TupleList3</string>
		<string>lists:ukeysort</string>
		<string>lists:ukeysort(&lt;#N#&gt;, &lt;#TupleList1#&gt;)</string>
		<string>lists:ukeysort(N, TupleList1) -&gt; TupleList2</string>
		<string>lists:umerge</string>
		<string>lists:umerge(&lt;#ListOfLists#&gt;)</string>
		<string>lists:umerge(ListOfLists) -&gt; List1</string>
		<string>lists:umerge</string>
		<string>lists:umerge(&lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:umerge(List1, List2) -&gt; List3</string>
		<string>lists:umerge</string>
		<string>lists:umerge(&lt;#Fun#&gt;, &lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:umerge(Fun, List1, List2) -&gt; List3</string>
		<string>lists:umerge3</string>
		<string>lists:umerge3(&lt;#List1#&gt;, &lt;#List2#&gt;, &lt;#List3#&gt;)</string>
		<string>lists:umerge3(List1, List2, List3) -&gt; List4</string>
		<string>lists:unzip</string>
		<string>lists:unzip(&lt;#List1#&gt;)</string>
		<string>lists:unzip(List1) -&gt; {List2, List3}</string>
		<string>lists:unzip3</string>
		<string>lists:unzip3(&lt;#List1#&gt;)</string>
		<string>lists:unzip3(List1) -&gt; {List2, List3, List4}</string>
		<string>lists:usort</string>
		<string>lists:usort(&lt;#List1#&gt;)</string>
		<string>lists:usort(List1) -&gt; List2</string>
		<string>lists:usort</string>
		<string>lists:usort(&lt;#Fun#&gt;, &lt;#List1#&gt;)</string>
		<string>lists:usort(Fun, List1) -&gt; List2</string>
		<string>lists:zf</string>
		<string>lists:zf(&lt;#F :: fun((T#&gt;)</string>
		<string>lists:zf(F :: fun((T) -&gt; boolean() | {true, X}), T :: [T]) -&gt; [(T | X)]</string>
		<string>lists:zip</string>
		<string>lists:zip(&lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:zip(List1, List2) -&gt; List3</string>
		<string>lists:zip3</string>
		<string>lists:zip3(&lt;#List1#&gt;, &lt;#List2#&gt;, &lt;#List3#&gt;)</string>
		<string>lists:zip3(List1, List2, List3) -&gt; List4</string>
		<string>lists:zipwith</string>
		<string>lists:zipwith(&lt;#Combine#&gt;, &lt;#List1#&gt;, &lt;#List2#&gt;)</string>
		<string>lists:zipwith(Combine, List1, List2) -&gt; List3</string>
		<string>lists:zipwith3</string>
		<string>lists:zipwith3(&lt;#Combine#&gt;, &lt;#List1#&gt;, &lt;#List2#&gt;, &lt;#List3#&gt;)</string>
		<string>lists:zipwith3(Combine, List1, List2, List3) -&gt; List4</string>
		<string>lname:create</string>
		<string>lname:create()</string>
		<string>lname:create() -&gt; Return</string>
		<string>lname:insert_component</string>
		<string>lname:insert_component(&lt;#Name#&gt;, &lt;#N#&gt;, &lt;#NameComponent#&gt;)</string>
		<string>lname:insert_component(Name, N, NameComponent) -&gt; Return</string>
		<string>lname:get_component</string>
		<string>lname:get_component(&lt;#Name#&gt;, &lt;#N#&gt;)</string>
		<string>lname:get_component(Name, N) -&gt; Return</string>
		<string>lname:delete_component</string>
		<string>lname:delete_component(&lt;#Name#&gt;, &lt;#N#&gt;)</string>
		<string>lname:delete_component(Name, N) -&gt; Return</string>
		<string>lname:num_component</string>
		<string>lname:num_component(&lt;#Name#&gt;)</string>
		<string>lname:num_component(Name) -&gt; Return</string>
		<string>lname:equal</string>
		<string>lname:equal(&lt;#Name1#&gt;, &lt;#Name2#&gt;)</string>
		<string>lname:equal(Name1, Name2) -&gt; Return</string>
		<string>lname:less_than</string>
		<string>lname:less_than(&lt;#Name1#&gt;, &lt;#Name2#&gt;)</string>
		<string>lname:less_than(Name1, Name2) -&gt; Return</string>
		<string>lname:to_idl_form</string>
		<string>lname:to_idl_form(&lt;#Name#&gt;)</string>
		<string>lname:to_idl_form(Name) -&gt; Return</string>
		<string>lname:from_idl_form</string>
		<string>lname:from_idl_form(&lt;#Name#&gt;)</string>
		<string>lname:from_idl_form(Name) -&gt; Return</string>
		<string>lname_component:create</string>
		<string>lname_component:create()</string>
		<string>lname_component:create() -&gt; Return</string>
		<string>lname_component:get_id</string>
		<string>lname_component:get_id(&lt;#NameComponent#&gt;)</string>
		<string>lname_component:get_id(NameComponent) -&gt; Return</string>
		<string>lname_component:set_id</string>
		<string>lname_component:set_id(&lt;#NameComponent#&gt;, &lt;#Id#&gt;)</string>
		<string>lname_component:set_id(NameComponent, Id) -&gt; Return</string>
		<string>lname_component:get_kind</string>
		<string>lname_component:get_kind(&lt;#NameComponent#&gt;)</string>
		<string>lname_component:get_kind(NameComponent) -&gt; Return</string>
		<string>lname_component:set_kind</string>
		<string>lname_component:set_kind(&lt;#NameComponent#&gt;, &lt;#Kind#&gt;)</string>
		<string>lname_component:set_kind(NameComponent, Kind) -&gt; Return</string>
		<string>log_mf_h:code_change</string>
		<string>log_mf_h:code_change(&lt;#OldVsn :: term()#&gt;, &lt;#State ::#state{dir = undefined | file:filename()#&gt;, &lt;#maxB = undefined | b()#&gt;, &lt;#maxF = undefined | f()#&gt;, &lt;#curB = undefined | b()#&gt;, &lt;#curF = undefined | f()#&gt;, &lt;#cur_fd = undefined | file:fd()#&gt;, &lt;#index = any()#&gt;, &lt;#pred = undefined | pred()}#&gt;, &lt;#Extra :: term()#&gt;)</string>
		<string>log_mf_h:code_change(OldVsn :: term(), State ::#state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}, Extra :: term()) -&gt; {ok, #state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}}</string>
		<string>log_mf_h:handle_call</string>
		<string>log_mf_h:handle_call(&lt;#X1 :: null#&gt;, &lt;#State ::#state{dir = undefined | file:filename()#&gt;, &lt;#maxB = undefined | b()#&gt;, &lt;#maxF = undefined | f()#&gt;, &lt;#curB = undefined | b()#&gt;, &lt;#curF = undefined | f()#&gt;, &lt;#cur_fd = undefined | file:fd()#&gt;, &lt;#index = any()#&gt;, &lt;#pred = undefined | pred()}#&gt;)</string>
		<string>log_mf_h:handle_call(X1 :: null, State ::#state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}) -&gt; {ok, null, #state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}}</string>
		<string>log_mf_h:handle_event</string>
		<string>log_mf_h:handle_event(&lt;#Event :: term()#&gt;, &lt;#State ::#state{dir = undefined | file:filename()#&gt;, &lt;#maxB = undefined | b()#&gt;, &lt;#maxF = undefined | f()#&gt;, &lt;#curB = undefined | b()#&gt;, &lt;#curF = undefined | f()#&gt;, &lt;#cur_fd = undefined | file:fd()#&gt;, &lt;#index = any()#&gt;, &lt;#pred = undefined | pred()}#&gt;)</string>
		<string>log_mf_h:handle_event(Event :: term(), State ::#state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}) -&gt; {ok, #state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}}</string>
		<string>log_mf_h:handle_info</string>
		<string>log_mf_h:handle_info(&lt;#X1 :: term()#&gt;, &lt;#State ::#state{dir = undefined | file:filename()#&gt;, &lt;#maxB = undefined | b()#&gt;, &lt;#maxF = undefined | f()#&gt;, &lt;#curB = undefined | b()#&gt;, &lt;#curF = undefined | f()#&gt;, &lt;#cur_fd = undefined | file:fd()#&gt;, &lt;#index = any()#&gt;, &lt;#pred = undefined | pred()}#&gt;)</string>
		<string>log_mf_h:handle_info(X1 :: term(), State ::#state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}) -&gt; {ok, #state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}}</string>
		<string>log_mf_h:init</string>
		<string>log_mf_h:init(&lt;#X1 :: {file:filename()#&gt;, &lt;#integer() &gt;= 0#&gt;, &lt;#f()#&gt;, &lt;#pred()}#&gt;)</string>
		<string>log_mf_h:init(X1 :: {file:filename(), integer() &gt;= 0, f(), pred()}) -&gt; {ok, #state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}} | {error, term()}</string>
		<string>log_mf_h:init</string>
		<string>log_mf_h:init(&lt;#Dir#&gt;, &lt;#MaxBytes#&gt;, &lt;#MaxFiles#&gt;)</string>
		<string>log_mf_h:init(Dir, MaxBytes, MaxFiles) -&gt; Args</string>
		<string>log_mf_h:init</string>
		<string>log_mf_h:init(&lt;#Dir#&gt;, &lt;#MaxBytes#&gt;, &lt;#MaxFiles#&gt;, &lt;#Pred#&gt;)</string>
		<string>log_mf_h:init(Dir, MaxBytes, MaxFiles, Pred) -&gt; Args</string>
		<string>log_mf_h:terminate</string>
		<string>log_mf_h:terminate(&lt;#X1 :: term()#&gt;, &lt;#State ::#state{dir = undefined | file:filename()#&gt;, &lt;#maxB = undefined | b()#&gt;, &lt;#maxF = undefined | f()#&gt;, &lt;#curB = undefined | b()#&gt;, &lt;#curF = undefined | f()#&gt;, &lt;#cur_fd = undefined | file:fd()#&gt;, &lt;#index = any()#&gt;, &lt;#pred = undefined | pred()}#&gt;)</string>
		<string>log_mf_h:terminate(X1 :: term(), State ::#state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}) -&gt; #state{dir = undefined | file:filename(), maxB = undefined | b(), maxF = undefined | f(), curB = undefined | b(), curF = undefined | f(), cur_fd = undefined | file:fd(), index = any(), pred = undefined | pred()}</string>
		<string>make:all</string>
		<string>make:all()</string>
		<string>make:all() -&gt; up_to_date | error</string>
		<string>make:all</string>
		<string>make:all(&lt;#Options#&gt;)</string>
		<string>make:all(Options) -&gt; up_to_date | error</string>
		<string>make:files</string>
		<string>make:files(&lt;#ModFiles#&gt;)</string>
		<string>make:files(ModFiles) -&gt; up_to_date | error</string>
		<string>make:files</string>
		<string>make:files(&lt;#ModFiles#&gt;, &lt;#Options#&gt;)</string>
		<string>make:files(ModFiles, Options) -&gt; up_to_date | error</string>
		<string>maps:find</string>
		<string>maps:find(&lt;#Key#&gt;, &lt;#Map#&gt;)</string>
		<string>maps:find(Key, Map) -&gt; {ok, Value} | error</string>
		<string>maps:fold</string>
		<string>maps:fold(&lt;#Fun#&gt;, &lt;#Init#&gt;, &lt;#Map#&gt;)</string>
		<string>maps:fold(Fun, Init, Map) -&gt; Acc</string>
		<string>maps:from_list</string>
		<string>maps:from_list(&lt;#List#&gt;)</string>
		<string>maps:from_list(List) -&gt; Map</string>
		<string>maps:get</string>
		<string>maps:get(&lt;#Key#&gt;, &lt;#Map#&gt;)</string>
		<string>maps:get(Key, Map) -&gt; Value</string>
		<string>maps:get</string>
		<string>maps:get(&lt;#Key#&gt;, &lt;#Map#&gt;, &lt;#Default#&gt;)</string>
		<string>maps:get(Key, Map, Default) -&gt; Value | Default</string>
		<string>maps:is_key</string>
		<string>maps:is_key(&lt;#Key#&gt;, &lt;#Map#&gt;)</string>
		<string>maps:is_key(Key, Map) -&gt; boolean()</string>
		<string>maps:keys</string>
		<string>maps:keys(&lt;#Map#&gt;)</string>
		<string>maps:keys(Map) -&gt; Keys</string>
		<string>maps:map</string>
		<string>maps:map(&lt;#Fun#&gt;, &lt;#Map1#&gt;)</string>
		<string>maps:map(Fun, Map1) -&gt; Map2</string>
		<string>maps:merge</string>
		<string>maps:merge(&lt;#Map1#&gt;, &lt;#Map2#&gt;)</string>
		<string>maps:merge(Map1, Map2) -&gt; Map3</string>
		<string>maps:new</string>
		<string>maps:new()</string>
		<string>maps:new() -&gt; Map</string>
		<string>maps:put</string>
		<string>maps:put(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Map1#&gt;)</string>
		<string>maps:put(Key, Value, Map1) -&gt; Map2</string>
		<string>maps:remove</string>
		<string>maps:remove(&lt;#Key#&gt;, &lt;#Map1#&gt;)</string>
		<string>maps:remove(Key, Map1) -&gt; Map2</string>
		<string>maps:size</string>
		<string>maps:size(&lt;#Map#&gt;)</string>
		<string>maps:size(Map) -&gt; integer() &gt;= 0</string>
		<string>maps:to_list</string>
		<string>maps:to_list(&lt;#Map#&gt;)</string>
		<string>maps:to_list(Map) -&gt; [{Key, Value}]</string>
		<string>maps:update</string>
		<string>maps:update(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Map1#&gt;)</string>
		<string>maps:update(Key, Value, Map1) -&gt; Map2</string>
		<string>maps:values</string>
		<string>maps:values(&lt;#Map#&gt;)</string>
		<string>maps:values(Map) -&gt; Values</string>
		<string>maps:with</string>
		<string>maps:with(&lt;#Ks#&gt;, &lt;#Map1#&gt;)</string>
		<string>maps:with(Ks, Map1) -&gt; Map2</string>
		<string>maps:without</string>
		<string>maps:without(&lt;#Ks#&gt;, &lt;#Map1#&gt;)</string>
		<string>maps:without(Ks, Map1) -&gt; Map2</string>
		<string>math:acos</string>
		<string>math:acos(&lt;#X#&gt;)</string>
		<string>math:acos(X) -&gt; float()</string>
		<string>math:acosh</string>
		<string>math:acosh(&lt;#X#&gt;)</string>
		<string>math:acosh(X) -&gt; float()</string>
		<string>math:asin</string>
		<string>math:asin(&lt;#X#&gt;)</string>
		<string>math:asin(X) -&gt; float()</string>
		<string>math:asinh</string>
		<string>math:asinh(&lt;#X#&gt;)</string>
		<string>math:asinh(X) -&gt; float()</string>
		<string>math:atan</string>
		<string>math:atan(&lt;#X#&gt;)</string>
		<string>math:atan(X) -&gt; float()</string>
		<string>math:atan2</string>
		<string>math:atan2(&lt;#Y#&gt;, &lt;#X#&gt;)</string>
		<string>math:atan2(Y, X) -&gt; float()</string>
		<string>math:atanh</string>
		<string>math:atanh(&lt;#X#&gt;)</string>
		<string>math:atanh(X) -&gt; float()</string>
		<string>math:cos</string>
		<string>math:cos(&lt;#X#&gt;)</string>
		<string>math:cos(X) -&gt; float()</string>
		<string>math:cosh</string>
		<string>math:cosh(&lt;#X#&gt;)</string>
		<string>math:cosh(X) -&gt; float()</string>
		<string>math:erf</string>
		<string>math:erf(&lt;#X#&gt;)</string>
		<string>math:erf(X) -&gt; float()</string>
		<string>math:erfc</string>
		<string>math:erfc(&lt;#X#&gt;)</string>
		<string>math:erfc(X) -&gt; float()</string>
		<string>math:exp</string>
		<string>math:exp(&lt;#X#&gt;)</string>
		<string>math:exp(X) -&gt; float()</string>
		<string>math:log</string>
		<string>math:log(&lt;#X#&gt;)</string>
		<string>math:log(X) -&gt; float()</string>
		<string>math:log10</string>
		<string>math:log10(&lt;#X#&gt;)</string>
		<string>math:log10(X) -&gt; float()</string>
		<string>math:pi</string>
		<string>math:pi()</string>
		<string>math:pi() -&gt; float()</string>
		<string>math:pow</string>
		<string>math:pow(&lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>math:pow(X, Y) -&gt; float()</string>
		<string>math:sin</string>
		<string>math:sin(&lt;#X#&gt;)</string>
		<string>math:sin(X) -&gt; float()</string>
		<string>math:sinh</string>
		<string>math:sinh(&lt;#X#&gt;)</string>
		<string>math:sinh(X) -&gt; float()</string>
		<string>math:sqrt</string>
		<string>math:sqrt(&lt;#X#&gt;)</string>
		<string>math:sqrt(X) -&gt; float()</string>
		<string>math:tan</string>
		<string>math:tan(&lt;#X#&gt;)</string>
		<string>math:tan(X) -&gt; float()</string>
		<string>math:tanh</string>
		<string>math:tanh(&lt;#X#&gt;)</string>
		<string>math:tanh(X) -&gt; float()</string>
		<string>megaco:start</string>
		<string>megaco:start()</string>
		<string>megaco:start() -&gt; ok | {error, Reason}</string>
		<string>megaco:stop</string>
		<string>megaco:stop()</string>
		<string>megaco:stop() -&gt; ok | {error, Reason}</string>
		<string>megaco:start_user</string>
		<string>megaco:start_user(&lt;#UserMid#&gt;, &lt;#Config#&gt;)</string>
		<string>megaco:start_user(UserMid, Config) -&gt; ok | {error, Reason}</string>
		<string>megaco:stop_user</string>
		<string>megaco:stop_user(&lt;#UserMid#&gt;)</string>
		<string>megaco:stop_user(UserMid) -&gt; ok | {error, Reason}</string>
		<string>megaco:user_info</string>
		<string>megaco:user_info(&lt;#UserMid#&gt;)</string>
		<string>megaco:user_info(UserMid) -&gt; [{Item, Value}]</string>
		<string>megaco:user_info</string>
		<string>megaco:user_info(&lt;#UserMid#&gt;, &lt;#Item#&gt;)</string>
		<string>megaco:user_info(UserMid, Item) -&gt; Value | exit(Reason)</string>
		<string>megaco:update_user_info</string>
		<string>megaco:update_user_info(&lt;#UserMid#&gt;, &lt;#Item#&gt;, &lt;#Value#&gt;)</string>
		<string>megaco:update_user_info(UserMid, Item, Value) -&gt; ok | {error, Reason}</string>
		<string>megaco:conn_info</string>
		<string>megaco:conn_info(&lt;#ConnHandle#&gt;)</string>
		<string>megaco:conn_info(ConnHandle) -&gt; [{Item, Value}]</string>
		<string>megaco:conn_info</string>
		<string>megaco:conn_info(&lt;#ConnHandle#&gt;, &lt;#Item#&gt;)</string>
		<string>megaco:conn_info(ConnHandle, Item) -&gt; Value | exit(Reason)</string>
		<string>megaco:update_conn_info</string>
		<string>megaco:update_conn_info(&lt;#ConnHandle#&gt;, &lt;#Item#&gt;, &lt;#Value#&gt;)</string>
		<string>megaco:update_conn_info(ConnHandle, Item, Value) -&gt; ok | {error, Reason}</string>
		<string>megaco:system_info</string>
		<string>megaco:system_info()</string>
		<string>megaco:system_info() -&gt; [{Item, Value}] | exit(Reason)</string>
		<string>megaco:system_info</string>
		<string>megaco:system_info(&lt;#Item#&gt;)</string>
		<string>megaco:system_info(Item) -&gt; Value | exit(Reason)</string>
		<string>megaco:info</string>
		<string>megaco:info()</string>
		<string>megaco:info() -&gt; Info</string>
		<string>megaco:connect</string>
		<string>megaco:connect(&lt;#ReceiveHandle#&gt;, &lt;#RemoteMid#&gt;, &lt;#SendHandle#&gt;, &lt;#ControlPid#&gt;)</string>
		<string>megaco:connect(ReceiveHandle, RemoteMid, SendHandle, ControlPid) -&gt; {ok, ConnHandle} | {error, Reason}</string>
		<string>megaco:connect</string>
		<string>megaco:connect(&lt;#ReceiveHandle#&gt;, &lt;#RemoteMid#&gt;, &lt;#SendHandle#&gt;, &lt;#ControlPid#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco:connect(ReceiveHandle, RemoteMid, SendHandle, ControlPid, Extra) -&gt; {ok, ConnHandle} | {error, Reason}</string>
		<string>megaco:disconnect</string>
		<string>megaco:disconnect(&lt;#ConnHandle#&gt;, &lt;#DiscoReason#&gt;)</string>
		<string>megaco:disconnect(ConnHandle, DiscoReason) -&gt; ok | {error, ErrReason}</string>
		<string>megaco:call</string>
		<string>megaco:call(&lt;#ConnHandle#&gt;, &lt;#Actions#&gt;, &lt;#Options#&gt;)</string>
		<string>megaco:call(ConnHandle, Actions, Options) -&gt; {ProtocolVersion, UserReply}</string>
		<string>megaco:cast</string>
		<string>megaco:cast(&lt;#ConnHandle#&gt;, &lt;#Actions#&gt;, &lt;#Options#&gt;)</string>
		<string>megaco:cast(ConnHandle, Actions, Options) -&gt; ok | {error, Reason}</string>
		<string>megaco:encode_actions</string>
		<string>megaco:encode_actions(&lt;#ConnHandle#&gt;, &lt;#Actions#&gt;, &lt;#Options#&gt;)</string>
		<string>megaco:encode_actions(ConnHandle, Actions, Options) -&gt; {ok, BinOrBins} | {error, Reason}</string>
		<string>megaco:token_tag2string</string>
		<string>megaco:token_tag2string(&lt;#Tag#&gt;)</string>
		<string>megaco:token_tag2string(Tag) -&gt; Result</string>
		<string>megaco:token_tag2string</string>
		<string>megaco:token_tag2string(&lt;#Tag#&gt;, &lt;#EncoderMod#&gt;)</string>
		<string>megaco:token_tag2string(Tag, EncoderMod) -&gt; Result</string>
		<string>megaco:token_tag2string</string>
		<string>megaco:token_tag2string(&lt;#Tag#&gt;, &lt;#EncoderMod#&gt;, &lt;#Version#&gt;)</string>
		<string>megaco:token_tag2string(Tag, EncoderMod, Version) -&gt; Result</string>
		<string>megaco:cancel</string>
		<string>megaco:cancel(&lt;#ConnHandle#&gt;, &lt;#CancelReason#&gt;)</string>
		<string>megaco:cancel(ConnHandle, CancelReason) -&gt; ok | {error, ErrReason}</string>
		<string>megaco:process_received_message</string>
		<string>megaco:process_received_message(&lt;#ReceiveHandle#&gt;, &lt;#ControlPid#&gt;, &lt;#SendHandle#&gt;, &lt;#BinMsg#&gt;)</string>
		<string>megaco:process_received_message(ReceiveHandle, ControlPid, SendHandle, BinMsg) -&gt; ok</string>
		<string>megaco:process_received_message</string>
		<string>megaco:process_received_message(&lt;#ReceiveHandle#&gt;, &lt;#ControlPid#&gt;, &lt;#SendHandle#&gt;, &lt;#BinMsg#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco:process_received_message(ReceiveHandle, ControlPid, SendHandle, BinMsg, Extra) -&gt; ok</string>
		<string>megaco:receive_message</string>
		<string>megaco:receive_message(&lt;#ReceiveHandle#&gt;, &lt;#ControlPid#&gt;, &lt;#SendHandle#&gt;, &lt;#BinMsg#&gt;)</string>
		<string>megaco:receive_message(ReceiveHandle, ControlPid, SendHandle, BinMsg) -&gt; ok</string>
		<string>megaco:receive_message</string>
		<string>megaco:receive_message(&lt;#ReceiveHandle#&gt;, &lt;#ControlPid#&gt;, &lt;#SendHandle#&gt;, &lt;#BinMsg#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco:receive_message(ReceiveHandle, ControlPid, SendHandle, BinMsg, Extra) -&gt; ok</string>
		<string>megaco:parse_digit_map</string>
		<string>megaco:parse_digit_map(&lt;#DigitMapBody#&gt;)</string>
		<string>megaco:parse_digit_map(DigitMapBody) -&gt; {ok, ParsedDigitMap} | {error, Reason}</string>
		<string>megaco:eval_digit_map</string>
		<string>megaco:eval_digit_map(&lt;#DigitMap#&gt;)</string>
		<string>megaco:eval_digit_map(DigitMap) -&gt; {ok, MatchResult} | {error, Reason}</string>
		<string>megaco:eval_digit_map</string>
		<string>megaco:eval_digit_map(&lt;#DigitMap#&gt;, &lt;#Timers#&gt;)</string>
		<string>megaco:eval_digit_map(DigitMap, Timers) -&gt; {ok, MatchResult} | {error, Reason}</string>
		<string>megaco:report_digit_event</string>
		<string>megaco:report_digit_event(&lt;#DigitMapEvalPid#&gt;, &lt;#Events#&gt;)</string>
		<string>megaco:report_digit_event(DigitMapEvalPid, Events) -&gt; ok | {error, Reason}</string>
		<string>megaco:test_digit_event</string>
		<string>megaco:test_digit_event(&lt;#DigitMap#&gt;, &lt;#Events#&gt;)</string>
		<string>megaco:test_digit_event(DigitMap, Events) -&gt; {ok, Kind, Letters} | {error, Reason}</string>
		<string>megaco:encode_sdp</string>
		<string>megaco:encode_sdp(&lt;#SDP#&gt;)</string>
		<string>megaco:encode_sdp(SDP) -&gt; {ok, PP} | {error, Reason}</string>
		<string>megaco:decode_sdp</string>
		<string>megaco:decode_sdp(&lt;#PP#&gt;)</string>
		<string>megaco:decode_sdp(PP) -&gt; {ok, SDP} | {error, Reason}</string>
		<string>megaco:get_sdp_record_from_PropertGroup</string>
		<string>megaco:get_sdp_record_from_PropertGroup(&lt;#Type#&gt;, &lt;#PG#&gt;)</string>
		<string>megaco:get_sdp_record_from_PropertGroup(Type, PG) -&gt; [sdp()]</string>
		<string>megaco:versions1</string>
		<string>megaco:versions1()</string>
		<string>megaco:versions1() -&gt; {ok, VersionInfo} | {error, Reason}</string>
		<string>megaco:versions2</string>
		<string>megaco:versions2()</string>
		<string>megaco:versions2() -&gt; {ok, Info} | {error, Reason}</string>
		<string>megaco:print_version_info</string>
		<string>megaco:print_version_info()</string>
		<string>megaco:print_version_info() -&gt; void()</string>
		<string>megaco:print_version_info</string>
		<string>megaco:print_version_info(&lt;#VersionInfo#&gt;)</string>
		<string>megaco:print_version_info(VersionInfo) -&gt; void()</string>
		<string>megaco:enable_trace</string>
		<string>megaco:enable_trace(&lt;#Level#&gt;, &lt;#Destination#&gt;)</string>
		<string>megaco:enable_trace(Level, Destination) -&gt; void()</string>
		<string>megaco:disable_trace</string>
		<string>megaco:disable_trace()</string>
		<string>megaco:disable_trace() -&gt; void()</string>
		<string>megaco:set_trace</string>
		<string>megaco:set_trace(&lt;#Level#&gt;)</string>
		<string>megaco:set_trace(Level) -&gt; void()</string>
		<string>megaco:get_stats</string>
		<string>megaco:get_stats()</string>
		<string>megaco:get_stats() -&gt; {ok, TotalStats} | {error, Reason}</string>
		<string>megaco:get_stats</string>
		<string>megaco:get_stats(&lt;#GlobalCounter#&gt;)</string>
		<string>megaco:get_stats(GlobalCounter) -&gt; {ok, CounterStats} | {error, Reason}</string>
		<string>megaco:get_stats</string>
		<string>megaco:get_stats(&lt;#ConnHandle#&gt;)</string>
		<string>megaco:get_stats(ConnHandle) -&gt; {ok, ConnHandleStats} | {error, Reason}</string>
		<string>megaco:get_stats</string>
		<string>megaco:get_stats(&lt;#ConnHandle#&gt;, &lt;#Counter#&gt;)</string>
		<string>megaco:get_stats(ConnHandle, Counter) -&gt; {ok, integer()} | {error, Reason}</string>
		<string>megaco:reset_stats</string>
		<string>megaco:reset_stats()</string>
		<string>megaco:reset_stats() -&gt; void()</string>
		<string>megaco:reset_stats</string>
		<string>megaco:reset_stats(&lt;#ConnHandle#&gt;)</string>
		<string>megaco:reset_stats(ConnHandle) -&gt; void()</string>
		<string>megaco:test_request</string>
		<string>megaco:test_request(&lt;#ConnHandle#&gt;, &lt;#Version#&gt;, &lt;#EncodingMod#&gt;, &lt;#EncodingConfig#&gt;, &lt;#Actions#&gt;)</string>
		<string>megaco:test_request(ConnHandle, Version, EncodingMod, EncodingConfig, Actions) -&gt; {MegaMsg, EncodeRes}</string>
		<string>megaco:test_reply</string>
		<string>megaco:test_reply(&lt;#ConnHandle#&gt;, &lt;#Version#&gt;, &lt;#EncodingMod#&gt;, &lt;#EncodingConfig#&gt;, &lt;#Reply#&gt;)</string>
		<string>megaco:test_reply(ConnHandle, Version, EncodingMod, EncodingConfig, Reply) -&gt; {MegaMsg, EncodeRes}</string>
		<string>megaco_codec_meas:start</string>
		<string>megaco_codec_meas:start()</string>
		<string>megaco_codec_meas:start() -&gt; void()</string>
		<string>megaco_codec_meas:start</string>
		<string>megaco_codec_meas:start(&lt;#MessagePackage#&gt;)</string>
		<string>megaco_codec_meas:start(MessagePackage) -&gt; void()</string>
		<string>megaco_codec_mstone1:start</string>
		<string>megaco_codec_mstone1:start()</string>
		<string>megaco_codec_mstone1:start() -&gt; void()</string>
		<string>megaco_codec_mstone1:start</string>
		<string>megaco_codec_mstone1:start(&lt;#MessagePackage#&gt;)</string>
		<string>megaco_codec_mstone1:start(MessagePackage) -&gt; void()</string>
		<string>megaco_codec_mstone1:start</string>
		<string>megaco_codec_mstone1:start(&lt;#MessagePackage#&gt;, &lt;#Factor#&gt;)</string>
		<string>megaco_codec_mstone1:start(MessagePackage, Factor) -&gt; void()</string>
		<string>megaco_codec_mstone1:start_flex</string>
		<string>megaco_codec_mstone1:start_flex()</string>
		<string>megaco_codec_mstone1:start_flex() -&gt; void()</string>
		<string>megaco_codec_mstone1:start_flex</string>
		<string>megaco_codec_mstone1:start_flex(&lt;#MessagePackage#&gt;)</string>
		<string>megaco_codec_mstone1:start_flex(MessagePackage) -&gt; void()</string>
		<string>megaco_codec_mstone1:start_flex</string>
		<string>megaco_codec_mstone1:start_flex(&lt;#MessagePackage#&gt;, &lt;#Factor#&gt;)</string>
		<string>megaco_codec_mstone1:start_flex(MessagePackage, Factor) -&gt; void()</string>
		<string>megaco_codec_mstone1:start_only_drv</string>
		<string>megaco_codec_mstone1:start_only_drv()</string>
		<string>megaco_codec_mstone1:start_only_drv() -&gt; void()</string>
		<string>megaco_codec_mstone1:start_only_drv</string>
		<string>megaco_codec_mstone1:start_only_drv(&lt;#MessagePackage#&gt;)</string>
		<string>megaco_codec_mstone1:start_only_drv(MessagePackage) -&gt; void()</string>
		<string>megaco_codec_mstone1:start_only_drv</string>
		<string>megaco_codec_mstone1:start_only_drv(&lt;#MessagePackage#&gt;, &lt;#Factor#&gt;)</string>
		<string>megaco_codec_mstone1:start_only_drv(MessagePackage, Factor) -&gt; void()</string>
		<string>megaco_codec_mstone1:start_no_drv</string>
		<string>megaco_codec_mstone1:start_no_drv()</string>
		<string>megaco_codec_mstone1:start_no_drv() -&gt; void()</string>
		<string>megaco_codec_mstone1:start_no_drv</string>
		<string>megaco_codec_mstone1:start_no_drv(&lt;#MessagePackage#&gt;)</string>
		<string>megaco_codec_mstone1:start_no_drv(MessagePackage) -&gt; void()</string>
		<string>megaco_codec_mstone1:start_no_drv</string>
		<string>megaco_codec_mstone1:start_no_drv(&lt;#MessagePackage#&gt;, &lt;#Factor#&gt;)</string>
		<string>megaco_codec_mstone1:start_no_drv(MessagePackage, Factor) -&gt; void()</string>
		<string>megaco_codec_mstone2:start</string>
		<string>megaco_codec_mstone2:start()</string>
		<string>megaco_codec_mstone2:start() -&gt; void()</string>
		<string>megaco_codec_mstone2:start</string>
		<string>megaco_codec_mstone2:start(&lt;#MessagePackage#&gt;)</string>
		<string>megaco_codec_mstone2:start(MessagePackage) -&gt; void()</string>
		<string>megaco_codec_transform:export_messages</string>
		<string>megaco_codec_transform:export_messages()</string>
		<string>megaco_codec_transform:export_messages() -&gt; void()</string>
		<string>megaco_codec_transform:export_messages</string>
		<string>megaco_codec_transform:export_messages(&lt;#MessagePackage#&gt;)</string>
		<string>megaco_codec_transform:export_messages(MessagePackage) -&gt; void()</string>
		<string>megaco_edist_compress:Module:encode</string>
		<string>megaco_edist_compress:Module:encode(&lt;#R#&gt;, &lt;#Version#&gt;)</string>
		<string>megaco_edist_compress:Module:encode(R, Version) -&gt; T</string>
		<string>megaco_edist_compress:Module:decode</string>
		<string>megaco_edist_compress:Module:decode(&lt;#T#&gt;, &lt;#Version#&gt;)</string>
		<string>megaco_edist_compress:Module:decode(T, Version) -&gt; R</string>
		<string>megaco_encoder:Module:encode_message</string>
		<string>megaco_encoder:Module:encode_message(&lt;#EncodingConfig#&gt;, &lt;#Version#&gt;, &lt;#Message#&gt;)</string>
		<string>megaco_encoder:Module:encode_message(EncodingConfig, Version, Message) -&gt; {ok, Bin} | Error</string>
		<string>megaco_encoder:Module:decode_message</string>
		<string>megaco_encoder:Module:decode_message(&lt;#EncodingConfig#&gt;, &lt;#Version#&gt;, &lt;#Bin#&gt;)</string>
		<string>megaco_encoder:Module:decode_message(EncodingConfig, Version, Bin) -&gt; {ok, Message} | Error</string>
		<string>megaco_encoder:Module:decode_mini_message</string>
		<string>megaco_encoder:Module:decode_mini_message(&lt;#EncodingConfig#&gt;, &lt;#Version#&gt;, &lt;#Bin#&gt;)</string>
		<string>megaco_encoder:Module:decode_mini_message(EncodingConfig, Version, Bin) -&gt; {ok, Message} | Error</string>
		<string>megaco_encoder:Module:encode_transaction</string>
		<string>megaco_encoder:Module:encode_transaction(&lt;#EncodingConfig#&gt;, &lt;#Version#&gt;, &lt;#Transaction#&gt;)</string>
		<string>megaco_encoder:Module:encode_transaction(EncodingConfig, Version, Transaction) -&gt; OK | Error</string>
		<string>megaco_encoder:Module:encode_action_requests</string>
		<string>megaco_encoder:Module:encode_action_requests(&lt;#EncodingConfig#&gt;, &lt;#Version#&gt;, &lt;#ARs#&gt;)</string>
		<string>megaco_encoder:Module:encode_action_requests(EncodingConfig, Version, ARs) -&gt; OK | Error</string>
		<string>megaco_encoder:Module:encode_action_reply</string>
		<string>megaco_encoder:Module:encode_action_reply(&lt;#EncodingConfig#&gt;, &lt;#Version#&gt;, &lt;#AR#&gt;)</string>
		<string>megaco_encoder:Module:encode_action_reply(EncodingConfig, Version, AR) -&gt; OK | Error</string>
		<string>megaco_flex_scanner:start</string>
		<string>megaco_flex_scanner:start()</string>
		<string>megaco_flex_scanner:start() -&gt; {ok, PortOrPorts} | {error, Reason}</string>
		<string>megaco_flex_scanner:stop</string>
		<string>megaco_flex_scanner:stop(&lt;#PortOrPorts#&gt;)</string>
		<string>megaco_flex_scanner:stop(PortOrPorts) -&gt; stopped</string>
		<string>megaco_flex_scanner:is_reentrant_enabled</string>
		<string>megaco_flex_scanner:is_reentrant_enabled()</string>
		<string>megaco_flex_scanner:is_reentrant_enabled() -&gt; Boolean</string>
		<string>megaco_flex_scanner:is_scanner_port</string>
		<string>megaco_flex_scanner:is_scanner_port(&lt;#Port#&gt;, &lt;#PortOrPorts#&gt;)</string>
		<string>megaco_flex_scanner:is_scanner_port(Port, PortOrPorts) -&gt; Boolean</string>
		<string>megaco_flex_scanner:scan</string>
		<string>megaco_flex_scanner:scan(&lt;#Binary#&gt;, &lt;#PortOrPorts#&gt;)</string>
		<string>megaco_flex_scanner:scan(Binary, PortOrPorts) -&gt; {ok, Tokens, Version, LatestLine} | {error, Reason, LatestLine} </string>
		<string>megaco_tcp:start_transport</string>
		<string>megaco_tcp:start_transport()</string>
		<string>megaco_tcp:start_transport() -&gt; {ok, TransportRef}</string>
		<string>megaco_tcp:listen</string>
		<string>megaco_tcp:listen(&lt;#TransportRef#&gt;, &lt;#ListenPortSpecList#&gt;)</string>
		<string>megaco_tcp:listen(TransportRef, ListenPortSpecList) -&gt; ok</string>
		<string>megaco_tcp:connect</string>
		<string>megaco_tcp:connect(&lt;#TransportRef#&gt;, &lt;#OptionList#&gt;)</string>
		<string>megaco_tcp:connect(TransportRef, OptionList) -&gt; {ok, Handle, ControlPid} | {error, Reason}</string>
		<string>megaco_tcp:close</string>
		<string>megaco_tcp:close(&lt;#Handle#&gt;)</string>
		<string>megaco_tcp:close(Handle) -&gt; ok</string>
		<string>megaco_tcp:socket</string>
		<string>megaco_tcp:socket(&lt;#Handle#&gt;)</string>
		<string>megaco_tcp:socket(Handle) -&gt; Socket</string>
		<string>megaco_tcp:send_message</string>
		<string>megaco_tcp:send_message(&lt;#Handle#&gt;, &lt;#Message#&gt;)</string>
		<string>megaco_tcp:send_message(Handle, Message) -&gt; ok</string>
		<string>megaco_tcp:block</string>
		<string>megaco_tcp:block(&lt;#Handle#&gt;)</string>
		<string>megaco_tcp:block(Handle) -&gt; ok</string>
		<string>megaco_tcp:unblock</string>
		<string>megaco_tcp:unblock(&lt;#Handle#&gt;)</string>
		<string>megaco_tcp:unblock(Handle) -&gt; ok</string>
		<string>megaco_tcp:upgrade_receive_handle</string>
		<string>megaco_tcp:upgrade_receive_handle(&lt;#ControlPid#&gt;)</string>
		<string>megaco_tcp:upgrade_receive_handle(ControlPid) -&gt; ok</string>
		<string>megaco_tcp:get_stats</string>
		<string>megaco_tcp:get_stats()</string>
		<string>megaco_tcp:get_stats() -&gt; {ok, TotalStats} | {error, Reason}</string>
		<string>megaco_tcp:get_stats</string>
		<string>megaco_tcp:get_stats(&lt;#SendHandle#&gt;)</string>
		<string>megaco_tcp:get_stats(SendHandle) -&gt; {ok, SendHandleStats} | {error, Reason}</string>
		<string>megaco_tcp:get_stats</string>
		<string>megaco_tcp:get_stats(&lt;#SendHandle#&gt;, &lt;#Counter#&gt;)</string>
		<string>megaco_tcp:get_stats(SendHandle, Counter) -&gt; {ok, CounterStats} | {error, Reason}</string>
		<string>megaco_tcp:reset_stats</string>
		<string>megaco_tcp:reset_stats()</string>
		<string>megaco_tcp:reset_stats() -&gt; void()</string>
		<string>megaco_tcp:reset_stats</string>
		<string>megaco_tcp:reset_stats(&lt;#SendHandle#&gt;)</string>
		<string>megaco_tcp:reset_stats(SendHandle) -&gt; void()</string>
		<string>megaco_transport:Module:send_message</string>
		<string>megaco_transport:Module:send_message(&lt;#Handle#&gt;, &lt;#Msg#&gt;)</string>
		<string>megaco_transport:Module:send_message(Handle, Msg) -&gt; ok | {cancel, Reason} | Error</string>
		<string>megaco_transport:Module:send_message</string>
		<string>megaco_transport:Module:send_message(&lt;#Handle#&gt;, &lt;#Msg#&gt;, &lt;#Resend#&gt;)</string>
		<string>megaco_transport:Module:send_message(Handle, Msg, Resend) -&gt; ok | {cancel, Reason} | Error</string>
		<string>megaco_transport:Module:resend_message</string>
		<string>megaco_transport:Module:resend_message(&lt;#Handle#&gt;, &lt;#Msg#&gt;)</string>
		<string>megaco_transport:Module:resend_message(Handle, Msg) -&gt; ok | {cancel, Reason} | Error</string>
		<string>megaco_udp:start_transport</string>
		<string>megaco_udp:start_transport()</string>
		<string>megaco_udp:start_transport() -&gt; {ok, TransportRef}</string>
		<string>megaco_udp:open</string>
		<string>megaco_udp:open(&lt;#TransportRef#&gt;, &lt;#OptionList#&gt;)</string>
		<string>megaco_udp:open(TransportRef, OptionList) -&gt; {ok, Handle, ControlPid} | {error, Reason}</string>
		<string>megaco_udp:close</string>
		<string>megaco_udp:close(&lt;#Handle#&gt;, &lt;#Msg#&gt;)</string>
		<string>megaco_udp:close(Handle, Msg) -&gt; ok</string>
		<string>megaco_udp:socket</string>
		<string>megaco_udp:socket(&lt;#Handle#&gt;)</string>
		<string>megaco_udp:socket(Handle) -&gt; Socket</string>
		<string>megaco_udp:create_send_handle</string>
		<string>megaco_udp:create_send_handle(&lt;#Handle#&gt;, &lt;#Host#&gt;, &lt;#Port#&gt;)</string>
		<string>megaco_udp:create_send_handle(Handle, Host, Port) -&gt; send_handle()</string>
		<string>megaco_udp:send_message</string>
		<string>megaco_udp:send_message(&lt;#SendHandle#&gt;, &lt;#Msg#&gt;)</string>
		<string>megaco_udp:send_message(SendHandle, Msg) -&gt; ok</string>
		<string>megaco_udp:block</string>
		<string>megaco_udp:block(&lt;#Handle#&gt;)</string>
		<string>megaco_udp:block(Handle) -&gt; ok</string>
		<string>megaco_udp:unblock</string>
		<string>megaco_udp:unblock(&lt;#Handle#&gt;)</string>
		<string>megaco_udp:unblock(Handle) -&gt; ok</string>
		<string>megaco_udp:upgrade_receive_handle</string>
		<string>megaco_udp:upgrade_receive_handle(&lt;#ControlPid#&gt;, &lt;#NewHandle#&gt;)</string>
		<string>megaco_udp:upgrade_receive_handle(ControlPid, NewHandle) -&gt; ok</string>
		<string>megaco_udp:get_stats</string>
		<string>megaco_udp:get_stats()</string>
		<string>megaco_udp:get_stats() -&gt; {ok, TotalStats} | {error, Reason}</string>
		<string>megaco_udp:get_stats</string>
		<string>megaco_udp:get_stats(&lt;#SendHandle#&gt;)</string>
		<string>megaco_udp:get_stats(SendHandle) -&gt; {ok, SendHandleStats} | {error, Reason}</string>
		<string>megaco_udp:get_stats</string>
		<string>megaco_udp:get_stats(&lt;#SendHandle#&gt;, &lt;#Counter#&gt;)</string>
		<string>megaco_udp:get_stats(SendHandle, Counter) -&gt; {ok, CounterStats} | {error, Reason}</string>
		<string>megaco_udp:reset_stats</string>
		<string>megaco_udp:reset_stats()</string>
		<string>megaco_udp:reset_stats() -&gt; void()</string>
		<string>megaco_udp:reset_stats</string>
		<string>megaco_udp:reset_stats(&lt;#SendHandle#&gt;)</string>
		<string>megaco_udp:reset_stats(SendHandle) -&gt; void()</string>
		<string>megaco_user:handle_connect</string>
		<string>megaco_user:handle_connect(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;)</string>
		<string>megaco_user:handle_connect(ConnHandle, ProtocolVersion) -&gt; ok | error | {error, ErrorDescr}</string>
		<string>megaco_user:handle_connect</string>
		<string>megaco_user:handle_connect(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#Extra]#&gt;)</string>
		<string>megaco_user:handle_connect(ConnHandle, ProtocolVersion, Extra]) -&gt; ok | error | {error, ErrorDescr}</string>
		<string>megaco_user:handle_disconnect</string>
		<string>megaco_user:handle_disconnect(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#Reason#&gt;)</string>
		<string>megaco_user:handle_disconnect(ConnHandle, ProtocolVersion, Reason) -&gt; ok</string>
		<string>megaco_user:handle_syntax_error</string>
		<string>megaco_user:handle_syntax_error(&lt;#ReceiveHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#DefaultED#&gt;)</string>
		<string>megaco_user:handle_syntax_error(ReceiveHandle, ProtocolVersion, DefaultED) -&gt; reply | {reply, ED} | no_reply | {no_reply, ED} </string>
		<string>megaco_user:handle_syntax_error</string>
		<string>megaco_user:handle_syntax_error(&lt;#ReceiveHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#DefaultED#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_syntax_error(ReceiveHandle, ProtocolVersion, DefaultED, Extra) -&gt; reply | {reply, ED} | no_reply | {no_reply, ED} </string>
		<string>megaco_user:handle_message_error</string>
		<string>megaco_user:handle_message_error(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#ErrorDescr#&gt;)</string>
		<string>megaco_user:handle_message_error(ConnHandle, ProtocolVersion, ErrorDescr) -&gt; ok</string>
		<string>megaco_user:handle_message_error</string>
		<string>megaco_user:handle_message_error(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#ErrorDescr#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_message_error(ConnHandle, ProtocolVersion, ErrorDescr, Extra) -&gt; ok</string>
		<string>megaco_user:handle_trans_request</string>
		<string>megaco_user:handle_trans_request(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#ActionRequests#&gt;)</string>
		<string>megaco_user:handle_trans_request(ConnHandle, ProtocolVersion, ActionRequests) -&gt; pending() | reply() | ignore_trans_request</string>
		<string>megaco_user:handle_trans_request</string>
		<string>megaco_user:handle_trans_request(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#ActionRequests#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_trans_request(ConnHandle, ProtocolVersion, ActionRequests, Extra) -&gt; pending() | reply() | ignore_trans_request</string>
		<string>megaco_user:handle_trans_long_request</string>
		<string>megaco_user:handle_trans_long_request(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#ReqData#&gt;)</string>
		<string>megaco_user:handle_trans_long_request(ConnHandle, ProtocolVersion, ReqData) -&gt; reply()</string>
		<string>megaco_user:handle_trans_long_request</string>
		<string>megaco_user:handle_trans_long_request(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#ReqData#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_trans_long_request(ConnHandle, ProtocolVersion, ReqData, Extra) -&gt; reply()</string>
		<string>megaco_user:handle_trans_reply</string>
		<string>megaco_user:handle_trans_reply(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#UserReply#&gt;, &lt;#ReplyData#&gt;)</string>
		<string>megaco_user:handle_trans_reply(ConnHandle, ProtocolVersion, UserReply, ReplyData) -&gt; ok</string>
		<string>megaco_user:handle_trans_reply</string>
		<string>megaco_user:handle_trans_reply(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#UserReply#&gt;, &lt;#ReplyData#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_trans_reply(ConnHandle, ProtocolVersion, UserReply, ReplyData, Extra) -&gt; ok</string>
		<string>megaco_user:handle_trans_ack</string>
		<string>megaco_user:handle_trans_ack(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#AckStatus#&gt;, &lt;#AckData#&gt;)</string>
		<string>megaco_user:handle_trans_ack(ConnHandle, ProtocolVersion, AckStatus, AckData) -&gt; ok</string>
		<string>megaco_user:handle_trans_ack</string>
		<string>megaco_user:handle_trans_ack(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#AckStatus#&gt;, &lt;#AckData#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_trans_ack(ConnHandle, ProtocolVersion, AckStatus, AckData, Extra) -&gt; ok</string>
		<string>megaco_user:handle_unexpected_trans</string>
		<string>megaco_user:handle_unexpected_trans(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#Trans#&gt;)</string>
		<string>megaco_user:handle_unexpected_trans(ConnHandle, ProtocolVersion, Trans) -&gt; ok</string>
		<string>megaco_user:handle_unexpected_trans</string>
		<string>megaco_user:handle_unexpected_trans(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#Trans#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_unexpected_trans(ConnHandle, ProtocolVersion, Trans, Extra) -&gt; ok</string>
		<string>megaco_user:handle_trans_request_abort</string>
		<string>megaco_user:handle_trans_request_abort(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#TransNo#&gt;, &lt;#Pid#&gt;)</string>
		<string>megaco_user:handle_trans_request_abort(ConnHandle, ProtocolVersion, TransNo, Pid) -&gt; ok</string>
		<string>megaco_user:handle_trans_request_abort</string>
		<string>megaco_user:handle_trans_request_abort(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#TransNo#&gt;, &lt;#Pid#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_trans_request_abort(ConnHandle, ProtocolVersion, TransNo, Pid, Extra) -&gt; ok</string>
		<string>megaco_user:handle_segment_reply</string>
		<string>megaco_user:handle_segment_reply(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#TransNo#&gt;, &lt;#SegNo#&gt;, &lt;#SegCompl#&gt;)</string>
		<string>megaco_user:handle_segment_reply(ConnHandle, ProtocolVersion, TransNo, SegNo, SegCompl) -&gt; ok</string>
		<string>megaco_user:handle_segment_reply</string>
		<string>megaco_user:handle_segment_reply(&lt;#ConnHandle#&gt;, &lt;#ProtocolVersion#&gt;, &lt;#TransNo#&gt;, &lt;#SegNo#&gt;, &lt;#SegCompl#&gt;, &lt;#Extra#&gt;)</string>
		<string>megaco_user:handle_segment_reply(ConnHandle, ProtocolVersion, TransNo, SegNo, SegCompl, Extra) -&gt; ok</string>
		<string>memsup:get_memory_data</string>
		<string>memsup:get_memory_data()</string>
		<string>memsup:get_memory_data() -&gt; {Total, Allocated, Worst}</string>
		<string>memsup:get_system_memory_data</string>
		<string>memsup:get_system_memory_data()</string>
		<string>memsup:get_system_memory_data() -&gt; MemDataList</string>
		<string>memsup:get_os_wordsize</string>
		<string>memsup:get_os_wordsize()</string>
		<string>memsup:get_os_wordsize() -&gt; Wordsize</string>
		<string>memsup:get_check_interval</string>
		<string>memsup:get_check_interval()</string>
		<string>memsup:get_check_interval() -&gt; MS</string>
		<string>memsup:set_check_interval</string>
		<string>memsup:set_check_interval(&lt;#Minutes#&gt;)</string>
		<string>memsup:set_check_interval(Minutes) -&gt; ok</string>
		<string>memsup:get_procmem_high_watermark</string>
		<string>memsup:get_procmem_high_watermark()</string>
		<string>memsup:get_procmem_high_watermark() -&gt; int()</string>
		<string>memsup:set_procmem_high_watermark</string>
		<string>memsup:set_procmem_high_watermark(&lt;#Float#&gt;)</string>
		<string>memsup:set_procmem_high_watermark(Float) -&gt; ok</string>
		<string>memsup:get_sysmem_high_watermark</string>
		<string>memsup:get_sysmem_high_watermark()</string>
		<string>memsup:get_sysmem_high_watermark() -&gt; int()</string>
		<string>memsup:set_sysmem_high_watermark</string>
		<string>memsup:set_sysmem_high_watermark(&lt;#Float#&gt;)</string>
		<string>memsup:set_sysmem_high_watermark(Float) -&gt; ok</string>
		<string>memsup:get_helper_timeout</string>
		<string>memsup:get_helper_timeout()</string>
		<string>memsup:get_helper_timeout() -&gt; Seconds</string>
		<string>memsup:set_helper_timeout</string>
		<string>memsup:set_helper_timeout(&lt;#Seconds#&gt;)</string>
		<string>memsup:set_helper_timeout(Seconds) -&gt; ok</string>
		<string>mnesia:abort</string>
		<string>mnesia:abort(&lt;#Reason#&gt;)</string>
		<string>mnesia:abort(Reason) -&gt; transaction abort </string>
		<string>mnesia:activate_checkpoint</string>
		<string>mnesia:activate_checkpoint(&lt;#Args#&gt;)</string>
		<string>mnesia:activate_checkpoint(Args) -&gt; {ok, Name, Nodes} | {error, Reason}</string>
		<string>mnesia:activity</string>
		<string>mnesia:activity(&lt;#AccessContext#&gt;, &lt;#Fun [#&gt;, &lt;#Args]#&gt;)</string>
		<string>mnesia:activity(AccessContext, Fun [, Args]) -&gt; ResultOfFun | exit(Reason)</string>
		<string>mnesia:activity</string>
		<string>mnesia:activity(&lt;#AccessContext#&gt;, &lt;#Fun#&gt;, &lt;#Args#&gt;, &lt;#AccessMod#&gt;)</string>
		<string>mnesia:activity(AccessContext, Fun, Args, AccessMod) -&gt; ResultOfFun | exit(Reason)</string>
		<string>mnesia:add_table_copy</string>
		<string>mnesia:add_table_copy(&lt;#Tab#&gt;, &lt;#Node#&gt;, &lt;#Type#&gt;)</string>
		<string>mnesia:add_table_copy(Tab, Node, Type) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:add_table_index</string>
		<string>mnesia:add_table_index(&lt;#Tab#&gt;, &lt;#AttrName#&gt;)</string>
		<string>mnesia:add_table_index(Tab, AttrName) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:all_keys</string>
		<string>mnesia:all_keys(&lt;#Tab#&gt;)</string>
		<string>mnesia:all_keys(Tab) -&gt; KeyList | transaction abort</string>
		<string>mnesia:async_dirty</string>
		<string>mnesia:async_dirty(&lt;#Fun#&gt;, &lt;#[#&gt;, &lt;#Args]#&gt;)</string>
		<string>mnesia:async_dirty(Fun, [, Args]) -&gt; ResultOfFun | exit(Reason)</string>
		<string>mnesia:backup</string>
		<string>mnesia:backup(&lt;#Opaque [#&gt;, &lt;#BackupMod]#&gt;)</string>
		<string>mnesia:backup(Opaque [, BackupMod]) -&gt; ok | {error, Reason}</string>
		<string>mnesia:backup_checkpoint</string>
		<string>mnesia:backup_checkpoint(&lt;#Name#&gt;, &lt;#Opaque [#&gt;, &lt;#BackupMod]#&gt;)</string>
		<string>mnesia:backup_checkpoint(Name, Opaque [, BackupMod]) -&gt; ok | {error, Reason}</string>
		<string>mnesia:change_config</string>
		<string>mnesia:change_config(&lt;#Config#&gt;, &lt;#Value#&gt;)</string>
		<string>mnesia:change_config(Config, Value) -&gt; {error, Reason} | {ok, ReturnValue}</string>
		<string>mnesia:change_table_access_mode</string>
		<string>mnesia:change_table_access_mode(&lt;#Tab#&gt;, &lt;#AccessMode#&gt;)</string>
		<string>mnesia:change_table_access_mode(Tab, AccessMode) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:change_table_copy_type</string>
		<string>mnesia:change_table_copy_type(&lt;#Tab#&gt;, &lt;#Node#&gt;, &lt;#To#&gt;)</string>
		<string>mnesia:change_table_copy_type(Tab, Node, To) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:change_table_load_order</string>
		<string>mnesia:change_table_load_order(&lt;#Tab#&gt;, &lt;#LoadOrder#&gt;)</string>
		<string>mnesia:change_table_load_order(Tab, LoadOrder) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:change_table_majority</string>
		<string>mnesia:change_table_majority(&lt;#Tab#&gt;, &lt;#Majority#&gt;)</string>
		<string>mnesia:change_table_majority(Tab, Majority) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:clear_table</string>
		<string>mnesia:clear_table(&lt;#Tab#&gt;)</string>
		<string>mnesia:clear_table(Tab) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:create_schema</string>
		<string>mnesia:create_schema(&lt;#DiscNodes#&gt;)</string>
		<string>mnesia:create_schema(DiscNodes) -&gt; ok | {error, Reason}</string>
		<string>mnesia:create_table</string>
		<string>mnesia:create_table(&lt;#Name#&gt;, &lt;#TabDef#&gt;)</string>
		<string>mnesia:create_table(Name, TabDef) -&gt; {atomic, ok} | {aborted, Reason}</string>
		<string>mnesia:deactivate_checkpoint</string>
		<string>mnesia:deactivate_checkpoint(&lt;#Name#&gt;)</string>
		<string>mnesia:deactivate_checkpoint(Name) -&gt; ok | {error, Reason}</string>
		<string>mnesia:del_table_copy</string>
		<string>mnesia:del_table_copy(&lt;#Tab#&gt;, &lt;#Node#&gt;)</string>
		<string>mnesia:del_table_copy(Tab, Node) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:del_table_index</string>
		<string>mnesia:del_table_index(&lt;#Tab#&gt;, &lt;#AttrName#&gt;)</string>
		<string>mnesia:del_table_index(Tab, AttrName) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:delete</string>
		<string>mnesia:delete(&lt;#{Tab#&gt;, &lt;#Key}#&gt;)</string>
		<string>mnesia:delete({Tab, Key}) -&gt; transaction abort | ok </string>
		<string>mnesia:delete</string>
		<string>mnesia:delete(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#LockKind#&gt;)</string>
		<string>mnesia:delete(Tab, Key, LockKind) -&gt; transaction abort | ok </string>
		<string>mnesia:delete_object</string>
		<string>mnesia:delete_object(&lt;#Record#&gt;)</string>
		<string>mnesia:delete_object(Record) -&gt; transaction abort | ok </string>
		<string>mnesia:delete_object</string>
		<string>mnesia:delete_object(&lt;#Tab#&gt;, &lt;#Record#&gt;, &lt;#LockKind#&gt;)</string>
		<string>mnesia:delete_object(Tab, Record, LockKind) -&gt; transaction abort | ok </string>
		<string>mnesia:delete_schema</string>
		<string>mnesia:delete_schema(&lt;#DiscNodes#&gt;)</string>
		<string>mnesia:delete_schema(DiscNodes) -&gt; ok | {error, Reason}</string>
		<string>mnesia:delete_table</string>
		<string>mnesia:delete_table(&lt;#Tab#&gt;)</string>
		<string>mnesia:delete_table(Tab) -&gt; {aborted, Reason} | {atomic, ok} </string>
		<string>mnesia:dirty_all_keys</string>
		<string>mnesia:dirty_all_keys(&lt;#Tab#&gt;)</string>
		<string>mnesia:dirty_all_keys(Tab) -&gt; KeyList | exit({aborted, Reason}).</string>
		<string>mnesia:dirty_delete</string>
		<string>mnesia:dirty_delete(&lt;#{Tab#&gt;, &lt;#Key}#&gt;)</string>
		<string>mnesia:dirty_delete({Tab, Key}) -&gt; ok | exit({aborted, Reason}) </string>
		<string>mnesia:dirty_delete</string>
		<string>mnesia:dirty_delete(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>mnesia:dirty_delete(Tab, Key) -&gt; ok | exit({aborted, Reason}) </string>
		<string>mnesia:dirty_delete_object</string>
		<string>mnesia:dirty_delete_object(&lt;#Record#&gt;)</string>
		<string>mnesia:dirty_delete_object(Record)</string>
		<string>mnesia:dirty_delete_object</string>
		<string>mnesia:dirty_delete_object(&lt;#Tab#&gt;, &lt;#Record#&gt;)</string>
		<string>mnesia:dirty_delete_object(Tab, Record)</string>
		<string>mnesia:dirty_first</string>
		<string>mnesia:dirty_first(&lt;#Tab#&gt;)</string>
		<string>mnesia:dirty_first(Tab) -&gt; Key | exit({aborted, Reason}) </string>
		<string>mnesia:dirty_index_match_object</string>
		<string>mnesia:dirty_index_match_object(&lt;#Pattern#&gt;, &lt;#Pos#&gt;)</string>
		<string>mnesia:dirty_index_match_object(Pattern, Pos)</string>
		<string>mnesia:dirty_index_match_object</string>
		<string>mnesia:dirty_index_match_object(&lt;#Tab#&gt;, &lt;#Pattern#&gt;, &lt;#Pos#&gt;)</string>
		<string>mnesia:dirty_index_match_object(Tab, Pattern, Pos)</string>
		<string>mnesia:dirty_index_read</string>
		<string>mnesia:dirty_index_read(&lt;#Tab#&gt;, &lt;#SecondaryKey#&gt;, &lt;#Pos#&gt;)</string>
		<string>mnesia:dirty_index_read(Tab, SecondaryKey, Pos)</string>
		<string>mnesia:dirty_last</string>
		<string>mnesia:dirty_last(&lt;#Tab#&gt;)</string>
		<string>mnesia:dirty_last(Tab) -&gt; Key | exit({aborted, Reason}) </string>
		<string>mnesia:dirty_match_object</string>
		<string>mnesia:dirty_match_object(&lt;#Pattern#&gt;)</string>
		<string>mnesia:dirty_match_object(Pattern) -&gt; RecordList | exit({aborted, Reason}).</string>
		<string>mnesia:dirty_match_object</string>
		<string>mnesia:dirty_match_object(&lt;#Tab#&gt;, &lt;#Pattern#&gt;)</string>
		<string>mnesia:dirty_match_object(Tab, Pattern) -&gt; RecordList | exit({aborted, Reason}).</string>
		<string>mnesia:dirty_next</string>
		<string>mnesia:dirty_next(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>mnesia:dirty_next(Tab, Key) -&gt; Key | exit({aborted, Reason}) </string>
		<string>mnesia:dirty_prev</string>
		<string>mnesia:dirty_prev(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>mnesia:dirty_prev(Tab, Key) -&gt; Key | exit({aborted, Reason}) </string>
		<string>mnesia:dirty_read</string>
		<string>mnesia:dirty_read(&lt;#{Tab#&gt;, &lt;#Key}#&gt;)</string>
		<string>mnesia:dirty_read({Tab, Key}) -&gt; ValueList | exit({aborted, Reason}</string>
		<string>mnesia:dirty_read</string>
		<string>mnesia:dirty_read(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>mnesia:dirty_read(Tab, Key) -&gt; ValueList | exit({aborted, Reason}</string>
		<string>mnesia:dirty_select</string>
		<string>mnesia:dirty_select(&lt;#Tab#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>mnesia:dirty_select(Tab, MatchSpec) -&gt; ValueList | exit({aborted, Reason}</string>
		<string>mnesia:dirty_slot</string>
		<string>mnesia:dirty_slot(&lt;#Tab#&gt;, &lt;#Slot#&gt;)</string>
		<string>mnesia:dirty_slot(Tab, Slot) -&gt; RecordList | exit({aborted, Reason})</string>
		<string>mnesia:dirty_update_counter</string>
		<string>mnesia:dirty_update_counter(&lt;#{Tab#&gt;, &lt;#Key}#&gt;, &lt;#Incr#&gt;)</string>
		<string>mnesia:dirty_update_counter({Tab, Key}, Incr) -&gt; NewVal | exit({aborted, Reason})</string>
		<string>mnesia:dirty_update_counter</string>
		<string>mnesia:dirty_update_counter(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#Incr#&gt;)</string>
		<string>mnesia:dirty_update_counter(Tab, Key, Incr) -&gt; NewVal | exit({aborted, Reason})</string>
		<string>mnesia:dirty_write</string>
		<string>mnesia:dirty_write(&lt;#Record#&gt;)</string>
		<string>mnesia:dirty_write(Record) -&gt; ok | exit({aborted, Reason})</string>
		<string>mnesia:dirty_write</string>
		<string>mnesia:dirty_write(&lt;#Tab#&gt;, &lt;#Record#&gt;)</string>
		<string>mnesia:dirty_write(Tab, Record) -&gt; ok | exit({aborted, Reason})</string>
		<string>mnesia:dump_log</string>
		<string>mnesia:dump_log()</string>
		<string>mnesia:dump_log() -&gt; dumped</string>
		<string>mnesia:dump_tables</string>
		<string>mnesia:dump_tables(&lt;#TabList#&gt;)</string>
		<string>mnesia:dump_tables(TabList) -&gt; {atomic, ok} | {aborted, Reason}</string>
		<string>mnesia:dump_to_textfile</string>
		<string>mnesia:dump_to_textfile(&lt;#Filename#&gt;)</string>
		<string>mnesia:dump_to_textfile(Filename)</string>
		<string>mnesia:error_description</string>
		<string>mnesia:error_description(&lt;#Error#&gt;)</string>
		<string>mnesia:error_description(Error) -&gt; String </string>
		<string>mnesia:ets</string>
		<string>mnesia:ets(&lt;#Fun#&gt;, &lt;#[#&gt;, &lt;#Args]#&gt;)</string>
		<string>mnesia:ets(Fun, [, Args]) -&gt; ResultOfFun | exit(Reason)</string>
		<string>mnesia:first</string>
		<string>mnesia:first(&lt;#Tab#&gt;)</string>
		<string>mnesia:first(Tab) -&gt; Key | transaction abort </string>
		<string>mnesia:foldl</string>
		<string>mnesia:foldl(&lt;#Function#&gt;, &lt;#Acc#&gt;, &lt;#Table#&gt;)</string>
		<string>mnesia:foldl(Function, Acc, Table) -&gt; NewAcc | transaction abort </string>
		<string>mnesia:foldr</string>
		<string>mnesia:foldr(&lt;#Function#&gt;, &lt;#Acc#&gt;, &lt;#Table#&gt;)</string>
		<string>mnesia:foldr(Function, Acc, Table) -&gt; NewAcc | transaction abort </string>
		<string>mnesia:force_load_table</string>
		<string>mnesia:force_load_table(&lt;#Tab#&gt;)</string>
		<string>mnesia:force_load_table(Tab) -&gt; yes | ErrorDescription </string>
		<string>mnesia:index_match_object</string>
		<string>mnesia:index_match_object(&lt;#Pattern#&gt;, &lt;#Pos#&gt;)</string>
		<string>mnesia:index_match_object(Pattern, Pos) -&gt; transaction abort | ObjList</string>
		<string>mnesia:index_match_object</string>
		<string>mnesia:index_match_object(&lt;#Tab#&gt;, &lt;#Pattern#&gt;, &lt;#Pos#&gt;, &lt;#LockKind#&gt;)</string>
		<string>mnesia:index_match_object(Tab, Pattern, Pos, LockKind) -&gt; transaction abort | ObjList</string>
		<string>mnesia:index_read</string>
		<string>mnesia:index_read(&lt;#Tab#&gt;, &lt;#SecondaryKey#&gt;, &lt;#Pos#&gt;)</string>
		<string>mnesia:index_read(Tab, SecondaryKey, Pos) -&gt; transaction abort | RecordList </string>
		<string>mnesia:info</string>
		<string>mnesia:info()</string>
		<string>mnesia:info() -&gt; ok </string>
		<string>mnesia:install_fallback</string>
		<string>mnesia:install_fallback(&lt;#Opaque#&gt;)</string>
		<string>mnesia:install_fallback(Opaque) -&gt; ok | {error, Reason}</string>
		<string>mnesia:install_fallback</string>
		<string>mnesia:install_fallback(&lt;#Opaque)#&gt;, &lt;#BackupMod#&gt;)</string>
		<string>mnesia:install_fallback(Opaque), BackupMod) -&gt; ok | {error, Reason}</string>
		<string>mnesia:install_fallback</string>
		<string>mnesia:install_fallback(&lt;#Opaque#&gt;, &lt;#Args#&gt;)</string>
		<string>mnesia:install_fallback(Opaque, Args) -&gt; ok | {error, Reason}</string>
		<string>mnesia:is_transaction</string>
		<string>mnesia:is_transaction()</string>
		<string>mnesia:is_transaction() -&gt; boolean </string>
		<string>mnesia:last</string>
		<string>mnesia:last(&lt;#Tab#&gt;)</string>
		<string>mnesia:last(Tab) -&gt; Key | transaction abort </string>
		<string>mnesia:load_textfile</string>
		<string>mnesia:load_textfile(&lt;#Filename#&gt;)</string>
		<string>mnesia:load_textfile(Filename)</string>
		<string>mnesia:lock</string>
		<string>mnesia:lock(&lt;#LockItem#&gt;, &lt;#LockKind#&gt;)</string>
		<string>mnesia:lock(LockItem, LockKind) -&gt; Nodes | ok | transaction abort</string>
		<string>mnesia:match_object</string>
		<string>mnesia:match_object(&lt;#Pattern#&gt;)</string>
		<string>mnesia:match_object(Pattern) -&gt; transaction abort | RecList </string>
		<string>mnesia:match_object</string>
		<string>mnesia:match_object(&lt;#Tab#&gt;, &lt;#Pattern#&gt;, &lt;#LockKind#&gt;)</string>
		<string>mnesia:match_object(Tab, Pattern, LockKind) -&gt; transaction abort | RecList </string>
		<string>mnesia:move_table_copy</string>
		<string>mnesia:move_table_copy(&lt;#Tab#&gt;, &lt;#From#&gt;, &lt;#To#&gt;)</string>
		<string>mnesia:move_table_copy(Tab, From, To) -&gt; {aborted, Reason} | {atomic, ok}</string>
		<string>mnesia:next</string>
		<string>mnesia:next(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>mnesia:next(Tab, Key) -&gt; Key | transaction abort </string>
		<string>mnesia:prev</string>
		<string>mnesia:prev(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>mnesia:prev(Tab, Key) -&gt; Key | transaction abort </string>
		<string>mnesia:read</string>
		<string>mnesia:read(&lt;#{Tab#&gt;, &lt;#Key}#&gt;)</string>
		<string>mnesia:read({Tab, Key}) -&gt; transaction abort | RecordList </string>
		<string>mnesia:read</string>
		<string>mnesia:read(&lt;#Tab#&gt;, &lt;#Key#&gt;)</string>
		<string>mnesia:read(Tab, Key) -&gt; transaction abort | RecordList </string>
		<string>mnesia:read</string>
		<string>mnesia:read(&lt;#Tab#&gt;, &lt;#Key#&gt;, &lt;#LockKind#&gt;)</string>
		<string>mnesia:read(Tab, Key, LockKind) -&gt; transaction abort | RecordList </string>
		<string>mnesia:read_lock_table</string>
		<string>mnesia:read_lock_table(&lt;#Tab#&gt;)</string>
		<string>mnesia:read_lock_table(Tab) -&gt; ok | transaction abort</string>
		<string>mnesia:report_event</string>
		<string>mnesia:report_event(&lt;#Event#&gt;)</string>
		<string>mnesia:report_event(Event) -&gt; ok</string>
		<string>mnesia:restore</string>
		<string>mnesia:restore(&lt;#Opaque#&gt;, &lt;#Args#&gt;)</string>
		<string>mnesia:restore(Opaque, Args) -&gt; {atomic, RestoredTabs} | {aborted, Reason}</string>
		<string>mnesia:s_delete</string>
		<string>mnesia:s_delete(&lt;#{Tab#&gt;, &lt;#Key}#&gt;)</string>
		<string>mnesia:s_delete({Tab, Key}) -&gt; ok | transaction abort </string>
		<string>mnesia:s_delete_object</string>
		<string>mnesia:s_delete_object(&lt;#Record#&gt;)</string>
		<string>mnesia:s_delete_object(Record) -&gt; ok | transaction abort </string>
		<string>mnesia:s_write</string>
		<string>mnesia:s_write(&lt;#Record#&gt;)</string>
		<string>mnesia:s_write(Record) -&gt; ok | transaction abort </string>
		<string>mnesia:schema</string>
		<string>mnesia:schema()</string>
		<string>mnesia:schema() -&gt; ok </string>
		<string>mnesia:schema</string>
		<string>mnesia:schema(&lt;#Tab#&gt;)</string>
		<string>mnesia:schema(Tab) -&gt; ok </string>
		<string>mnesia:select</string>
		<string>mnesia:select(&lt;#Tab#&gt;, &lt;#MatchSpec [#&gt;, &lt;#Lock]#&gt;)</string>
		<string>mnesia:select(Tab, MatchSpec [, Lock]) -&gt; transaction abort | [Object] </string>
		<string>mnesia:select</string>
		<string>mnesia:select(&lt;#Tab#&gt;, &lt;#MatchSpec#&gt;, &lt;#NObjects#&gt;, &lt;#Lock#&gt;)</string>
		<string>mnesia:select(Tab, MatchSpec, NObjects, Lock) -&gt; transaction abort | {[Object], Cont} | '$end_of_table'</string>
		<string>mnesia:select</string>
		<string>mnesia:select(&lt;#Cont#&gt;)</string>
		<string>mnesia:select(Cont) -&gt; transaction abort | {[Object], Cont} | '$end_of_table'</string>
		<string>mnesia:set_debug_level</string>
		<string>mnesia:set_debug_level(&lt;#Level#&gt;)</string>
		<string>mnesia:set_debug_level(Level) -&gt; OldLevel</string>
		<string>mnesia:set_master_nodes</string>
		<string>mnesia:set_master_nodes(&lt;#MasterNodes#&gt;)</string>
		<string>mnesia:set_master_nodes(MasterNodes) -&gt; ok | {error, Reason} </string>
		<string>mnesia:set_master_nodes</string>
		<string>mnesia:set_master_nodes(&lt;#Tab#&gt;, &lt;#MasterNodes#&gt;)</string>
		<string>mnesia:set_master_nodes(Tab, MasterNodes) -&gt; ok | {error, Reason} </string>
		<string>mnesia:snmp_close_table</string>
		<string>mnesia:snmp_close_table(&lt;#Tab#&gt;)</string>
		<string>mnesia:snmp_close_table(Tab) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:snmp_get_mnesia_key</string>
		<string>mnesia:snmp_get_mnesia_key(&lt;#Tab#&gt;, &lt;#RowIndex#&gt;)</string>
		<string>mnesia:snmp_get_mnesia_key(Tab, RowIndex) -&gt; {ok, Key} | undefined</string>
		<string>mnesia:snmp_get_next_index</string>
		<string>mnesia:snmp_get_next_index(&lt;#Tab#&gt;, &lt;#RowIndex#&gt;)</string>
		<string>mnesia:snmp_get_next_index(Tab, RowIndex) -&gt; {ok, NextIndex} | endOfTable</string>
		<string>mnesia:snmp_get_row</string>
		<string>mnesia:snmp_get_row(&lt;#Tab#&gt;, &lt;#RowIndex#&gt;)</string>
		<string>mnesia:snmp_get_row(Tab, RowIndex) -&gt; {ok, Row} | undefined</string>
		<string>mnesia:snmp_open_table</string>
		<string>mnesia:snmp_open_table(&lt;#Tab#&gt;, &lt;#SnmpStruct#&gt;)</string>
		<string>mnesia:snmp_open_table(Tab, SnmpStruct) -&gt; {aborted, R} | {atomic, ok}</string>
		<string>mnesia:start</string>
		<string>mnesia:start()</string>
		<string>mnesia:start() -&gt; ok | {error, Reason} </string>
		<string>mnesia:stop</string>
		<string>mnesia:stop()</string>
		<string>mnesia:stop() -&gt; stopped </string>
		<string>mnesia:subscribe</string>
		<string>mnesia:subscribe(&lt;#EventCategory#&gt;)</string>
		<string>mnesia:subscribe(EventCategory)</string>
		<string>mnesia:sync_dirty</string>
		<string>mnesia:sync_dirty(&lt;#Fun#&gt;, &lt;#[#&gt;, &lt;#Args]#&gt;)</string>
		<string>mnesia:sync_dirty(Fun, [, Args]) -&gt; ResultOfFun | exit(Reason) </string>
		<string>mnesia:sync_log</string>
		<string>mnesia:sync_log()</string>
		<string>mnesia:sync_log() -&gt; ok | {error, Reason} </string>
		<string>mnesia:sync_transaction</string>
		<string>mnesia:sync_transaction(&lt;#Fun#&gt;, &lt;#[[#&gt;, &lt;#Args]#&gt;, &lt;#Retries]#&gt;)</string>
		<string>mnesia:sync_transaction(Fun, [[, Args], Retries]) -&gt; {aborted, Reason} | {atomic, ResultOfFun} </string>
		<string>mnesia:system_info</string>
		<string>mnesia:system_info(&lt;#InfoKey#&gt;)</string>
		<string>mnesia:system_info(InfoKey) -&gt; Info | exit({aborted, Reason})</string>
		<string>mnesia:table</string>
		<string>mnesia:table(&lt;#Tab [#&gt;, &lt;#[Option]]#&gt;)</string>
		<string>mnesia:table(Tab [, [Option]]) -&gt; QueryHandle </string>
		<string>mnesia:table_info</string>
		<string>mnesia:table_info(&lt;#Tab#&gt;, &lt;#InfoKey#&gt;)</string>
		<string>mnesia:table_info(Tab, InfoKey) -&gt; Info | exit({aborted, Reason})</string>
		<string>mnesia:transaction</string>
		<string>mnesia:transaction(&lt;#Fun [[#&gt;, &lt;#Args]#&gt;, &lt;#Retries]#&gt;)</string>
		<string>mnesia:transaction(Fun [[, Args], Retries]) -&gt; {aborted, Reason} | {atomic, ResultOfFun}</string>
		<string>mnesia:transform_table</string>
		<string>mnesia:transform_table(&lt;#Tab#&gt;, &lt;#Fun#&gt;, &lt;#NewAttributeList#&gt;, &lt;#NewRecordName#&gt;)</string>
		<string>mnesia:transform_table(Tab, Fun, NewAttributeList, NewRecordName) -&gt; {aborted, R} | {atomic, ok} </string>
		<string>mnesia:transform_table</string>
		<string>mnesia:transform_table(&lt;#Tab#&gt;, &lt;#Fun#&gt;, &lt;#NewAttributeList#&gt;)</string>
		<string>mnesia:transform_table(Tab, Fun, NewAttributeList) -&gt; {aborted, R} | {atomic, ok} </string>
		<string>mnesia:traverse_backup</string>
		<string>mnesia:traverse_backup(&lt;#Source#&gt;, &lt;#[SourceMod#&gt;, &lt;#] Target#&gt;, &lt;#[TargetMod#&gt;, &lt;#] Fun#&gt;, &lt;#Acc#&gt;)</string>
		<string>mnesia:traverse_backup(Source, [SourceMod, ] Target, [TargetMod, ] Fun, Acc) -&gt; {ok, LastAcc} | {error, Reason}</string>
		<string>mnesia:uninstall_fallback</string>
		<string>mnesia:uninstall_fallback()</string>
		<string>mnesia:uninstall_fallback() -&gt; ok | {error, Reason}</string>
		<string>mnesia:uninstall_fallback</string>
		<string>mnesia:uninstall_fallback(&lt;#Args#&gt;)</string>
		<string>mnesia:uninstall_fallback(Args) -&gt; ok | {error, Reason}</string>
		<string>mnesia:unsubscribe</string>
		<string>mnesia:unsubscribe(&lt;#EventCategory#&gt;)</string>
		<string>mnesia:unsubscribe(EventCategory)</string>
		<string>mnesia:wait_for_tables</string>
		<string>mnesia:wait_for_tables(&lt;#TabList#&gt;, &lt;#Timeout#&gt;)</string>
		<string>mnesia:wait_for_tables(TabList, Timeout) -&gt; ok | {timeout, BadTabList} | {error, Reason} </string>
		<string>mnesia:wread</string>
		<string>mnesia:wread(&lt;#{Tab#&gt;, &lt;#Key}#&gt;)</string>
		<string>mnesia:wread({Tab, Key}) -&gt; transaction abort | RecordList </string>
		<string>mnesia:write</string>
		<string>mnesia:write(&lt;#Record#&gt;)</string>
		<string>mnesia:write(Record) -&gt; transaction abort | ok </string>
		<string>mnesia:write</string>
		<string>mnesia:write(&lt;#Tab#&gt;, &lt;#Record#&gt;, &lt;#LockKind#&gt;)</string>
		<string>mnesia:write(Tab, Record, LockKind) -&gt; transaction abort | ok </string>
		<string>mnesia:write_lock_table</string>
		<string>mnesia:write_lock_table(&lt;#Tab#&gt;)</string>
		<string>mnesia:write_lock_table(Tab) -&gt; ok | transaction abort</string>
		<string>mnesia_frag_hash:init_state</string>
		<string>mnesia_frag_hash:init_state(&lt;#Tab#&gt;, &lt;#State#&gt;)</string>
		<string>mnesia_frag_hash:init_state(Tab, State) -&gt; NewState | abort(Reason)</string>
		<string>mnesia_frag_hash:add_frag</string>
		<string>mnesia_frag_hash:add_frag(&lt;#State#&gt;)</string>
		<string>mnesia_frag_hash:add_frag(State) -&gt; {NewState, IterFrags, AdditionalLockFrags} | abort(Reason)</string>
		<string>mnesia_frag_hash:del_frag</string>
		<string>mnesia_frag_hash:del_frag(&lt;#State#&gt;)</string>
		<string>mnesia_frag_hash:del_frag(State) -&gt; {NewState, IterFrags, AdditionalLockFrags} | abort(Reason)</string>
		<string>mnesia_frag_hash:key_to_frag_number</string>
		<string>mnesia_frag_hash:key_to_frag_number(&lt;#State#&gt;, &lt;#Key#&gt;)</string>
		<string>mnesia_frag_hash:key_to_frag_number(State, Key) -&gt; FragNum | abort(Reason)</string>
		<string>mnesia_frag_hash:match_spec_to_frag_numbers</string>
		<string>mnesia_frag_hash:match_spec_to_frag_numbers(&lt;#State#&gt;, &lt;#MatchSpec#&gt;)</string>
		<string>mnesia_frag_hash:match_spec_to_frag_numbers(State, MatchSpec) -&gt; FragNums | abort(Reason)</string>
		<string>mnesia_registry:create_table</string>
		<string>mnesia_registry:create_table(&lt;#Tab#&gt;)</string>
		<string>mnesia_registry:create_table(Tab) -&gt; ok | exit(Reason)</string>
		<string>mnesia_registry:create_table</string>
		<string>mnesia_registry:create_table(&lt;#Tab#&gt;, &lt;#TabDef#&gt;)</string>
		<string>mnesia_registry:create_table(Tab, TabDef) -&gt; ok | exit(Reason)</string>
		<string>mod_alias:default_index</string>
		<string>mod_alias:default_index(&lt;#ConfigDB#&gt;, &lt;#Path#&gt;)</string>
		<string>mod_alias:default_index(ConfigDB, Path) -&gt; NewPath</string>
		<string>mod_alias:path</string>
		<string>mod_alias:path(&lt;#PathData#&gt;, &lt;#ConfigDB#&gt;, &lt;#RequestURI#&gt;)</string>
		<string>mod_alias:path(PathData, ConfigDB, RequestURI) -&gt; Path</string>
		<string>mod_alias:real_name</string>
		<string>mod_alias:real_name(&lt;#ConfigDB#&gt;, &lt;#RequestURI#&gt;, &lt;#Aliases#&gt;)</string>
		<string>mod_alias:real_name(ConfigDB, RequestURI, Aliases) -&gt; Ret</string>
		<string>mod_alias:real_script_name</string>
		<string>mod_alias:real_script_name(&lt;#ConfigDB#&gt;, &lt;#RequestURI#&gt;, &lt;#ScriptAliases#&gt;)</string>
		<string>mod_alias:real_script_name(ConfigDB, RequestURI, ScriptAliases) -&gt; Ret</string>
		<string>mod_auth:add_user</string>
		<string>mod_auth:add_user(&lt;#UserName#&gt;, &lt;#Options#&gt;)</string>
		<string>mod_auth:add_user(UserName, Options) -&gt; true | {error, Reason}</string>
		<string>mod_auth:add_user</string>
		<string>mod_auth:add_user(&lt;#UserName#&gt;, &lt;#Password#&gt;, &lt;#UserData#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:add_user(UserName, Password, UserData, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:add_user</string>
		<string>mod_auth:add_user(&lt;#UserName#&gt;, &lt;#Password#&gt;, &lt;#UserData#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:add_user(UserName, Password, UserData, Address, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:delete_user</string>
		<string>mod_auth:delete_user(&lt;#UserName#&gt;, &lt;#Options#&gt;)</string>
		<string>mod_auth:delete_user(UserName, Options) -&gt; true | {error, Reason}</string>
		<string>mod_auth:delete_user</string>
		<string>mod_auth:delete_user(&lt;#UserName#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:delete_user(UserName, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:delete_user</string>
		<string>mod_auth:delete_user(&lt;#UserName#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:delete_user(UserName, Address, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:get_user</string>
		<string>mod_auth:get_user(&lt;#UserName#&gt;, &lt;#Options#&gt;)</string>
		<string>mod_auth:get_user(UserName, Options) -&gt; {ok, #httpd_user} | {error, Reason}</string>
		<string>mod_auth:get_user</string>
		<string>mod_auth:get_user(&lt;#UserName#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:get_user(UserName, Port, Dir) -&gt; {ok, #httpd_user} | {error, Reason}</string>
		<string>mod_auth:get_user</string>
		<string>mod_auth:get_user(&lt;#UserName#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:get_user(UserName, Address, Port, Dir) -&gt; {ok, #httpd_user} | {error, Reason}</string>
		<string>mod_auth:list_users</string>
		<string>mod_auth:list_users(&lt;#Options#&gt;)</string>
		<string>mod_auth:list_users(Options) -&gt; {ok, Users} | {error, Reason}</string>
		<string>mod_auth:list_users</string>
		<string>mod_auth:list_users(&lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:list_users(Port, Dir) -&gt; {ok, Users} | {error, Reason}</string>
		<string>mod_auth:list_users</string>
		<string>mod_auth:list_users(&lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:list_users(Address, Port, Dir) -&gt; {ok, Users} | {error, Reason}</string>
		<string>mod_auth:add_group_member</string>
		<string>mod_auth:add_group_member(&lt;#GroupName#&gt;, &lt;#UserName#&gt;, &lt;#Options#&gt;)</string>
		<string>mod_auth:add_group_member(GroupName, UserName, Options) -&gt; true | {error, Reason}</string>
		<string>mod_auth:add_group_member</string>
		<string>mod_auth:add_group_member(&lt;#GroupName#&gt;, &lt;#UserName#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:add_group_member(GroupName, UserName, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:add_group_member</string>
		<string>mod_auth:add_group_member(&lt;#GroupName#&gt;, &lt;#UserName#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:add_group_member(GroupName, UserName, Address, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:delete_group_member</string>
		<string>mod_auth:delete_group_member(&lt;#GroupName#&gt;, &lt;#UserName#&gt;, &lt;#Options#&gt;)</string>
		<string>mod_auth:delete_group_member(GroupName, UserName, Options) -&gt; true | {error, Reason}</string>
		<string>mod_auth:delete_group_member</string>
		<string>mod_auth:delete_group_member(&lt;#GroupName#&gt;, &lt;#UserName#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:delete_group_member(GroupName, UserName, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:delete_group_member</string>
		<string>mod_auth:delete_group_member(&lt;#GroupName#&gt;, &lt;#UserName#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:delete_group_member(GroupName, UserName, Address, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:list_group_members</string>
		<string>mod_auth:list_group_members(&lt;#GroupName#&gt;, &lt;#Options#&gt;)</string>
		<string>mod_auth:list_group_members(GroupName, Options) -&gt; {ok, Users} | {error, Reason}</string>
		<string>mod_auth:list_group_members</string>
		<string>mod_auth:list_group_members(&lt;#GroupName#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:list_group_members(GroupName, Port, Dir) -&gt; {ok, Users} | {error, Reason}</string>
		<string>mod_auth:list_group_members</string>
		<string>mod_auth:list_group_members(&lt;#GroupName#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:list_group_members(GroupName, Address, Port, Dir) -&gt; {ok, Users} | {error, Reason}</string>
		<string>mod_auth:list_groups</string>
		<string>mod_auth:list_groups(&lt;#Options#&gt;)</string>
		<string>mod_auth:list_groups(Options) -&gt; {ok, Groups} | {error, Reason}</string>
		<string>mod_auth:list_groups</string>
		<string>mod_auth:list_groups(&lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:list_groups(Port, Dir) -&gt; {ok, Groups} | {error, Reason}</string>
		<string>mod_auth:list_groups</string>
		<string>mod_auth:list_groups(&lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:list_groups(Address, Port, Dir) -&gt; {ok, Groups} | {error, Reason}</string>
		<string>mod_auth:delete_group</string>
		<string>mod_auth:delete_group(&lt;#GroupName#&gt;, &lt;#Options#&gt;)</string>
		<string>mod_auth:delete_group(GroupName, Options) -&gt; true | {error, Reason} &lt;name&gt;delete_group(GroupName, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:delete_group</string>
		<string>mod_auth:delete_group(&lt;#GroupName#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_auth:delete_group(GroupName, Address, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_auth:update_password</string>
		<string>mod_auth:update_password(&lt;#Port#&gt;, &lt;#Dir#&gt;, &lt;#OldPassword#&gt;, &lt;#NewPassword#&gt;, &lt;#NewPassword#&gt;)</string>
		<string>mod_auth:update_password(Port, Dir, OldPassword, NewPassword, NewPassword) -&gt; ok | {error, Reason}</string>
		<string>mod_auth:update_password</string>
		<string>mod_auth:update_password(&lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;, &lt;#OldPassword#&gt;, &lt;#NewPassword#&gt;, &lt;#NewPassword#&gt;)</string>
		<string>mod_auth:update_password(Address, Port, Dir, OldPassword, NewPassword, NewPassword) -&gt; ok | {error, Reason}</string>
		<string>mod_esi:deliver</string>
		<string>mod_esi:deliver(&lt;#SessionID#&gt;, &lt;#Data#&gt;)</string>
		<string>mod_esi:deliver(SessionID, Data) -&gt; ok | {error, Reason}</string>
		<string>mod_security:list_auth_users</string>
		<string>mod_security:list_auth_users(&lt;#Port#&gt;)</string>
		<string>mod_security:list_auth_users(Port) -&gt; Users | []</string>
		<string>mod_security:list_auth_users</string>
		<string>mod_security:list_auth_users(&lt;#Address#&gt;, &lt;#Port#&gt;)</string>
		<string>mod_security:list_auth_users(Address, Port) -&gt; Users | []</string>
		<string>mod_security:list_auth_users</string>
		<string>mod_security:list_auth_users(&lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_security:list_auth_users(Port, Dir) -&gt; Users | []</string>
		<string>mod_security:list_auth_users</string>
		<string>mod_security:list_auth_users(&lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_security:list_auth_users(Address, Port, Dir) -&gt; Users | []</string>
		<string>mod_security:list_blocked_users</string>
		<string>mod_security:list_blocked_users(&lt;#Port#&gt;)</string>
		<string>mod_security:list_blocked_users(Port) -&gt; Users | []</string>
		<string>mod_security:list_blocked_users</string>
		<string>mod_security:list_blocked_users(&lt;#Address#&gt;, &lt;#Port#&gt;)</string>
		<string>mod_security:list_blocked_users(Address, Port) -&gt; Users | []</string>
		<string>mod_security:list_blocked_users</string>
		<string>mod_security:list_blocked_users(&lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_security:list_blocked_users(Port, Dir) -&gt; Users | []</string>
		<string>mod_security:list_blocked_users</string>
		<string>mod_security:list_blocked_users(&lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_security:list_blocked_users(Address, Port, Dir) -&gt; Users | []</string>
		<string>mod_security:block_user</string>
		<string>mod_security:block_user(&lt;#User#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;, &lt;#Seconds#&gt;)</string>
		<string>mod_security:block_user(User, Port, Dir, Seconds) -&gt; true | {error, Reason}</string>
		<string>mod_security:block_user</string>
		<string>mod_security:block_user(&lt;#User#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;, &lt;#Seconds#&gt;)</string>
		<string>mod_security:block_user(User, Address, Port, Dir, Seconds) -&gt; true | {error, Reason}</string>
		<string>mod_security:unblock_user</string>
		<string>mod_security:unblock_user(&lt;#User#&gt;, &lt;#Port#&gt;)</string>
		<string>mod_security:unblock_user(User, Port) -&gt; true | {error, Reason}</string>
		<string>mod_security:unblock_user</string>
		<string>mod_security:unblock_user(&lt;#User#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;)</string>
		<string>mod_security:unblock_user(User, Address, Port) -&gt; true | {error, Reason}</string>
		<string>mod_security:unblock_user</string>
		<string>mod_security:unblock_user(&lt;#User#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_security:unblock_user(User, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>mod_security:unblock_user</string>
		<string>mod_security:unblock_user(&lt;#User#&gt;, &lt;#Address#&gt;, &lt;#Port#&gt;, &lt;#Dir#&gt;)</string>
		<string>mod_security:unblock_user(User, Address, Port, Dir) -&gt; true | {error, Reason}</string>
		<string>Module_Interface:Module_Interface:typeID</string>
		<string>Module_Interface:Module_Interface:typeID()</string>
		<string>Module_Interface:Module_Interface:typeID() -&gt; TypeId</string>
		<string>Module_Interface:Module_Interface:oe_create</string>
		<string>Module_Interface:Module_Interface:oe_create()</string>
		<string>Module_Interface:Module_Interface:oe_create() -&gt; ObjRef</string>
		<string>Module_Interface:Module_Interface:oe_create_link</string>
		<string>Module_Interface:Module_Interface:oe_create_link()</string>
		<string>Module_Interface:Module_Interface:oe_create_link() -&gt; ObjRef</string>
		<string>Module_Interface:Module_Interface:oe_create</string>
		<string>Module_Interface:Module_Interface:oe_create(&lt;#Env#&gt;)</string>
		<string>Module_Interface:Module_Interface:oe_create(Env) -&gt; ObjRef</string>
		<string>Module_Interface:Module_Interface:oe_create_link</string>
		<string>Module_Interface:Module_Interface:oe_create_link(&lt;#Env#&gt;)</string>
		<string>Module_Interface:Module_Interface:oe_create_link(Env) -&gt; ObjRef</string>
		<string>Module_Interface:Module_Interface:oe_create</string>
		<string>Module_Interface:Module_Interface:oe_create(&lt;#Env#&gt;, &lt;#Options#&gt;)</string>
		<string>Module_Interface:Module_Interface:oe_create(Env, Options) -&gt; ObjRef</string>
		<string>Module_Interface:Module_Interface:oe_create_link</string>
		<string>Module_Interface:Module_Interface:oe_create_link(&lt;#Env#&gt;, &lt;#Options#&gt;)</string>
		<string>Module_Interface:Module_Interface:oe_create_link(Env, Options) -&gt; Return</string>
		<string>Module_Interface:Module_Interface:own_functions</string>
		<string>Module_Interface:Module_Interface:own_functions(&lt;#ObjRef#&gt;, &lt;#Arg1#&gt;, &lt;#...#&gt;, &lt;#ArgN#&gt;)</string>
		<string>Module_Interface:Module_Interface:own_functions(ObjRef, Arg1, ..., ArgN) -&gt; Reply</string>
		<string>Module_Interface:Module_Interface:own_functions</string>
		<string>Module_Interface:Module_Interface:own_functions(&lt;#ObjRef#&gt;, &lt;#Options#&gt;, &lt;#Arg1#&gt;, &lt;#...#&gt;, &lt;#ArgN#&gt;)</string>
		<string>Module_Interface:Module_Interface:own_functions(ObjRef, Options, Arg1, ..., ArgN) -&gt; Reply</string>
		<string>ms_transform:format_error</string>
		<string>ms_transform:format_error(&lt;#Error#&gt;)</string>
		<string>ms_transform:format_error(Error) -&gt; Chars</string>
		<string>ms_transform:parse_transform</string>
		<string>ms_transform:parse_transform(&lt;#Forms#&gt;, &lt;#Options#&gt;)</string>
		<string>ms_transform:parse_transform(Forms, Options) -&gt; Forms</string>
		<string>ms_transform:transform_from_shell</string>
		<string>ms_transform:transform_from_shell(&lt;#Dialect#&gt;, &lt;#Clauses#&gt;, &lt;#BoundEnvironment#&gt;)</string>
		<string>ms_transform:transform_from_shell(Dialect, Clauses, BoundEnvironment) -&gt; term()</string>
		<string>net_adm:dns_hostname</string>
		<string>net_adm:dns_hostname(&lt;#Host#&gt;)</string>
		<string>net_adm:dns_hostname(Host) -&gt; {ok, Name} | {error, Host}</string>
		<string>net_adm:host_file</string>
		<string>net_adm:host_file()</string>
		<string>net_adm:host_file() -&gt; Hosts | {error, Reason}</string>
		<string>net_adm:localhost</string>
		<string>net_adm:localhost()</string>
		<string>net_adm:localhost() -&gt; Name</string>
		<string>net_adm:names</string>
		<string>net_adm:names()</string>
		<string>net_adm:names() -&gt; {ok, [{Name, Port}]} | {error, Reason}</string>
		<string>net_adm:names</string>
		<string>net_adm:names(&lt;#Host#&gt;)</string>
		<string>net_adm:names(Host) -&gt; {ok, [{Name, Port}]} | {error, Reason}</string>
		<string>net_adm:ping</string>
		<string>net_adm:ping(&lt;#Node#&gt;)</string>
		<string>net_adm:ping(Node) -&gt; pong | pang</string>
		<string>net_adm:ping_list</string>
		<string>net_adm:ping_list(&lt;#Nodelist :: [atom()]#&gt;)</string>
		<string>net_adm:ping_list(Nodelist :: [atom()]) -&gt; [atom()]</string>
		<string>net_adm:world</string>
		<string>net_adm:world()</string>
		<string>net_adm:world() -&gt; [node()]</string>
		<string>net_adm:world</string>
		<string>net_adm:world(&lt;#Arg#&gt;)</string>
		<string>net_adm:world(Arg) -&gt; [node()]</string>
		<string>net_adm:world_list</string>
		<string>net_adm:world_list(&lt;#Hosts#&gt;)</string>
		<string>net_adm:world_list(Hosts) -&gt; [node()]</string>
		<string>net_adm:world_list</string>
		<string>net_adm:world_list(&lt;#Hosts#&gt;, &lt;#Arg#&gt;)</string>
		<string>net_adm:world_list(Hosts, Arg) -&gt; [node()]</string>
		<string>net_kernel:allow</string>
		<string>net_kernel:allow(&lt;#Nodes#&gt;)</string>
		<string>net_kernel:allow(Nodes) -&gt; ok | error</string>
		<string>net_kernel:connect_node</string>
		<string>net_kernel:connect_node(&lt;#Node#&gt;)</string>
		<string>net_kernel:connect_node(Node) -&gt; boolean() | ignored</string>
		<string>net_kernel:dflag_unicode_io</string>
		<string>net_kernel:dflag_unicode_io(&lt;#X1 :: pid()#&gt;)</string>
		<string>net_kernel:dflag_unicode_io(X1 :: pid()) -&gt; boolean()</string>
		<string>net_kernel:get_net_ticktime</string>
		<string>net_kernel:get_net_ticktime()</string>
		<string>net_kernel:get_net_ticktime() -&gt; Res</string>
		<string>net_kernel:monitor_nodes</string>
		<string>net_kernel:monitor_nodes(&lt;#Flag#&gt;)</string>
		<string>net_kernel:monitor_nodes(Flag) -&gt; ok | Error</string>
		<string>net_kernel:monitor_nodes</string>
		<string>net_kernel:monitor_nodes(&lt;#Flag#&gt;, &lt;#Options#&gt;)</string>
		<string>net_kernel:monitor_nodes(Flag, Options) -&gt; ok | Error</string>
		<string>net_kernel:set_net_ticktime</string>
		<string>net_kernel:set_net_ticktime(&lt;#NetTicktime#&gt;)</string>
		<string>net_kernel:set_net_ticktime(NetTicktime) -&gt; Res</string>
		<string>net_kernel:set_net_ticktime</string>
		<string>net_kernel:set_net_ticktime(&lt;#NetTicktime#&gt;, &lt;#TransitionPeriod#&gt;)</string>
		<string>net_kernel:set_net_ticktime(NetTicktime, TransitionPeriod) -&gt; Res</string>
		<string>net_kernel:stop</string>
		<string>net_kernel:stop()</string>
		<string>net_kernel:stop() -&gt; ok | {error, Reason}</string>
		<string>nteventlog:start</string>
		<string>nteventlog:start(&lt;#Identifier#&gt;, &lt;#MFA#&gt;)</string>
		<string>nteventlog:start(Identifier, MFA) -&gt; Result</string>
		<string>nteventlog:start_link</string>
		<string>nteventlog:start_link(&lt;#Identifier#&gt;, &lt;#MFA#&gt;)</string>
		<string>nteventlog:start_link(Identifier, MFA) -&gt; Result</string>
		<string>nteventlog:stop</string>
		<string>nteventlog:stop()</string>
		<string>nteventlog:stop() -&gt; stopped</string>
		<string>observer:start</string>
		<string>observer:start()</string>
		<string>observer:start() -&gt; ok</string>
		<string>odbc:commit</string>
		<string>odbc:commit(&lt;#Ref#&gt;, &lt;#CommitMode#&gt;)</string>
		<string>odbc:commit(Ref, CommitMode) -&gt; ok | {error, Reason} </string>
		<string>odbc:commit</string>
		<string>odbc:commit(&lt;#Ref#&gt;, &lt;#CommitMode#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>odbc:commit(Ref, CommitMode, TimeOut) -&gt; ok | {error, Reason} </string>
		<string>odbc:connect</string>
		<string>odbc:connect(&lt;#ConnectStr#&gt;, &lt;#Options#&gt;)</string>
		<string>odbc:connect(ConnectStr, Options) -&gt; {ok, Ref} | {error, Reason} </string>
		<string>odbc:disconnect</string>
		<string>odbc:disconnect(&lt;#Ref#&gt;)</string>
		<string>odbc:disconnect(Ref) -&gt; ok | {error, Reason} </string>
		<string>odbc:describe_table</string>
		<string>odbc:describe_table(&lt;#Ref#&gt;, &lt;#Table#&gt;)</string>
		<string>odbc:describe_table(Ref, Table) -&gt; {ok, Description} | {error, Reason} </string>
		<string>odbc:describe_table</string>
		<string>odbc:describe_table(&lt;#Ref#&gt;, &lt;#Table#&gt;, &lt;#Timeout#&gt;)</string>
		<string>odbc:describe_table(Ref, Table, Timeout) -&gt; {ok, Description} | {error, Reason} </string>
		<string>odbc:first</string>
		<string>odbc:first(&lt;#Ref#&gt;)</string>
		<string>odbc:first(Ref) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:first</string>
		<string>odbc:first(&lt;#Ref#&gt;, &lt;#Timeout#&gt;)</string>
		<string>odbc:first(Ref, Timeout) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:last</string>
		<string>odbc:last(&lt;#Ref#&gt;)</string>
		<string>odbc:last(Ref) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:last</string>
		<string>odbc:last(&lt;#Ref#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>odbc:last(Ref, TimeOut) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:next</string>
		<string>odbc:next(&lt;#Ref#&gt;)</string>
		<string>odbc:next(Ref) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:next</string>
		<string>odbc:next(&lt;#Ref#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>odbc:next(Ref, TimeOut) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:param_query</string>
		<string>odbc:param_query(&lt;#Ref#&gt;, &lt;#SQLQuery#&gt;, &lt;#Params#&gt;)</string>
		<string>odbc:param_query(Ref, SQLQuery, Params) -&gt; ResultTuple | {error, Reason} </string>
		<string>odbc:param_query</string>
		<string>odbc:param_query(&lt;#Ref#&gt;, &lt;#SQLQuery#&gt;, &lt;#Params#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>odbc:param_query(Ref, SQLQuery, Params, TimeOut) -&gt; ResultTuple | {error, Reason} </string>
		<string>odbc:prev</string>
		<string>odbc:prev(&lt;#Ref#&gt;)</string>
		<string>odbc:prev(Ref) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:prev</string>
		<string>odbc:prev(&lt;#ConnectionReference#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>odbc:prev(ConnectionReference, TimeOut) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:start</string>
		<string>odbc:start()</string>
		<string>odbc:start() -&gt; ok | {error, Reason}</string>
		<string>odbc:start</string>
		<string>odbc:start(&lt;#Type#&gt;)</string>
		<string>odbc:start(Type) -&gt; ok | {error, Reason}</string>
		<string>odbc:stop</string>
		<string>odbc:stop()</string>
		<string>odbc:stop() -&gt; ok </string>
		<string>odbc:sql_query</string>
		<string>odbc:sql_query(&lt;#Ref#&gt;, &lt;#SQLQuery#&gt;)</string>
		<string>odbc:sql_query(Ref, SQLQuery) -&gt; ResultTuple | [ResultTuple] | {error, Reason}</string>
		<string>odbc:sql_query</string>
		<string>odbc:sql_query(&lt;#Ref#&gt;, &lt;#SQLQuery#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>odbc:sql_query(Ref, SQLQuery, TimeOut) -&gt; ResultTuple | [ResultTuple] | {error, Reason}</string>
		<string>odbc:select_count</string>
		<string>odbc:select_count(&lt;#Ref#&gt;, &lt;#SelectQuery#&gt;)</string>
		<string>odbc:select_count(Ref, SelectQuery) -&gt; {ok, NrRows} | {error, Reason} </string>
		<string>odbc:select_count</string>
		<string>odbc:select_count(&lt;#Ref#&gt;, &lt;#SelectQuery#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>odbc:select_count(Ref, SelectQuery, TimeOut) -&gt; {ok, NrRows} | {error, Reason} </string>
		<string>odbc:select</string>
		<string>odbc:select(&lt;#Ref#&gt;, &lt;#Position#&gt;, &lt;#N#&gt;)</string>
		<string>odbc:select(Ref, Position, N) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>odbc:select</string>
		<string>odbc:select(&lt;#Ref#&gt;, &lt;#Position#&gt;, &lt;#N#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>odbc:select(Ref, Position, N, TimeOut) -&gt; {selected, ColNames, Rows} | {error, Reason} </string>
		<string>orber:start</string>
		<string>orber:start()</string>
		<string>orber:start() -&gt; ok</string>
		<string>orber:start</string>
		<string>orber:start(&lt;#Type#&gt;)</string>
		<string>orber:start(Type) -&gt; ok</string>
		<string>orber:jump_start</string>
		<string>orber:jump_start(&lt;#Attributes#&gt;)</string>
		<string>orber:jump_start(Attributes) -&gt; ok | {'EXIT', Reason}</string>
		<string>orber:stop</string>
		<string>orber:stop()</string>
		<string>orber:stop() -&gt; ok</string>
		<string>orber:info</string>
		<string>orber:info()</string>
		<string>orber:info() -&gt; ok</string>
		<string>orber:info</string>
		<string>orber:info(&lt;#IoType#&gt;)</string>
		<string>orber:info(IoType) -&gt; ok | {'EXIT', Reason} | string()</string>
		<string>orber:exception_info</string>
		<string>orber:exception_info(&lt;#Exception#&gt;)</string>
		<string>orber:exception_info(Exception) -&gt; {ok, string()} | {error, Reason}</string>
		<string>orber:is_system_exception</string>
		<string>orber:is_system_exception(&lt;#Exception#&gt;)</string>
		<string>orber:is_system_exception(Exception) -&gt; true | false</string>
		<string>orber:get_tables</string>
		<string>orber:get_tables()</string>
		<string>orber:get_tables() -&gt; [Tables]</string>
		<string>orber:get_ORBInitRef</string>
		<string>orber:get_ORBInitRef()</string>
		<string>orber:get_ORBInitRef() -&gt; string() | undefined</string>
		<string>orber:get_ORBDefaultInitRef</string>
		<string>orber:get_ORBDefaultInitRef()</string>
		<string>orber:get_ORBDefaultInitRef() -&gt; string() | undefined</string>
		<string>orber:domain</string>
		<string>orber:domain()</string>
		<string>orber:domain() -&gt; string()</string>
		<string>orber:iiop_port</string>
		<string>orber:iiop_port()</string>
		<string>orber:iiop_port() -&gt; int()</string>
		<string>orber:iiop_out_ports</string>
		<string>orber:iiop_out_ports()</string>
		<string>orber:iiop_out_ports() -&gt; 0 | {Min, Max}</string>
		<string>orber:iiop_out_ports_random</string>
		<string>orber:iiop_out_ports_random()</string>
		<string>orber:iiop_out_ports_random() -&gt; true | false</string>
		<string>orber:iiop_out_ports_attempts</string>
		<string>orber:iiop_out_ports_attempts()</string>
		<string>orber:iiop_out_ports_attempts() -&gt; int()</string>
		<string>orber:iiop_ssl_port</string>
		<string>orber:iiop_ssl_port()</string>
		<string>orber:iiop_ssl_port() -&gt; int()</string>
		<string>orber:iiop_timeout</string>
		<string>orber:iiop_timeout()</string>
		<string>orber:iiop_timeout() -&gt; int() (milliseconds)</string>
		<string>orber:iiop_connection_timeout</string>
		<string>orber:iiop_connection_timeout()</string>
		<string>orber:iiop_connection_timeout() -&gt; int() (milliseconds)</string>
		<string>orber:iiop_connections</string>
		<string>orber:iiop_connections()</string>
		<string>orber:iiop_connections() -&gt; Result</string>
		<string>orber:iiop_connections</string>
		<string>orber:iiop_connections(&lt;#Direction#&gt;)</string>
		<string>orber:iiop_connections(Direction) -&gt; Result</string>
		<string>orber:iiop_connections_pending</string>
		<string>orber:iiop_connections_pending()</string>
		<string>orber:iiop_connections_pending() -&gt; Result</string>
		<string>orber:iiop_in_connection_timeout</string>
		<string>orber:iiop_in_connection_timeout()</string>
		<string>orber:iiop_in_connection_timeout() -&gt; int() (milliseconds)</string>
		<string>orber:iiop_acl</string>
		<string>orber:iiop_acl()</string>
		<string>orber:iiop_acl() -&gt; Result</string>
		<string>orber:activate_audit_trail</string>
		<string>orber:activate_audit_trail()</string>
		<string>orber:activate_audit_trail() -&gt; Result</string>
		<string>orber:activate_audit_trail</string>
		<string>orber:activate_audit_trail(&lt;#Verbosity#&gt;)</string>
		<string>orber:activate_audit_trail(Verbosity) -&gt; Result</string>
		<string>orber:deactivate_audit_trail</string>
		<string>orber:deactivate_audit_trail()</string>
		<string>orber:deactivate_audit_trail() -&gt; Result</string>
		<string>orber:add_listen_interface</string>
		<string>orber:add_listen_interface(&lt;#IP#&gt;, &lt;#Type#&gt;)</string>
		<string>orber:add_listen_interface(IP, Type) -&gt; Result</string>
		<string>orber:add_listen_interface</string>
		<string>orber:add_listen_interface(&lt;#IP#&gt;, &lt;#Type#&gt;, &lt;#Port#&gt;)</string>
		<string>orber:add_listen_interface(IP, Type, Port) -&gt; Result</string>
		<string>orber:add_listen_interface</string>
		<string>orber:add_listen_interface(&lt;#IP#&gt;, &lt;#Type#&gt;, &lt;#ConfigurationParameters#&gt;)</string>
		<string>orber:add_listen_interface(IP, Type, ConfigurationParameters) -&gt; Result</string>
		<string>orber:remove_listen_interface</string>
		<string>orber:remove_listen_interface(&lt;#Ref#&gt;)</string>
		<string>orber:remove_listen_interface(Ref) -&gt; ok</string>
		<string>orber:close_connection</string>
		<string>orber:close_connection(&lt;#Connection#&gt;)</string>
		<string>orber:close_connection(Connection) -&gt; Result</string>
		<string>orber:close_connection</string>
		<string>orber:close_connection(&lt;#Connection#&gt;, &lt;#Interface#&gt;)</string>
		<string>orber:close_connection(Connection, Interface) -&gt; Result</string>
		<string>orber:secure</string>
		<string>orber:secure()</string>
		<string>orber:secure() -&gt; no | ssl</string>
		<string>orber:ssl_server_options</string>
		<string>orber:ssl_server_options()</string>
		<string>orber:ssl_server_options() -&gt; list()</string>
		<string>orber:ssl_client_options</string>
		<string>orber:ssl_client_options()</string>
		<string>orber:ssl_client_options() -&gt; list()</string>
		<string>orber:set_ssl_client_options</string>
		<string>orber:set_ssl_client_options(&lt;#Options#&gt;)</string>
		<string>orber:set_ssl_client_options(Options) -&gt; ok</string>
		<string>orber:objectkeys_gc_time</string>
		<string>orber:objectkeys_gc_time()</string>
		<string>orber:objectkeys_gc_time() -&gt; int() (seconds)</string>
		<string>orber:orber_nodes</string>
		<string>orber:orber_nodes()</string>
		<string>orber:orber_nodes() -&gt; RetVal</string>
		<string>orber:install</string>
		<string>orber:install(&lt;#NodeList#&gt;)</string>
		<string>orber:install(NodeList) -&gt; ok</string>
		<string>orber:install</string>
		<string>orber:install(&lt;#NodeList#&gt;, &lt;#Options#&gt;)</string>
		<string>orber:install(NodeList, Options) -&gt; ok</string>
		<string>orber:uninstall</string>
		<string>orber:uninstall()</string>
		<string>orber:uninstall() -&gt; ok</string>
		<string>orber:add_node</string>
		<string>orber:add_node(&lt;#Node#&gt;, &lt;#Options#&gt;)</string>
		<string>orber:add_node(Node, Options) -&gt; RetVal</string>
		<string>orber:remove_node</string>
		<string>orber:remove_node(&lt;#Node#&gt;)</string>
		<string>orber:remove_node(Node) -&gt; RetVal</string>
		<string>orber:configure</string>
		<string>orber:configure(&lt;#Key#&gt;, &lt;#Value#&gt;)</string>
		<string>orber:configure(Key, Value) -&gt; ok | {'EXIT', Reason}</string>
		<string>orber_acl:match</string>
		<string>orber_acl:match(&lt;#IP#&gt;, &lt;#Direction#&gt;)</string>
		<string>orber_acl:match(IP, Direction) -&gt; boolean()</string>
		<string>orber_acl:match</string>
		<string>orber_acl:match(&lt;#IP#&gt;, &lt;#Direction#&gt;, &lt;#GetInfo#&gt;)</string>
		<string>orber_acl:match(IP, Direction, GetInfo) -&gt; Reply</string>
		<string>orber_acl:verify</string>
		<string>orber_acl:verify(&lt;#IP#&gt;, &lt;#Filter#&gt;, &lt;#Family#&gt;)</string>
		<string>orber_acl:verify(IP, Filter, Family) -&gt; Reply</string>
		<string>orber_acl:range</string>
		<string>orber_acl:range(&lt;#Filter#&gt;, &lt;#Family#&gt;)</string>
		<string>orber_acl:range(Filter, Family) -&gt; Reply</string>
		<string>orber_diagnostics:nameservice</string>
		<string>orber_diagnostics:nameservice()</string>
		<string>orber_diagnostics:nameservice() -&gt; Result</string>
		<string>orber_diagnostics:nameservice</string>
		<string>orber_diagnostics:nameservice(&lt;#Flags#&gt;)</string>
		<string>orber_diagnostics:nameservice(Flags) -&gt; Result</string>
		<string>orber_diagnostics:missing_modules</string>
		<string>orber_diagnostics:missing_modules()</string>
		<string>orber_diagnostics:missing_modules() -&gt; Count</string>
		<string>orber_ifr:init</string>
		<string>orber_ifr:init(&lt;#Nodes#&gt;, &lt;#Timeout#&gt;)</string>
		<string>orber_ifr:init(Nodes, Timeout) -&gt; ok</string>
		<string>orber_ifr:find_repository</string>
		<string>orber_ifr:find_repository()</string>
		<string>orber_ifr:find_repository() -&gt; #IFR_Repository_objref</string>
		<string>orber_tc:null</string>
		<string>orber_tc:null()</string>
		<string>orber_tc:null() -&gt; TC</string>
		<string>orber_tc:void</string>
		<string>orber_tc:void()</string>
		<string>orber_tc:void() -&gt; TC</string>
		<string>orber_tc:short</string>
		<string>orber_tc:short()</string>
		<string>orber_tc:short() -&gt; TC</string>
		<string>orber_tc:unsigned_short</string>
		<string>orber_tc:unsigned_short()</string>
		<string>orber_tc:unsigned_short() -&gt; TC</string>
		<string>orber_tc:long</string>
		<string>orber_tc:long()</string>
		<string>orber_tc:long() -&gt; TC</string>
		<string>orber_tc:unsigned_long</string>
		<string>orber_tc:unsigned_long()</string>
		<string>orber_tc:unsigned_long() -&gt; TC</string>
		<string>orber_tc:long_long</string>
		<string>orber_tc:long_long()</string>
		<string>orber_tc:long_long() -&gt; TC</string>
		<string>orber_tc:unsigned_long_long</string>
		<string>orber_tc:unsigned_long_long()</string>
		<string>orber_tc:unsigned_long_long() -&gt; TC</string>
		<string>orber_tc:wchar</string>
		<string>orber_tc:wchar()</string>
		<string>orber_tc:wchar() -&gt; TC</string>
		<string>orber_tc:float</string>
		<string>orber_tc:float()</string>
		<string>orber_tc:float() -&gt; TC</string>
		<string>orber_tc:double</string>
		<string>orber_tc:double()</string>
		<string>orber_tc:double() -&gt; TC</string>
		<string>orber_tc:boolean</string>
		<string>orber_tc:boolean()</string>
		<string>orber_tc:boolean() -&gt; TC</string>
		<string>orber_tc:char</string>
		<string>orber_tc:char()</string>
		<string>orber_tc:char() -&gt; TC</string>
		<string>orber_tc:octet</string>
		<string>orber_tc:octet()</string>
		<string>orber_tc:octet() -&gt; TC</string>
		<string>orber_tc:any</string>
		<string>orber_tc:any()</string>
		<string>orber_tc:any() -&gt; TC</string>
		<string>orber_tc:typecode</string>
		<string>orber_tc:typecode()</string>
		<string>orber_tc:typecode() -&gt; TC</string>
		<string>orber_tc:principal</string>
		<string>orber_tc:principal()</string>
		<string>orber_tc:principal() -&gt; TC</string>
		<string>orber_tc:object_reference</string>
		<string>orber_tc:object_reference(&lt;#Id#&gt;, &lt;#Name#&gt;)</string>
		<string>orber_tc:object_reference(Id, Name) -&gt; TC</string>
		<string>orber_tc:struct</string>
		<string>orber_tc:struct(&lt;#Id#&gt;, &lt;#Name#&gt;, &lt;#ElementList#&gt;)</string>
		<string>orber_tc:struct(Id, Name, ElementList) -&gt; TC</string>
		<string>orber_tc:union</string>
		<string>orber_tc:union(&lt;#Id#&gt;, &lt;#Name#&gt;, &lt;#DiscrTC#&gt;, &lt;#Default#&gt;, &lt;#ElementList#&gt;)</string>
		<string>orber_tc:union(Id, Name, DiscrTC, Default, ElementList) -&gt; TC</string>
		<string>orber_tc:enum</string>
		<string>orber_tc:enum(&lt;#Id#&gt;, &lt;#Name#&gt;, &lt;#ElementList#&gt;)</string>
		<string>orber_tc:enum(Id, Name, ElementList) -&gt; TC</string>
		<string>orber_tc:string</string>
		<string>orber_tc:string(&lt;#Length#&gt;)</string>
		<string>orber_tc:string(Length) -&gt; TC</string>
		<string>orber_tc:wstring</string>
		<string>orber_tc:wstring(&lt;#Length#&gt;)</string>
		<string>orber_tc:wstring(Length) -&gt; TC</string>
		<string>orber_tc:fixed</string>
		<string>orber_tc:fixed(&lt;#Digits#&gt;, &lt;#Scale#&gt;)</string>
		<string>orber_tc:fixed(Digits, Scale) -&gt; TC</string>
		<string>orber_tc:sequence</string>
		<string>orber_tc:sequence(&lt;#ElemTC#&gt;, &lt;#Length#&gt;)</string>
		<string>orber_tc:sequence(ElemTC, Length) -&gt; TC</string>
		<string>orber_tc:array</string>
		<string>orber_tc:array(&lt;#ElemTC#&gt;, &lt;#Length#&gt;)</string>
		<string>orber_tc:array(ElemTC, Length) -&gt; TC</string>
		<string>orber_tc:alias</string>
		<string>orber_tc:alias(&lt;#Id#&gt;, &lt;#Name#&gt;, &lt;#AliasTC#&gt;)</string>
		<string>orber_tc:alias(Id, Name, AliasTC) -&gt; TC</string>
		<string>orber_tc:exception</string>
		<string>orber_tc:exception(&lt;#Id#&gt;, &lt;#Name#&gt;, &lt;#ElementList#&gt;)</string>
		<string>orber_tc:exception(Id, Name, ElementList) -&gt; TC</string>
		<string>orber_tc:get_tc</string>
		<string>orber_tc:get_tc(&lt;#Object#&gt;)</string>
		<string>orber_tc:get_tc(Object) -&gt; TC</string>
		<string>orber_tc:get_tc</string>
		<string>orber_tc:get_tc(&lt;#Id#&gt;)</string>
		<string>orber_tc:get_tc(Id) -&gt; TC</string>
		<string>orber_tc:check_tc</string>
		<string>orber_tc:check_tc(&lt;#TC#&gt;)</string>
		<string>orber_tc:check_tc(TC) -&gt; boolean()</string>
		<string>orddict:append</string>
		<string>orddict:append(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:append(Key, Value, Orddict1) -&gt; Orddict2</string>
		<string>orddict:append_list</string>
		<string>orddict:append_list(&lt;#Key#&gt;, &lt;#ValList#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:append_list(Key, ValList, Orddict1) -&gt; Orddict2</string>
		<string>orddict:erase</string>
		<string>orddict:erase(&lt;#Key#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:erase(Key, Orddict1) -&gt; Orddict2</string>
		<string>orddict:fetch</string>
		<string>orddict:fetch(&lt;#Key#&gt;, &lt;#Orddict#&gt;)</string>
		<string>orddict:fetch(Key, Orddict) -&gt; Value</string>
		<string>orddict:fetch_keys</string>
		<string>orddict:fetch_keys(&lt;#Orddict#&gt;)</string>
		<string>orddict:fetch_keys(Orddict) -&gt; Keys</string>
		<string>orddict:filter</string>
		<string>orddict:filter(&lt;#Pred#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:filter(Pred, Orddict1) -&gt; Orddict2</string>
		<string>orddict:find</string>
		<string>orddict:find(&lt;#Key#&gt;, &lt;#Orddict#&gt;)</string>
		<string>orddict:find(Key, Orddict) -&gt; {ok, Value} | error</string>
		<string>orddict:fold</string>
		<string>orddict:fold(&lt;#Fun#&gt;, &lt;#Acc0#&gt;, &lt;#Orddict#&gt;)</string>
		<string>orddict:fold(Fun, Acc0, Orddict) -&gt; Acc1</string>
		<string>orddict:from_list</string>
		<string>orddict:from_list(&lt;#List#&gt;)</string>
		<string>orddict:from_list(List) -&gt; Orddict</string>
		<string>orddict:is_empty</string>
		<string>orddict:is_empty(&lt;#Orddict#&gt;)</string>
		<string>orddict:is_empty(Orddict) -&gt; boolean()</string>
		<string>orddict:is_key</string>
		<string>orddict:is_key(&lt;#Key#&gt;, &lt;#Orddict#&gt;)</string>
		<string>orddict:is_key(Key, Orddict) -&gt; boolean()</string>
		<string>orddict:map</string>
		<string>orddict:map(&lt;#Fun#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:map(Fun, Orddict1) -&gt; Orddict2</string>
		<string>orddict:merge</string>
		<string>orddict:merge(&lt;#Fun#&gt;, &lt;#Orddict1#&gt;, &lt;#Orddict2#&gt;)</string>
		<string>orddict:merge(Fun, Orddict1, Orddict2) -&gt; Orddict3</string>
		<string>orddict:new</string>
		<string>orddict:new()</string>
		<string>orddict:new() -&gt; orddict()</string>
		<string>orddict:size</string>
		<string>orddict:size(&lt;#Orddict#&gt;)</string>
		<string>orddict:size(Orddict) -&gt; integer() &gt;= 0</string>
		<string>orddict:store</string>
		<string>orddict:store(&lt;#Key#&gt;, &lt;#Value#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:store(Key, Value, Orddict1) -&gt; Orddict2</string>
		<string>orddict:to_list</string>
		<string>orddict:to_list(&lt;#Orddict#&gt;)</string>
		<string>orddict:to_list(Orddict) -&gt; List</string>
		<string>orddict:update</string>
		<string>orddict:update(&lt;#Key#&gt;, &lt;#Fun#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:update(Key, Fun, Orddict1) -&gt; Orddict2</string>
		<string>orddict:update</string>
		<string>orddict:update(&lt;#Key#&gt;, &lt;#Fun#&gt;, &lt;#Initial#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:update(Key, Fun, Initial, Orddict1) -&gt; Orddict2</string>
		<string>orddict:update_counter</string>
		<string>orddict:update_counter(&lt;#Key#&gt;, &lt;#Increment#&gt;, &lt;#Orddict1#&gt;)</string>
		<string>orddict:update_counter(Key, Increment, Orddict1) -&gt; Orddict2</string>
		<string>ordsets:add_element</string>
		<string>ordsets:add_element(&lt;#Element#&gt;, &lt;#Ordset1#&gt;)</string>
		<string>ordsets:add_element(Element, Ordset1) -&gt; Ordset2</string>
		<string>ordsets:del_element</string>
		<string>ordsets:del_element(&lt;#Element#&gt;, &lt;#Ordset1#&gt;)</string>
		<string>ordsets:del_element(Element, Ordset1) -&gt; Ordset2</string>
		<string>ordsets:filter</string>
		<string>ordsets:filter(&lt;#Pred#&gt;, &lt;#Ordset1#&gt;)</string>
		<string>ordsets:filter(Pred, Ordset1) -&gt; Ordset2</string>
		<string>ordsets:fold</string>
		<string>ordsets:fold(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#Ordset#&gt;)</string>
		<string>ordsets:fold(Function, Acc0, Ordset) -&gt; Acc1</string>
		<string>ordsets:from_list</string>
		<string>ordsets:from_list(&lt;#List#&gt;)</string>
		<string>ordsets:from_list(List) -&gt; Ordset</string>
		<string>ordsets:intersection</string>
		<string>ordsets:intersection(&lt;#OrdsetList#&gt;)</string>
		<string>ordsets:intersection(OrdsetList) -&gt; Ordset</string>
		<string>ordsets:intersection</string>
		<string>ordsets:intersection(&lt;#Ordset1#&gt;, &lt;#Ordset2#&gt;)</string>
		<string>ordsets:intersection(Ordset1, Ordset2) -&gt; Ordset3</string>
		<string>ordsets:is_disjoint</string>
		<string>ordsets:is_disjoint(&lt;#Ordset1#&gt;, &lt;#Ordset2#&gt;)</string>
		<string>ordsets:is_disjoint(Ordset1, Ordset2) -&gt; boolean()</string>
		<string>ordsets:is_element</string>
		<string>ordsets:is_element(&lt;#Element#&gt;, &lt;#Ordset#&gt;)</string>
		<string>ordsets:is_element(Element, Ordset) -&gt; boolean()</string>
		<string>ordsets:is_set</string>
		<string>ordsets:is_set(&lt;#Ordset#&gt;)</string>
		<string>ordsets:is_set(Ordset) -&gt; boolean()</string>
		<string>ordsets:is_subset</string>
		<string>ordsets:is_subset(&lt;#Ordset1#&gt;, &lt;#Ordset2#&gt;)</string>
		<string>ordsets:is_subset(Ordset1, Ordset2) -&gt; boolean()</string>
		<string>ordsets:new</string>
		<string>ordsets:new()</string>
		<string>ordsets:new() -&gt; []</string>
		<string>ordsets:size</string>
		<string>ordsets:size(&lt;#Ordset#&gt;)</string>
		<string>ordsets:size(Ordset) -&gt; integer() &gt;= 0</string>
		<string>ordsets:subtract</string>
		<string>ordsets:subtract(&lt;#Ordset1#&gt;, &lt;#Ordset2#&gt;)</string>
		<string>ordsets:subtract(Ordset1, Ordset2) -&gt; Ordset3</string>
		<string>ordsets:to_list</string>
		<string>ordsets:to_list(&lt;#Ordset#&gt;)</string>
		<string>ordsets:to_list(Ordset) -&gt; List</string>
		<string>ordsets:union</string>
		<string>ordsets:union(&lt;#OrdsetList#&gt;)</string>
		<string>ordsets:union(OrdsetList) -&gt; Ordset</string>
		<string>ordsets:union</string>
		<string>ordsets:union(&lt;#Ordset1#&gt;, &lt;#Ordset2#&gt;)</string>
		<string>ordsets:union(Ordset1, Ordset2) -&gt; Ordset3</string>
		<string>os:cmd</string>
		<string>os:cmd(&lt;#Command#&gt;)</string>
		<string>os:cmd(Command) -&gt; string()</string>
		<string>os:find_executable</string>
		<string>os:find_executable(&lt;#Name#&gt;)</string>
		<string>os:find_executable(Name) -&gt; Filename | false</string>
		<string>os:find_executable</string>
		<string>os:find_executable(&lt;#Name#&gt;, &lt;#Path#&gt;)</string>
		<string>os:find_executable(Name, Path) -&gt; Filename | false</string>
		<string>os:getenv</string>
		<string>os:getenv()</string>
		<string>os:getenv() -&gt; [string()]</string>
		<string>os:getenv</string>
		<string>os:getenv(&lt;#VarName#&gt;)</string>
		<string>os:getenv(VarName) -&gt; Value | false</string>
		<string>os:getpid</string>
		<string>os:getpid()</string>
		<string>os:getpid() -&gt; Value</string>
		<string>os:putenv</string>
		<string>os:putenv(&lt;#VarName#&gt;, &lt;#Value#&gt;)</string>
		<string>os:putenv(VarName, Value) -&gt; true</string>
		<string>os:timestamp</string>
		<string>os:timestamp()</string>
		<string>os:timestamp() -&gt; Timestamp</string>
		<string>os:type</string>
		<string>os:type()</string>
		<string>os:type() -&gt; {Osfamily, Osname}</string>
		<string>os:unsetenv</string>
		<string>os:unsetenv(&lt;#VarName#&gt;)</string>
		<string>os:unsetenv(VarName) -&gt; true</string>
		<string>os:version</string>
		<string>os:version()</string>
		<string>os:version() -&gt; VersionString | {Major, Minor, Release}</string>
		<string>os_mon_mib:load</string>
		<string>os_mon_mib:load(&lt;#Agent#&gt;)</string>
		<string>os_mon_mib:load(Agent) -&gt; ok | {error, Reason}</string>
		<string>os_mon_mib:unload</string>
		<string>os_mon_mib:unload(&lt;#Agent#&gt;)</string>
		<string>os_mon_mib:unload(Agent) -&gt; ok | {error, Reason}</string>
		<string>os_sup:enable</string>
		<string>os_sup:enable()</string>
		<string>os_sup:enable() -&gt; ok | {error, Res}</string>
		<string>os_sup:enable</string>
		<string>os_sup:enable(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>os_sup:enable(Dir, Conf) -&gt; ok | {error, Error}</string>
		<string>os_sup:disable</string>
		<string>os_sup:disable()</string>
		<string>os_sup:disable() -&gt; ok | {error, Res}</string>
		<string>os_sup:disable</string>
		<string>os_sup:disable(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>os_sup:disable(Dir, Conf) -&gt; ok | {error, Error}</string>
		<string>ose:attach</string>
		<string>ose:attach(&lt;#Port#&gt;, &lt;#Pid#&gt;)</string>
		<string>ose:attach(Port, Pid) -&gt; Ref</string>
		<string>ose:close</string>
		<string>ose:close(&lt;#Port#&gt;)</string>
		<string>ose:close(Port) -&gt; ok</string>
		<string>ose:dehunt</string>
		<string>ose:dehunt(&lt;#Port#&gt;, &lt;#Ref#&gt;)</string>
		<string>ose:dehunt(Port, Ref) -&gt; ok</string>
		<string>ose:detach</string>
		<string>ose:detach(&lt;#Port#&gt;, &lt;#Ref#&gt;)</string>
		<string>ose:detach(Port, Ref) -&gt; ok</string>
		<string>ose:get_id</string>
		<string>ose:get_id(&lt;#Port#&gt;)</string>
		<string>ose:get_id(Port) -&gt; Pid</string>
		<string>ose:get_name</string>
		<string>ose:get_name(&lt;#Port#&gt;, &lt;#Pid#&gt;)</string>
		<string>ose:get_name(Port, Pid) -&gt; Name | undefined</string>
		<string>ose:hunt</string>
		<string>ose:hunt(&lt;#Port#&gt;, &lt;#HuntPath#&gt;)</string>
		<string>ose:hunt(Port, HuntPath) -&gt; Ref</string>
		<string>ose:listen</string>
		<string>ose:listen(&lt;#Port#&gt;, &lt;#SigNos#&gt;)</string>
		<string>ose:listen(Port, SigNos) -&gt; ok</string>
		<string>ose:open</string>
		<string>ose:open(&lt;#Name#&gt;)</string>
		<string>ose:open(Name) -&gt; Port</string>
		<string>ose:send</string>
		<string>ose:send(&lt;#Port#&gt;, &lt;#Pid#&gt;, &lt;#SigNo#&gt;, &lt;#SigData#&gt;)</string>
		<string>ose:send(Port, Pid, SigNo, SigData) -&gt; ok</string>
		<string>ose:send</string>
		<string>ose:send(&lt;#Port#&gt;, &lt;#Pid#&gt;, &lt;#SenderPid#&gt;, &lt;#SigNo#&gt;, &lt;#SigData#&gt;)</string>
		<string>ose:send(Port, Pid, SenderPid, SigNo, SigData) -&gt; ok</string>
		<string>otp_mib:load</string>
		<string>otp_mib:load(&lt;#Agent#&gt;)</string>
		<string>otp_mib:load(Agent) -&gt; ok | {error, Reason}</string>
		<string>otp_mib:unload</string>
		<string>otp_mib:unload(&lt;#Agent#&gt;)</string>
		<string>otp_mib:unload(Agent) -&gt; ok | {error, Reason}</string>
		<string>overload:request</string>
		<string>overload:request()</string>
		<string>overload:request() -&gt; accept | reject</string>
		<string>overload:get_overload_info</string>
		<string>overload:get_overload_info()</string>
		<string>overload:get_overload_info() -&gt; OverloadInfo</string>
		<string>percept:analyze</string>
		<string>percept:analyze(&lt;#Filename::string()#&gt;)</string>
		<string>percept:analyze(Filename::string()) -&gt; ok | {error, Reason}</string>
		<string>percept:profile</string>
		<string>percept:profile(&lt;#Filename::string()#&gt;)</string>
		<string>percept:profile(Filename::string()) -&gt; {ok, Port} | {already_started, Port}</string>
		<string>percept:profile</string>
		<string>percept:profile(&lt;#Filename::string()#&gt;, &lt;#Options::[percept_option()]#&gt;)</string>
		<string>percept:profile(Filename::string(), Options::[percept_option()]) -&gt; {ok, Port} | {already_started, Port}</string>
		<string>percept:profile</string>
		<string>percept:profile(&lt;#Filename::string()#&gt;, &lt;#MFA::mfa()#&gt;, &lt;#Options::[percept_option()]#&gt;)</string>
		<string>percept:profile(Filename::string(), MFA::mfa(), Options::[percept_option()]) -&gt; ok | {already_started, Port} | {error, not_started}</string>
		<string>percept:start_webserver</string>
		<string>percept:start_webserver()</string>
		<string>percept:start_webserver() -&gt; {started, Hostname, Port} | {error, Reason}</string>
		<string>percept:start_webserver</string>
		<string>percept:start_webserver(&lt;#Port::integer()#&gt;)</string>
		<string>percept:start_webserver(Port::integer()) -&gt; {started, Hostname, AssignedPort} | {error, Reason}</string>
		<string>percept:stop_profile</string>
		<string>percept:stop_profile()</string>
		<string>percept:stop_profile() -&gt; ok | {error, not_started}</string>
		<string>percept:stop_webserver</string>
		<string>percept:stop_webserver()</string>
		<string>percept:stop_webserver() -&gt; ok | {error, not_started}</string>
		<string>percept_profile:start</string>
		<string>percept_profile:start(&lt;#Filename::string()#&gt;)</string>
		<string>percept_profile:start(Filename::string()) -&gt; {ok, Port} | {already_started, Port}</string>
		<string>percept_profile:start</string>
		<string>percept_profile:start(&lt;#Filename::string()#&gt;, &lt;#Options::[percept_option()]#&gt;)</string>
		<string>percept_profile:start(Filename::string(), Options::[percept_option()]) -&gt; {ok, Port} | {already_started, Port}</string>
		<string>percept_profile:start</string>
		<string>percept_profile:start(&lt;#Filename::string()#&gt;, &lt;#MFA::mfa()#&gt;, &lt;#Options::[percept_option()]#&gt;)</string>
		<string>percept_profile:start(Filename::string(), MFA::mfa(), Options::[percept_option()]) -&gt; ok | {already_started, Port} | {error, not_started}</string>
		<string>percept_profile:stop</string>
		<string>percept_profile:stop()</string>
		<string>percept_profile:stop() -&gt; ok | {error, not_started}</string>
		<string>pg:create</string>
		<string>pg:create(&lt;#PgName#&gt;)</string>
		<string>pg:create(PgName) -&gt; ok | {error, Reason}</string>
		<string>pg:create</string>
		<string>pg:create(&lt;#PgName#&gt;, &lt;#Node#&gt;)</string>
		<string>pg:create(PgName, Node) -&gt; ok | {error, Reason}</string>
		<string>pg:esend</string>
		<string>pg:esend(&lt;#PgName#&gt;, &lt;#Msg#&gt;)</string>
		<string>pg:esend(PgName, Msg) -&gt; ok</string>
		<string>pg:join</string>
		<string>pg:join(&lt;#PgName#&gt;, &lt;#Pid#&gt;)</string>
		<string>pg:join(PgName, Pid) -&gt; Members</string>
		<string>pg:master</string>
		<string>pg:master(&lt;#PgName :: term()#&gt;)</string>
		<string>pg:master(PgName :: term()) -&gt; no_return()</string>
		<string>pg:members</string>
		<string>pg:members(&lt;#PgName#&gt;)</string>
		<string>pg:members(PgName) -&gt; Members</string>
		<string>pg:name_to_pid</string>
		<string>pg:name_to_pid(&lt;#PgName :: atom()#&gt;)</string>
		<string>pg:name_to_pid(PgName :: atom()) -&gt; pid() | undefined</string>
		<string>pg:send</string>
		<string>pg:send(&lt;#PgName#&gt;, &lt;#Msg#&gt;)</string>
		<string>pg:send(PgName, Msg) -&gt; ok</string>
		<string>pg:standby</string>
		<string>pg:standby(&lt;#PgName :: term()#&gt;, &lt;#Node :: node()#&gt;)</string>
		<string>pg:standby(PgName :: term(), Node :: node()) -&gt; ok</string>
		<string>pg2:create</string>
		<string>pg2:create(&lt;#Name :: name()#&gt;)</string>
		<string>pg2:create(Name :: name()) -&gt; ok</string>
		<string>pg2:delete</string>
		<string>pg2:delete(&lt;#Name :: name()#&gt;)</string>
		<string>pg2:delete(Name :: name()) -&gt; ok</string>
		<string>pg2:get_closest_pid</string>
		<string>pg2:get_closest_pid(&lt;#Name#&gt;)</string>
		<string>pg2:get_closest_pid(Name) -&gt; pid() | {error, Reason}</string>
		<string>pg2:get_local_members</string>
		<string>pg2:get_local_members(&lt;#Name#&gt;)</string>
		<string>pg2:get_local_members(Name) -&gt; [pid()] | {error, {no_such_group, Name}}</string>
		<string>pg2:get_members</string>
		<string>pg2:get_members(&lt;#Name#&gt;)</string>
		<string>pg2:get_members(Name) -&gt; [pid()] | {error, {no_such_group, Name}}</string>
		<string>pg2:handle_call</string>
		<string>pg2:handle_call(&lt;#Call :: {create#&gt;, &lt;#Name} | {delete#&gt;, &lt;#Name} | {join#&gt;, &lt;#Name#&gt;, &lt;#Pid :: pid()} | {leave#&gt;, &lt;#Name#&gt;, &lt;#Pid :: pid()}#&gt;, &lt;#From :: {pid()#&gt;, &lt;#Tag :: any()}#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>pg2:handle_call(Call :: {create, Name} | {delete, Name} | {join, Name, Pid :: pid()} | {leave, Name, Pid :: pid()}, From :: {pid(), Tag :: any()}, State :: state()) -&gt; {reply, ok, state()}</string>
		<string>pg2:handle_cast</string>
		<string>pg2:handle_cast(&lt;#Cast :: {exchange#&gt;, &lt;#node()#&gt;, &lt;#Names :: [[Name#&gt;, &lt;#...]]} | {del_member#&gt;, &lt;#Name#&gt;, &lt;#Pid :: pid()}#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>pg2:handle_cast(Cast :: {exchange, node(), Names :: [[Name, ...]]} | {del_member, Name, Pid :: pid()}, State :: state()) -&gt; {noreply, state()}</string>
		<string>pg2:handle_info</string>
		<string>pg2:handle_info(&lt;#Tuple :: tuple()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>pg2:handle_info(Tuple :: tuple(), State :: state()) -&gt; {noreply, state()}</string>
		<string>pg2:init</string>
		<string>pg2:init(&lt;#Arg :: []#&gt;)</string>
		<string>pg2:init(Arg :: []) -&gt; {ok, state()}</string>
		<string>pg2:join</string>
		<string>pg2:join(&lt;#Name#&gt;, &lt;#Pid :: pid()#&gt;)</string>
		<string>pg2:join(Name, Pid :: pid()) -&gt; ok | {error, {no_such_group, Name}}</string>
		<string>pg2:leave</string>
		<string>pg2:leave(&lt;#Name#&gt;, &lt;#Pid :: pid()#&gt;)</string>
		<string>pg2:leave(Name, Pid :: pid()) -&gt; ok | {error, {no_such_group, Name}}</string>
		<string>pg2:start</string>
		<string>pg2:start()</string>
		<string>pg2:start() -&gt; {ok, pid()} | {error, any()}</string>
		<string>pg2:start_link</string>
		<string>pg2:start_link()</string>
		<string>pg2:start_link() -&gt; {ok, pid()} | {error, any()}</string>
		<string>pg2:terminate</string>
		<string>pg2:terminate(&lt;#Reason :: any()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>pg2:terminate(Reason :: any(), State :: state()) -&gt; ok</string>
		<string>pg2:which_groups</string>
		<string>pg2:which_groups()</string>
		<string>pg2:which_groups() -&gt; [Name :: name()]</string>
		<string>pool:attach</string>
		<string>pool:attach(&lt;#Node#&gt;)</string>
		<string>pool:attach(Node) -&gt; already_attached | attached</string>
		<string>pool:do_spawn</string>
		<string>pool:do_spawn(&lt;#Gl :: pid()#&gt;, &lt;#M :: module()#&gt;, &lt;#F :: atom()#&gt;, &lt;#A :: [term()]#&gt;)</string>
		<string>pool:do_spawn(Gl :: pid(), M :: module(), F :: atom(), A :: [term()]) -&gt; term()</string>
		<string>pool:get_node</string>
		<string>pool:get_node()</string>
		<string>pool:get_node() -&gt; node()</string>
		<string>pool:get_nodes</string>
		<string>pool:get_nodes()</string>
		<string>pool:get_nodes() -&gt; [node()]</string>
		<string>pool:pspawn</string>
		<string>pool:pspawn(&lt;#Mod#&gt;, &lt;#Fun#&gt;, &lt;#Args#&gt;)</string>
		<string>pool:pspawn(Mod, Fun, Args) -&gt; pid()</string>
		<string>pool:pspawn_link</string>
		<string>pool:pspawn_link(&lt;#Mod#&gt;, &lt;#Fun#&gt;, &lt;#Args#&gt;)</string>
		<string>pool:pspawn_link(Mod, Fun, Args) -&gt; pid()</string>
		<string>pool:start</string>
		<string>pool:start(&lt;#Name#&gt;)</string>
		<string>pool:start(Name) -&gt; Nodes</string>
		<string>pool:start</string>
		<string>pool:start(&lt;#Name#&gt;, &lt;#Args#&gt;)</string>
		<string>pool:start(Name, Args) -&gt; Nodes</string>
		<string>pool:stop</string>
		<string>pool:stop()</string>
		<string>pool:stop() -&gt; stopped</string>
		<string>prettypr:above</string>
		<string>prettypr:above(&lt;#D1::document()#&gt;, &lt;#D2::document()#&gt;)</string>
		<string>prettypr:above(D1::document(), D2::document()) -&gt; document()</string>
		<string>prettypr:beside</string>
		<string>prettypr:beside(&lt;#D1::document()#&gt;, &lt;#D2::document()#&gt;)</string>
		<string>prettypr:beside(D1::document(), D2::document()) -&gt; document()</string>
		<string>prettypr:best</string>
		<string>prettypr:best(&lt;#D::document()#&gt;, &lt;#PaperWidth::integer()#&gt;, &lt;#LineWidth::integer()#&gt;)</string>
		<string>prettypr:best(D::document(), PaperWidth::integer(), LineWidth::integer()) -&gt; empty | document()</string>
		<string>prettypr:break</string>
		<string>prettypr:break(&lt;#D::document()#&gt;)</string>
		<string>prettypr:break(D::document()) -&gt; document()</string>
		<string>prettypr:empty</string>
		<string>prettypr:empty()</string>
		<string>prettypr:empty() -&gt; document()</string>
		<string>prettypr:floating</string>
		<string>prettypr:floating(&lt;#D::document()#&gt;)</string>
		<string>prettypr:floating(D::document()) -&gt; document()</string>
		<string>prettypr:floating</string>
		<string>prettypr:floating(&lt;#D::document()#&gt;, &lt;#Hp::integer()#&gt;, &lt;#Vp::integer()#&gt;)</string>
		<string>prettypr:floating(D::document(), Hp::integer(), Vp::integer()) -&gt; document()</string>
		<string>prettypr:follow</string>
		<string>prettypr:follow(&lt;#D1::document()#&gt;, &lt;#D2::document()#&gt;)</string>
		<string>prettypr:follow(D1::document(), D2::document()) -&gt; document()</string>
		<string>prettypr:follow</string>
		<string>prettypr:follow(&lt;#D1::document()#&gt;, &lt;#D2::document()#&gt;, &lt;#Offset::integer()#&gt;)</string>
		<string>prettypr:follow(D1::document(), D2::document(), Offset::integer()) -&gt; document()</string>
		<string>prettypr:format</string>
		<string>prettypr:format(&lt;#D::document()#&gt;)</string>
		<string>prettypr:format(D::document()) -&gt; string()</string>
		<string>prettypr:format</string>
		<string>prettypr:format(&lt;#D::document()#&gt;, &lt;#PaperWidth::integer()#&gt;)</string>
		<string>prettypr:format(D::document(), PaperWidth::integer()) -&gt; string()</string>
		<string>prettypr:format</string>
		<string>prettypr:format(&lt;#D::document()#&gt;, &lt;#PaperWidth::integer()#&gt;, &lt;#LineWidth::integer()#&gt;)</string>
		<string>prettypr:format(D::document(), PaperWidth::integer(), LineWidth::integer()) -&gt; string()</string>
		<string>prettypr:nest</string>
		<string>prettypr:nest(&lt;#N::integer()#&gt;, &lt;#D::document()#&gt;)</string>
		<string>prettypr:nest(N::integer(), D::document()) -&gt; document()</string>
		<string>prettypr:null_text</string>
		<string>prettypr:null_text(&lt;#Characters::string()#&gt;)</string>
		<string>prettypr:null_text(Characters::string()) -&gt; document()</string>
		<string>prettypr:par</string>
		<string>prettypr:par(&lt;#Docs::[document()]#&gt;)</string>
		<string>prettypr:par(Docs::[document()]) -&gt; document()</string>
		<string>prettypr:par</string>
		<string>prettypr:par(&lt;#Docs::[document()]#&gt;, &lt;#Offset::integer()#&gt;)</string>
		<string>prettypr:par(Docs::[document()], Offset::integer()) -&gt; document()</string>
		<string>prettypr:sep</string>
		<string>prettypr:sep(&lt;#Docs::[document()]#&gt;)</string>
		<string>prettypr:sep(Docs::[document()]) -&gt; document()</string>
		<string>prettypr:text</string>
		<string>prettypr:text(&lt;#Characters::string()#&gt;)</string>
		<string>prettypr:text(Characters::string()) -&gt; document()</string>
		<string>prettypr:text_par</string>
		<string>prettypr:text_par(&lt;#Text::string()#&gt;)</string>
		<string>prettypr:text_par(Text::string()) -&gt; document()</string>
		<string>prettypr:text_par</string>
		<string>prettypr:text_par(&lt;#Text::string()#&gt;, &lt;#Indentation::integer()#&gt;)</string>
		<string>prettypr:text_par(Text::string(), Indentation::integer()) -&gt; document()</string>
		<string>proc_lib:format</string>
		<string>proc_lib:format(&lt;#CrashReport#&gt;)</string>
		<string>proc_lib:format(CrashReport) -&gt; string()</string>
		<string>proc_lib:format</string>
		<string>proc_lib:format(&lt;#CrashReport#&gt;, &lt;#Encoding#&gt;)</string>
		<string>proc_lib:format(CrashReport, Encoding) -&gt; string()</string>
		<string>proc_lib:hibernate</string>
		<string>proc_lib:hibernate(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>proc_lib:hibernate(Module, Function, Args) -&gt; no_return()</string>
		<string>proc_lib:init_ack</string>
		<string>proc_lib:init_ack(&lt;#Ret#&gt;)</string>
		<string>proc_lib:init_ack(Ret) -&gt; ok</string>
		<string>proc_lib:init_ack</string>
		<string>proc_lib:init_ack(&lt;#Parent#&gt;, &lt;#Ret#&gt;)</string>
		<string>proc_lib:init_ack(Parent, Ret) -&gt; ok</string>
		<string>proc_lib:init_p</string>
		<string>proc_lib:init_p(&lt;#Parent :: pid()#&gt;, &lt;#Ancestors :: [pid()]#&gt;, &lt;#Fun :: function()#&gt;)</string>
		<string>proc_lib:init_p(Parent :: pid(), Ancestors :: [pid()], Fun :: function()) -&gt; term()</string>
		<string>proc_lib:init_p</string>
		<string>proc_lib:init_p(&lt;#Parent :: pid()#&gt;, &lt;#Ancestors :: [pid()]#&gt;, &lt;#M :: atom()#&gt;, &lt;#F :: atom()#&gt;, &lt;#A :: [term()]#&gt;)</string>
		<string>proc_lib:init_p(Parent :: pid(), Ancestors :: [pid()], M :: atom(), F :: atom(), A :: [term()]) -&gt; term()</string>
		<string>proc_lib:initial_call</string>
		<string>proc_lib:initial_call(&lt;#Process#&gt;)</string>
		<string>proc_lib:initial_call(Process) -&gt; {Module, Function, Args} | false</string>
		<string>proc_lib:spawn</string>
		<string>proc_lib:spawn(&lt;#Fun#&gt;)</string>
		<string>proc_lib:spawn(Fun) -&gt; pid()</string>
		<string>proc_lib:spawn</string>
		<string>proc_lib:spawn(&lt;#Node#&gt;, &lt;#Fun#&gt;)</string>
		<string>proc_lib:spawn(Node, Fun) -&gt; pid()</string>
		<string>proc_lib:spawn</string>
		<string>proc_lib:spawn(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>proc_lib:spawn(Module, Function, Args) -&gt; pid()</string>
		<string>proc_lib:spawn</string>
		<string>proc_lib:spawn(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>proc_lib:spawn(Node, Module, Function, Args) -&gt; pid()</string>
		<string>proc_lib:spawn_link</string>
		<string>proc_lib:spawn_link(&lt;#Fun#&gt;)</string>
		<string>proc_lib:spawn_link(Fun) -&gt; pid()</string>
		<string>proc_lib:spawn_link</string>
		<string>proc_lib:spawn_link(&lt;#Node#&gt;, &lt;#Fun#&gt;)</string>
		<string>proc_lib:spawn_link(Node, Fun) -&gt; pid()</string>
		<string>proc_lib:spawn_link</string>
		<string>proc_lib:spawn_link(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>proc_lib:spawn_link(Module, Function, Args) -&gt; pid()</string>
		<string>proc_lib:spawn_link</string>
		<string>proc_lib:spawn_link(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>proc_lib:spawn_link(Node, Module, Function, Args) -&gt; pid()</string>
		<string>proc_lib:spawn_opt</string>
		<string>proc_lib:spawn_opt(&lt;#Fun#&gt;, &lt;#SpawnOpts#&gt;)</string>
		<string>proc_lib:spawn_opt(Fun, SpawnOpts) -&gt; pid()</string>
		<string>proc_lib:spawn_opt</string>
		<string>proc_lib:spawn_opt(&lt;#Node#&gt;, &lt;#Function#&gt;, &lt;#SpawnOpts#&gt;)</string>
		<string>proc_lib:spawn_opt(Node, Function, SpawnOpts) -&gt; pid()</string>
		<string>proc_lib:spawn_opt</string>
		<string>proc_lib:spawn_opt(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#SpawnOpts#&gt;)</string>
		<string>proc_lib:spawn_opt(Module, Function, Args, SpawnOpts) -&gt; pid()</string>
		<string>proc_lib:spawn_opt</string>
		<string>proc_lib:spawn_opt(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#SpawnOpts#&gt;)</string>
		<string>proc_lib:spawn_opt(Node, Module, Function, Args, SpawnOpts) -&gt; pid()</string>
		<string>proc_lib:start</string>
		<string>proc_lib:start(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>proc_lib:start(Module, Function, Args) -&gt; Ret</string>
		<string>proc_lib:start</string>
		<string>proc_lib:start(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Time#&gt;)</string>
		<string>proc_lib:start(Module, Function, Args, Time) -&gt; Ret</string>
		<string>proc_lib:start</string>
		<string>proc_lib:start(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Time#&gt;, &lt;#SpawnOpts#&gt;)</string>
		<string>proc_lib:start(Module, Function, Args, Time, SpawnOpts) -&gt; Ret</string>
		<string>proc_lib:start_link</string>
		<string>proc_lib:start_link(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>proc_lib:start_link(Module, Function, Args) -&gt; Ret</string>
		<string>proc_lib:start_link</string>
		<string>proc_lib:start_link(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Time#&gt;)</string>
		<string>proc_lib:start_link(Module, Function, Args, Time) -&gt; Ret</string>
		<string>proc_lib:start_link</string>
		<string>proc_lib:start_link(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Time#&gt;, &lt;#SpawnOpts#&gt;)</string>
		<string>proc_lib:start_link(Module, Function, Args, Time, SpawnOpts) -&gt; Ret</string>
		<string>proc_lib:translate_initial_call</string>
		<string>proc_lib:translate_initial_call(&lt;#Process#&gt;)</string>
		<string>proc_lib:translate_initial_call(Process) -&gt; {Module, Function, Arity}</string>
		<string>proc_lib:wake_up</string>
		<string>proc_lib:wake_up(&lt;#M :: atom()#&gt;, &lt;#F :: atom()#&gt;, &lt;#A :: [term()]#&gt;)</string>
		<string>proc_lib:wake_up(M :: atom(), F :: atom(), A :: [term()]) -&gt; term()</string>
		<string>proplists:append_values</string>
		<string>proplists:append_values(&lt;#Key#&gt;, &lt;#ListIn#&gt;)</string>
		<string>proplists:append_values(Key, ListIn) -&gt; ListOut</string>
		<string>proplists:compact</string>
		<string>proplists:compact(&lt;#ListIn#&gt;)</string>
		<string>proplists:compact(ListIn) -&gt; ListOut</string>
		<string>proplists:delete</string>
		<string>proplists:delete(&lt;#Key#&gt;, &lt;#List#&gt;)</string>
		<string>proplists:delete(Key, List) -&gt; List</string>
		<string>proplists:expand</string>
		<string>proplists:expand(&lt;#Expansions#&gt;, &lt;#ListIn#&gt;)</string>
		<string>proplists:expand(Expansions, ListIn) -&gt; ListOut</string>
		<string>proplists:get_all_values</string>
		<string>proplists:get_all_values(&lt;#Key#&gt;, &lt;#List#&gt;)</string>
		<string>proplists:get_all_values(Key, List) -&gt; [term()]</string>
		<string>proplists:get_bool</string>
		<string>proplists:get_bool(&lt;#Key#&gt;, &lt;#List#&gt;)</string>
		<string>proplists:get_bool(Key, List) -&gt; boolean()</string>
		<string>proplists:get_keys</string>
		<string>proplists:get_keys(&lt;#List#&gt;)</string>
		<string>proplists:get_keys(List) -&gt; [term()]</string>
		<string>proplists:get_value</string>
		<string>proplists:get_value(&lt;#Key#&gt;, &lt;#List#&gt;)</string>
		<string>proplists:get_value(Key, List) -&gt; term()</string>
		<string>proplists:get_value</string>
		<string>proplists:get_value(&lt;#Key#&gt;, &lt;#List#&gt;, &lt;#Default#&gt;)</string>
		<string>proplists:get_value(Key, List, Default) -&gt; term()</string>
		<string>proplists:is_defined</string>
		<string>proplists:is_defined(&lt;#Key#&gt;, &lt;#List#&gt;)</string>
		<string>proplists:is_defined(Key, List) -&gt; boolean()</string>
		<string>proplists:lookup</string>
		<string>proplists:lookup(&lt;#Key#&gt;, &lt;#List#&gt;)</string>
		<string>proplists:lookup(Key, List) -&gt; none | tuple()</string>
		<string>proplists:lookup_all</string>
		<string>proplists:lookup_all(&lt;#Key#&gt;, &lt;#List#&gt;)</string>
		<string>proplists:lookup_all(Key, List) -&gt; [tuple()]</string>
		<string>proplists:normalize</string>
		<string>proplists:normalize(&lt;#ListIn#&gt;, &lt;#Stages#&gt;)</string>
		<string>proplists:normalize(ListIn, Stages) -&gt; ListOut</string>
		<string>proplists:property</string>
		<string>proplists:property(&lt;#PropertyIn#&gt;)</string>
		<string>proplists:property(PropertyIn) -&gt; PropertyOut</string>
		<string>proplists:property</string>
		<string>proplists:property(&lt;#Key#&gt;, &lt;#Value#&gt;)</string>
		<string>proplists:property(Key, Value) -&gt; Property</string>
		<string>proplists:split</string>
		<string>proplists:split(&lt;#List#&gt;, &lt;#Keys#&gt;)</string>
		<string>proplists:split(List, Keys) -&gt; {Lists, Rest}</string>
		<string>proplists:substitute_aliases</string>
		<string>proplists:substitute_aliases(&lt;#Aliases#&gt;, &lt;#ListIn#&gt;)</string>
		<string>proplists:substitute_aliases(Aliases, ListIn) -&gt; ListOut</string>
		<string>proplists:substitute_negations</string>
		<string>proplists:substitute_negations(&lt;#Negations#&gt;, &lt;#ListIn#&gt;)</string>
		<string>proplists:substitute_negations(Negations, ListIn) -&gt; ListOut</string>
		<string>proplists:unfold</string>
		<string>proplists:unfold(&lt;#ListIn#&gt;)</string>
		<string>proplists:unfold(ListIn) -&gt; ListOut</string>
		<string>public_key:compute_key</string>
		<string>public_key:compute_key(&lt;#OthersKey#&gt;, &lt;#MyKey#&gt;)</string>
		<string>public_key:compute_key(OthersKey, MyKey)</string>
		<string>public_key:compute_key</string>
		<string>public_key:compute_key(&lt;#OthersKey#&gt;, &lt;#MyKey#&gt;, &lt;#Params#&gt;)</string>
		<string>public_key:compute_key(OthersKey, MyKey, Params)</string>
		<string>public_key:decrypt_private</string>
		<string>public_key:decrypt_private(&lt;#CipherText#&gt;, &lt;#Key#&gt;)</string>
		<string>public_key:decrypt_private(CipherText, Key) -&gt; binary()</string>
		<string>public_key:decrypt_private</string>
		<string>public_key:decrypt_private(&lt;#CipherText#&gt;, &lt;#Key#&gt;, &lt;#Options#&gt;)</string>
		<string>public_key:decrypt_private(CipherText, Key, Options) -&gt; binary()</string>
		<string>public_key:decrypt_public(CipherText, Key) - &gt; binary</string>
		<string>public_key:decrypt_public(CipherText, Key) - &gt; binary()</string>
		<string>public_key:decrypt_public(CipherText, Key) - &gt; binary()</string>
		<string>public_key:decrypt_public(CipherText, Key, Options) - &gt; binary</string>
		<string>public_key:decrypt_public(CipherText, Key, Options) - &gt; binary()</string>
		<string>public_key:decrypt_public(CipherText, Key, Options) - &gt; binary()</string>
		<string>public_key:der_decode</string>
		<string>public_key:der_decode(&lt;#Asn1type#&gt;, &lt;#Der#&gt;)</string>
		<string>public_key:der_decode(Asn1type, Der) -&gt; term()</string>
		<string>public_key:der_encode</string>
		<string>public_key:der_encode(&lt;#Asn1Type#&gt;, &lt;#Entity#&gt;)</string>
		<string>public_key:der_encode(Asn1Type, Entity) -&gt; der_encoded()</string>
		<string>public_key:generate_key</string>
		<string>public_key:generate_key(&lt;#Params#&gt;)</string>
		<string>public_key:generate_key(Params) -&gt; {Public::binary(), Private::binary()} | #'ECPrivateKey'{} </string>
		<string>public_key:pem_decode</string>
		<string>public_key:pem_decode(&lt;#PemBin#&gt;)</string>
		<string>public_key:pem_decode(PemBin) -&gt; [pem_entry()]</string>
		<string>public_key:pem_encode</string>
		<string>public_key:pem_encode(&lt;#PemEntries#&gt;)</string>
		<string>public_key:pem_encode(PemEntries) -&gt; binary()</string>
		<string>public_key:pem_entry_decode</string>
		<string>public_key:pem_entry_decode(&lt;#PemEntry#&gt;)</string>
		<string>public_key:pem_entry_decode(PemEntry) -&gt; term()</string>
		<string>public_key:pem_entry_decode</string>
		<string>public_key:pem_entry_decode(&lt;#PemEntry#&gt;, &lt;#Password#&gt;)</string>
		<string>public_key:pem_entry_decode(PemEntry, Password) -&gt; term()</string>
		<string>public_key:pem_entry_encode</string>
		<string>public_key:pem_entry_encode(&lt;#Asn1Type#&gt;, &lt;#Entity#&gt;)</string>
		<string>public_key:pem_entry_encode(Asn1Type, Entity) -&gt; pem_entry()</string>
		<string>public_key:pem_entry_encode</string>
		<string>public_key:pem_entry_encode(&lt;#Asn1Type#&gt;, &lt;#Entity#&gt;, &lt;#{CipherInfo#&gt;, &lt;#Password}#&gt;)</string>
		<string>public_key:pem_entry_encode(Asn1Type, Entity, {CipherInfo, Password}) -&gt; pem_entry()</string>
		<string>public_key:encrypt_private</string>
		<string>public_key:encrypt_private(&lt;#PlainText#&gt;, &lt;#Key#&gt;)</string>
		<string>public_key:encrypt_private(PlainText, Key) -&gt; binary()</string>
		<string>public_key:encrypt_public</string>
		<string>public_key:encrypt_public(&lt;#PlainText#&gt;, &lt;#Key#&gt;)</string>
		<string>public_key:encrypt_public(PlainText, Key) -&gt; binary()</string>
		<string>public_key:pkix_decode_cert</string>
		<string>public_key:pkix_decode_cert(&lt;#Cert#&gt;, &lt;#otp | plain#&gt;)</string>
		<string>public_key:pkix_decode_cert(Cert, otp | plain) -&gt; #'Certificate'{} | #'OTPCertificate'{}</string>
		<string>public_key:pkix_encode</string>
		<string>public_key:pkix_encode(&lt;#Asn1Type#&gt;, &lt;#Entity#&gt;, &lt;#otp | plain#&gt;)</string>
		<string>public_key:pkix_encode(Asn1Type, Entity, otp | plain) -&gt; der_encoded()</string>
		<string>public_key:pkix_is_issuer</string>
		<string>public_key:pkix_is_issuer(&lt;#Cert#&gt;, &lt;#IssuerCert#&gt;)</string>
		<string>public_key:pkix_is_issuer(Cert, IssuerCert) -&gt; boolean()</string>
		<string>public_key:pkix_is_fixed_dh_cert</string>
		<string>public_key:pkix_is_fixed_dh_cert(&lt;#Cert#&gt;)</string>
		<string>public_key:pkix_is_fixed_dh_cert(Cert) -&gt; boolean()</string>
		<string>public_key:pkix_is_self_signed</string>
		<string>public_key:pkix_is_self_signed(&lt;#Cert#&gt;)</string>
		<string>public_key:pkix_is_self_signed(Cert) -&gt; boolean()</string>
		<string>public_key:pkix_issuer_id</string>
		<string>public_key:pkix_issuer_id(&lt;#Cert#&gt;, &lt;#IssuedBy#&gt;)</string>
		<string>public_key:pkix_issuer_id(Cert, IssuedBy) -&gt; {ok, IssuerID} | {error, Reason}</string>
		<string>public_key:pkix_normalize_name</string>
		<string>public_key:pkix_normalize_name(&lt;#Issuer#&gt;)</string>
		<string>public_key:pkix_normalize_name(Issuer) -&gt; Normalized</string>
		<string>public_key:pkix_path_validation</string>
		<string>public_key:pkix_path_validation(&lt;#TrustedCert#&gt;, &lt;#CertChain#&gt;, &lt;#Options#&gt;)</string>
		<string>public_key:pkix_path_validation(TrustedCert, CertChain, Options) -&gt; {ok, {PublicKeyInfo, PolicyTree}} | {error, {bad_cert, Reason}} </string>
		<string>public_key:pkix_crls_validate</string>
		<string>public_key:pkix_crls_validate(&lt;#OTPCertificate#&gt;, &lt;#DPAndCRLs#&gt;, &lt;#Options#&gt;)</string>
		<string>public_key:pkix_crls_validate(OTPCertificate, DPAndCRLs, Options) -&gt; CRLStatus()</string>
		<string>public_key:pkix_sign</string>
		<string>public_key:pkix_sign(&lt;##'OTPTBSCertificate'{}#&gt;, &lt;#Key#&gt;)</string>
		<string>public_key:pkix_sign(#'OTPTBSCertificate'{}, Key) -&gt; der_encode()</string>
		<string>public_key:pkix_sign_types</string>
		<string>public_key:pkix_sign_types(&lt;#AlgorithmId#&gt;)</string>
		<string>public_key:pkix_sign_types(AlgorithmId) -&gt; {DigestType, SignatureType}</string>
		<string>public_key:pkix_verify</string>
		<string>public_key:pkix_verify(&lt;#Cert#&gt;, &lt;#Key#&gt;)</string>
		<string>public_key:pkix_verify(Cert, Key) -&gt; boolean()</string>
		<string>public_key:sign</string>
		<string>public_key:sign(&lt;#Msg#&gt;, &lt;#DigestType#&gt;, &lt;#Key#&gt;)</string>
		<string>public_key:sign(Msg, DigestType, Key) -&gt; binary()</string>
		<string>public_key:ssh_decode</string>
		<string>public_key:ssh_decode(&lt;#SshBin#&gt;, &lt;#Type#&gt;)</string>
		<string>public_key:ssh_decode(SshBin, Type) -&gt; [{public_key(), Attributes::list()}]</string>
		<string>public_key:ssh_encode</string>
		<string>public_key:ssh_encode(&lt;#[{Key#&gt;, &lt;#Attributes}]#&gt;, &lt;#Type#&gt;)</string>
		<string>public_key:ssh_encode([{Key, Attributes}], Type) -&gt; binary()</string>
		<string>public_key:verify</string>
		<string>public_key:verify(&lt;#Msg#&gt;, &lt;#DigestType#&gt;, &lt;#Signature#&gt;, &lt;#Key#&gt;)</string>
		<string>public_key:verify(Msg, DigestType, Signature, Key) -&gt; boolean()</string>
		<string>qlc:append</string>
		<string>qlc:append(&lt;#QHL#&gt;)</string>
		<string>qlc:append(QHL) -&gt; QH</string>
		<string>qlc:append</string>
		<string>qlc:append(&lt;#QH1#&gt;, &lt;#QH2#&gt;)</string>
		<string>qlc:append(QH1, QH2) -&gt; QH3</string>
		<string>qlc:cursor</string>
		<string>qlc:cursor(&lt;#QH#&gt;)</string>
		<string>qlc:cursor(QH) -&gt; Cursor</string>
		<string>qlc:cursor</string>
		<string>qlc:cursor(&lt;#QH#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:cursor(QH, Options) -&gt; Cursor</string>
		<string>qlc:delete_cursor</string>
		<string>qlc:delete_cursor(&lt;#QueryCursor#&gt;)</string>
		<string>qlc:delete_cursor(QueryCursor) -&gt; ok</string>
		<string>qlc:e</string>
		<string>qlc:e(&lt;#QH#&gt;)</string>
		<string>qlc:e(QH) -&gt; Answers | Error</string>
		<string>qlc:e</string>
		<string>qlc:e(&lt;#QH#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:e(QH, Options) -&gt; Answers | Error</string>
		<string>qlc:eval</string>
		<string>qlc:eval(&lt;#QH#&gt;)</string>
		<string>qlc:eval(QH) -&gt; Answers | Error</string>
		<string>qlc:eval</string>
		<string>qlc:eval(&lt;#QH#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:eval(QH, Options) -&gt; Answers | Error</string>
		<string>qlc:fold</string>
		<string>qlc:fold(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#QH#&gt;)</string>
		<string>qlc:fold(Function, Acc0, QH) -&gt; Acc1 | Error</string>
		<string>qlc:fold</string>
		<string>qlc:fold(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#QH#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:fold(Function, Acc0, QH, Options) -&gt; Acc1 | Error</string>
		<string>qlc:format_error</string>
		<string>qlc:format_error(&lt;#Error#&gt;)</string>
		<string>qlc:format_error(Error) -&gt; Chars</string>
		<string>qlc:info</string>
		<string>qlc:info(&lt;#QH#&gt;)</string>
		<string>qlc:info(QH) -&gt; Info</string>
		<string>qlc:info</string>
		<string>qlc:info(&lt;#QH#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:info(QH, Options) -&gt; Info</string>
		<string>qlc:keysort</string>
		<string>qlc:keysort(&lt;#KeyPos#&gt;, &lt;#QH1#&gt;)</string>
		<string>qlc:keysort(KeyPos, QH1) -&gt; QH2</string>
		<string>qlc:keysort</string>
		<string>qlc:keysort(&lt;#KeyPos#&gt;, &lt;#QH1#&gt;, &lt;#SortOptions#&gt;)</string>
		<string>qlc:keysort(KeyPos, QH1, SortOptions) -&gt; QH2</string>
		<string>qlc:next_answers</string>
		<string>qlc:next_answers(&lt;#QueryCursor#&gt;)</string>
		<string>qlc:next_answers(QueryCursor) -&gt; Answers | Error</string>
		<string>qlc:next_answers</string>
		<string>qlc:next_answers(&lt;#QueryCursor#&gt;, &lt;#NumberOfAnswers#&gt;)</string>
		<string>qlc:next_answers(QueryCursor, NumberOfAnswers) -&gt; Answers | Error</string>
		<string>qlc:parse_transform</string>
		<string>qlc:parse_transform(&lt;#Forms#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:parse_transform(Forms, Options) -&gt; Forms2</string>
		<string>qlc:q</string>
		<string>qlc:q(&lt;#QLC#&gt;)</string>
		<string>qlc:q(QLC) -&gt; QH</string>
		<string>qlc:q</string>
		<string>qlc:q(&lt;#QLC#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:q(QLC, Options) -&gt; QH</string>
		<string>qlc:sort</string>
		<string>qlc:sort(&lt;#QH1#&gt;)</string>
		<string>qlc:sort(QH1) -&gt; QH2</string>
		<string>qlc:sort</string>
		<string>qlc:sort(&lt;#QH1#&gt;, &lt;#SortOptions#&gt;)</string>
		<string>qlc:sort(QH1, SortOptions) -&gt; QH2</string>
		<string>qlc:string_to_handle</string>
		<string>qlc:string_to_handle(&lt;#QueryString#&gt;)</string>
		<string>qlc:string_to_handle(QueryString) -&gt; QH | Error</string>
		<string>qlc:string_to_handle</string>
		<string>qlc:string_to_handle(&lt;#QueryString#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:string_to_handle(QueryString, Options) -&gt; QH | Error</string>
		<string>qlc:string_to_handle</string>
		<string>qlc:string_to_handle(&lt;#QueryString#&gt;, &lt;#Options#&gt;, &lt;#Bindings#&gt;)</string>
		<string>qlc:string_to_handle(QueryString, Options, Bindings) -&gt; QH | Error</string>
		<string>qlc:table</string>
		<string>qlc:table(&lt;#TraverseFun#&gt;, &lt;#Options#&gt;)</string>
		<string>qlc:table(TraverseFun, Options) -&gt; QH</string>
		<string>qlc:transform_from_evaluator</string>
		<string>qlc:transform_from_evaluator(&lt;#LC#&gt;, &lt;#Bs#&gt;)</string>
		<string>qlc:transform_from_evaluator(LC, Bs) -&gt; Expr</string>
		<string>queue:cons</string>
		<string>queue:cons(&lt;#Item#&gt;, &lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:cons(Item, Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:daeh</string>
		<string>queue:daeh(&lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:daeh(Q :: queue(Item)) -&gt; Item</string>
		<string>queue:drop</string>
		<string>queue:drop(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:drop(Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:drop_r</string>
		<string>queue:drop_r(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:drop_r(Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:filter</string>
		<string>queue:filter(&lt;#Fun#&gt;, &lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:filter(Fun, Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:from_list</string>
		<string>queue:from_list(&lt;#L :: [Item]#&gt;)</string>
		<string>queue:from_list(L :: [Item]) -&gt; queue(Item)</string>
		<string>queue:get</string>
		<string>queue:get(&lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:get(Q :: queue(Item)) -&gt; Item</string>
		<string>queue:get_r</string>
		<string>queue:get_r(&lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:get_r(Q :: queue(Item)) -&gt; Item</string>
		<string>queue:head</string>
		<string>queue:head(&lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:head(Q :: queue(Item)) -&gt; Item</string>
		<string>queue:in</string>
		<string>queue:in(&lt;#Item#&gt;, &lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:in(Item, Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:in_r</string>
		<string>queue:in_r(&lt;#Item#&gt;, &lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:in_r(Item, Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:init</string>
		<string>queue:init(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:init(Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:is_empty</string>
		<string>queue:is_empty(&lt;#Q :: queue()#&gt;)</string>
		<string>queue:is_empty(Q :: queue()) -&gt; boolean()</string>
		<string>queue:is_queue</string>
		<string>queue:is_queue(&lt;#Term :: term()#&gt;)</string>
		<string>queue:is_queue(Term :: term()) -&gt; boolean()</string>
		<string>queue:join</string>
		<string>queue:join(&lt;#Q1 :: queue(Item)#&gt;, &lt;#Q2 :: queue(Item)#&gt;)</string>
		<string>queue:join(Q1 :: queue(Item), Q2 :: queue(Item)) -&gt; Q3 :: queue(Item)</string>
		<string>queue:lait</string>
		<string>queue:lait(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:lait(Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:last</string>
		<string>queue:last(&lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:last(Q :: queue(Item)) -&gt; Item</string>
		<string>queue:len</string>
		<string>queue:len(&lt;#Q :: queue()#&gt;)</string>
		<string>queue:len(Q :: queue()) -&gt; integer() &gt;= 0</string>
		<string>queue:liat</string>
		<string>queue:liat(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:liat(Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:member</string>
		<string>queue:member(&lt;#Item#&gt;, &lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:member(Item, Q :: queue(Item)) -&gt; boolean()</string>
		<string>queue:new</string>
		<string>queue:new()</string>
		<string>queue:new() -&gt; queue()</string>
		<string>queue:out</string>
		<string>queue:out(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:out(Q1 :: queue(Item)) -&gt; {{value, Item}, Q2 :: queue(Item)} | {empty, Q1 :: queue(Item)}</string>
		<string>queue:out_r</string>
		<string>queue:out_r(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:out_r(Q1 :: queue(Item)) -&gt; {{value, Item}, Q2 :: queue(Item)} | {empty, Q1 :: queue(Item)}</string>
		<string>queue:peek</string>
		<string>queue:peek(&lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:peek(Q :: queue(Item)) -&gt; empty | {value, Item}</string>
		<string>queue:peek_r</string>
		<string>queue:peek_r(&lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:peek_r(Q :: queue(Item)) -&gt; empty | {value, Item}</string>
		<string>queue:reverse</string>
		<string>queue:reverse(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:reverse(Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:snoc</string>
		<string>queue:snoc(&lt;#Q1 :: queue(Item)#&gt;, &lt;#Item#&gt;)</string>
		<string>queue:snoc(Q1 :: queue(Item), Item) -&gt; Q2 :: queue(Item)</string>
		<string>queue:split</string>
		<string>queue:split(&lt;#N :: integer() &gt;= 0#&gt;, &lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:split(N :: integer() &gt;= 0, Q1 :: queue(Item)) -&gt; {Q2 :: queue(Item), Q3 :: queue(Item)}</string>
		<string>queue:tail</string>
		<string>queue:tail(&lt;#Q1 :: queue(Item)#&gt;)</string>
		<string>queue:tail(Q1 :: queue(Item)) -&gt; Q2 :: queue(Item)</string>
		<string>queue:to_list</string>
		<string>queue:to_list(&lt;#Q :: queue(Item)#&gt;)</string>
		<string>queue:to_list(Q :: queue(Item)) -&gt; [Item]</string>
		<string>random:seed</string>
		<string>random:seed()</string>
		<string>random:seed() -&gt; ran()</string>
		<string>random:seed</string>
		<string>random:seed(&lt;#X1 :: {A1#&gt;, &lt;#A2#&gt;, &lt;#A3}#&gt;)</string>
		<string>random:seed(X1 :: {A1, A2, A3}) -&gt; undefined | ran()</string>
		<string>random:seed</string>
		<string>random:seed(&lt;#A1#&gt;, &lt;#A2#&gt;, &lt;#A3#&gt;)</string>
		<string>random:seed(A1, A2, A3) -&gt; undefined | ran()</string>
		<string>random:seed0</string>
		<string>random:seed0()</string>
		<string>random:seed0() -&gt; ran()</string>
		<string>random:uniform</string>
		<string>random:uniform()</string>
		<string>random:uniform() -&gt; float()</string>
		<string>random:uniform</string>
		<string>random:uniform(&lt;#N#&gt;)</string>
		<string>random:uniform(N) -&gt; integer() &gt;= 1</string>
		<string>random:uniform_s</string>
		<string>random:uniform_s(&lt;#State0#&gt;)</string>
		<string>random:uniform_s(State0) -&gt; {float(), State1}</string>
		<string>random:uniform_s</string>
		<string>random:uniform_s(&lt;#N#&gt;, &lt;#State0#&gt;)</string>
		<string>random:uniform_s(N, State0) -&gt; {integer(), State1}</string>
		<string>rb:filter</string>
		<string>rb:filter(&lt;#Filters#&gt;)</string>
		<string>rb:filter(Filters)</string>
		<string>rb:filter</string>
		<string>rb:filter(&lt;#Filters#&gt;, &lt;#Dates#&gt;)</string>
		<string>rb:filter(Filters, Dates)</string>
		<string>rb:grep</string>
		<string>rb:grep(&lt;#RegExp#&gt;)</string>
		<string>rb:grep(RegExp)</string>
		<string>rb:h</string>
		<string>rb:h()</string>
		<string>rb:h()</string>
		<string>rb:help</string>
		<string>rb:help()</string>
		<string>rb:help()</string>
		<string>rb:list</string>
		<string>rb:list()</string>
		<string>rb:list()</string>
		<string>rb:list</string>
		<string>rb:list(&lt;#Type#&gt;)</string>
		<string>rb:list(Type)</string>
		<string>rb:log_list</string>
		<string>rb:log_list()</string>
		<string>rb:log_list()</string>
		<string>rb:log_list</string>
		<string>rb:log_list(&lt;#Type#&gt;)</string>
		<string>rb:log_list(Type)</string>
		<string>rb:rescan</string>
		<string>rb:rescan()</string>
		<string>rb:rescan()</string>
		<string>rb:rescan</string>
		<string>rb:rescan(&lt;#Options#&gt;)</string>
		<string>rb:rescan(Options)</string>
		<string>rb:show</string>
		<string>rb:show()</string>
		<string>rb:show()</string>
		<string>rb:show</string>
		<string>rb:show(&lt;#Report#&gt;)</string>
		<string>rb:show(Report)</string>
		<string>rb:start</string>
		<string>rb:start()</string>
		<string>rb:start()</string>
		<string>rb:start</string>
		<string>rb:start(&lt;#Options#&gt;)</string>
		<string>rb:start(Options)</string>
		<string>rb:start_log</string>
		<string>rb:start_log(&lt;#FileName#&gt;)</string>
		<string>rb:start_log(FileName)</string>
		<string>rb:stop</string>
		<string>rb:stop()</string>
		<string>rb:stop()</string>
		<string>rb:stop_log</string>
		<string>rb:stop_log()</string>
		<string>rb:stop_log()</string>
		<string>re:compile</string>
		<string>re:compile(&lt;#Regexp#&gt;)</string>
		<string>re:compile(Regexp) -&gt; {ok, MP} | {error, ErrSpec}</string>
		<string>re:compile</string>
		<string>re:compile(&lt;#Regexp#&gt;, &lt;#Options#&gt;)</string>
		<string>re:compile(Regexp, Options) -&gt; {ok, MP} | {error, ErrSpec}</string>
		<string>re:inspect</string>
		<string>re:inspect(&lt;#MP#&gt;, &lt;#Item#&gt;)</string>
		<string>re:inspect(MP, Item) -&gt; {namelist, [binary()]}</string>
		<string>re:replace</string>
		<string>re:replace(&lt;#Subject#&gt;, &lt;#RE#&gt;, &lt;#Replacement#&gt;)</string>
		<string>re:replace(Subject, RE, Replacement) -&gt; iodata() | unicode:charlist()</string>
		<string>re:replace</string>
		<string>re:replace(&lt;#Subject#&gt;, &lt;#RE#&gt;, &lt;#Replacement#&gt;, &lt;#Options#&gt;)</string>
		<string>re:replace(Subject, RE, Replacement, Options) -&gt; iodata() | unicode:charlist()</string>
		<string>re:run</string>
		<string>re:run(&lt;#Subject#&gt;, &lt;#RE#&gt;)</string>
		<string>re:run(Subject, RE) -&gt; {match, Captured} | nomatch</string>
		<string>re:run</string>
		<string>re:run(&lt;#Subject#&gt;, &lt;#RE#&gt;, &lt;#Options#&gt;)</string>
		<string>re:run(Subject, RE, Options) -&gt; {match, Captured} | match | nomatch | {error, ErrType}</string>
		<string>re:split</string>
		<string>re:split(&lt;#Subject#&gt;, &lt;#RE#&gt;)</string>
		<string>re:split(Subject, RE) -&gt; SplitList</string>
		<string>re:split</string>
		<string>re:split(&lt;#Subject#&gt;, &lt;#RE#&gt;, &lt;#Options#&gt;)</string>
		<string>re:split(Subject, RE, Options) -&gt; SplitList</string>
		<string>release_handler:check_install_release</string>
		<string>release_handler:check_install_release(&lt;#Vsn#&gt;)</string>
		<string>release_handler:check_install_release(Vsn) -&gt; {ok, OtherVsn, Descr} | {error, Reason}</string>
		<string>release_handler:check_install_release</string>
		<string>release_handler:check_install_release(&lt;#Vsn#&gt;, &lt;#Opts#&gt;)</string>
		<string>release_handler:check_install_release(Vsn, Opts) -&gt; {ok, OtherVsn, Descr} | {error, Reason}</string>
		<string>release_handler:create_RELEASES</string>
		<string>release_handler:create_RELEASES(&lt;#Root#&gt;, &lt;#RelDir#&gt;, &lt;#RelFile#&gt;, &lt;#AppDirs#&gt;)</string>
		<string>release_handler:create_RELEASES(Root, RelDir, RelFile, AppDirs) -&gt; ok | {error, Reason}</string>
		<string>release_handler:install_file</string>
		<string>release_handler:install_file(&lt;#Vsn#&gt;, &lt;#File#&gt;)</string>
		<string>release_handler:install_file(Vsn, File) -&gt; ok | {error, Reason}</string>
		<string>release_handler:install_release</string>
		<string>release_handler:install_release(&lt;#Vsn#&gt;)</string>
		<string>release_handler:install_release(Vsn) -&gt; {ok, OtherVsn, Descr} | {error, Reason}</string>
		<string>release_handler:install_release</string>
		<string>release_handler:install_release(&lt;#Vsn#&gt;, &lt;#[Opt]#&gt;)</string>
		<string>release_handler:install_release(Vsn, [Opt]) -&gt; {ok, OtherVsn, Descr} | {continue_after_restart, OtherVsn, Descr} | {error, Reason}</string>
		<string>release_handler:make_permanent</string>
		<string>release_handler:make_permanent(&lt;#Vsn#&gt;)</string>
		<string>release_handler:make_permanent(Vsn) -&gt; ok | {error, Reason}</string>
		<string>release_handler:remove_release</string>
		<string>release_handler:remove_release(&lt;#Vsn#&gt;)</string>
		<string>release_handler:remove_release(Vsn) -&gt; ok | {error, Reason}</string>
		<string>release_handler:reboot_old_release</string>
		<string>release_handler:reboot_old_release(&lt;#Vsn#&gt;)</string>
		<string>release_handler:reboot_old_release(Vsn) -&gt; ok | {error, Reason}</string>
		<string>release_handler:set_removed</string>
		<string>release_handler:set_removed(&lt;#Vsn#&gt;)</string>
		<string>release_handler:set_removed(Vsn) -&gt; ok | {error, Reason}</string>
		<string>release_handler:set_unpacked</string>
		<string>release_handler:set_unpacked(&lt;#RelFile#&gt;, &lt;#AppDirs#&gt;)</string>
		<string>release_handler:set_unpacked(RelFile, AppDirs) -&gt; {ok, Vsn} | {error, Reason}</string>
		<string>release_handler:unpack_release</string>
		<string>release_handler:unpack_release(&lt;#Name#&gt;)</string>
		<string>release_handler:unpack_release(Name) -&gt; {ok, Vsn} | {error, Reason}</string>
		<string>release_handler:which_releases</string>
		<string>release_handler:which_releases()</string>
		<string>release_handler:which_releases() -&gt; [{Name, Vsn, Apps, Status}]</string>
		<string>release_handler:which_releases</string>
		<string>release_handler:which_releases(&lt;#Status#&gt;)</string>
		<string>release_handler:which_releases(Status) -&gt; [{Name, Vsn, Apps, Status}]</string>
		<string>reltool:create_target</string>
		<string>reltool:create_target(&lt;#Server#&gt;, &lt;#TargetDir#&gt;)</string>
		<string>reltool:create_target(Server, TargetDir) -&gt; ok | {error, Reason}</string>
		<string>reltool:eval_target_spec</string>
		<string>reltool:eval_target_spec(&lt;#TargetSpec#&gt;, &lt;#RootDir#&gt;, &lt;#TargetDir#&gt;)</string>
		<string>reltool:eval_target_spec(TargetSpec, RootDir, TargetDir) -&gt; ok | {error, Reason}</string>
		<string>reltool:get_config</string>
		<string>reltool:get_config(&lt;#Server#&gt;)</string>
		<string>reltool:get_config(Server) -&gt; {ok, Config} | {error, Reason}</string>
		<string>reltool:get_config</string>
		<string>reltool:get_config(&lt;#Server#&gt;, &lt;#InclDefaults#&gt;, &lt;#InclDerived#&gt;)</string>
		<string>reltool:get_config(Server, InclDefaults, InclDerived) -&gt; {ok, Config} | {error, Reason}</string>
		<string>reltool:get_rel</string>
		<string>reltool:get_rel(&lt;#Server#&gt;, &lt;#Relname#&gt;)</string>
		<string>reltool:get_rel(Server, Relname) -&gt; {ok, RelFile} | {error, Reason}</string>
		<string>reltool:get_script</string>
		<string>reltool:get_script(&lt;#Server#&gt;, &lt;#Relname#&gt;)</string>
		<string>reltool:get_script(Server, Relname) -&gt; {ok, ScriptFile | {error, Reason}</string>
		<string>reltool:get_status</string>
		<string>reltool:get_status(&lt;#Server#&gt;)</string>
		<string>reltool:get_status(Server) -&gt; {ok, [Warning]} | {error, Reason}</string>
		<string>reltool:get_server</string>
		<string>reltool:get_server(&lt;#WindowPid#&gt;)</string>
		<string>reltool:get_server(WindowPid) -&gt; {ok, ServerPid} | {error, Reason}</string>
		<string>reltool:get_target_spec</string>
		<string>reltool:get_target_spec(&lt;#Server#&gt;)</string>
		<string>reltool:get_target_spec(Server) -&gt; {ok, TargetSpec} | {error, Reason}</string>
		<string>reltool:install</string>
		<string>reltool:install(&lt;#RelName#&gt;, &lt;#TargetDir#&gt;)</string>
		<string>reltool:install(RelName, TargetDir) -&gt; ok | {error, Reason}</string>
		<string>reltool:start</string>
		<string>reltool:start()</string>
		<string>reltool:start() -&gt; {ok, WindowPid} | {error, Reason}</string>
		<string>reltool:start</string>
		<string>reltool:start(&lt;#Options#&gt;)</string>
		<string>reltool:start(Options) -&gt; {ok, WindowPid} | {error, Reason}</string>
		<string>reltool:start_link</string>
		<string>reltool:start_link(&lt;#Options#&gt;)</string>
		<string>reltool:start_link(Options) -&gt; {ok, WindowPid} | {error, Reason}</string>
		<string>reltool:start_server</string>
		<string>reltool:start_server(&lt;#Options#&gt;)</string>
		<string>reltool:start_server(Options) -&gt; {ok, ServerPid} | {error, Reason}</string>
		<string>reltool:stop</string>
		<string>reltool:stop(&lt;#Pid#&gt;)</string>
		<string>reltool:stop(Pid) -&gt; ok | {error, Reason}</string>
		<string>rpc:abcast</string>
		<string>rpc:abcast(&lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:abcast(Name, Msg) -&gt; abcast</string>
		<string>rpc:abcast</string>
		<string>rpc:abcast(&lt;#Nodes#&gt;, &lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:abcast(Nodes, Name, Msg) -&gt; abcast</string>
		<string>rpc:async_call</string>
		<string>rpc:async_call(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>rpc:async_call(Node, Module, Function, Args) -&gt; Key</string>
		<string>rpc:block_call</string>
		<string>rpc:block_call(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>rpc:block_call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</string>
		<string>rpc:block_call</string>
		<string>rpc:block_call(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Timeout#&gt;)</string>
		<string>rpc:block_call(Node, Module, Function, Args, Timeout) -&gt; Res | {badrpc, Reason}</string>
		<string>rpc:call</string>
		<string>rpc:call(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>rpc:call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</string>
		<string>rpc:call</string>
		<string>rpc:call(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Timeout#&gt;)</string>
		<string>rpc:call(Node, Module, Function, Args, Timeout) -&gt; Res | {badrpc, Reason}</string>
		<string>rpc:cast</string>
		<string>rpc:cast(&lt;#Node#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>rpc:cast(Node, Module, Function, Args) -&gt; true</string>
		<string>rpc:code_change</string>
		<string>rpc:code_change(&lt;#X1 :: term()#&gt;, &lt;#S :: state()#&gt;, &lt;#X3 :: term()#&gt;)</string>
		<string>rpc:code_change(X1 :: term(), S :: state(), X3 :: term()) -&gt; {ok, state()}</string>
		<string>rpc:eval_everywhere</string>
		<string>rpc:eval_everywhere(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>rpc:eval_everywhere(Module, Function, Args) -&gt; abcast</string>
		<string>rpc:eval_everywhere</string>
		<string>rpc:eval_everywhere(&lt;#Nodes#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>rpc:eval_everywhere(Nodes, Module, Function, Args) -&gt; abcast</string>
		<string>rpc:handle_call</string>
		<string>rpc:handle_call(&lt;#X1 :: term()#&gt;, &lt;#To :: term()#&gt;, &lt;#S :: state()#&gt;)</string>
		<string>rpc:handle_call(X1 :: term(), To :: term(), S :: state()) -&gt; {noreply, state()} | {reply, term(), state()} | {stop, normal, stopped, state()}</string>
		<string>rpc:handle_cast</string>
		<string>rpc:handle_cast(&lt;#X1 :: term()#&gt;, &lt;#S :: state()#&gt;)</string>
		<string>rpc:handle_cast(X1 :: term(), S :: state()) -&gt; {noreply, state()}</string>
		<string>rpc:handle_info</string>
		<string>rpc:handle_info(&lt;#X1 :: term()#&gt;, &lt;#S :: state()#&gt;)</string>
		<string>rpc:handle_info(X1 :: term(), S :: state()) -&gt; {noreply, state()}</string>
		<string>rpc:init</string>
		<string>rpc:init(&lt;#X1 :: []#&gt;)</string>
		<string>rpc:init(X1 :: []) -&gt; {ok, state()}</string>
		<string>rpc:multi_server_call</string>
		<string>rpc:multi_server_call(&lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:multi_server_call(Name, Msg) -&gt; {Replies, BadNodes}</string>
		<string>rpc:multi_server_call</string>
		<string>rpc:multi_server_call(&lt;#Nodes#&gt;, &lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:multi_server_call(Nodes, Name, Msg) -&gt; {Replies, BadNodes}</string>
		<string>rpc:multicall</string>
		<string>rpc:multicall(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>rpc:multicall(Module, Function, Args) -&gt; {ResL, BadNodes}</string>
		<string>rpc:multicall</string>
		<string>rpc:multicall(&lt;#Nodes#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;)</string>
		<string>rpc:multicall(Nodes, Module, Function, Args) -&gt; {ResL, BadNodes}</string>
		<string>rpc:multicall</string>
		<string>rpc:multicall(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Timeout#&gt;)</string>
		<string>rpc:multicall(Module, Function, Args, Timeout) -&gt; {ResL, BadNodes}</string>
		<string>rpc:multicall</string>
		<string>rpc:multicall(&lt;#Nodes#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Args#&gt;, &lt;#Timeout#&gt;)</string>
		<string>rpc:multicall(Nodes, Module, Function, Args, Timeout) -&gt; {ResL, BadNodes}</string>
		<string>rpc:nb_yield</string>
		<string>rpc:nb_yield(&lt;#Key#&gt;)</string>
		<string>rpc:nb_yield(Key) -&gt; {value, Val} | timeout</string>
		<string>rpc:nb_yield</string>
		<string>rpc:nb_yield(&lt;#Key#&gt;, &lt;#Timeout#&gt;)</string>
		<string>rpc:nb_yield(Key, Timeout) -&gt; {value, Val} | timeout</string>
		<string>rpc:parallel_eval</string>
		<string>rpc:parallel_eval(&lt;#FuncCalls#&gt;)</string>
		<string>rpc:parallel_eval(FuncCalls) -&gt; ResL</string>
		<string>rpc:pinfo</string>
		<string>rpc:pinfo(&lt;#Pid#&gt;)</string>
		<string>rpc:pinfo(Pid) -&gt; [{Item, Info}] | undefined</string>
		<string>rpc:pinfo</string>
		<string>rpc:pinfo(&lt;#Pid#&gt;, &lt;#Item#&gt;)</string>
		<string>rpc:pinfo(Pid, Item) -&gt; {Item, Info} | undefined | []</string>
		<string>rpc:pmap</string>
		<string>rpc:pmap(&lt;#FuncSpec#&gt;, &lt;#ExtraArgs#&gt;, &lt;#List1#&gt;)</string>
		<string>rpc:pmap(FuncSpec, ExtraArgs, List1) -&gt; List2</string>
		<string>rpc:proxy_user_flush</string>
		<string>rpc:proxy_user_flush()</string>
		<string>rpc:proxy_user_flush() -&gt; no_return()</string>
		<string>rpc:safe_multi_server_call</string>
		<string>rpc:safe_multi_server_call(&lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:safe_multi_server_call(Name, Msg) -&gt; {Replies, BadNodes}</string>
		<string>rpc:safe_multi_server_call</string>
		<string>rpc:safe_multi_server_call(&lt;#Nodes#&gt;, &lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:safe_multi_server_call(Nodes, Name, Msg) -&gt; {Replies, BadNodes}</string>
		<string>rpc:sbcast</string>
		<string>rpc:sbcast(&lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:sbcast(Name, Msg) -&gt; {GoodNodes, BadNodes}</string>
		<string>rpc:sbcast</string>
		<string>rpc:sbcast(&lt;#Nodes#&gt;, &lt;#Name#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:sbcast(Nodes, Name, Msg) -&gt; {GoodNodes, BadNodes}</string>
		<string>rpc:server_call</string>
		<string>rpc:server_call(&lt;#Node#&gt;, &lt;#Name#&gt;, &lt;#ReplyWrapper#&gt;, &lt;#Msg#&gt;)</string>
		<string>rpc:server_call(Node, Name, ReplyWrapper, Msg) -&gt; Reply | {error, Reason}</string>
		<string>rpc:start</string>
		<string>rpc:start()</string>
		<string>rpc:start() -&gt; {ok, pid()} | ignore | {error, term()}</string>
		<string>rpc:start_link</string>
		<string>rpc:start_link()</string>
		<string>rpc:start_link() -&gt; {ok, pid()} | ignore | {error, term()}</string>
		<string>rpc:stop</string>
		<string>rpc:stop()</string>
		<string>rpc:stop() -&gt; term()</string>
		<string>rpc:terminate</string>
		<string>rpc:terminate(&lt;#X1 :: term()#&gt;, &lt;#S :: state()#&gt;)</string>
		<string>rpc:terminate(X1 :: term(), S :: state()) -&gt; ok</string>
		<string>rpc:yield</string>
		<string>rpc:yield(&lt;#Key#&gt;)</string>
		<string>rpc:yield(Key) -&gt; Res | {badrpc, Reason}</string>
		<string>seq_trace:get_system_tracer</string>
		<string>seq_trace:get_system_tracer()</string>
		<string>seq_trace:get_system_tracer() -&gt; Tracer</string>
		<string>seq_trace:get_token</string>
		<string>seq_trace:get_token()</string>
		<string>seq_trace:get_token() -&gt; [] | token()</string>
		<string>seq_trace:get_token</string>
		<string>seq_trace:get_token(&lt;#Component#&gt;)</string>
		<string>seq_trace:get_token(Component) -&gt; {Component, Val}</string>
		<string>seq_trace:print</string>
		<string>seq_trace:print(&lt;#TraceInfo#&gt;)</string>
		<string>seq_trace:print(TraceInfo) -&gt; ok</string>
		<string>seq_trace:print</string>
		<string>seq_trace:print(&lt;#Label#&gt;, &lt;#TraceInfo#&gt;)</string>
		<string>seq_trace:print(Label, TraceInfo) -&gt; ok</string>
		<string>seq_trace:reset_trace</string>
		<string>seq_trace:reset_trace()</string>
		<string>seq_trace:reset_trace() -&gt; true</string>
		<string>seq_trace:set_system_tracer</string>
		<string>seq_trace:set_system_tracer(&lt;#Tracer#&gt;)</string>
		<string>seq_trace:set_system_tracer(Tracer) -&gt; OldTracer</string>
		<string>seq_trace:set_token</string>
		<string>seq_trace:set_token(&lt;#Token#&gt;)</string>
		<string>seq_trace:set_token(Token) -&gt; PreviousToken | ok</string>
		<string>seq_trace:set_token</string>
		<string>seq_trace:set_token(&lt;#Component#&gt;, &lt;#Val#&gt;)</string>
		<string>seq_trace:set_token(Component, Val) -&gt; {Component, OldVal}</string>
		<string>sets:add_element</string>
		<string>sets:add_element(&lt;#Element#&gt;, &lt;#Set1#&gt;)</string>
		<string>sets:add_element(Element, Set1) -&gt; Set2</string>
		<string>sets:del_element</string>
		<string>sets:del_element(&lt;#Element#&gt;, &lt;#Set1#&gt;)</string>
		<string>sets:del_element(Element, Set1) -&gt; Set2</string>
		<string>sets:filter</string>
		<string>sets:filter(&lt;#Pred#&gt;, &lt;#Set1#&gt;)</string>
		<string>sets:filter(Pred, Set1) -&gt; Set2</string>
		<string>sets:fold</string>
		<string>sets:fold(&lt;#Function#&gt;, &lt;#Acc0#&gt;, &lt;#Set#&gt;)</string>
		<string>sets:fold(Function, Acc0, Set) -&gt; Acc1</string>
		<string>sets:from_list</string>
		<string>sets:from_list(&lt;#List#&gt;)</string>
		<string>sets:from_list(List) -&gt; Set</string>
		<string>sets:intersection</string>
		<string>sets:intersection(&lt;#SetList#&gt;)</string>
		<string>sets:intersection(SetList) -&gt; Set</string>
		<string>sets:intersection</string>
		<string>sets:intersection(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sets:intersection(Set1, Set2) -&gt; Set3</string>
		<string>sets:is_disjoint</string>
		<string>sets:is_disjoint(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sets:is_disjoint(Set1, Set2) -&gt; boolean()</string>
		<string>sets:is_element</string>
		<string>sets:is_element(&lt;#Element#&gt;, &lt;#Set#&gt;)</string>
		<string>sets:is_element(Element, Set) -&gt; boolean()</string>
		<string>sets:is_set</string>
		<string>sets:is_set(&lt;#Set#&gt;)</string>
		<string>sets:is_set(Set) -&gt; boolean()</string>
		<string>sets:is_subset</string>
		<string>sets:is_subset(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sets:is_subset(Set1, Set2) -&gt; boolean()</string>
		<string>sets:new</string>
		<string>sets:new()</string>
		<string>sets:new() -&gt; set()</string>
		<string>sets:size</string>
		<string>sets:size(&lt;#Set#&gt;)</string>
		<string>sets:size(Set) -&gt; integer() &gt;= 0</string>
		<string>sets:subtract</string>
		<string>sets:subtract(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sets:subtract(Set1, Set2) -&gt; Set3</string>
		<string>sets:to_list</string>
		<string>sets:to_list(&lt;#Set#&gt;)</string>
		<string>sets:to_list(Set) -&gt; List</string>
		<string>sets:union</string>
		<string>sets:union(&lt;#SetList#&gt;)</string>
		<string>sets:union(SetList) -&gt; Set</string>
		<string>sets:union</string>
		<string>sets:union(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sets:union(Set1, Set2) -&gt; Set3</string>
		<string>shell:history</string>
		<string>shell:history(&lt;#N#&gt;)</string>
		<string>shell:history(N) -&gt; integer() &gt;= 0</string>
		<string>shell:prompt_func</string>
		<string>shell:prompt_func(&lt;#PromptFunc#&gt;)</string>
		<string>shell:prompt_func(PromptFunc) -&gt; PromptFunc2</string>
		<string>shell:results</string>
		<string>shell:results(&lt;#N#&gt;)</string>
		<string>shell:results(N) -&gt; integer() &gt;= 0</string>
		<string>shell:server</string>
		<string>shell:server(&lt;#StartSync :: boolean()#&gt;)</string>
		<string>shell:server(StartSync :: boolean()) -&gt; terminated</string>
		<string>shell:server</string>
		<string>shell:server(&lt;#NoCtrlG :: boolean()#&gt;, &lt;#StartSync :: boolean()#&gt;)</string>
		<string>shell:server(NoCtrlG :: boolean(), StartSync :: boolean()) -&gt; terminated</string>
		<string>shell:start</string>
		<string>shell:start()</string>
		<string>shell:start() -&gt; pid()</string>
		<string>shell:start_restricted</string>
		<string>shell:start_restricted(&lt;#Module#&gt;)</string>
		<string>shell:start_restricted(Module) -&gt; {error, Reason}</string>
		<string>shell:stop_restricted</string>
		<string>shell:stop_restricted()</string>
		<string>shell:stop_restricted() -&gt; no_return()</string>
		<string>shell:strings</string>
		<string>shell:strings(&lt;#Strings#&gt;)</string>
		<string>shell:strings(Strings) -&gt; Strings2</string>
		<string>shell:whereis_evaluator</string>
		<string>shell:whereis_evaluator()</string>
		<string>shell:whereis_evaluator() -&gt; undefined | pid()</string>
		<string>shell:whereis_evaluator</string>
		<string>shell:whereis_evaluator(&lt;#Shell :: pid()#&gt;)</string>
		<string>shell:whereis_evaluator(Shell :: pid()) -&gt; undefined | pid()</string>
		<string>slave:pseudo</string>
		<string>slave:pseudo(&lt;#Master#&gt;, &lt;#ServerList#&gt;)</string>
		<string>slave:pseudo(Master, ServerList) -&gt; ok</string>
		<string>slave:relay</string>
		<string>slave:relay(&lt;#Pid#&gt;)</string>
		<string>slave:relay(Pid) -&gt; no_return()</string>
		<string>slave:start</string>
		<string>slave:start(&lt;#Host#&gt;)</string>
		<string>slave:start(Host) -&gt; {ok, Node} | {error, Reason}</string>
		<string>slave:start</string>
		<string>slave:start(&lt;#Host#&gt;, &lt;#Name#&gt;)</string>
		<string>slave:start(Host, Name) -&gt; {ok, Node} | {error, Reason}</string>
		<string>slave:start</string>
		<string>slave:start(&lt;#Host#&gt;, &lt;#Name#&gt;, &lt;#Args#&gt;)</string>
		<string>slave:start(Host, Name, Args) -&gt; {ok, Node} | {error, Reason}</string>
		<string>slave:start_link</string>
		<string>slave:start_link(&lt;#Host#&gt;)</string>
		<string>slave:start_link(Host) -&gt; {ok, Node} | {error, Reason}</string>
		<string>slave:start_link</string>
		<string>slave:start_link(&lt;#Host#&gt;, &lt;#Name#&gt;)</string>
		<string>slave:start_link(Host, Name) -&gt; {ok, Node} | {error, Reason}</string>
		<string>slave:start_link</string>
		<string>slave:start_link(&lt;#Host#&gt;, &lt;#Name#&gt;, &lt;#Args#&gt;)</string>
		<string>slave:start_link(Host, Name, Args) -&gt; {ok, Node} | {error, Reason}</string>
		<string>slave:stop</string>
		<string>slave:stop(&lt;#Node#&gt;)</string>
		<string>slave:stop(Node) -&gt; ok</string>
		<string>snmp:config</string>
		<string>snmp:config()</string>
		<string>snmp:config() -&gt; ok | {error, Reason}</string>
		<string>snmp:start</string>
		<string>snmp:start()</string>
		<string>snmp:start() -&gt; ok | {error, Reason}</string>
		<string>snmp:start</string>
		<string>snmp:start(&lt;#Type#&gt;)</string>
		<string>snmp:start(Type) -&gt; ok | {error, Reason}</string>
		<string>snmp:start_agent</string>
		<string>snmp:start_agent()</string>
		<string>snmp:start_agent() -&gt; ok | {error, Reason}</string>
		<string>snmp:start_agent</string>
		<string>snmp:start_agent(&lt;#Type#&gt;)</string>
		<string>snmp:start_agent(Type) -&gt; ok | {error, Reason}</string>
		<string>snmp:start_manager</string>
		<string>snmp:start_manager()</string>
		<string>snmp:start_manager() -&gt; ok | {error, Reason}</string>
		<string>snmp:start_manager</string>
		<string>snmp:start_manager(&lt;#Type#&gt;)</string>
		<string>snmp:start_manager(Type) -&gt; ok | {error, Reason}</string>
		<string>snmp:date_and_time</string>
		<string>snmp:date_and_time()</string>
		<string>snmp:date_and_time() -&gt; DateAndTime</string>
		<string>snmp:date_and_time_to_universal_time_dst</string>
		<string>snmp:date_and_time_to_universal_time_dst(&lt;#DateAndTime#&gt;)</string>
		<string>snmp:date_and_time_to_universal_time_dst(DateAndTime) -&gt; [utc()]</string>
		<string>snmp:date_and_time_to_string</string>
		<string>snmp:date_and_time_to_string(&lt;#DateAndTime#&gt;)</string>
		<string>snmp:date_and_time_to_string(DateAndTime) -&gt; string()</string>
		<string>snmp:date_and_time_to_string</string>
		<string>snmp:date_and_time_to_string(&lt;#DateAndTime#&gt;, &lt;#Validate#&gt;)</string>
		<string>snmp:date_and_time_to_string(DateAndTime, Validate) -&gt; string()</string>
		<string>snmp:date_and_time_to_string2</string>
		<string>snmp:date_and_time_to_string2(&lt;#DateAndTime#&gt;)</string>
		<string>snmp:date_and_time_to_string2(DateAndTime) -&gt; string()</string>
		<string>snmp:local_time_to_date_and_time_dst</string>
		<string>snmp:local_time_to_date_and_time_dst(&lt;#Local#&gt;)</string>
		<string>snmp:local_time_to_date_and_time_dst(Local) -&gt; [DateAndTime]</string>
		<string>snmp:universal_time_to_date_and_time</string>
		<string>snmp:universal_time_to_date_and_time(&lt;#UTC#&gt;)</string>
		<string>snmp:universal_time_to_date_and_time(UTC) -&gt; DateAndTime</string>
		<string>snmp:validate_date_and_time</string>
		<string>snmp:validate_date_and_time(&lt;#DateAndTime#&gt;)</string>
		<string>snmp:validate_date_and_time(DateAndTime) -&gt; bool()</string>
		<string>snmp:validate_date_and_time</string>
		<string>snmp:validate_date_and_time(&lt;#DateAndTime#&gt;, &lt;#Validate#&gt;)</string>
		<string>snmp:validate_date_and_time(DateAndTime, Validate) -&gt; bool()</string>
		<string>snmp:passwd2localized_key</string>
		<string>snmp:passwd2localized_key(&lt;#Alg#&gt;, &lt;#Passwd#&gt;, &lt;#EngineID#&gt;)</string>
		<string>snmp:passwd2localized_key(Alg, Passwd, EngineID) -&gt; Key</string>
		<string>snmp:octet_string_to_bits</string>
		<string>snmp:octet_string_to_bits(&lt;#S#&gt;)</string>
		<string>snmp:octet_string_to_bits(S) -&gt; Val</string>
		<string>snmp:bits_to_octet_string</string>
		<string>snmp:bits_to_octet_string(&lt;#B#&gt;)</string>
		<string>snmp:bits_to_octet_string(B) -&gt; Val</string>
		<string>snmp:read_mib</string>
		<string>snmp:read_mib(&lt;#FileName#&gt;)</string>
		<string>snmp:read_mib(FileName) -&gt; {ok, mib()} | {error, Reason}</string>
		<string>snmp:log_to_txt</string>
		<string>snmp:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;)</string>
		<string>snmp:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile) -&gt; ok | {error, Reason}</string>
		<string>snmp:log_to_txt</string>
		<string>snmp:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block | Start#&gt;)</string>
		<string>snmp:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block | Start) -&gt; ok | {error, Reason}</string>
		<string>snmp:log_to_txt</string>
		<string>snmp:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Start#&gt;, &lt;#Block | Stop#&gt;)</string>
		<string>snmp:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Block | Stop) -&gt; ok | {error, Reason}</string>
		<string>snmp:log_to_txt</string>
		<string>snmp:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;, &lt;#Block#&gt;)</string>
		<string>snmp:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Stop, Block) -&gt; ok | {error, Reason}</string>
		<string>snmp:log_to_io</string>
		<string>snmp:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;)</string>
		<string>snmp:log_to_io(LogDir, Mibs, LogName, LogFile) -&gt; ok | {error, Reason}</string>
		<string>snmp:log_to_io</string>
		<string>snmp:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block | Start#&gt;)</string>
		<string>snmp:log_to_io(LogDir, Mibs, LogName, LogFile, Block | Start) -&gt; ok | {error, Reason}</string>
		<string>snmp:log_to_io</string>
		<string>snmp:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Start#&gt;, &lt;#Block | Stop#&gt;)</string>
		<string>snmp:log_to_io(LogDir, Mibs, LogName, LogFile, Start, Block | Stop) -&gt; ok | {error, Reason}</string>
		<string>snmp:log_to_io</string>
		<string>snmp:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;, &lt;#Block#&gt;)</string>
		<string>snmp:log_to_io(LogDir, Mibs, LogName, LogFile, Start, Stop, Block) -&gt; ok | {error, Reason}</string>
		<string>snmp:change_log_size</string>
		<string>snmp:change_log_size(&lt;#LogName#&gt;, &lt;#NewSize#&gt;)</string>
		<string>snmp:change_log_size(LogName, NewSize) -&gt; ok | {error, Reason}</string>
		<string>snmp:print_version_info</string>
		<string>snmp:print_version_info()</string>
		<string>snmp:print_version_info() -&gt; void()</string>
		<string>snmp:print_version_info</string>
		<string>snmp:print_version_info(&lt;#Prefix#&gt;)</string>
		<string>snmp:print_version_info(Prefix) -&gt; void()</string>
		<string>snmp:versions1</string>
		<string>snmp:versions1()</string>
		<string>snmp:versions1() -&gt; {ok, Info} | {error, Reason}</string>
		<string>snmp:versions2</string>
		<string>snmp:versions2()</string>
		<string>snmp:versions2() -&gt; {ok, Info} | {error, Reason}</string>
		<string>snmp:print_versions</string>
		<string>snmp:print_versions(&lt;#VersionInfo#&gt;)</string>
		<string>snmp:print_versions(VersionInfo) -&gt; void()</string>
		<string>snmp:print_versions</string>
		<string>snmp:print_versions(&lt;#Prefix#&gt;, &lt;#VersionInfo#&gt;)</string>
		<string>snmp:print_versions(Prefix, VersionInfo) -&gt; void()</string>
		<string>snmp:enable_trace</string>
		<string>snmp:enable_trace()</string>
		<string>snmp:enable_trace() -&gt; void()</string>
		<string>snmp:disable_trace</string>
		<string>snmp:disable_trace()</string>
		<string>snmp:disable_trace() -&gt; void()</string>
		<string>snmp:set_trace</string>
		<string>snmp:set_trace(&lt;#Targets#&gt;)</string>
		<string>snmp:set_trace(Targets) -&gt; void()</string>
		<string>snmp:reset_trace</string>
		<string>snmp:reset_trace(&lt;#Targets#&gt;)</string>
		<string>snmp:reset_trace(Targets) -&gt; void()</string>
		<string>snmp:set_trace</string>
		<string>snmp:set_trace(&lt;#Targets#&gt;, &lt;#Opts#&gt;)</string>
		<string>snmp:set_trace(Targets, Opts) -&gt; void()</string>
		<string>snmp_community_mib:configure</string>
		<string>snmp_community_mib:configure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_community_mib:configure(ConfDir) -&gt; void()</string>
		<string>snmp_community_mib:reconfigure</string>
		<string>snmp_community_mib:reconfigure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_community_mib:reconfigure(ConfDir) -&gt; void()</string>
		<string>snmp_community_mib:add_community</string>
		<string>snmp_community_mib:add_community(&lt;#Idx#&gt;, &lt;#CommName#&gt;, &lt;#SecName#&gt;, &lt;#CtxName#&gt;, &lt;#TransportTag#&gt;)</string>
		<string>snmp_community_mib:add_community(Idx, CommName, SecName, CtxName, TransportTag) -&gt; Ret</string>
		<string>snmp_community_mib:add_community</string>
		<string>snmp_community_mib:add_community(&lt;#Idx#&gt;, &lt;#CommName#&gt;, &lt;#SecName#&gt;, &lt;#EngineId#&gt;, &lt;#CtxName#&gt;, &lt;#TransportTag#&gt;)</string>
		<string>snmp_community_mib:add_community(Idx, CommName, SecName, EngineId, CtxName, TransportTag) -&gt; Ret</string>
		<string>snmp_community_mib:delete_community</string>
		<string>snmp_community_mib:delete_community(&lt;#Key#&gt;)</string>
		<string>snmp_community_mib:delete_community(Key) -&gt; Ret</string>
		<string>snmp_framework_mib:configure</string>
		<string>snmp_framework_mib:configure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_framework_mib:configure(ConfDir) -&gt; void()</string>
		<string>snmp_framework_mib:init</string>
		<string>snmp_framework_mib:init()</string>
		<string>snmp_framework_mib:init() -&gt; void()</string>
		<string>snmp_framework_mib:add_context</string>
		<string>snmp_framework_mib:add_context(&lt;#Ctx#&gt;)</string>
		<string>snmp_framework_mib:add_context(Ctx) -&gt; Ret</string>
		<string>snmp_framework_mib:delete_context</string>
		<string>snmp_framework_mib:delete_context(&lt;#Key#&gt;)</string>
		<string>snmp_framework_mib:delete_context(Key) -&gt; Ret</string>
		<string>snmp_generic:get_status_col</string>
		<string>snmp_generic:get_status_col(&lt;#Name#&gt;, &lt;#Cols#&gt;)</string>
		<string>snmp_generic:get_status_col(Name, Cols) -&gt; {ok, StatusVal} | false</string>
		<string>snmp_generic:get_status_col</string>
		<string>snmp_generic:get_status_col(&lt;#NameDb#&gt;, &lt;#Cols#&gt;)</string>
		<string>snmp_generic:get_status_col(NameDb, Cols) -&gt; {ok, StatusVal} | false</string>
		<string>snmp_generic:get_index_types</string>
		<string>snmp_generic:get_index_types(&lt;#Name#&gt;)</string>
		<string>snmp_generic:get_index_types(Name)</string>
		<string>snmp_generic:get_table_info</string>
		<string>snmp_generic:get_table_info(&lt;#Name#&gt;, &lt;#Item#&gt;)</string>
		<string>snmp_generic:get_table_info(Name, Item) -&gt; table_info_result()</string>
		<string>snmp_generic:table_func</string>
		<string>snmp_generic:table_func(&lt;#Op1#&gt;, &lt;#NameDb#&gt;)</string>
		<string>snmp_generic:table_func(Op1, NameDb) -&gt; Ret</string>
		<string>snmp_generic:table_func</string>
		<string>snmp_generic:table_func(&lt;#Op2#&gt;, &lt;#RowIndex#&gt;, &lt;#Cols#&gt;, &lt;#NameDb#&gt;)</string>
		<string>snmp_generic:table_func(Op2, RowIndex, Cols, NameDb) -&gt; Ret</string>
		<string>snmp_generic:table_get_elements</string>
		<string>snmp_generic:table_get_elements(&lt;#NameDb#&gt;, &lt;#RowIndex#&gt;, &lt;#Cols#&gt;)</string>
		<string>snmp_generic:table_get_elements(NameDb, RowIndex, Cols) -&gt; Values</string>
		<string>snmp_generic:table_next</string>
		<string>snmp_generic:table_next(&lt;#NameDb#&gt;, &lt;#RestOid#&gt;)</string>
		<string>snmp_generic:table_next(NameDb, RestOid) -&gt; RowIndex | endOfTable</string>
		<string>snmp_generic:table_row_exists</string>
		<string>snmp_generic:table_row_exists(&lt;#NameDb#&gt;, &lt;#RowIndex#&gt;)</string>
		<string>snmp_generic:table_row_exists(NameDb, RowIndex) -&gt; bool()</string>
		<string>snmp_generic:table_set_elements</string>
		<string>snmp_generic:table_set_elements(&lt;#NameDb#&gt;, &lt;#RowIndex#&gt;, &lt;#Cols#&gt;)</string>
		<string>snmp_generic:table_set_elements(NameDb, RowIndex, Cols) -&gt; bool()</string>
		<string>snmp_generic:variable_func</string>
		<string>snmp_generic:variable_func(&lt;#Op1#&gt;, &lt;#NameDb#&gt;)</string>
		<string>snmp_generic:variable_func(Op1, NameDb) -&gt; Ret</string>
		<string>snmp_generic:variable_func</string>
		<string>snmp_generic:variable_func(&lt;#Op2#&gt;, &lt;#Val#&gt;, &lt;#NameDb#&gt;)</string>
		<string>snmp_generic:variable_func(Op2, Val, NameDb) -&gt; Ret</string>
		<string>snmp_generic:variable_get</string>
		<string>snmp_generic:variable_get(&lt;#NameDb#&gt;)</string>
		<string>snmp_generic:variable_get(NameDb) -&gt; {value, Value} | undefined</string>
		<string>snmp_generic:variable_set</string>
		<string>snmp_generic:variable_set(&lt;#NameDb#&gt;, &lt;#NewVal#&gt;)</string>
		<string>snmp_generic:variable_set(NameDb, NewVal) -&gt; true | false</string>
		<string>snmp_index:delete</string>
		<string>snmp_index:delete(&lt;#Index#&gt;)</string>
		<string>snmp_index:delete(Index) -&gt; true</string>
		<string>snmp_index:delete</string>
		<string>snmp_index:delete(&lt;#Index#&gt;, &lt;#Key#&gt;)</string>
		<string>snmp_index:delete(Index, Key) -&gt; NewIndex</string>
		<string>snmp_index:get</string>
		<string>snmp_index:get(&lt;#Index#&gt;, &lt;#KeyOid#&gt;)</string>
		<string>snmp_index:get(Index, KeyOid) -&gt; {ok, {KeyOid, Value}} | undefined</string>
		<string>snmp_index:get_last</string>
		<string>snmp_index:get_last(&lt;#Index#&gt;)</string>
		<string>snmp_index:get_last(Index) -&gt; {ok, {KeyOid, Value}} | undefined</string>
		<string>snmp_index:get_next</string>
		<string>snmp_index:get_next(&lt;#Index#&gt;, &lt;#KeyOid#&gt;)</string>
		<string>snmp_index:get_next(Index, KeyOid) -&gt; {ok, {NextKeyOid, Value}} | undefined</string>
		<string>snmp_index:insert</string>
		<string>snmp_index:insert(&lt;#Index#&gt;, &lt;#Key#&gt;, &lt;#Value#&gt;)</string>
		<string>snmp_index:insert(Index, Key, Value) -&gt; NewIndex</string>
		<string>snmp_index:key_to_oid</string>
		<string>snmp_index:key_to_oid(&lt;#Index#&gt;, &lt;#Key#&gt;)</string>
		<string>snmp_index:key_to_oid(Index, Key) -&gt; KeyOid</string>
		<string>snmp_index:new</string>
		<string>snmp_index:new(&lt;#KeyTypes#&gt;)</string>
		<string>snmp_index:new(KeyTypes) -&gt; Index</string>
		<string>snmp_notification_mib:configure</string>
		<string>snmp_notification_mib:configure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_notification_mib:configure(ConfDir) -&gt; void()</string>
		<string>snmp_notification_mib:reconfigure</string>
		<string>snmp_notification_mib:reconfigure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_notification_mib:reconfigure(ConfDir) -&gt; void()</string>
		<string>snmp_notification_mib:add_notify</string>
		<string>snmp_notification_mib:add_notify(&lt;#Name#&gt;, &lt;#Tag#&gt;, &lt;#Type#&gt;)</string>
		<string>snmp_notification_mib:add_notify(Name, Tag, Type) -&gt; Ret</string>
		<string>snmp_notification_mib:delete_notify</string>
		<string>snmp_notification_mib:delete_notify(&lt;#Key#&gt;)</string>
		<string>snmp_notification_mib:delete_notify(Key) -&gt; Ret</string>
		<string>snmp_pdus:dec_message</string>
		<string>snmp_pdus:dec_message(&lt;#[byte()]#&gt;)</string>
		<string>snmp_pdus:dec_message([byte()]) -&gt; Message</string>
		<string>snmp_pdus:dec_message_only</string>
		<string>snmp_pdus:dec_message_only(&lt;#[byte()]#&gt;)</string>
		<string>snmp_pdus:dec_message_only([byte()]) -&gt; Message</string>
		<string>snmp_pdus:dec_pdu</string>
		<string>snmp_pdus:dec_pdu(&lt;#[byte()]#&gt;)</string>
		<string>snmp_pdus:dec_pdu([byte()]) -&gt; Pdu</string>
		<string>snmp_pdus:dec_scoped_pdu</string>
		<string>snmp_pdus:dec_scoped_pdu(&lt;#[byte()]#&gt;)</string>
		<string>snmp_pdus:dec_scoped_pdu([byte()]) -&gt; ScopedPdu</string>
		<string>snmp_pdus:dec_scoped_pdu_data</string>
		<string>snmp_pdus:dec_scoped_pdu_data(&lt;#[byte()]#&gt;)</string>
		<string>snmp_pdus:dec_scoped_pdu_data([byte()]) -&gt; ScopedPduData</string>
		<string>snmp_pdus:dec_usm_security_parameters</string>
		<string>snmp_pdus:dec_usm_security_parameters(&lt;#[byte()]#&gt;)</string>
		<string>snmp_pdus:dec_usm_security_parameters([byte()]) -&gt; UsmSecParams</string>
		<string>snmp_pdus:enc_encrypted_scoped_pdu</string>
		<string>snmp_pdus:enc_encrypted_scoped_pdu(&lt;#EncryptedScopedPdu#&gt;)</string>
		<string>snmp_pdus:enc_encrypted_scoped_pdu(EncryptedScopedPdu) -&gt; [byte()]</string>
		<string>snmp_pdus:enc_message</string>
		<string>snmp_pdus:enc_message(&lt;#Message#&gt;)</string>
		<string>snmp_pdus:enc_message(Message) -&gt; [byte()]</string>
		<string>snmp_pdus:enc_message_only</string>
		<string>snmp_pdus:enc_message_only(&lt;#Message#&gt;)</string>
		<string>snmp_pdus:enc_message_only(Message) -&gt; [byte()]</string>
		<string>snmp_pdus:enc_pdu</string>
		<string>snmp_pdus:enc_pdu(&lt;#Pd#&gt;)</string>
		<string>snmp_pdus:enc_pdu(Pd) -&gt; [byte()]</string>
		<string>snmp_pdus:enc_scoped_pdu</string>
		<string>snmp_pdus:enc_scoped_pdu(&lt;#ScopedPdu#&gt;)</string>
		<string>snmp_pdus:enc_scoped_pdu(ScopedPdu) -&gt; [byte()]</string>
		<string>snmp_pdus:enc_usm_security_parameters</string>
		<string>snmp_pdus:enc_usm_security_parameters(&lt;#UsmSecParams#&gt;)</string>
		<string>snmp_pdus:enc_usm_security_parameters(UsmSecParams) -&gt; [byte()]</string>
		<string>snmp_standard_mib:configure</string>
		<string>snmp_standard_mib:configure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_standard_mib:configure(ConfDir) -&gt; void()</string>
		<string>snmp_standard_mib:inc</string>
		<string>snmp_standard_mib:inc(&lt;#Name#&gt;)</string>
		<string>snmp_standard_mib:inc(Name) -&gt; void()</string>
		<string>snmp_standard_mib:inc</string>
		<string>snmp_standard_mib:inc(&lt;#Name#&gt;, &lt;#N#&gt;)</string>
		<string>snmp_standard_mib:inc(Name, N) -&gt; void()</string>
		<string>snmp_standard_mib:reconfigure</string>
		<string>snmp_standard_mib:reconfigure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_standard_mib:reconfigure(ConfDir) -&gt; void()</string>
		<string>snmp_standard_mib:reset</string>
		<string>snmp_standard_mib:reset()</string>
		<string>snmp_standard_mib:reset() -&gt; void()</string>
		<string>snmp_standard_mib:sys_up_time</string>
		<string>snmp_standard_mib:sys_up_time()</string>
		<string>snmp_standard_mib:sys_up_time() -&gt; Time</string>
		<string>snmp_target_mib:configure</string>
		<string>snmp_target_mib:configure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_target_mib:configure(ConfDir) -&gt; void()</string>
		<string>snmp_target_mib:reconfigure</string>
		<string>snmp_target_mib:reconfigure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_target_mib:reconfigure(ConfDir) -&gt; void()</string>
		<string>snmp_target_mib:set_target_engine_id</string>
		<string>snmp_target_mib:set_target_engine_id(&lt;#TargetAddrName#&gt;, &lt;#EngineId#&gt;)</string>
		<string>snmp_target_mib:set_target_engine_id(TargetAddrName, EngineId) -&gt; boolean()</string>
		<string>snmp_target_mib:add_addr</string>
		<string>snmp_target_mib:add_addr(&lt;#Name#&gt;, &lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#Timeout#&gt;, &lt;#Retry#&gt;, &lt;#TagList#&gt;, &lt;#Params#&gt;, &lt;#EngineId#&gt;, &lt;#TMask#&gt;, &lt;#MMS#&gt;)</string>
		<string>snmp_target_mib:add_addr(Name, Domain, Addr, Timeout, Retry, TagList, Params, EngineId, TMask, MMS) -&gt; Ret</string>
		<string>snmp_target_mib:delete_addr</string>
		<string>snmp_target_mib:delete_addr(&lt;#Key#&gt;)</string>
		<string>snmp_target_mib:delete_addr(Key) -&gt; Ret</string>
		<string>snmp_target_mib:add_params</string>
		<string>snmp_target_mib:add_params(&lt;#Name#&gt;, &lt;#MPModel#&gt;, &lt;#SecModel#&gt;, &lt;#SecName#&gt;, &lt;#SecLevel#&gt;)</string>
		<string>snmp_target_mib:add_params(Name, MPModel, SecModel, SecName, SecLevel) -&gt; Ret</string>
		<string>snmp_target_mib:delete_params</string>
		<string>snmp_target_mib:delete_params(&lt;#Key#&gt;)</string>
		<string>snmp_target_mib:delete_params(Key) -&gt; Ret</string>
		<string>snmp_user_based_sm_mib:configure</string>
		<string>snmp_user_based_sm_mib:configure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_user_based_sm_mib:configure(ConfDir) -&gt; void()</string>
		<string>snmp_user_based_sm_mib:reconfigure</string>
		<string>snmp_user_based_sm_mib:reconfigure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_user_based_sm_mib:reconfigure(ConfDir) -&gt; void()</string>
		<string>snmp_user_based_sm_mib:add_user</string>
		<string>snmp_user_based_sm_mib:add_user(&lt;#EngineID#&gt;, &lt;#Name#&gt;, &lt;#SecName#&gt;, &lt;#Clone#&gt;, &lt;#AuthP#&gt;, &lt;#AuthKeyC#&gt;, &lt;#OwnAuthKeyC#&gt;, &lt;#PrivP#&gt;, &lt;#PrivKeyC#&gt;, &lt;#OwnPrivKeyC#&gt;, &lt;#Public#&gt;, &lt;#AuthKey#&gt;, &lt;#PrivKey#&gt;)</string>
		<string>snmp_user_based_sm_mib:add_user(EngineID, Name, SecName, Clone, AuthP, AuthKeyC, OwnAuthKeyC, PrivP, PrivKeyC, OwnPrivKeyC, Public, AuthKey, PrivKey) -&gt; Ret</string>
		<string>snmp_user_based_sm_mib:delete_user</string>
		<string>snmp_user_based_sm_mib:delete_user(&lt;#Key#&gt;)</string>
		<string>snmp_user_based_sm_mib:delete_user(Key) -&gt; Ret</string>
		<string>snmp_view_based_acm_mib:configure</string>
		<string>snmp_view_based_acm_mib:configure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_view_based_acm_mib:configure(ConfDir) -&gt; void()</string>
		<string>snmp_view_based_acm_mib:reconfigure</string>
		<string>snmp_view_based_acm_mib:reconfigure(&lt;#ConfDir#&gt;)</string>
		<string>snmp_view_based_acm_mib:reconfigure(ConfDir) -&gt; void()</string>
		<string>snmp_view_based_acm_mib:add_sec2group</string>
		<string>snmp_view_based_acm_mib:add_sec2group(&lt;#SecModel#&gt;, &lt;#SecName#&gt;, &lt;#GroupName#&gt;)</string>
		<string>snmp_view_based_acm_mib:add_sec2group(SecModel, SecName, GroupName) -&gt; Ret</string>
		<string>snmp_view_based_acm_mib:delete_sec2group</string>
		<string>snmp_view_based_acm_mib:delete_sec2group(&lt;#Key#&gt;)</string>
		<string>snmp_view_based_acm_mib:delete_sec2group(Key) -&gt; Ret</string>
		<string>snmp_view_based_acm_mib:add_access</string>
		<string>snmp_view_based_acm_mib:add_access(&lt;#GroupName#&gt;, &lt;#Prefix#&gt;, &lt;#SecModel#&gt;, &lt;#SecLevel#&gt;, &lt;#Match#&gt;, &lt;#RV#&gt;, &lt;#WV#&gt;, &lt;#NV#&gt;)</string>
		<string>snmp_view_based_acm_mib:add_access(GroupName, Prefix, SecModel, SecLevel, Match, RV, WV, NV) -&gt; Ret</string>
		<string>snmp_view_based_acm_mib:delete_access</string>
		<string>snmp_view_based_acm_mib:delete_access(&lt;#Key#&gt;)</string>
		<string>snmp_view_based_acm_mib:delete_access(Key) -&gt; Ret</string>
		<string>snmp_view_based_acm_mib:add_view_tree_fam</string>
		<string>snmp_view_based_acm_mib:add_view_tree_fam(&lt;#ViewIndex#&gt;, &lt;#SubTree#&gt;, &lt;#Status#&gt;, &lt;#Mask#&gt;)</string>
		<string>snmp_view_based_acm_mib:add_view_tree_fam(ViewIndex, SubTree, Status, Mask) -&gt; Ret</string>
		<string>snmp_view_based_acm_mib:delete_view_tree_fam</string>
		<string>snmp_view_based_acm_mib:delete_view_tree_fam(&lt;#Key#&gt;)</string>
		<string>snmp_view_based_acm_mib:delete_view_tree_fam(Key) -&gt; Ret</string>
		<string>snmpa:add_agent_caps</string>
		<string>snmpa:add_agent_caps(&lt;#SysORID#&gt;, &lt;#SysORDescr#&gt;)</string>
		<string>snmpa:add_agent_caps(SysORID, SysORDescr) -&gt; SysORIndex</string>
		<string>snmpa:del_agent_caps</string>
		<string>snmpa:del_agent_caps(&lt;#SysORIndex#&gt;)</string>
		<string>snmpa:del_agent_caps(SysORIndex) -&gt; void()</string>
		<string>snmpa:get_agent_caps</string>
		<string>snmpa:get_agent_caps()</string>
		<string>snmpa:get_agent_caps() -&gt; [[SysORIndex, SysORID, SysORDescr, SysORUpTime]]</string>
		<string>snmpa:get</string>
		<string>snmpa:get(&lt;#Agent#&gt;, &lt;#Vars#&gt;)</string>
		<string>snmpa:get(Agent, Vars) -&gt; Values | {error, Reason}</string>
		<string>snmpa:get</string>
		<string>snmpa:get(&lt;#Agent#&gt;, &lt;#Vars#&gt;, &lt;#Context#&gt;)</string>
		<string>snmpa:get(Agent, Vars, Context) -&gt; Values | {error, Reason}</string>
		<string>snmpa:get_next</string>
		<string>snmpa:get_next(&lt;#Agent#&gt;, &lt;#Vars#&gt;)</string>
		<string>snmpa:get_next(Agent, Vars) -&gt; Values | {error, Reason}</string>
		<string>snmpa:get_next</string>
		<string>snmpa:get_next(&lt;#Agent#&gt;, &lt;#Vars#&gt;, &lt;#Context#&gt;)</string>
		<string>snmpa:get_next(Agent, Vars, Context) -&gt; Values | {error, Reason}</string>
		<string>snmpa:backup</string>
		<string>snmpa:backup(&lt;#BackupDir#&gt;)</string>
		<string>snmpa:backup(BackupDir) -&gt; ok | {error, Reason}</string>
		<string>snmpa:backup</string>
		<string>snmpa:backup(&lt;#Agent#&gt;, &lt;#BackupDir#&gt;)</string>
		<string>snmpa:backup(Agent, BackupDir) -&gt; ok | {error, Reason}</string>
		<string>snmpa:info</string>
		<string>snmpa:info()</string>
		<string>snmpa:info() -&gt; [{Key, Value}]</string>
		<string>snmpa:info</string>
		<string>snmpa:info(&lt;#Agent#&gt;)</string>
		<string>snmpa:info(Agent) -&gt; [{Key, Value}]</string>
		<string>snmpa:old_info_format</string>
		<string>snmpa:old_info_format(&lt;#NewInfo#&gt;)</string>
		<string>snmpa:old_info_format(NewInfo) -&gt; OldInfo</string>
		<string>snmpa:load_mib</string>
		<string>snmpa:load_mib(&lt;#Mib#&gt;)</string>
		<string>snmpa:load_mib(Mib) -&gt; ok | {error, Reason}</string>
		<string>snmpa:load_mib</string>
		<string>snmpa:load_mib(&lt;#Agent#&gt;, &lt;#Mib#&gt;)</string>
		<string>snmpa:load_mib(Agent, Mib) -&gt; ok | {error, Reason}</string>
		<string>snmpa:load_mibs</string>
		<string>snmpa:load_mibs(&lt;#Mibs#&gt;)</string>
		<string>snmpa:load_mibs(Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpa:load_mibs</string>
		<string>snmpa:load_mibs(&lt;#Mibs#&gt;, &lt;#Force#&gt;)</string>
		<string>snmpa:load_mibs(Mibs, Force) -&gt; ok | {error, Reason}</string>
		<string>snmpa:load_mibs</string>
		<string>snmpa:load_mibs(&lt;#Agent#&gt;, &lt;#Mibs#&gt;)</string>
		<string>snmpa:load_mibs(Agent, Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpa:load_mibs</string>
		<string>snmpa:load_mibs(&lt;#Agent#&gt;, &lt;#Mibs#&gt;, &lt;#Force#&gt;)</string>
		<string>snmpa:load_mibs(Agent, Mibs, Force) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unload_mib</string>
		<string>snmpa:unload_mib(&lt;#Mib#&gt;)</string>
		<string>snmpa:unload_mib(Mib) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unload_mib</string>
		<string>snmpa:unload_mib(&lt;#Agent#&gt;, &lt;#Mib#&gt;)</string>
		<string>snmpa:unload_mib(Agent, Mib) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unload_mibs</string>
		<string>snmpa:unload_mibs(&lt;#Mibs#&gt;)</string>
		<string>snmpa:unload_mibs(Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unload_mibs</string>
		<string>snmpa:unload_mibs(&lt;#Mibs#&gt;, &lt;#Force#&gt;)</string>
		<string>snmpa:unload_mibs(Mibs, Force) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unload_mibs</string>
		<string>snmpa:unload_mibs(&lt;#Agent#&gt;, &lt;#Mibs#&gt;)</string>
		<string>snmpa:unload_mibs(Agent, Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unload_mibs</string>
		<string>snmpa:unload_mibs(&lt;#Agent#&gt;, &lt;#Mibs#&gt;, &lt;#Force#&gt;)</string>
		<string>snmpa:unload_mibs(Agent, Mibs, Force) -&gt; ok | {error, Reason}</string>
		<string>snmpa:which_mibs</string>
		<string>snmpa:which_mibs()</string>
		<string>snmpa:which_mibs() -&gt; Mibs</string>
		<string>snmpa:which_mibs</string>
		<string>snmpa:which_mibs(&lt;#Agent#&gt;)</string>
		<string>snmpa:which_mibs(Agent) -&gt; Mibs</string>
		<string>snmpa:whereis_mib</string>
		<string>snmpa:whereis_mib(&lt;#MibName#&gt;)</string>
		<string>snmpa:whereis_mib(MibName) -&gt; {ok, MibFile} | {error, Reason}</string>
		<string>snmpa:whereis_mib</string>
		<string>snmpa:whereis_mib(&lt;#Agent#&gt;, &lt;#MibName#&gt;)</string>
		<string>snmpa:whereis_mib(Agent, MibName) -&gt; {ok, MibFile} | {error, Reason}</string>
		<string>snmpa:current_request_id</string>
		<string>snmpa:current_request_id()</string>
		<string>snmpa:current_request_id() -&gt; {value, RequestId} | false</string>
		<string>snmpa:current_context</string>
		<string>snmpa:current_context()</string>
		<string>snmpa:current_context() -&gt; {value, Context} | false</string>
		<string>snmpa:current_community</string>
		<string>snmpa:current_community()</string>
		<string>snmpa:current_community() -&gt; {value, Community} | false</string>
		<string>snmpa:current_address</string>
		<string>snmpa:current_address()</string>
		<string>snmpa:current_address() -&gt; {value, Address} | false</string>
		<string>snmpa:enum_to_int</string>
		<string>snmpa:enum_to_int(&lt;#Name#&gt;, &lt;#Enum#&gt;)</string>
		<string>snmpa:enum_to_int(Name, Enum) -&gt; {value, Int} | false</string>
		<string>snmpa:enum_to_int</string>
		<string>snmpa:enum_to_int(&lt;#Db#&gt;, &lt;#Name#&gt;, &lt;#Enum#&gt;)</string>
		<string>snmpa:enum_to_int(Db, Name, Enum) -&gt; {value, Int} | false</string>
		<string>snmpa:int_to_enum</string>
		<string>snmpa:int_to_enum(&lt;#Name#&gt;, &lt;#Int#&gt;)</string>
		<string>snmpa:int_to_enum(Name, Int) -&gt; {value, Enum} | false</string>
		<string>snmpa:int_to_enum</string>
		<string>snmpa:int_to_enum(&lt;#Db#&gt;, &lt;#Name#&gt;, &lt;#Int#&gt;)</string>
		<string>snmpa:int_to_enum(Db, Name, Int) -&gt; {value, Enum} | false</string>
		<string>snmpa:name_to_oid</string>
		<string>snmpa:name_to_oid(&lt;#Name#&gt;)</string>
		<string>snmpa:name_to_oid(Name) -&gt; {value, oid()} | false</string>
		<string>snmpa:name_to_oid</string>
		<string>snmpa:name_to_oid(&lt;#Db#&gt;, &lt;#Name#&gt;)</string>
		<string>snmpa:name_to_oid(Db, Name) -&gt; {value, oid()} | false</string>
		<string>snmpa:oid_to_name</string>
		<string>snmpa:oid_to_name(&lt;#OID#&gt;)</string>
		<string>snmpa:oid_to_name(OID) -&gt; {value, Name} | false</string>
		<string>snmpa:oid_to_name</string>
		<string>snmpa:oid_to_name(&lt;#Db#&gt;, &lt;#OID#&gt;)</string>
		<string>snmpa:oid_to_name(Db, OID) -&gt; {value, Name} | false</string>
		<string>snmpa:which_aliasnames</string>
		<string>snmpa:which_aliasnames()</string>
		<string>snmpa:which_aliasnames() -&gt; Result</string>
		<string>snmpa:which_tables</string>
		<string>snmpa:which_tables()</string>
		<string>snmpa:which_tables() -&gt; Result</string>
		<string>snmpa:which_variables</string>
		<string>snmpa:which_variables()</string>
		<string>snmpa:which_variables() -&gt; Result</string>
		<string>snmpa:which_notifications</string>
		<string>snmpa:which_notifications()</string>
		<string>snmpa:which_notifications() -&gt; Result</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;, &lt;#Block | Mibs#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir, Block | Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#Block | OutFile#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir, Mibs, Block | OutFile) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#Block | LogName#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir, Mibs, OutFile, Block | LogName) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#Block | LogFile#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir, Mibs, OutFile, LogName, Block | LogFile) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block | Start#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block | Start) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block#&gt;, &lt;#Start#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block, Start) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Stop) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_txt</string>
		<string>snmpa:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>snmpa:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block, Start, Stop) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_io</string>
		<string>snmpa:log_to_io(&lt;#LogDir#&gt;)</string>
		<string>snmpa:log_to_io(LogDir) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_io</string>
		<string>snmpa:log_to_io(&lt;#LogDir#&gt;, &lt;#Block | Mibs#&gt;)</string>
		<string>snmpa:log_to_io(LogDir, Block | Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_io</string>
		<string>snmpa:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#Block | LogName#&gt;)</string>
		<string>snmpa:log_to_io(LogDir, Mibs, Block | LogName) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_io</string>
		<string>snmpa:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#Block | LogFile#&gt;)</string>
		<string>snmpa:log_to_io(LogDir, Mibs, LogName, Block | LogFile) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_io</string>
		<string>snmpa:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block | Start#&gt;)</string>
		<string>snmpa:log_to_io(LogDir, Mibs, LogName, LogFile, Block | Start) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_io</string>
		<string>snmpa:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block#&gt;, &lt;#Start#&gt;)</string>
		<string>snmpa:log_to_io(LogDir, Mibs, LogName, LogFile, Block, Start) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_io</string>
		<string>snmpa:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>snmpa:log_to_io(LogDir, Mibs, LogName, LogFile, Start, Stop) -&gt; ok | {error, Reason}</string>
		<string>snmpa:log_to_io</string>
		<string>snmpa:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>snmpa:log_to_io(LogDir, Mibs, LogName, LogFile, Block, Start, Stop) -&gt; ok | {error, Reason}</string>
		<string>snmpa:change_log_size</string>
		<string>snmpa:change_log_size(&lt;#NewSize#&gt;)</string>
		<string>snmpa:change_log_size(NewSize) -&gt; ok | {error, Reason}</string>
		<string>snmpa:set_log_type</string>
		<string>snmpa:set_log_type(&lt;#NewType#&gt;)</string>
		<string>snmpa:set_log_type(NewType) -&gt; {ok, OldType} | {error, Reason}</string>
		<string>snmpa:set_log_type</string>
		<string>snmpa:set_log_type(&lt;#Agent#&gt;, &lt;#NewType#&gt;)</string>
		<string>snmpa:set_log_type(Agent, NewType) -&gt; {ok, OldType} | {error, Reason}</string>
		<string>snmpa:mib_of</string>
		<string>snmpa:mib_of(&lt;#Oid#&gt;)</string>
		<string>snmpa:mib_of(Oid) -&gt; {ok, MibName} | {error, Reason}</string>
		<string>snmpa:mib_of</string>
		<string>snmpa:mib_of(&lt;#Agent#&gt;, &lt;#Oid#&gt;)</string>
		<string>snmpa:mib_of(Agent, Oid) -&gt; {ok, MibName} | {error, Reason}</string>
		<string>snmpa:me_of</string>
		<string>snmpa:me_of(&lt;#Oid#&gt;)</string>
		<string>snmpa:me_of(Oid) -&gt; {ok, Me} | {error, Reason}</string>
		<string>snmpa:me_of</string>
		<string>snmpa:me_of(&lt;#Agent#&gt;, &lt;#Oid#&gt;)</string>
		<string>snmpa:me_of(Agent, Oid) -&gt; {ok, Me} | {error, Reason}</string>
		<string>snmpa:invalidate_mibs_cache</string>
		<string>snmpa:invalidate_mibs_cache()</string>
		<string>snmpa:invalidate_mibs_cache() -&gt; void()</string>
		<string>snmpa:invalidate_mibs_cache</string>
		<string>snmpa:invalidate_mibs_cache(&lt;#Agent#&gt;)</string>
		<string>snmpa:invalidate_mibs_cache(Agent) -&gt; void()</string>
		<string>snmpa:enable_mibs_cache</string>
		<string>snmpa:enable_mibs_cache()</string>
		<string>snmpa:enable_mibs_cache() -&gt; void()</string>
		<string>snmpa:enable_mibs_cache</string>
		<string>snmpa:enable_mibs_cache(&lt;#Agent#&gt;)</string>
		<string>snmpa:enable_mibs_cache(Agent) -&gt; void()</string>
		<string>snmpa:disable_mibs_cache</string>
		<string>snmpa:disable_mibs_cache()</string>
		<string>snmpa:disable_mibs_cache() -&gt; void()</string>
		<string>snmpa:disable_mibs_cache</string>
		<string>snmpa:disable_mibs_cache(&lt;#Agent#&gt;)</string>
		<string>snmpa:disable_mibs_cache(Agent) -&gt; void()</string>
		<string>snmpa:which_mibs_cache_size</string>
		<string>snmpa:which_mibs_cache_size()</string>
		<string>snmpa:which_mibs_cache_size() -&gt; void()</string>
		<string>snmpa:which_mibs_cache_size</string>
		<string>snmpa:which_mibs_cache_size(&lt;#Agent#&gt;)</string>
		<string>snmpa:which_mibs_cache_size(Agent) -&gt; void()</string>
		<string>snmpa:gc_mibs_cache</string>
		<string>snmpa:gc_mibs_cache()</string>
		<string>snmpa:gc_mibs_cache() -&gt; {ok, NumElementsGCed} | {error, Reason}</string>
		<string>snmpa:gc_mibs_cache</string>
		<string>snmpa:gc_mibs_cache(&lt;#Agent#&gt;)</string>
		<string>snmpa:gc_mibs_cache(Agent) -&gt; {ok, NumElementsGCed} | {error, Reason}</string>
		<string>snmpa:gc_mibs_cache</string>
		<string>snmpa:gc_mibs_cache(&lt;#Age#&gt;)</string>
		<string>snmpa:gc_mibs_cache(Age) -&gt; {ok, NumElementsGCed} | {error, Reason}</string>
		<string>snmpa:gc_mibs_cache</string>
		<string>snmpa:gc_mibs_cache(&lt;#Agent#&gt;, &lt;#Age#&gt;)</string>
		<string>snmpa:gc_mibs_cache(Agent, Age) -&gt; {ok, NumElementsGCed} | {error, Reason}</string>
		<string>snmpa:gc_mibs_cache</string>
		<string>snmpa:gc_mibs_cache(&lt;#Age#&gt;, &lt;#GcLimit#&gt;)</string>
		<string>snmpa:gc_mibs_cache(Age, GcLimit) -&gt; {ok, NumElementsGCed} | {error, Reason}</string>
		<string>snmpa:gc_mibs_cache</string>
		<string>snmpa:gc_mibs_cache(&lt;#Agent#&gt;, &lt;#Age#&gt;, &lt;#GcLimit#&gt;)</string>
		<string>snmpa:gc_mibs_cache(Agent, Age, GcLimit) -&gt; {ok, NumElementsGCed} | {error, Reason}</string>
		<string>snmpa:enable_mibs_cache_autogc</string>
		<string>snmpa:enable_mibs_cache_autogc()</string>
		<string>snmpa:enable_mibs_cache_autogc() -&gt; void()</string>
		<string>snmpa:enable_mibs_cache_autogc</string>
		<string>snmpa:enable_mibs_cache_autogc(&lt;#Agent#&gt;)</string>
		<string>snmpa:enable_mibs_cache_autogc(Agent) -&gt; void()</string>
		<string>snmpa:disable_mibs_cache_autogc</string>
		<string>snmpa:disable_mibs_cache_autogc()</string>
		<string>snmpa:disable_mibs_cache_autogc() -&gt; void()</string>
		<string>snmpa:disable_mibs_cache_autogc</string>
		<string>snmpa:disable_mibs_cache_autogc(&lt;#Agent#&gt;)</string>
		<string>snmpa:disable_mibs_cache_autogc(Agent) -&gt; void()</string>
		<string>snmpa:update_mibs_cache_age</string>
		<string>snmpa:update_mibs_cache_age(&lt;#NewAge#&gt;)</string>
		<string>snmpa:update_mibs_cache_age(NewAge) -&gt; ok | {error, Reason}</string>
		<string>snmpa:update_mibs_cache_age</string>
		<string>snmpa:update_mibs_cache_age(&lt;#Agent#&gt;, &lt;#NewAge#&gt;)</string>
		<string>snmpa:update_mibs_cache_age(Agent, NewAge) -&gt; ok | {error, Reason}</string>
		<string>snmpa:update_mibs_cache_gclimit</string>
		<string>snmpa:update_mibs_cache_gclimit(&lt;#NewGcLimit#&gt;)</string>
		<string>snmpa:update_mibs_cache_gclimit(NewGcLimit) -&gt; ok | {error, Reason}</string>
		<string>snmpa:update_mibs_cache_gclimit</string>
		<string>snmpa:update_mibs_cache_gclimit(&lt;#Agent#&gt;, &lt;#NewGCLimit#&gt;)</string>
		<string>snmpa:update_mibs_cache_gclimit(Agent, NewGCLimit) -&gt; ok | {error, Reason}</string>
		<string>snmpa:register_notification_filter</string>
		<string>snmpa:register_notification_filter(&lt;#Id#&gt;, &lt;#Mod#&gt;, &lt;#Data#&gt;)</string>
		<string>snmpa:register_notification_filter(Id, Mod, Data) -&gt; ok | {error, Reason}</string>
		<string>snmpa:register_notification_filter</string>
		<string>snmpa:register_notification_filter(&lt;#Agent#&gt;, &lt;#Id#&gt;, &lt;#Mod#&gt;, &lt;#Data#&gt;)</string>
		<string>snmpa:register_notification_filter(Agent, Id, Mod, Data) -&gt; ok | {error, Reason}</string>
		<string>snmpa:register_notification_filter</string>
		<string>snmpa:register_notification_filter(&lt;#Id#&gt;, &lt;#Mod#&gt;, &lt;#Data#&gt;, &lt;#Where#&gt;)</string>
		<string>snmpa:register_notification_filter(Id, Mod, Data, Where) -&gt; ok | {error, Reason}</string>
		<string>snmpa:register_notification_filter</string>
		<string>snmpa:register_notification_filter(&lt;#Agent#&gt;, &lt;#Id#&gt;, &lt;#Mod#&gt;, &lt;#Data#&gt;, &lt;#Where#&gt;)</string>
		<string>snmpa:register_notification_filter(Agent, Id, Mod, Data, Where) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unregister_notification_filter</string>
		<string>snmpa:unregister_notification_filter(&lt;#Id#&gt;)</string>
		<string>snmpa:unregister_notification_filter(Id) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unregister_notification_filter</string>
		<string>snmpa:unregister_notification_filter(&lt;#Agent#&gt;, &lt;#Id#&gt;)</string>
		<string>snmpa:unregister_notification_filter(Agent, Id) -&gt; ok | {error, Reason}</string>
		<string>snmpa:which_notification_filter</string>
		<string>snmpa:which_notification_filter()</string>
		<string>snmpa:which_notification_filter() -&gt; Filters</string>
		<string>snmpa:which_notification_filter</string>
		<string>snmpa:which_notification_filter(&lt;#Agent#&gt;)</string>
		<string>snmpa:which_notification_filter(Agent) -&gt; Filters</string>
		<string>snmpa:set_request_limit</string>
		<string>snmpa:set_request_limit(&lt;#NewLimit#&gt;)</string>
		<string>snmpa:set_request_limit(NewLimit) -&gt; {ok, OldLimit} | {error, Reason}</string>
		<string>snmpa:set_request_limit</string>
		<string>snmpa:set_request_limit(&lt;#Agent#&gt;, &lt;#NewLimit#&gt;)</string>
		<string>snmpa:set_request_limit(Agent, NewLimit) -&gt; {ok, OldLimit} | {error, Reason}</string>
		<string>snmpa:register_subagent</string>
		<string>snmpa:register_subagent(&lt;#Agent#&gt;, &lt;#SubTreeOid#&gt;, &lt;#Subagent#&gt;)</string>
		<string>snmpa:register_subagent(Agent, SubTreeOid, Subagent) -&gt; ok | {error, Reason}</string>
		<string>snmpa:unregister_subagent</string>
		<string>snmpa:unregister_subagent(&lt;#Agent#&gt;, &lt;#SubagentOidOrPid#&gt;)</string>
		<string>snmpa:unregister_subagent(Agent, SubagentOidOrPid) -&gt; ok | {ok, SubAgentPid} | {error, Reason}</string>
		<string>snmpa:send_notification2</string>
		<string>snmpa:send_notification2(&lt;#Agent#&gt;, &lt;#Notification#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpa:send_notification2(Agent, Notification, SendOpts) -&gt; void()</string>
		<string>snmpa:send_notification</string>
		<string>snmpa:send_notification(&lt;#Agent#&gt;, &lt;#Notification#&gt;, &lt;#Receiver#&gt;)</string>
		<string>snmpa:send_notification(Agent, Notification, Receiver) -&gt; void() </string>
		<string>snmpa:send_notification</string>
		<string>snmpa:send_notification(&lt;#Agent#&gt;, &lt;#Notification#&gt;, &lt;#Receiver#&gt;, &lt;#Varbinds#&gt;)</string>
		<string>snmpa:send_notification(Agent, Notification, Receiver, Varbinds) -&gt; void() </string>
		<string>snmpa:send_notification</string>
		<string>snmpa:send_notification(&lt;#Agent#&gt;, &lt;#Notification#&gt;, &lt;#Receiver#&gt;, &lt;#NotifyName#&gt;, &lt;#Varbinds#&gt;)</string>
		<string>snmpa:send_notification(Agent, Notification, Receiver, NotifyName, Varbinds) -&gt; void() </string>
		<string>snmpa:send_notification</string>
		<string>snmpa:send_notification(&lt;#Agent#&gt;, &lt;#Notification#&gt;, &lt;#Receiver#&gt;, &lt;#NotifyName#&gt;, &lt;#ContextName#&gt;, &lt;#Varbinds#&gt;)</string>
		<string>snmpa:send_notification(Agent, Notification, Receiver, NotifyName, ContextName, Varbinds) -&gt; void() </string>
		<string>snmpa:send_notification</string>
		<string>snmpa:send_notification(&lt;#Agent#&gt;, &lt;#Notification#&gt;, &lt;#Receiver#&gt;, &lt;#NotifyName#&gt;, &lt;#ContextName#&gt;, &lt;#Varbinds#&gt;, &lt;#LocalEngineID#&gt;)</string>
		<string>snmpa:send_notification(Agent, Notification, Receiver, NotifyName, ContextName, Varbinds, LocalEngineID) -&gt; void() </string>
		<string>snmpa:discovery</string>
		<string>snmpa:discovery(&lt;#TargetName#&gt;, &lt;#Notification#&gt;)</string>
		<string>snmpa:discovery(TargetName, Notification) -&gt; {ok, ManagerEngineID} | {error, Reason}</string>
		<string>snmpa:discovery</string>
		<string>snmpa:discovery(&lt;#TargetName#&gt;, &lt;#Notification#&gt;, &lt;#Varbinds#&gt;)</string>
		<string>snmpa:discovery(TargetName, Notification, Varbinds) -&gt; {ok, ManagerEngineID} | {error, Reason}</string>
		<string>snmpa:discovery</string>
		<string>snmpa:discovery(&lt;#TargetName#&gt;, &lt;#Notification#&gt;, &lt;#DiscoHandler#&gt;)</string>
		<string>snmpa:discovery(TargetName, Notification, DiscoHandler) -&gt; {ok, ManagerEngineID} | {error, Reason}</string>
		<string>snmpa:discovery</string>
		<string>snmpa:discovery(&lt;#TargetName#&gt;, &lt;#Notification#&gt;, &lt;#ContextName#&gt;, &lt;#Varbinds#&gt;)</string>
		<string>snmpa:discovery(TargetName, Notification, ContextName, Varbinds) -&gt; {ok, ManagerEngineID} | {error, Reason}</string>
		<string>snmpa:discovery</string>
		<string>snmpa:discovery(&lt;#TargetName#&gt;, &lt;#Notification#&gt;, &lt;#Varbinds#&gt;, &lt;#DiscoHandler#&gt;)</string>
		<string>snmpa:discovery(TargetName, Notification, Varbinds, DiscoHandler) -&gt; {ok, ManagerEngineID} | {error, Reason}</string>
		<string>snmpa:discovery</string>
		<string>snmpa:discovery(&lt;#TargetName#&gt;, &lt;#Notification#&gt;, &lt;#ContextName#&gt;, &lt;#Varbinds#&gt;, &lt;#DiscoHandler#&gt;)</string>
		<string>snmpa:discovery(TargetName, Notification, ContextName, Varbinds, DiscoHandler) -&gt; {ok, ManagerEngineID} | {error, Reason}</string>
		<string>snmpa:discovery</string>
		<string>snmpa:discovery(&lt;#TargetName#&gt;, &lt;#Notification#&gt;, &lt;#ContextName#&gt;, &lt;#Varbinds#&gt;, &lt;#DiscoHandler#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpa:discovery(TargetName, Notification, ContextName, Varbinds, DiscoHandler, ExtraInfo) -&gt; {ok, ManagerEngineID} | {error, Reason}</string>
		<string>snmpa:convert_config</string>
		<string>snmpa:convert_config(&lt;#OldConfig#&gt;)</string>
		<string>snmpa:convert_config(OldConfig) -&gt; AgentConfig</string>
		<string>snmpa:restart_worker</string>
		<string>snmpa:restart_worker()</string>
		<string>snmpa:restart_worker() -&gt; void()</string>
		<string>snmpa:restart_worker</string>
		<string>snmpa:restart_worker(&lt;#Agent#&gt;)</string>
		<string>snmpa:restart_worker(Agent) -&gt; void()</string>
		<string>snmpa:restart_set_worker</string>
		<string>snmpa:restart_set_worker()</string>
		<string>snmpa:restart_set_worker() -&gt; void()</string>
		<string>snmpa:restart_set_worker</string>
		<string>snmpa:restart_set_worker(&lt;#Agent#&gt;)</string>
		<string>snmpa:restart_set_worker(Agent) -&gt; void()</string>
		<string>snmpa:print_mib_info</string>
		<string>snmpa:print_mib_info()</string>
		<string>snmpa:print_mib_info() -&gt; void()</string>
		<string>snmpa:print_mib_tables</string>
		<string>snmpa:print_mib_tables()</string>
		<string>snmpa:print_mib_tables() -&gt; void()</string>
		<string>snmpa:print_mib_variables</string>
		<string>snmpa:print_mib_variables()</string>
		<string>snmpa:print_mib_variables() -&gt; void()</string>
		<string>snmpa:verbosity</string>
		<string>snmpa:verbosity(&lt;#Ref#&gt;, &lt;#Verbosity#&gt;)</string>
		<string>snmpa:verbosity(Ref, Verbosity) -&gt; void()</string>
		<string>snmpa_conf:agent_entry</string>
		<string>snmpa_conf:agent_entry(&lt;#Tag#&gt;, &lt;#Val#&gt;)</string>
		<string>snmpa_conf:agent_entry(Tag, Val) -&gt; agent_entry()</string>
		<string>snmpa_conf:write_agent_config</string>
		<string>snmpa_conf:write_agent_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_agent_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_agent_config</string>
		<string>snmpa_conf:write_agent_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_agent_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_agent_config</string>
		<string>snmpa_conf:append_agent_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_agent_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_agent_config</string>
		<string>snmpa_conf:read_agent_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_agent_config(Dir) -&gt; Conf</string>
		<string>snmpa_conf:standard_entry</string>
		<string>snmpa_conf:standard_entry(&lt;#Tag#&gt;, &lt;#Val#&gt;)</string>
		<string>snmpa_conf:standard_entry(Tag, Val) -&gt; standard_entry()</string>
		<string>snmpa_conf:write_standard_config</string>
		<string>snmpa_conf:write_standard_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_standard_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_standard_config</string>
		<string>snmpa_conf:write_standard_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_standard_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_standard_config</string>
		<string>snmpa_conf:append_standard_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_standard_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_standard_config</string>
		<string>snmpa_conf:read_standard_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_standard_config(Dir) -&gt; Conf</string>
		<string>snmpa_conf:context_entry</string>
		<string>snmpa_conf:context_entry(&lt;#Context#&gt;)</string>
		<string>snmpa_conf:context_entry(Context) -&gt; context_entry()</string>
		<string>snmpa_conf:write_context_config</string>
		<string>snmpa_conf:write_context_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_context_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_context_config</string>
		<string>snmpa_conf:write_context_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_context_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_context_config</string>
		<string>snmpa_conf:append_context_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_context_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_context_config</string>
		<string>snmpa_conf:read_context_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_context_config(Dir) -&gt; Conf</string>
		<string>snmpa_conf:community_entry</string>
		<string>snmpa_conf:community_entry(&lt;#CommunityIndex#&gt;)</string>
		<string>snmpa_conf:community_entry(CommunityIndex) -&gt; community_entry()</string>
		<string>snmpa_conf:community_entry</string>
		<string>snmpa_conf:community_entry(&lt;#CommunityIndex#&gt;, &lt;#CommunityName#&gt;, &lt;#SecName#&gt;, &lt;#ContextName#&gt;, &lt;#TransportTag#&gt;)</string>
		<string>snmpa_conf:community_entry(CommunityIndex, CommunityName, SecName, ContextName, TransportTag) -&gt; community_entry()</string>
		<string>snmpa_conf:write_community_config</string>
		<string>snmpa_conf:write_community_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_community_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_community_config</string>
		<string>snmpa_conf:write_community_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_community_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_community_config</string>
		<string>snmpa_conf:append_community_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_community_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_community_config</string>
		<string>snmpa_conf:read_community_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_community_config(Dir) -&gt; Conf</string>
		<string>snmpa_conf:target_addr_entry</string>
		<string>snmpa_conf:target_addr_entry(&lt;#Name#&gt;, &lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#TagList#&gt;, &lt;#ParamsName#&gt;, &lt;#EngineId#&gt;)</string>
		<string>snmpa_conf:target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId) -&gt; target_addr_entry()</string>
		<string>snmpa_conf:target_addr_entry</string>
		<string>snmpa_conf:target_addr_entry(&lt;#Name#&gt;, &lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#TagList#&gt;, &lt;#ParamsName#&gt;, &lt;#EngineId#&gt;, &lt;#TMask#&gt;)</string>
		<string>snmpa_conf:target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, TMask) -&gt; target_addr_entry()</string>
		<string>snmpa_conf:target_addr_entry</string>
		<string>snmpa_conf:target_addr_entry(&lt;#Name#&gt;, &lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#TagList#&gt;, &lt;#ParamsName#&gt;, &lt;#EngineId#&gt;, &lt;#TMask#&gt;, &lt;#MaxMessageSize#&gt;)</string>
		<string>snmpa_conf:target_addr_entry(Name, Domain, Addr, TagList, ParamsName, EngineId, TMask, MaxMessageSize) -&gt; target_addr_entry()</string>
		<string>snmpa_conf:target_addr_entry</string>
		<string>snmpa_conf:target_addr_entry(&lt;#Name#&gt;, &lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#Timeout#&gt;, &lt;#RetryCount#&gt;, &lt;#TagList#&gt;, &lt;#ParamsName#&gt;, &lt;#EngineId#&gt;, &lt;#TMask#&gt;, &lt;#MaxMessageSize#&gt;)</string>
		<string>snmpa_conf:target_addr_entry(Name, Domain, Addr, Timeout, RetryCount, TagList, ParamsName, EngineId, TMask, MaxMessageSize) -&gt; target_addr_entry()</string>
		<string>snmpa_conf:write_target_addr_config</string>
		<string>snmpa_conf:write_target_addr_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_target_addr_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_target_addr_config</string>
		<string>snmpa_conf:write_target_addr_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_target_addr_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_target_addr_config</string>
		<string>snmpa_conf:append_target_addr_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_target_addr_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_target_addr_config</string>
		<string>snmpa_conf:read_target_addr_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_target_addr_config(Dir) -&gt; Conf</string>
		<string>snmpa_conf:target_params_entry</string>
		<string>snmpa_conf:target_params_entry(&lt;#Name#&gt;, &lt;#Vsn#&gt;)</string>
		<string>snmpa_conf:target_params_entry(Name, Vsn) -&gt; target_params_entry()</string>
		<string>snmpa_conf:target_params_entry</string>
		<string>snmpa_conf:target_params_entry(&lt;#Name#&gt;, &lt;#Vsn#&gt;, &lt;#SecName#&gt;, &lt;#SecLevel#&gt;)</string>
		<string>snmpa_conf:target_params_entry(Name, Vsn, SecName, SecLevel) -&gt; target_params_entry()</string>
		<string>snmpa_conf:target_params_entry</string>
		<string>snmpa_conf:target_params_entry(&lt;#Name#&gt;, &lt;#MPModel#&gt;, &lt;#SecModel#&gt;, &lt;#SecName#&gt;, &lt;#SecLevel#&gt;)</string>
		<string>snmpa_conf:target_params_entry(Name, MPModel, SecModel, SecName, SecLevel) -&gt; target_params_entry()</string>
		<string>snmpa_conf:write_target_params_config</string>
		<string>snmpa_conf:write_target_params_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_target_params_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_target_params_config</string>
		<string>snmpa_conf:write_target_params_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_target_params_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_target_params_config</string>
		<string>snmpa_conf:append_target_params_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_target_params_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_target_params_config</string>
		<string>snmpa_conf:read_target_params_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_target_params_config(Dir) -&gt; Conf</string>
		<string>snmpa_conf:vacm_s2g_entry</string>
		<string>snmpa_conf:vacm_s2g_entry(&lt;#SecModel#&gt;, &lt;#SecName#&gt;, &lt;#GroupName#&gt;)</string>
		<string>snmpa_conf:vacm_s2g_entry(SecModel, SecName, GroupName) -&gt; vacm_s2g_entry()</string>
		<string>snmpa_conf:vacm_acc_entry</string>
		<string>snmpa_conf:vacm_acc_entry(&lt;#GroupName#&gt;, &lt;#Prefix#&gt;, &lt;#SecModel#&gt;, &lt;#SecLevel#&gt;, &lt;#Match#&gt;, &lt;#ReadView#&gt;, &lt;#WriteView#&gt;, &lt;#NotifyView#&gt;)</string>
		<string>snmpa_conf:vacm_acc_entry(GroupName, Prefix, SecModel, SecLevel, Match, ReadView, WriteView, NotifyView) -&gt; vacm_acc_entry()</string>
		<string>snmpa_conf:vacm_vtf_entry</string>
		<string>snmpa_conf:vacm_vtf_entry(&lt;#ViewIndex#&gt;, &lt;#ViewSubtree#&gt;)</string>
		<string>snmpa_conf:vacm_vtf_entry(ViewIndex, ViewSubtree) -&gt; vacm_vtf_entry()</string>
		<string>snmpa_conf:vacm_vtf_entry</string>
		<string>snmpa_conf:vacm_vtf_entry(&lt;#ViewIndex#&gt;, &lt;#ViewSubtree#&gt;, &lt;#ViewStatus#&gt;, &lt;#ViewMask#&gt;)</string>
		<string>snmpa_conf:vacm_vtf_entry(ViewIndex, ViewSubtree, ViewStatus, ViewMask) -&gt; vacm_vtf_entry()</string>
		<string>snmpa_conf:write_vacm_config</string>
		<string>snmpa_conf:write_vacm_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_vacm_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_vacm_config</string>
		<string>snmpa_conf:write_vacm_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_vacm_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_vacm_config</string>
		<string>snmpa_conf:append_vacm_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_vacm_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_vacm_config</string>
		<string>snmpa_conf:read_vacm_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_vacm_config(Dir) -&gt; Conf</string>
		<string>snmpa_conf:usm_entry</string>
		<string>snmpa_conf:usm_entry(&lt;#EngineId#&gt;)</string>
		<string>snmpa_conf:usm_entry(EngineId) -&gt; usm_entry()</string>
		<string>snmpa_conf:usm_entry</string>
		<string>snmpa_conf:usm_entry(&lt;#EngineID#&gt;, &lt;#UserName#&gt;, &lt;#SecName#&gt;, &lt;#Clone#&gt;, &lt;#AuthP#&gt;, &lt;#AuthKeyC#&gt;, &lt;#OwnAuthKeyC#&gt;, &lt;#PrivP#&gt;, &lt;#PrivKeyC#&gt;, &lt;#OwnPrivKeyC#&gt;, &lt;#Public#&gt;, &lt;#AuthKey#&gt;, &lt;#PrivKey#&gt;)</string>
		<string>snmpa_conf:usm_entry(EngineID, UserName, SecName, Clone, AuthP, AuthKeyC, OwnAuthKeyC, PrivP, PrivKeyC, OwnPrivKeyC, Public, AuthKey, PrivKey) -&gt; usm_entry()</string>
		<string>snmpa_conf:write_usm_config</string>
		<string>snmpa_conf:write_usm_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_usm_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_usm_config</string>
		<string>snmpa_conf:write_usm_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_usm_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_usm_config</string>
		<string>snmpa_conf:append_usm_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_usm_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_usm_config</string>
		<string>snmpa_conf:read_usm_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_usm_config(Dir) -&gt; Conf</string>
		<string>snmpa_conf:notify_entry</string>
		<string>snmpa_conf:notify_entry(&lt;#Name#&gt;, &lt;#Tag#&gt;, &lt;#Type#&gt;)</string>
		<string>snmpa_conf:notify_entry(Name, Tag, Type) -&gt; notify_entry()</string>
		<string>snmpa_conf:write_notify_config</string>
		<string>snmpa_conf:write_notify_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_notify_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:write_notify_config</string>
		<string>snmpa_conf:write_notify_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:write_notify_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpa_conf:append_notify_config</string>
		<string>snmpa_conf:append_notify_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpa_conf:append_notify_config(Dir, Conf) -&gt; ok</string>
		<string>snmpa_conf:read_notify_config</string>
		<string>snmpa_conf:read_notify_config(&lt;#Dir#&gt;)</string>
		<string>snmpa_conf:read_notify_config(Dir) -&gt; Conf</string>
		<string>snmpa_discovery_handler:stage1_finish</string>
		<string>snmpa_discovery_handler:stage1_finish(&lt;#TargetName#&gt;, &lt;#ManagerEngineID#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpa_discovery_handler:stage1_finish(TargetName, ManagerEngineID, ExtraInfo) -&gt; ignore | {ok, usm_entry() | [usm_entry()]} | {ok, usm_entry() | [usm_entry()], NewExtraInfo}</string>
		<string>snmpa_error:config_err</string>
		<string>snmpa_error:config_err(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>snmpa_error:config_err(Format, Args) -&gt; void()</string>
		<string>snmpa_error:user_err</string>
		<string>snmpa_error:user_err(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>snmpa_error:user_err(Format, Args) -&gt; void()</string>
		<string>snmpa_error_io:config_err</string>
		<string>snmpa_error_io:config_err(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>snmpa_error_io:config_err(Format, Args) -&gt; void()</string>
		<string>snmpa_error_io:user_err</string>
		<string>snmpa_error_io:user_err(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>snmpa_error_io:user_err(Format, Args) -&gt; void()</string>
		<string>snmpa_error_logger:config_err</string>
		<string>snmpa_error_logger:config_err(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>snmpa_error_logger:config_err(Format, Args) -&gt; void()</string>
		<string>snmpa_error_logger:user_err</string>
		<string>snmpa_error_logger:user_err(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>snmpa_error_logger:user_err(Format, Args) -&gt; void()</string>
		<string>snmpa_error_report:config_err</string>
		<string>snmpa_error_report:config_err(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>snmpa_error_report:config_err(Format, Args) -&gt; void()</string>
		<string>snmpa_error_report:user_err</string>
		<string>snmpa_error_report:user_err(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>snmpa_error_report:user_err(Format, Args) -&gt; void()</string>
		<string>snmpa_local_db:dump</string>
		<string>snmpa_local_db:dump()</string>
		<string>snmpa_local_db:dump() -&gt; ok | {error, Reason}</string>
		<string>snmpa_local_db:match</string>
		<string>snmpa_local_db:match(&lt;#NameDb#&gt;, &lt;#Pattern#&gt;)</string>
		<string>snmpa_local_db:match(NameDb, Pattern)</string>
		<string>snmpa_local_db:print</string>
		<string>snmpa_local_db:print()</string>
		<string>snmpa_local_db:print()</string>
		<string>snmpa_local_db:print</string>
		<string>snmpa_local_db:print(&lt;#TableName#&gt;)</string>
		<string>snmpa_local_db:print(TableName)</string>
		<string>snmpa_local_db:print</string>
		<string>snmpa_local_db:print(&lt;#TableName#&gt;, &lt;#Db#&gt;)</string>
		<string>snmpa_local_db:print(TableName, Db)</string>
		<string>snmpa_local_db:table_create</string>
		<string>snmpa_local_db:table_create(&lt;#NameDb#&gt;)</string>
		<string>snmpa_local_db:table_create(NameDb) -&gt; bool()</string>
		<string>snmpa_local_db:table_create_row</string>
		<string>snmpa_local_db:table_create_row(&lt;#NameDb#&gt;, &lt;#RowIndex#&gt;, &lt;#Row#&gt;)</string>
		<string>snmpa_local_db:table_create_row(NameDb, RowIndex, Row) -&gt; bool()</string>
		<string>snmpa_local_db:table_delete</string>
		<string>snmpa_local_db:table_delete(&lt;#NameDb#&gt;)</string>
		<string>snmpa_local_db:table_delete(NameDb) -&gt; void()</string>
		<string>snmpa_local_db:table_delete_row</string>
		<string>snmpa_local_db:table_delete_row(&lt;#NameDb#&gt;, &lt;#RowIndex#&gt;)</string>
		<string>snmpa_local_db:table_delete_row(NameDb, RowIndex) -&gt; bool()</string>
		<string>snmpa_local_db:table_exists</string>
		<string>snmpa_local_db:table_exists(&lt;#NameDb#&gt;)</string>
		<string>snmpa_local_db:table_exists(NameDb) -&gt; bool()</string>
		<string>snmpa_local_db:table_get_row</string>
		<string>snmpa_local_db:table_get_row(&lt;#NameDb#&gt;, &lt;#RowIndex#&gt;)</string>
		<string>snmpa_local_db:table_get_row(NameDb, RowIndex) -&gt; Row | undefined</string>
		<string>snmpa_mib_data:Module:new</string>
		<string>snmpa_mib_data:Module:new(&lt;#Storage#&gt;)</string>
		<string>snmpa_mib_data:Module:new(Storage) -&gt; State</string>
		<string>snmpa_mib_data:Module:close</string>
		<string>snmpa_mib_data:Module:close(&lt;#State#&gt;)</string>
		<string>snmpa_mib_data:Module:close(State) -&gt; void()</string>
		<string>snmpa_mib_data:Module:sync</string>
		<string>snmpa_mib_data:Module:sync(&lt;#State#&gt;)</string>
		<string>snmpa_mib_data:Module:sync(State) -&gt; void()</string>
		<string>snmpa_mib_data:Module:load_mib</string>
		<string>snmpa_mib_data:Module:load_mib(&lt;#State#&gt;, &lt;#Filename#&gt;, &lt;#MeOverride#&gt;, &lt;#TeOverride#&gt;)</string>
		<string>snmpa_mib_data:Module:load_mib(State, Filename, MeOverride, TeOverride) -&gt; {ok, NewState} | {error, Reason}</string>
		<string>snmpa_mib_data:Module:unload_mib</string>
		<string>snmpa_mib_data:Module:unload_mib(&lt;#State#&gt;, &lt;#Filename#&gt;)</string>
		<string>snmpa_mib_data:Module:unload_mib(State, Filename) -&gt; {ok, NewState} | {error, Reason}</string>
		<string>snmpa_mib_data:Module:lookup</string>
		<string>snmpa_mib_data:Module:lookup(&lt;#State#&gt;, &lt;#Oid#&gt;)</string>
		<string>snmpa_mib_data:Module:lookup(State, Oid) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:next</string>
		<string>snmpa_mib_data:Module:next(&lt;#State#&gt;, &lt;#Oid#&gt;, &lt;#MibView#&gt;)</string>
		<string>snmpa_mib_data:Module:next(State, Oid, MibView) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:register_subagent</string>
		<string>snmpa_mib_data:Module:register_subagent(&lt;#State#&gt;, &lt;#Oid#&gt;, &lt;#Pid#&gt;)</string>
		<string>snmpa_mib_data:Module:register_subagent(State, Oid, Pid) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:unregister_subagent</string>
		<string>snmpa_mib_data:Module:unregister_subagent(&lt;#State#&gt;, &lt;#PidOrOid#&gt;)</string>
		<string>snmpa_mib_data:Module:unregister_subagent(State, PidOrOid) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:dump</string>
		<string>snmpa_mib_data:Module:dump(&lt;#State#&gt;, &lt;#Destination#&gt;)</string>
		<string>snmpa_mib_data:Module:dump(State, Destination) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:which_mib</string>
		<string>snmpa_mib_data:Module:which_mib(&lt;#State#&gt;, &lt;#Oid#&gt;)</string>
		<string>snmpa_mib_data:Module:which_mib(State, Oid) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:which_mibs</string>
		<string>snmpa_mib_data:Module:which_mibs(&lt;#State#&gt;)</string>
		<string>snmpa_mib_data:Module:which_mibs(State) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:whereis_mib</string>
		<string>snmpa_mib_data:Module:whereis_mib(&lt;#State#&gt;, &lt;#MibName#&gt;)</string>
		<string>snmpa_mib_data:Module:whereis_mib(State, MibName) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:info</string>
		<string>snmpa_mib_data:Module:info(&lt;#State#&gt;)</string>
		<string>snmpa_mib_data:Module:info(State) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:backup</string>
		<string>snmpa_mib_data:Module:backup(&lt;#State#&gt;, &lt;#BackupDir#&gt;)</string>
		<string>snmpa_mib_data:Module:backup(State, BackupDir) -&gt; Reply</string>
		<string>snmpa_mib_data:Module:code_change</string>
		<string>snmpa_mib_data:Module:code_change(&lt;#Destination#&gt;, &lt;#Vsn#&gt;, &lt;#Extra#&gt;, &lt;#State#&gt;)</string>
		<string>snmpa_mib_data:Module:code_change(Destination, Vsn, Extra, State) -&gt; NewState</string>
		<string>snmpa_mib_storage:Module:open</string>
		<string>snmpa_mib_storage:Module:open(&lt;#Name#&gt;, &lt;#RecordName#&gt;, &lt;#Fields#&gt;, &lt;#Type#&gt;, &lt;#Options#&gt;)</string>
		<string>snmpa_mib_storage:Module:open(Name, RecordName, Fields, Type, Options) -&gt; {ok, TabId} | {error, Reason}</string>
		<string>snmpa_mib_storage:Module:close</string>
		<string>snmpa_mib_storage:Module:close(&lt;#TabId#&gt;)</string>
		<string>snmpa_mib_storage:Module:close(TabId) -&gt; void()</string>
		<string>snmpa_mib_storage:Module:read</string>
		<string>snmpa_mib_storage:Module:read(&lt;#TabId#&gt;, &lt;#Key#&gt;)</string>
		<string>snmpa_mib_storage:Module:read(TabId, Key) -&gt; false | {value, Record}</string>
		<string>snmpa_mib_storage:Module:write</string>
		<string>snmpa_mib_storage:Module:write(&lt;#TabId#&gt;, &lt;#Record#&gt;)</string>
		<string>snmpa_mib_storage:Module:write(TabId, Record) -&gt; ok | {error, Reason}</string>
		<string>snmpa_mib_storage:Module:delete</string>
		<string>snmpa_mib_storage:Module:delete(&lt;#TabId#&gt;)</string>
		<string>snmpa_mib_storage:Module:delete(TabId) -&gt; void()</string>
		<string>snmpa_mib_storage:Module:delete</string>
		<string>snmpa_mib_storage:Module:delete(&lt;#TabId#&gt;, &lt;#Key#&gt;)</string>
		<string>snmpa_mib_storage:Module:delete(TabId, Key) -&gt; ok | {error, Reason}</string>
		<string>snmpa_mib_storage:Module:match_object</string>
		<string>snmpa_mib_storage:Module:match_object(&lt;#TabId#&gt;, &lt;#Pattern#&gt;)</string>
		<string>snmpa_mib_storage:Module:match_object(TabId, Pattern) -&gt; {ok, Recs} | {error, Reason}</string>
		<string>snmpa_mib_storage:Module:match_delete</string>
		<string>snmpa_mib_storage:Module:match_delete(&lt;#TabId#&gt;, &lt;#Pattern#&gt;)</string>
		<string>snmpa_mib_storage:Module:match_delete(TabId, Pattern) -&gt; {ok, Recs} | {error, Reason}</string>
		<string>snmpa_mib_storage:Module:tab2list</string>
		<string>snmpa_mib_storage:Module:tab2list(&lt;#TabId#&gt;)</string>
		<string>snmpa_mib_storage:Module:tab2list(TabId) -&gt; Recs</string>
		<string>snmpa_mib_storage:Module:info</string>
		<string>snmpa_mib_storage:Module:info(&lt;#TabId#&gt;)</string>
		<string>snmpa_mib_storage:Module:info(TabId) -&gt; {ok, Info} | {error, Reason}</string>
		<string>snmpa_mib_storage:Module:sync</string>
		<string>snmpa_mib_storage:Module:sync(&lt;#TabId#&gt;)</string>
		<string>snmpa_mib_storage:Module:sync(TabId) -&gt; void()</string>
		<string>snmpa_mib_storage:Module:backup</string>
		<string>snmpa_mib_storage:Module:backup(&lt;#TabId#&gt;, &lt;#BackupDir#&gt;)</string>
		<string>snmpa_mib_storage:Module:backup(TabId, BackupDir) -&gt; ok | {error, Reason}</string>
		<string>snmpa_mpd:init</string>
		<string>snmpa_mpd:init(&lt;#Vsns#&gt;)</string>
		<string>snmpa_mpd:init(Vsns) -&gt; mpd_state()</string>
		<string>snmpa_mpd:process_packet</string>
		<string>snmpa_mpd:process_packet(&lt;#Packet#&gt;, &lt;#From#&gt;, &lt;#State#&gt;, &lt;#NoteStore#&gt;, &lt;#Log#&gt;)</string>
		<string>snmpa_mpd:process_packet(Packet, From, State, NoteStore, Log) -&gt; {ok, Vsn, Pdu, PduMS, ACMData} | {discarded, Reason} | {discovery, DiscoPacket}</string>
		<string>snmpa_mpd:process_packet</string>
		<string>snmpa_mpd:process_packet(&lt;#Packet#&gt;, &lt;#From#&gt;, &lt;#LocalEngineID#&gt;, &lt;#State#&gt;, &lt;#NoteStore#&gt;, &lt;#Log#&gt;)</string>
		<string>snmpa_mpd:process_packet(Packet, From, LocalEngineID, State, NoteStore, Log) -&gt; {ok, Vsn, Pdu, PduMS, ACMData} | {discarded, Reason} | {discovery, DiscoPacket}</string>
		<string>snmpa_mpd:generate_response_msg</string>
		<string>snmpa_mpd:generate_response_msg(&lt;#Vsn#&gt;, &lt;#RePdu#&gt;, &lt;#Type#&gt;, &lt;#ACMData#&gt;, &lt;#Log#&gt;)</string>
		<string>snmpa_mpd:generate_response_msg(Vsn, RePdu, Type, ACMData, Log) -&gt; {ok, Packet} | {discarded, Reason}</string>
		<string>snmpa_mpd:generate_response_msg</string>
		<string>snmpa_mpd:generate_response_msg(&lt;#Vsn#&gt;, &lt;#RePdu#&gt;, &lt;#Type#&gt;, &lt;#ACMData#&gt;, &lt;#LocalEngineID#&gt;, &lt;#Log#&gt;)</string>
		<string>snmpa_mpd:generate_response_msg(Vsn, RePdu, Type, ACMData, LocalEngineID, Log) -&gt; {ok, Packet} | {discarded, Reason}</string>
		<string>snmpa_mpd:generate_msg</string>
		<string>snmpa_mpd:generate_msg(&lt;#Vsn#&gt;, &lt;#NoteStore#&gt;, &lt;#Pdu#&gt;, &lt;#MsgData#&gt;, &lt;#To#&gt;)</string>
		<string>snmpa_mpd:generate_msg(Vsn, NoteStore, Pdu, MsgData, To) -&gt; {ok, PacketsAndAddresses} | {discarded, Reason}</string>
		<string>snmpa_mpd:generate_msg</string>
		<string>snmpa_mpd:generate_msg(&lt;#Vsn#&gt;, &lt;#NoteStore#&gt;, &lt;#Pdu#&gt;, &lt;#MsgData#&gt;, &lt;#LocalEngineID#&gt;, &lt;#To#&gt;)</string>
		<string>snmpa_mpd:generate_msg(Vsn, NoteStore, Pdu, MsgData, LocalEngineID, To) -&gt; {ok, PacketsAndAddresses} | {discarded, Reason}</string>
		<string>snmpa_mpd:process_taddrs</string>
		<string>snmpa_mpd:process_taddrs(&lt;#TDests#&gt;)</string>
		<string>snmpa_mpd:process_taddrs(TDests) -&gt; Dests</string>
		<string>snmpa_mpd:discarded_pdu</string>
		<string>snmpa_mpd:discarded_pdu(&lt;#Variable#&gt;)</string>
		<string>snmpa_mpd:discarded_pdu(Variable) -&gt; void()</string>
		<string>snmpa_network_interface:start_link</string>
		<string>snmpa_network_interface:start_link(&lt;#Prio#&gt;, &lt;#NoteStore#&gt;, &lt;#MasterAgent#&gt;, &lt;#Opts#&gt;)</string>
		<string>snmpa_network_interface:start_link(Prio, NoteStore, MasterAgent, Opts) -&gt; {ok, Pid} | {error, Reason}</string>
		<string>snmpa_network_interface:info</string>
		<string>snmpa_network_interface:info(&lt;#Pid#&gt;)</string>
		<string>snmpa_network_interface:info(Pid) -&gt; [{Key, Value}]</string>
		<string>snmpa_network_interface:verbosity</string>
		<string>snmpa_network_interface:verbosity(&lt;#Pid#&gt;, &lt;#Verbosity#&gt;)</string>
		<string>snmpa_network_interface:verbosity(Pid, Verbosity) -&gt; void()</string>
		<string>snmpa_network_interface:get_log_type</string>
		<string>snmpa_network_interface:get_log_type(&lt;#Pid#&gt;)</string>
		<string>snmpa_network_interface:get_log_type(Pid) -&gt; {ok, LogType} | {error, Reason}</string>
		<string>snmpa_network_interface:set_log_type</string>
		<string>snmpa_network_interface:set_log_type(&lt;#Pid#&gt;, &lt;#NewType#&gt;)</string>
		<string>snmpa_network_interface:set_log_type(Pid, NewType) -&gt; {ok, OldType} | {error, Reason}</string>
		<string>snmpa_network_interface_filter:accept_recv</string>
		<string>snmpa_network_interface_filter:accept_recv(&lt;#Domain#&gt;, &lt;#Addr#&gt;)</string>
		<string>snmpa_network_interface_filter:accept_recv(Domain, Addr) -&gt; boolean()</string>
		<string>snmpa_network_interface_filter:accept_send</string>
		<string>snmpa_network_interface_filter:accept_send(&lt;#Domain#&gt;, &lt;#Addr#&gt;)</string>
		<string>snmpa_network_interface_filter:accept_send(Domain, Addr) -&gt; boolean()</string>
		<string>snmpa_network_interface_filter:accept_recv_pdu</string>
		<string>snmpa_network_interface_filter:accept_recv_pdu(&lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#PduType#&gt;)</string>
		<string>snmpa_network_interface_filter:accept_recv_pdu(Domain, Addr, PduType) -&gt; boolean()</string>
		<string>snmpa_network_interface_filter:accept_send_pdu</string>
		<string>snmpa_network_interface_filter:accept_send_pdu(&lt;#Targets#&gt;, &lt;#PduType#&gt;)</string>
		<string>snmpa_network_interface_filter:accept_send_pdu(Targets, PduType) -&gt; Reply</string>
		<string>snmpa_notification_delivery_info_receiver:delivery_targets</string>
		<string>snmpa_notification_delivery_info_receiver:delivery_targets(&lt;#Tag#&gt;, &lt;#Targets#&gt;, &lt;#Extra#&gt;)</string>
		<string>snmpa_notification_delivery_info_receiver:delivery_targets(Tag, Targets, Extra) -&gt; void()</string>
		<string>snmpa_notification_delivery_info_receiver:delivery_info</string>
		<string>snmpa_notification_delivery_info_receiver:delivery_info(&lt;#Tag#&gt;, &lt;#Target#&gt;, &lt;#DeliveryResult#&gt;, &lt;#Extra#&gt;)</string>
		<string>snmpa_notification_delivery_info_receiver:delivery_info(Tag, Target, DeliveryResult, Extra) -&gt; void()</string>
		<string>snmpa_notification_filter:handle_notification</string>
		<string>snmpa_notification_filter:handle_notification(&lt;#Notif#&gt;, &lt;#Data#&gt;)</string>
		<string>snmpa_notification_filter:handle_notification(Notif, Data) -&gt; Reply</string>
		<string>snmpa_supervisor:start_sub_sup</string>
		<string>snmpa_supervisor:start_sub_sup(&lt;#Opts#&gt;)</string>
		<string>snmpa_supervisor:start_sub_sup(Opts) -&gt; {ok, pid()} | {error, {already_started, pid()}} | {error, Reason}</string>
		<string>snmpa_supervisor:start_master_sup</string>
		<string>snmpa_supervisor:start_master_sup(&lt;#Opts#&gt;)</string>
		<string>snmpa_supervisor:start_master_sup(Opts) -&gt; {ok, pid()} | {error, {already_started, pid()}} | {error, Reason}</string>
		<string>snmpa_supervisor:start_sub_agent</string>
		<string>snmpa_supervisor:start_sub_agent(&lt;#ParentAgent#&gt;, &lt;#Subtree#&gt;, &lt;#Mibs#&gt;)</string>
		<string>snmpa_supervisor:start_sub_agent(ParentAgent, Subtree, Mibs) -&gt; {ok, pid()} | {error, Reason}</string>
		<string>snmpa_supervisor:stop_sub_agent</string>
		<string>snmpa_supervisor:stop_sub_agent(&lt;#SubAgent#&gt;)</string>
		<string>snmpa_supervisor:stop_sub_agent(SubAgent) -&gt; ok | no_such_child</string>
		<string>snmpc:compile</string>
		<string>snmpc:compile(&lt;#File#&gt;)</string>
		<string>snmpc:compile(File) -&gt; {ok, BinFileName} | {error, Reason}</string>
		<string>snmpc:compile</string>
		<string>snmpc:compile(&lt;#File#&gt;, &lt;#Options#&gt;)</string>
		<string>snmpc:compile(File, Options) -&gt; {ok, BinFileName} | {error, Reason}</string>
		<string>snmpc:is_consistent</string>
		<string>snmpc:is_consistent(&lt;#Mibs#&gt;)</string>
		<string>snmpc:is_consistent(Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpc:mib_to_hrl</string>
		<string>snmpc:mib_to_hrl(&lt;#MibName#&gt;)</string>
		<string>snmpc:mib_to_hrl(MibName) -&gt; ok | {error, Reason}</string>
		<string>snmpm:monitor</string>
		<string>snmpm:monitor()</string>
		<string>snmpm:monitor() -&gt; Ref</string>
		<string>snmpm:demonitor</string>
		<string>snmpm:demonitor(&lt;#Ref#&gt;)</string>
		<string>snmpm:demonitor(Ref) -&gt; void()</string>
		<string>snmpm:notify_started</string>
		<string>snmpm:notify_started(&lt;#Timeout#&gt;)</string>
		<string>snmpm:notify_started(Timeout) -&gt; Pid</string>
		<string>snmpm:cancel_notify_started</string>
		<string>snmpm:cancel_notify_started(&lt;#Pid#&gt;)</string>
		<string>snmpm:cancel_notify_started(Pid) -&gt; void()</string>
		<string>snmpm:register_user</string>
		<string>snmpm:register_user(&lt;#Id#&gt;, &lt;#Module#&gt;, &lt;#Data#&gt;)</string>
		<string>snmpm:register_user(Id, Module, Data) -&gt; ok | {error, Reason}</string>
		<string>snmpm:register_user</string>
		<string>snmpm:register_user(&lt;#Id#&gt;, &lt;#Module#&gt;, &lt;#Data#&gt;, &lt;#DefaultAgentConfig#&gt;)</string>
		<string>snmpm:register_user(Id, Module, Data, DefaultAgentConfig) -&gt; ok | {error, Reason}</string>
		<string>snmpm:register_user_monitor</string>
		<string>snmpm:register_user_monitor(&lt;#Id#&gt;, &lt;#Module#&gt;, &lt;#Data#&gt;)</string>
		<string>snmpm:register_user_monitor(Id, Module, Data) -&gt; ok | {error, Reason}</string>
		<string>snmpm:register_user_monitor</string>
		<string>snmpm:register_user_monitor(&lt;#Id#&gt;, &lt;#Module#&gt;, &lt;#Data#&gt;, &lt;#DefaultAgentConfig#&gt;)</string>
		<string>snmpm:register_user_monitor(Id, Module, Data, DefaultAgentConfig) -&gt; ok | {error, Reason}</string>
		<string>snmpm:unregister_user</string>
		<string>snmpm:unregister_user(&lt;#Id#&gt;)</string>
		<string>snmpm:unregister_user(Id) -&gt; ok | {error, Reason}</string>
		<string>snmpm:which_users</string>
		<string>snmpm:which_users()</string>
		<string>snmpm:which_users() -&gt; Users</string>
		<string>snmpm:register_agent</string>
		<string>snmpm:register_agent(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Config#&gt;)</string>
		<string>snmpm:register_agent(UserId, TargetName, Config) -&gt; ok | {error, Reason}</string>
		<string>snmpm:unregister_agent</string>
		<string>snmpm:unregister_agent(&lt;#UserId#&gt;, &lt;#TargetName#&gt;)</string>
		<string>snmpm:unregister_agent(UserId, TargetName) -&gt; ok | {error, Reason}</string>
		<string>snmpm:agent_info</string>
		<string>snmpm:agent_info(&lt;#TargetName#&gt;, &lt;#Item#&gt;)</string>
		<string>snmpm:agent_info(TargetName, Item) -&gt; {ok, Val} | {error, Reason}</string>
		<string>snmpm:update_agent_info</string>
		<string>snmpm:update_agent_info(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Info#&gt;)</string>
		<string>snmpm:update_agent_info(UserId, TargetName, Info) -&gt; ok | {error, Reason}</string>
		<string>snmpm:update_agent_info</string>
		<string>snmpm:update_agent_info(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Item#&gt;, &lt;#Val#&gt;)</string>
		<string>snmpm:update_agent_info(UserId, TargetName, Item, Val) -&gt; ok | {error, Reason}</string>
		<string>snmpm:which_agents</string>
		<string>snmpm:which_agents()</string>
		<string>snmpm:which_agents() -&gt; Agents</string>
		<string>snmpm:which_agents</string>
		<string>snmpm:which_agents(&lt;#UserId#&gt;)</string>
		<string>snmpm:which_agents(UserId) -&gt; Agents</string>
		<string>snmpm:register_usm_user</string>
		<string>snmpm:register_usm_user(&lt;#EngineID#&gt;, &lt;#UserName#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm:register_usm_user(EngineID, UserName, Conf) -&gt; ok | {error, Reason}</string>
		<string>snmpm:unregister_usm_user</string>
		<string>snmpm:unregister_usm_user(&lt;#EngineID#&gt;, &lt;#UserName#&gt;)</string>
		<string>snmpm:unregister_usm_user(EngineID, UserName) -&gt; ok | {error, Reason}</string>
		<string>snmpm:usm_user_info</string>
		<string>snmpm:usm_user_info(&lt;#EngineID#&gt;, &lt;#UserName#&gt;, &lt;#Item#&gt;)</string>
		<string>snmpm:usm_user_info(EngineID, UserName, Item) -&gt; {ok, Val} | {error, Reason}</string>
		<string>snmpm:update_usm_user_info</string>
		<string>snmpm:update_usm_user_info(&lt;#EngineID#&gt;, &lt;#UserName#&gt;, &lt;#Item#&gt;, &lt;#Val#&gt;)</string>
		<string>snmpm:update_usm_user_info(EngineID, UserName, Item, Val) -&gt; ok | {error, Reason}</string>
		<string>snmpm:which_usm_users</string>
		<string>snmpm:which_usm_users()</string>
		<string>snmpm:which_usm_users() -&gt; UsmUsers</string>
		<string>snmpm:which_usm_users</string>
		<string>snmpm:which_usm_users(&lt;#EngineID#&gt;)</string>
		<string>snmpm:which_usm_users(EngineID) -&gt; UsmUsers</string>
		<string>snmpm:sync_get2</string>
		<string>snmpm:sync_get2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get2(UserId, TargetName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get2</string>
		<string>snmpm:sync_get2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpm:sync_get2(UserId, TargetName, Oids, SendOpts) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get</string>
		<string>snmpm:sync_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get(UserId, TargetName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get</string>
		<string>snmpm:sync_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get(UserId, TargetName, ContextName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get</string>
		<string>snmpm:sync_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;)</string>
		<string>snmpm:sync_get(UserId, TargetName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get</string>
		<string>snmpm:sync_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;)</string>
		<string>snmpm:sync_get(UserId, TargetName, ContextName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get</string>
		<string>snmpm:sync_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm:sync_get(UserId, TargetName, ContextName, Oids, Timeout, ExtraInfo) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:async_get2</string>
		<string>snmpm:async_get2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get2(UserId, TargetName, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get2</string>
		<string>snmpm:async_get2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpm:async_get2(UserId, TargetName, Oids, SendOpts) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get</string>
		<string>snmpm:async_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get(UserId, TargetName, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get</string>
		<string>snmpm:async_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get(UserId, TargetName, ContextName, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get</string>
		<string>snmpm:async_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;)</string>
		<string>snmpm:async_get(UserId, TargetName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get</string>
		<string>snmpm:async_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;)</string>
		<string>snmpm:async_get(UserId, TargetName, ContextName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get</string>
		<string>snmpm:async_get(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm:async_get(UserId, TargetName, ContextName, Oids, Expire, ExtraInfo) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:sync_get_next2</string>
		<string>snmpm:sync_get_next2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get_next2(UserId, TargetName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_next2</string>
		<string>snmpm:sync_get_next2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpm:sync_get_next2(UserId, TargetName, Oids, SendOpts) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_next</string>
		<string>snmpm:sync_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get_next(UserId, TargetName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_next</string>
		<string>snmpm:sync_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get_next(UserId, TargetName, ContextName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_next</string>
		<string>snmpm:sync_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;)</string>
		<string>snmpm:sync_get_next(UserId, TargetName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_next</string>
		<string>snmpm:sync_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;)</string>
		<string>snmpm:sync_get_next(UserId, TargetName, ContextName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_next</string>
		<string>snmpm:sync_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm:sync_get_next(UserId, TargetName, ContextName, Oids, Timeout, ExtraInfo) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:async_get_next2</string>
		<string>snmpm:async_get_next2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get_next2(UserId, TargetName, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_next2</string>
		<string>snmpm:async_get_next2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpm:async_get_next2(UserId, TargetName, Oids, SendOpts) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_next</string>
		<string>snmpm:async_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get_next(UserId, TargetName, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_next</string>
		<string>snmpm:async_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get_next(UserId, TargetName, ContextName, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_next</string>
		<string>snmpm:async_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;)</string>
		<string>snmpm:async_get_next(UserId, TargetName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_next</string>
		<string>snmpm:async_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;)</string>
		<string>snmpm:async_get_next(UserId, TargetName, ContextName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_next</string>
		<string>snmpm:async_get_next(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm:async_get_next(UserId, TargetName, ContextName, Oids, Expire, ExtraInfo) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:sync_set2</string>
		<string>snmpm:sync_set2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#VarsAndVals#&gt;)</string>
		<string>snmpm:sync_set2(UserId, TargetName, VarsAndVals) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_set2</string>
		<string>snmpm:sync_set2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#VarsAndVals#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpm:sync_set2(UserId, TargetName, VarsAndVals, SendOpts) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_set</string>
		<string>snmpm:sync_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#VarsAndVals#&gt;)</string>
		<string>snmpm:sync_set(UserId, TargetName, VarsAndVals) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_set</string>
		<string>snmpm:sync_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#VarsAndVals#&gt;)</string>
		<string>snmpm:sync_set(UserId, TargetName, ContextName, VarsAndVals) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_set</string>
		<string>snmpm:sync_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#VarsAndVals#&gt;, &lt;#Timeout#&gt;)</string>
		<string>snmpm:sync_set(UserId, TargetName, VarsAndVals, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_set</string>
		<string>snmpm:sync_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#VarsAndVals#&gt;, &lt;#Timeout#&gt;)</string>
		<string>snmpm:sync_set(UserId, TargetName, ContextName, VarsAndVals, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_set</string>
		<string>snmpm:sync_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#VarsAndVals#&gt;, &lt;#Timeout#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm:sync_set(UserId, TargetName, ContextName, VarsAndVals, Timeout, ExtraInfo) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:async_set2</string>
		<string>snmpm:async_set2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#VarsAndVals#&gt;)</string>
		<string>snmpm:async_set2(UserId, TargetName, VarsAndVals) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_set2</string>
		<string>snmpm:async_set2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#VarsAndVals#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpm:async_set2(UserId, TargetName, VarsAndVals, SendOpts) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_set</string>
		<string>snmpm:async_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#VarsAndVals#&gt;)</string>
		<string>snmpm:async_set(UserId, TargetName, VarsAndVals) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_set</string>
		<string>snmpm:async_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#VarsAndVals#&gt;)</string>
		<string>snmpm:async_set(UserId, TargetName, ContextName, VarsAndVals) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_set</string>
		<string>snmpm:async_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#VarsAndVals#&gt;, &lt;#Expire#&gt;)</string>
		<string>snmpm:async_set(UserId, TargetName, VarsAndVals, Expire) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_set</string>
		<string>snmpm:async_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#VarsAndVals#&gt;, &lt;#Expire#&gt;)</string>
		<string>snmpm:async_set(UserId, TargetName, ContextName, VarsAndVals, Expire) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_set</string>
		<string>snmpm:async_set(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#ContextName#&gt;, &lt;#VarsAndVals#&gt;, &lt;#Expire#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm:async_set(UserId, TargetName, ContextName, VarsAndVals, Expire, ExtraInfo) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:sync_get_bulk2</string>
		<string>snmpm:sync_get_bulk2(&lt;#UserId#&gt;, &lt;#TragetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get_bulk2(UserId, TragetName, NonRep, MaxRep, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_bulk2</string>
		<string>snmpm:sync_get_bulk2(&lt;#UserId#&gt;, &lt;#TragetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#Oids#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpm:sync_get_bulk2(UserId, TragetName, NonRep, MaxRep, Oids, SendOpts) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_bulk</string>
		<string>snmpm:sync_get_bulk(&lt;#UserId#&gt;, &lt;#TragetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get_bulk(UserId, TragetName, NonRep, MaxRep, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_bulk</string>
		<string>snmpm:sync_get_bulk(&lt;#UserId#&gt;, &lt;#TragetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:sync_get_bulk(UserId, TragetName, NonRep, MaxRep, ContextName, Oids) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_bulk</string>
		<string>snmpm:sync_get_bulk(&lt;#UserId#&gt;, &lt;#TragetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;)</string>
		<string>snmpm:sync_get_bulk(UserId, TragetName, NonRep, MaxRep, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_bulk</string>
		<string>snmpm:sync_get_bulk(&lt;#UserId#&gt;, &lt;#TragetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;)</string>
		<string>snmpm:sync_get_bulk(UserId, TragetName, NonRep, MaxRep, ContextName, Oids, Timeout) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:sync_get_bulk</string>
		<string>snmpm:sync_get_bulk(&lt;#UserId#&gt;, &lt;#TragetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Timeout#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm:sync_get_bulk(UserId, TragetName, NonRep, MaxRep, ContextName, Oids, Timeout, ExtraInfo) -&gt; {ok, SnmpReply, Remaining} | {error, Reason}</string>
		<string>snmpm:async_get_bulk2</string>
		<string>snmpm:async_get_bulk2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get_bulk2(UserId, TargetName, NonRep, MaxRep, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_bulk2</string>
		<string>snmpm:async_get_bulk2(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#Oids#&gt;, &lt;#SendOpts#&gt;)</string>
		<string>snmpm:async_get_bulk2(UserId, TargetName, NonRep, MaxRep, Oids, SendOpts) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_bulk</string>
		<string>snmpm:async_get_bulk(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get_bulk(UserId, TargetName, NonRep, MaxRep, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_bulk</string>
		<string>snmpm:async_get_bulk(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;)</string>
		<string>snmpm:async_get_bulk(UserId, TargetName, NonRep, MaxRep, ContextName, Oids) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_bulk</string>
		<string>snmpm:async_get_bulk(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;)</string>
		<string>snmpm:async_get_bulk(UserId, TargetName, NonRep, MaxRep, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_bulk</string>
		<string>snmpm:async_get_bulk(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;)</string>
		<string>snmpm:async_get_bulk(UserId, TargetName, NonRep, MaxRep, ContextName, Oids, Expire) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:async_get_bulk</string>
		<string>snmpm:async_get_bulk(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#NonRep#&gt;, &lt;#MaxRep#&gt;, &lt;#ContextName#&gt;, &lt;#Oids#&gt;, &lt;#Expire#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm:async_get_bulk(UserId, TargetName, NonRep, MaxRep, ContextName, Oids, Expire, ExtraInfo) -&gt; {ok, ReqId} | {error, Reason}</string>
		<string>snmpm:cancel_async_request</string>
		<string>snmpm:cancel_async_request(&lt;#UserId#&gt;, &lt;#ReqId#&gt;)</string>
		<string>snmpm:cancel_async_request(UserId, ReqId) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;, &lt;#Block | Mibs#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir, Block | Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#Block | OutFile#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir, Mibs, Block | OutFile) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#Block | LogName#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir, Mibs, OutFile, Block | LogName) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#Block | LogFile#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir, Mibs, OutFile, LogName, Block | LogFile) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block | Start#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block | Start) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block#&gt;, &lt;#Start#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block, Start) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Start, Stop) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_txt</string>
		<string>snmpm:log_to_txt(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#OutFile#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>snmpm:log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile, Block, Start, Stop) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;)</string>
		<string>snmpm:log_to_io(LogDir) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;, &lt;#Block | Mibs#&gt;)</string>
		<string>snmpm:log_to_io(LogDir, Block | Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;)</string>
		<string>snmpm:log_to_io(LogDir, Mibs) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#Block | LogName#&gt;)</string>
		<string>snmpm:log_to_io(LogDir, Mibs, Block | LogName) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#Block | LogFile#&gt;)</string>
		<string>snmpm:log_to_io(LogDir, Mibs, LogName, Block | LogFile) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block | Start#&gt;)</string>
		<string>snmpm:log_to_io(LogDir, Mibs, LogName, LogFile, Block | Start) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block#&gt;, &lt;#Start#&gt;)</string>
		<string>snmpm:log_to_io(LogDir, Mibs, LogName, LogFile, Block, Start) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>snmpm:log_to_io(LogDir, Mibs, LogName, LogFile, Start, Stop) -&gt; ok | {error, Reason}</string>
		<string>snmpm:log_to_io</string>
		<string>snmpm:log_to_io(&lt;#LogDir#&gt;, &lt;#Mibs#&gt;, &lt;#LogName#&gt;, &lt;#LogFile#&gt;, &lt;#Block#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>snmpm:log_to_io(LogDir, Mibs, LogName, LogFile, Block, Start, Stop) -&gt; ok | {error, Reason}</string>
		<string>snmpm:change_log_size</string>
		<string>snmpm:change_log_size(&lt;#NewSize#&gt;)</string>
		<string>snmpm:change_log_size(NewSize) -&gt; ok | {error, Reason}</string>
		<string>snmpm:set_log_type</string>
		<string>snmpm:set_log_type(&lt;#NewType#&gt;)</string>
		<string>snmpm:set_log_type(NewType) -&gt; {ok, OldType} | {error, Reason}</string>
		<string>snmpm:load_mib</string>
		<string>snmpm:load_mib(&lt;#Mib#&gt;)</string>
		<string>snmpm:load_mib(Mib) -&gt; ok | {error, Reason}</string>
		<string>snmpm:unload_mib</string>
		<string>snmpm:unload_mib(&lt;#Mib#&gt;)</string>
		<string>snmpm:unload_mib(Mib) -&gt; ok | {error, Reason}</string>
		<string>snmpm:which_mibs</string>
		<string>snmpm:which_mibs()</string>
		<string>snmpm:which_mibs() -&gt; Mibs</string>
		<string>snmpm:name_to_oid</string>
		<string>snmpm:name_to_oid(&lt;#Name#&gt;)</string>
		<string>snmpm:name_to_oid(Name) -&gt; {ok, Oids} | {error, Reason}</string>
		<string>snmpm:oid_to_name</string>
		<string>snmpm:oid_to_name(&lt;#Oid#&gt;)</string>
		<string>snmpm:oid_to_name(Oid) -&gt; {ok, Name} | {error, Reason}</string>
		<string>snmpm:oid_to_type</string>
		<string>snmpm:oid_to_type(&lt;#Oid#&gt;)</string>
		<string>snmpm:oid_to_type(Oid) -&gt; {ok, Type} | {error, Reason}</string>
		<string>snmpm:backup</string>
		<string>snmpm:backup(&lt;#BackupDir#&gt;)</string>
		<string>snmpm:backup(BackupDir) -&gt; ok | {error, Reason}</string>
		<string>snmpm:info</string>
		<string>snmpm:info()</string>
		<string>snmpm:info() -&gt; [{Key, Value}]</string>
		<string>snmpm:verbosity</string>
		<string>snmpm:verbosity(&lt;#Ref#&gt;, &lt;#Verbosity#&gt;)</string>
		<string>snmpm:verbosity(Ref, Verbosity) -&gt; void()</string>
		<string>snmpm:format_reason</string>
		<string>snmpm:format_reason(&lt;#Reason#&gt;)</string>
		<string>snmpm:format_reason(Reason) -&gt; string()</string>
		<string>snmpm:format_reason</string>
		<string>snmpm:format_reason(&lt;#Prefix#&gt;, &lt;#Reason#&gt;)</string>
		<string>snmpm:format_reason(Prefix, Reason) -&gt; string()</string>
		<string>snmpm_conf:manager_entry</string>
		<string>snmpm_conf:manager_entry(&lt;#Tag#&gt;, &lt;#Val#&gt;)</string>
		<string>snmpm_conf:manager_entry(Tag, Val) -&gt; manager_entry()</string>
		<string>snmpm_conf:write_manager_config</string>
		<string>snmpm_conf:write_manager_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:write_manager_config(Dir, Conf) -&gt; ok</string>
		<string>snmpm_conf:write_manager_config</string>
		<string>snmpm_conf:write_manager_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:write_manager_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpm_conf:append_manager_config</string>
		<string>snmpm_conf:append_manager_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:append_manager_config(Dir, Conf) -&gt; ok</string>
		<string>snmpm_conf:read_manager_config</string>
		<string>snmpm_conf:read_manager_config(&lt;#Dir#&gt;)</string>
		<string>snmpm_conf:read_manager_config(Dir) -&gt; Conf</string>
		<string>snmpm_conf:users_entry</string>
		<string>snmpm_conf:users_entry(&lt;#UserId#&gt;)</string>
		<string>snmpm_conf:users_entry(UserId) -&gt; users_entry()</string>
		<string>snmpm_conf:users_entry</string>
		<string>snmpm_conf:users_entry(&lt;#UserId#&gt;, &lt;#UserMod#&gt;)</string>
		<string>snmpm_conf:users_entry(UserId, UserMod) -&gt; users_entry()</string>
		<string>snmpm_conf:users_entry</string>
		<string>snmpm_conf:users_entry(&lt;#UserId#&gt;, &lt;#UserMod#&gt;, &lt;#UserData#&gt;)</string>
		<string>snmpm_conf:users_entry(UserId, UserMod, UserData) -&gt; users_entry()</string>
		<string>snmpm_conf:write_users_config</string>
		<string>snmpm_conf:write_users_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:write_users_config(Dir, Conf) -&gt; ok</string>
		<string>snmpm_conf:write_users_config</string>
		<string>snmpm_conf:write_users_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:write_users_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpm_conf:append_users_config</string>
		<string>snmpm_conf:append_users_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:append_users_config(Dir, Conf) -&gt; ok</string>
		<string>snmpm_conf:read_users_config</string>
		<string>snmpm_conf:read_users_config(&lt;#Dir#&gt;)</string>
		<string>snmpm_conf:read_users_config(Dir) -&gt; Conf</string>
		<string>snmpm_conf:agents_entry</string>
		<string>snmpm_conf:agents_entry(&lt;#UserId#&gt;, &lt;#TargetName#&gt;, &lt;#Comm#&gt;, &lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#EngineID#&gt;, &lt;#Timeout#&gt;, &lt;#MaxMessageSize#&gt;, &lt;#Version#&gt;, &lt;#SecModel#&gt;, &lt;#SecName#&gt;, &lt;#SecLevel#&gt;)</string>
		<string>snmpm_conf:agents_entry(UserId, TargetName, Comm, Domain, Addr, EngineID, Timeout, MaxMessageSize, Version, SecModel, SecName, SecLevel) -&gt; agents_entry()</string>
		<string>snmpm_conf:write_agents_config</string>
		<string>snmpm_conf:write_agents_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:write_agents_config(Dir, Conf) -&gt; ok</string>
		<string>snmpm_conf:write_agents_config</string>
		<string>snmpm_conf:write_agents_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:write_agents_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpm_conf:append_agents_config</string>
		<string>snmpm_conf:append_agents_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:append_agents_config(Dir, Conf) -&gt; ok</string>
		<string>snmpm_conf:read_agents_config</string>
		<string>snmpm_conf:read_agents_config(&lt;#Dir#&gt;)</string>
		<string>snmpm_conf:read_agents_config(Dir) -&gt; Conf</string>
		<string>snmpm_conf:usm_entry</string>
		<string>snmpm_conf:usm_entry(&lt;#EngineID#&gt;, &lt;#UserName#&gt;, &lt;#AuthP#&gt;, &lt;#AuthKey#&gt;, &lt;#PrivP#&gt;, &lt;#PrivKey#&gt;)</string>
		<string>snmpm_conf:usm_entry(EngineID, UserName, AuthP, AuthKey, PrivP, PrivKey) -&gt; usm_entry()</string>
		<string>snmpm_conf:usm_entry</string>
		<string>snmpm_conf:usm_entry(&lt;#EngineID#&gt;, &lt;#UserName#&gt;, &lt;#SecName#&gt;, &lt;#AuthP#&gt;, &lt;#AuthKey#&gt;, &lt;#PrivP#&gt;, &lt;#PrivKey#&gt;)</string>
		<string>snmpm_conf:usm_entry(EngineID, UserName, SecName, AuthP, AuthKey, PrivP, PrivKey) -&gt; usm_entry()</string>
		<string>snmpm_conf:write_usm_config</string>
		<string>snmpm_conf:write_usm_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:write_usm_config(Dir, Conf) -&gt; ok</string>
		<string>snmpm_conf:write_usm_config</string>
		<string>snmpm_conf:write_usm_config(&lt;#Dir#&gt;, &lt;#Hdr#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:write_usm_config(Dir, Hdr, Conf) -&gt; ok</string>
		<string>snmpm_conf:append_usm_config</string>
		<string>snmpm_conf:append_usm_config(&lt;#Dir#&gt;, &lt;#Conf#&gt;)</string>
		<string>snmpm_conf:append_usm_config(Dir, Conf) -&gt; ok</string>
		<string>snmpm_conf:read_usm_config</string>
		<string>snmpm_conf:read_usm_config(&lt;#Dir#&gt;)</string>
		<string>snmpm_conf:read_usm_config(Dir) -&gt; Conf</string>
		<string>snmpm_mpd:init_mpd</string>
		<string>snmpm_mpd:init_mpd(&lt;#Vsns#&gt;)</string>
		<string>snmpm_mpd:init_mpd(Vsns) -&gt; mpd_state()</string>
		<string>snmpm_mpd:process_msg</string>
		<string>snmpm_mpd:process_msg(&lt;#Msg#&gt;, &lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#State#&gt;, &lt;#NoteStore#&gt;, &lt;#Logger#&gt;)</string>
		<string>snmpm_mpd:process_msg(Msg, Domain, Addr, State, NoteStore, Logger) -&gt; {ok, Vsn, Pdu, PduMS, MsgData} | {discarded, Reason}</string>
		<string>snmpm_mpd:generate_msg</string>
		<string>snmpm_mpd:generate_msg(&lt;#Vsn#&gt;, &lt;#NoteStore#&gt;, &lt;#Pdu#&gt;, &lt;#MsgData#&gt;, &lt;#Logger#&gt;)</string>
		<string>snmpm_mpd:generate_msg(Vsn, NoteStore, Pdu, MsgData, Logger) -&gt; {ok, Packet} | {discarded, Reason}</string>
		<string>snmpm_mpd:generate_response_msg</string>
		<string>snmpm_mpd:generate_response_msg(&lt;#Vsn#&gt;, &lt;#Pdu#&gt;, &lt;#MsgData#&gt;, &lt;#Logger#&gt;)</string>
		<string>snmpm_mpd:generate_response_msg(Vsn, Pdu, MsgData, Logger) -&gt; {ok, Packet} | {discarded, Reason}</string>
		<string>snmpm_network_interface:start_link</string>
		<string>snmpm_network_interface:start_link(&lt;#Server#&gt;, &lt;#NoteStore#&gt;)</string>
		<string>snmpm_network_interface:start_link(Server, NoteStore) -&gt; {ok, Pid} | {error, Reason}</string>
		<string>snmpm_network_interface:stop</string>
		<string>snmpm_network_interface:stop(&lt;#Pid#&gt;)</string>
		<string>snmpm_network_interface:stop(Pid) -&gt; void()</string>
		<string>snmpm_network_interface:send_pdu</string>
		<string>snmpm_network_interface:send_pdu(&lt;#Pid#&gt;, &lt;#Pdu#&gt;, &lt;#Vsn#&gt;, &lt;#MsgData#&gt;, &lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#ExtraInfo#&gt;)</string>
		<string>snmpm_network_interface:send_pdu(Pid, Pdu, Vsn, MsgData, Domain, Addr, ExtraInfo) -&gt; void()</string>
		<string>snmpm_network_interface:inform_response</string>
		<string>snmpm_network_interface:inform_response(&lt;#Pid#&gt;, &lt;#Ref#&gt;, &lt;#Addr#&gt;, &lt;#Port#&gt;)</string>
		<string>snmpm_network_interface:inform_response(Pid, Ref, Addr, Port) -&gt; void()</string>
		<string>snmpm_network_interface:note_store</string>
		<string>snmpm_network_interface:note_store(&lt;#Pid#&gt;, &lt;#NoteStore#&gt;)</string>
		<string>snmpm_network_interface:note_store(Pid, NoteStore) -&gt; void()</string>
		<string>snmpm_network_interface:info</string>
		<string>snmpm_network_interface:info(&lt;#Pid#&gt;)</string>
		<string>snmpm_network_interface:info(Pid) -&gt; [{Key, Value}]</string>
		<string>snmpm_network_interface:verbosity</string>
		<string>snmpm_network_interface:verbosity(&lt;#Pid#&gt;, &lt;#Verbosity#&gt;)</string>
		<string>snmpm_network_interface:verbosity(Pid, Verbosity) -&gt; void()</string>
		<string>snmpm_network_interface:get_log_type</string>
		<string>snmpm_network_interface:get_log_type(&lt;#Pid#&gt;)</string>
		<string>snmpm_network_interface:get_log_type(Pid) -&gt; {ok, LogType} | {error, Reason}</string>
		<string>snmpm_network_interface:set_log_type</string>
		<string>snmpm_network_interface:set_log_type(&lt;#Pid#&gt;, &lt;#NewType#&gt;)</string>
		<string>snmpm_network_interface:set_log_type(Pid, NewType) -&gt; {ok, OldType} | {error, Reason}</string>
		<string>snmpm_network_interface_filter:accept_recv</string>
		<string>snmpm_network_interface_filter:accept_recv(&lt;#Domain#&gt;, &lt;#Addr#&gt;)</string>
		<string>snmpm_network_interface_filter:accept_recv(Domain, Addr) -&gt; boolean()</string>
		<string>snmpm_network_interface_filter:accept_send</string>
		<string>snmpm_network_interface_filter:accept_send(&lt;#Domain#&gt;, &lt;#Addr#&gt;)</string>
		<string>snmpm_network_interface_filter:accept_send(Domain, Addr) -&gt; boolean()</string>
		<string>snmpm_network_interface_filter:accept_recv_pdu</string>
		<string>snmpm_network_interface_filter:accept_recv_pdu(&lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#PduType#&gt;)</string>
		<string>snmpm_network_interface_filter:accept_recv_pdu(Domain, Addr, PduType) -&gt; boolean()</string>
		<string>snmpm_network_interface_filter:accept_send_pdu</string>
		<string>snmpm_network_interface_filter:accept_send_pdu(&lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#PduType#&gt;)</string>
		<string>snmpm_network_interface_filter:accept_send_pdu(Domain, Addr, PduType) -&gt; boolean()</string>
		<string>snmpm_user:handle_error</string>
		<string>snmpm_user:handle_error(&lt;#ReqId#&gt;, &lt;#Reason#&gt;, &lt;#UserData#&gt;)</string>
		<string>snmpm_user:handle_error(ReqId, Reason, UserData) -&gt; void()</string>
		<string>snmpm_user:handle_agent</string>
		<string>snmpm_user:handle_agent(&lt;#Domain#&gt;, &lt;#Addr#&gt;, &lt;#Type#&gt;, &lt;#SnmpInfo#&gt;, &lt;#UserData#&gt;)</string>
		<string>snmpm_user:handle_agent(Domain, Addr, Type, SnmpInfo, UserData) -&gt; Reply</string>
		<string>snmpm_user:handle_pdu</string>
		<string>snmpm_user:handle_pdu(&lt;#TargetName#&gt;, &lt;#ReqId#&gt;, &lt;#SnmpPduInfo#&gt;, &lt;#UserData#&gt;)</string>
		<string>snmpm_user:handle_pdu(TargetName, ReqId, SnmpPduInfo, UserData) -&gt; void()</string>
		<string>snmpm_user:handle_trap</string>
		<string>snmpm_user:handle_trap(&lt;#TargetName#&gt;, &lt;#SnmpTrapInfo#&gt;, &lt;#UserData#&gt;)</string>
		<string>snmpm_user:handle_trap(TargetName, SnmpTrapInfo, UserData) -&gt; Reply</string>
		<string>snmpm_user:handle_inform</string>
		<string>snmpm_user:handle_inform(&lt;#TargetName#&gt;, &lt;#SnmpInformInfo#&gt;, &lt;#UserData#&gt;)</string>
		<string>snmpm_user:handle_inform(TargetName, SnmpInformInfo, UserData) -&gt; Reply</string>
		<string>snmpm_user:handle_report</string>
		<string>snmpm_user:handle_report(&lt;#TargetName#&gt;, &lt;#SnmpReportInfo#&gt;, &lt;#UserData#&gt;)</string>
		<string>snmpm_user:handle_report(TargetName, SnmpReportInfo, UserData) -&gt; Reply</string>
		<string>snmpm_user:handle_invalid_result</string>
		<string>snmpm_user:handle_invalid_result(&lt;#IN#&gt;, &lt;#OUT#&gt;)</string>
		<string>snmpm_user:handle_invalid_result(IN, OUT) -&gt; void()</string>
		<string>sofs:a_function</string>
		<string>sofs:a_function(&lt;#Tuples#&gt;)</string>
		<string>sofs:a_function(Tuples) -&gt; Function</string>
		<string>sofs:a_function</string>
		<string>sofs:a_function(&lt;#Tuples#&gt;, &lt;#Type#&gt;)</string>
		<string>sofs:a_function(Tuples, Type) -&gt; Function</string>
		<string>sofs:canonical_relation</string>
		<string>sofs:canonical_relation(&lt;#SetOfSets#&gt;)</string>
		<string>sofs:canonical_relation(SetOfSets) -&gt; BinRel</string>
		<string>sofs:composite</string>
		<string>sofs:composite(&lt;#Function1#&gt;, &lt;#Function2#&gt;)</string>
		<string>sofs:composite(Function1, Function2) -&gt; Function3</string>
		<string>sofs:constant_function</string>
		<string>sofs:constant_function(&lt;#Set#&gt;, &lt;#AnySet#&gt;)</string>
		<string>sofs:constant_function(Set, AnySet) -&gt; Function</string>
		<string>sofs:converse</string>
		<string>sofs:converse(&lt;#BinRel1#&gt;)</string>
		<string>sofs:converse(BinRel1) -&gt; BinRel2</string>
		<string>sofs:difference</string>
		<string>sofs:difference(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:difference(Set1, Set2) -&gt; Set3</string>
		<string>sofs:digraph_to_family</string>
		<string>sofs:digraph_to_family(&lt;#Graph#&gt;)</string>
		<string>sofs:digraph_to_family(Graph) -&gt; Family</string>
		<string>sofs:digraph_to_family</string>
		<string>sofs:digraph_to_family(&lt;#Graph#&gt;, &lt;#Type#&gt;)</string>
		<string>sofs:digraph_to_family(Graph, Type) -&gt; Family</string>
		<string>sofs:domain</string>
		<string>sofs:domain(&lt;#BinRel#&gt;)</string>
		<string>sofs:domain(BinRel) -&gt; Set</string>
		<string>sofs:drestriction</string>
		<string>sofs:drestriction(&lt;#BinRel1#&gt;, &lt;#Set#&gt;)</string>
		<string>sofs:drestriction(BinRel1, Set) -&gt; BinRel2</string>
		<string>sofs:drestriction</string>
		<string>sofs:drestriction(&lt;#SetFun#&gt;, &lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:drestriction(SetFun, Set1, Set2) -&gt; Set3</string>
		<string>sofs:empty_set</string>
		<string>sofs:empty_set()</string>
		<string>sofs:empty_set() -&gt; Set</string>
		<string>sofs:extension</string>
		<string>sofs:extension(&lt;#BinRel1#&gt;, &lt;#Set#&gt;, &lt;#AnySet#&gt;)</string>
		<string>sofs:extension(BinRel1, Set, AnySet) -&gt; BinRel2</string>
		<string>sofs:fam2rel</string>
		<string>sofs:fam2rel(&lt;#Family#&gt;)</string>
		<string>sofs:fam2rel(Family) -&gt; BinRel</string>
		<string>sofs:family</string>
		<string>sofs:family(&lt;#Tuples#&gt;)</string>
		<string>sofs:family(Tuples) -&gt; Family</string>
		<string>sofs:family</string>
		<string>sofs:family(&lt;#Tuples#&gt;, &lt;#Type#&gt;)</string>
		<string>sofs:family(Tuples, Type) -&gt; Family</string>
		<string>sofs:family_difference</string>
		<string>sofs:family_difference(&lt;#Family1#&gt;, &lt;#Family2#&gt;)</string>
		<string>sofs:family_difference(Family1, Family2) -&gt; Family3</string>
		<string>sofs:family_domain</string>
		<string>sofs:family_domain(&lt;#Family1#&gt;)</string>
		<string>sofs:family_domain(Family1) -&gt; Family2</string>
		<string>sofs:family_field</string>
		<string>sofs:family_field(&lt;#Family1#&gt;)</string>
		<string>sofs:family_field(Family1) -&gt; Family2</string>
		<string>sofs:family_intersection</string>
		<string>sofs:family_intersection(&lt;#Family1#&gt;)</string>
		<string>sofs:family_intersection(Family1) -&gt; Family2</string>
		<string>sofs:family_intersection</string>
		<string>sofs:family_intersection(&lt;#Family1#&gt;, &lt;#Family2#&gt;)</string>
		<string>sofs:family_intersection(Family1, Family2) -&gt; Family3</string>
		<string>sofs:family_projection</string>
		<string>sofs:family_projection(&lt;#SetFun#&gt;, &lt;#Family1#&gt;)</string>
		<string>sofs:family_projection(SetFun, Family1) -&gt; Family2</string>
		<string>sofs:family_range</string>
		<string>sofs:family_range(&lt;#Family1#&gt;)</string>
		<string>sofs:family_range(Family1) -&gt; Family2</string>
		<string>sofs:family_specification</string>
		<string>sofs:family_specification(&lt;#Fun#&gt;, &lt;#Family1#&gt;)</string>
		<string>sofs:family_specification(Fun, Family1) -&gt; Family2</string>
		<string>sofs:family_to_digraph</string>
		<string>sofs:family_to_digraph(&lt;#Family#&gt;)</string>
		<string>sofs:family_to_digraph(Family) -&gt; Graph</string>
		<string>sofs:family_to_digraph</string>
		<string>sofs:family_to_digraph(&lt;#Family#&gt;, &lt;#GraphType#&gt;)</string>
		<string>sofs:family_to_digraph(Family, GraphType) -&gt; Graph</string>
		<string>sofs:family_to_relation</string>
		<string>sofs:family_to_relation(&lt;#Family#&gt;)</string>
		<string>sofs:family_to_relation(Family) -&gt; BinRel</string>
		<string>sofs:family_union</string>
		<string>sofs:family_union(&lt;#Family1#&gt;)</string>
		<string>sofs:family_union(Family1) -&gt; Family2</string>
		<string>sofs:family_union</string>
		<string>sofs:family_union(&lt;#Family1#&gt;, &lt;#Family2#&gt;)</string>
		<string>sofs:family_union(Family1, Family2) -&gt; Family3</string>
		<string>sofs:field</string>
		<string>sofs:field(&lt;#BinRel#&gt;)</string>
		<string>sofs:field(BinRel) -&gt; Set</string>
		<string>sofs:from_external</string>
		<string>sofs:from_external(&lt;#ExternalSet#&gt;, &lt;#Type#&gt;)</string>
		<string>sofs:from_external(ExternalSet, Type) -&gt; AnySet</string>
		<string>sofs:from_sets</string>
		<string>sofs:from_sets(&lt;#ListOfSets#&gt;)</string>
		<string>sofs:from_sets(ListOfSets) -&gt; Set</string>
		<string>sofs:from_sets</string>
		<string>sofs:from_sets(&lt;#TupleOfSets#&gt;)</string>
		<string>sofs:from_sets(TupleOfSets) -&gt; Ordset</string>
		<string>sofs:from_term</string>
		<string>sofs:from_term(&lt;#Term#&gt;)</string>
		<string>sofs:from_term(Term) -&gt; AnySet</string>
		<string>sofs:from_term</string>
		<string>sofs:from_term(&lt;#Term#&gt;, &lt;#Type#&gt;)</string>
		<string>sofs:from_term(Term, Type) -&gt; AnySet</string>
		<string>sofs:image</string>
		<string>sofs:image(&lt;#BinRel#&gt;, &lt;#Set1#&gt;)</string>
		<string>sofs:image(BinRel, Set1) -&gt; Set2</string>
		<string>sofs:intersection</string>
		<string>sofs:intersection(&lt;#SetOfSets#&gt;)</string>
		<string>sofs:intersection(SetOfSets) -&gt; Set</string>
		<string>sofs:intersection</string>
		<string>sofs:intersection(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:intersection(Set1, Set2) -&gt; Set3</string>
		<string>sofs:intersection_of_family</string>
		<string>sofs:intersection_of_family(&lt;#Family#&gt;)</string>
		<string>sofs:intersection_of_family(Family) -&gt; Set</string>
		<string>sofs:inverse</string>
		<string>sofs:inverse(&lt;#Function1#&gt;)</string>
		<string>sofs:inverse(Function1) -&gt; Function2</string>
		<string>sofs:inverse_image</string>
		<string>sofs:inverse_image(&lt;#BinRel#&gt;, &lt;#Set1#&gt;)</string>
		<string>sofs:inverse_image(BinRel, Set1) -&gt; Set2</string>
		<string>sofs:is_a_function</string>
		<string>sofs:is_a_function(&lt;#BinRel#&gt;)</string>
		<string>sofs:is_a_function(BinRel) -&gt; Bool</string>
		<string>sofs:is_disjoint</string>
		<string>sofs:is_disjoint(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:is_disjoint(Set1, Set2) -&gt; Bool</string>
		<string>sofs:is_empty_set</string>
		<string>sofs:is_empty_set(&lt;#AnySet#&gt;)</string>
		<string>sofs:is_empty_set(AnySet) -&gt; Bool</string>
		<string>sofs:is_equal</string>
		<string>sofs:is_equal(&lt;#AnySet1#&gt;, &lt;#AnySet2#&gt;)</string>
		<string>sofs:is_equal(AnySet1, AnySet2) -&gt; Bool</string>
		<string>sofs:is_set</string>
		<string>sofs:is_set(&lt;#AnySet#&gt;)</string>
		<string>sofs:is_set(AnySet) -&gt; Bool</string>
		<string>sofs:is_sofs_set</string>
		<string>sofs:is_sofs_set(&lt;#Term#&gt;)</string>
		<string>sofs:is_sofs_set(Term) -&gt; Bool</string>
		<string>sofs:is_subset</string>
		<string>sofs:is_subset(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:is_subset(Set1, Set2) -&gt; Bool</string>
		<string>sofs:is_type</string>
		<string>sofs:is_type(&lt;#Term#&gt;)</string>
		<string>sofs:is_type(Term) -&gt; Bool</string>
		<string>sofs:join</string>
		<string>sofs:join(&lt;#Relation1#&gt;, &lt;#I#&gt;, &lt;#Relation2#&gt;, &lt;#J#&gt;)</string>
		<string>sofs:join(Relation1, I, Relation2, J) -&gt; Relation3</string>
		<string>sofs:multiple_relative_product</string>
		<string>sofs:multiple_relative_product(&lt;#TupleOfBinRels#&gt;, &lt;#BinRel1#&gt;)</string>
		<string>sofs:multiple_relative_product(TupleOfBinRels, BinRel1) -&gt; BinRel2</string>
		<string>sofs:no_elements</string>
		<string>sofs:no_elements(&lt;#ASet#&gt;)</string>
		<string>sofs:no_elements(ASet) -&gt; NoElements</string>
		<string>sofs:partition</string>
		<string>sofs:partition(&lt;#SetOfSets#&gt;)</string>
		<string>sofs:partition(SetOfSets) -&gt; Partition</string>
		<string>sofs:partition</string>
		<string>sofs:partition(&lt;#SetFun#&gt;, &lt;#Set#&gt;)</string>
		<string>sofs:partition(SetFun, Set) -&gt; Partition</string>
		<string>sofs:partition</string>
		<string>sofs:partition(&lt;#SetFun#&gt;, &lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:partition(SetFun, Set1, Set2) -&gt; {Set3, Set4}</string>
		<string>sofs:partition_family</string>
		<string>sofs:partition_family(&lt;#SetFun#&gt;, &lt;#Set#&gt;)</string>
		<string>sofs:partition_family(SetFun, Set) -&gt; Family</string>
		<string>sofs:product</string>
		<string>sofs:product(&lt;#TupleOfSets#&gt;)</string>
		<string>sofs:product(TupleOfSets) -&gt; Relation</string>
		<string>sofs:product</string>
		<string>sofs:product(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:product(Set1, Set2) -&gt; BinRel</string>
		<string>sofs:projection</string>
		<string>sofs:projection(&lt;#SetFun#&gt;, &lt;#Set1#&gt;)</string>
		<string>sofs:projection(SetFun, Set1) -&gt; Set2</string>
		<string>sofs:range</string>
		<string>sofs:range(&lt;#BinRel#&gt;)</string>
		<string>sofs:range(BinRel) -&gt; Set</string>
		<string>sofs:relation</string>
		<string>sofs:relation(&lt;#Tuples#&gt;)</string>
		<string>sofs:relation(Tuples) -&gt; Relation</string>
		<string>sofs:relation</string>
		<string>sofs:relation(&lt;#Tuples#&gt;, &lt;#Type#&gt;)</string>
		<string>sofs:relation(Tuples, Type) -&gt; Relation</string>
		<string>sofs:relation_to_family</string>
		<string>sofs:relation_to_family(&lt;#BinRel#&gt;)</string>
		<string>sofs:relation_to_family(BinRel) -&gt; Family</string>
		<string>sofs:relative_product</string>
		<string>sofs:relative_product(&lt;#ListOfBinRels#&gt;)</string>
		<string>sofs:relative_product(ListOfBinRels) -&gt; BinRel2</string>
		<string>sofs:relative_product</string>
		<string>sofs:relative_product(&lt;#ListOfBinRels#&gt;, &lt;#BinRel1#&gt;)</string>
		<string>sofs:relative_product(ListOfBinRels, BinRel1) -&gt; BinRel2</string>
		<string>sofs:relative_product</string>
		<string>sofs:relative_product(&lt;#BinRel1#&gt;, &lt;#BinRel2#&gt;)</string>
		<string>sofs:relative_product(BinRel1, BinRel2) -&gt; BinRel3</string>
		<string>sofs:relative_product1</string>
		<string>sofs:relative_product1(&lt;#BinRel1#&gt;, &lt;#BinRel2#&gt;)</string>
		<string>sofs:relative_product1(BinRel1, BinRel2) -&gt; BinRel3</string>
		<string>sofs:restriction</string>
		<string>sofs:restriction(&lt;#BinRel1#&gt;, &lt;#Set#&gt;)</string>
		<string>sofs:restriction(BinRel1, Set) -&gt; BinRel2</string>
		<string>sofs:restriction</string>
		<string>sofs:restriction(&lt;#SetFun#&gt;, &lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:restriction(SetFun, Set1, Set2) -&gt; Set3</string>
		<string>sofs:set</string>
		<string>sofs:set(&lt;#Terms#&gt;)</string>
		<string>sofs:set(Terms) -&gt; Set</string>
		<string>sofs:set</string>
		<string>sofs:set(&lt;#Terms#&gt;, &lt;#Type#&gt;)</string>
		<string>sofs:set(Terms, Type) -&gt; Set</string>
		<string>sofs:specification</string>
		<string>sofs:specification(&lt;#Fun#&gt;, &lt;#Set1#&gt;)</string>
		<string>sofs:specification(Fun, Set1) -&gt; Set2</string>
		<string>sofs:strict_relation</string>
		<string>sofs:strict_relation(&lt;#BinRel1#&gt;)</string>
		<string>sofs:strict_relation(BinRel1) -&gt; BinRel2</string>
		<string>sofs:substitution</string>
		<string>sofs:substitution(&lt;#SetFun#&gt;, &lt;#Set1#&gt;)</string>
		<string>sofs:substitution(SetFun, Set1) -&gt; Set2</string>
		<string>sofs:symdiff</string>
		<string>sofs:symdiff(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:symdiff(Set1, Set2) -&gt; Set3</string>
		<string>sofs:symmetric_partition</string>
		<string>sofs:symmetric_partition(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:symmetric_partition(Set1, Set2) -&gt; {Set3, Set4, Set5}</string>
		<string>sofs:to_external</string>
		<string>sofs:to_external(&lt;#AnySet#&gt;)</string>
		<string>sofs:to_external(AnySet) -&gt; ExternalSet</string>
		<string>sofs:to_sets</string>
		<string>sofs:to_sets(&lt;#ASet#&gt;)</string>
		<string>sofs:to_sets(ASet) -&gt; Sets</string>
		<string>sofs:type</string>
		<string>sofs:type(&lt;#AnySet#&gt;)</string>
		<string>sofs:type(AnySet) -&gt; Type</string>
		<string>sofs:union</string>
		<string>sofs:union(&lt;#SetOfSets#&gt;)</string>
		<string>sofs:union(SetOfSets) -&gt; Set</string>
		<string>sofs:union</string>
		<string>sofs:union(&lt;#Set1#&gt;, &lt;#Set2#&gt;)</string>
		<string>sofs:union(Set1, Set2) -&gt; Set3</string>
		<string>sofs:union_of_family</string>
		<string>sofs:union_of_family(&lt;#Family#&gt;)</string>
		<string>sofs:union_of_family(Family) -&gt; Set</string>
		<string>sofs:weak_relation</string>
		<string>sofs:weak_relation(&lt;#BinRel1#&gt;)</string>
		<string>sofs:weak_relation(BinRel1) -&gt; BinRel2</string>
		<string>ssh:close</string>
		<string>ssh:close(&lt;#ConnectionRef#&gt;)</string>
		<string>ssh:close(ConnectionRef) -&gt; ok </string>
		<string>ssh:connect</string>
		<string>ssh:connect(&lt;#Host#&gt;, &lt;#Port#&gt;, &lt;#Options#&gt;)</string>
		<string>ssh:connect(Host, Port, Options) -&gt; {ok, ssh_connection_ref()} | {error, Reason}</string>
		<string>ssh:connect</string>
		<string>ssh:connect(&lt;#Host#&gt;, &lt;#Port#&gt;, &lt;#Options#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh:connect(Host, Port, Options, Timeout) -&gt; {ok, ssh_connection_ref()} | {error, Reason}</string>
		<string>ssh:connection_info</string>
		<string>ssh:connection_info(&lt;#ConnectionRef#&gt;, &lt;#[Option]#&gt;)</string>
		<string>ssh:connection_info(ConnectionRef, [Option]) -&gt; [{Option, Value}] </string>
		<string>ssh:daemon</string>
		<string>ssh:daemon(&lt;#Port#&gt;)</string>
		<string>ssh:daemon(Port) -&gt; {ok, ssh_daemon_ref()} | {error, atom()}</string>
		<string>ssh:daemon</string>
		<string>ssh:daemon(&lt;#Port#&gt;, &lt;#Options#&gt;)</string>
		<string>ssh:daemon(Port, Options) -&gt; {ok, ssh_daemon_ref()} | {error, atom()}</string>
		<string>ssh:daemon</string>
		<string>ssh:daemon(&lt;#HostAddress#&gt;, &lt;#Port#&gt;, &lt;#Options#&gt;)</string>
		<string>ssh:daemon(HostAddress, Port, Options) -&gt; {ok, ssh_daemon_ref()} | {error, atom()}</string>
		<string>ssh:shell</string>
		<string>ssh:shell(&lt;#Host#&gt;)</string>
		<string>ssh:shell(Host) -&gt; _</string>
		<string>ssh:shell</string>
		<string>ssh:shell(&lt;#Host#&gt;, &lt;#Option#&gt;)</string>
		<string>ssh:shell(Host, Option) -&gt; _</string>
		<string>ssh:shell</string>
		<string>ssh:shell(&lt;#Host#&gt;, &lt;#Port#&gt;, &lt;#Option#&gt;)</string>
		<string>ssh:shell(Host, Port, Option) -&gt; _</string>
		<string>ssh:start</string>
		<string>ssh:start()</string>
		<string>ssh:start() -&gt; ok | {error, Reason}</string>
		<string>ssh:start</string>
		<string>ssh:start(&lt;#Type#&gt;)</string>
		<string>ssh:start(Type) -&gt; ok | {error, Reason}</string>
		<string>ssh:stop</string>
		<string>ssh:stop()</string>
		<string>ssh:stop() -&gt; ok | {error, Reason}</string>
		<string>ssh:stop_daemon</string>
		<string>ssh:stop_daemon(&lt;#DaemonRef#&gt;)</string>
		<string>ssh:stop_daemon(DaemonRef) -&gt; ok </string>
		<string>ssh:stop_daemon</string>
		<string>ssh:stop_daemon(&lt;#Address#&gt;, &lt;#Port#&gt;)</string>
		<string>ssh:stop_daemon(Address, Port) -&gt; ok </string>
		<string>ssh:stop_listener</string>
		<string>ssh:stop_listener(&lt;#DaemonRef#&gt;)</string>
		<string>ssh:stop_listener(DaemonRef) -&gt; ok </string>
		<string>ssh:stop_listener</string>
		<string>ssh:stop_listener(&lt;#Address#&gt;, &lt;#Port#&gt;)</string>
		<string>ssh:stop_listener(Address, Port) -&gt; ok </string>
		<string>ssh_channel:call</string>
		<string>ssh_channel:call(&lt;#ChannelRef#&gt;, &lt;#Msg#&gt;)</string>
		<string>ssh_channel:call(ChannelRef, Msg) -&gt; Reply | {error, Reason}</string>
		<string>ssh_channel:call</string>
		<string>ssh_channel:call(&lt;#ChannelRef#&gt;, &lt;#Msg#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_channel:call(ChannelRef, Msg, Timeout) -&gt; Reply | {error, Reason}</string>
		<string>ssh_channel:cast</string>
		<string>ssh_channel:cast(&lt;#ChannelRef#&gt;, &lt;#Msg#&gt;)</string>
		<string>ssh_channel:cast(ChannelRef, Msg) -&gt; ok </string>
		<string>ssh_channel:enter_loop</string>
		<string>ssh_channel:enter_loop(&lt;#State#&gt;)</string>
		<string>ssh_channel:enter_loop(State) -&gt; _ </string>
		<string>ssh_channel:init</string>
		<string>ssh_channel:init(&lt;#Options#&gt;)</string>
		<string>ssh_channel:init(Options) -&gt; {ok, State} | {ok, State, Timeout} | {stop, Reason} </string>
		<string>ssh_channel:reply</string>
		<string>ssh_channel:reply(&lt;#Client#&gt;, &lt;#Reply#&gt;)</string>
		<string>ssh_channel:reply(Client, Reply) -&gt; _</string>
		<string>ssh_channel:start</string>
		<string>ssh_channel:start(&lt;#SshConnection#&gt;, &lt;#ChannelId#&gt;, &lt;#ChannelCb#&gt;, &lt;#CbInitArgs#&gt;)</string>
		<string>ssh_channel:start(SshConnection, ChannelId, ChannelCb, CbInitArgs) -&gt; {ok, ChannelRef} | {error, Reason}</string>
		<string>ssh_channel:start_link</string>
		<string>ssh_channel:start_link(&lt;#SshConnection#&gt;, &lt;#ChannelId#&gt;, &lt;#ChannelCb#&gt;, &lt;#CbInitArgs#&gt;)</string>
		<string>ssh_channel:start_link(SshConnection, ChannelId, ChannelCb, CbInitArgs) -&gt; {ok, ChannelRef} | {error, Reason}</string>
		<string>ssh_client_key_api:Module:add_host_key</string>
		<string>ssh_client_key_api:Module:add_host_key(&lt;#HostNames#&gt;, &lt;#Key#&gt;, &lt;#ConnectOptions#&gt;)</string>
		<string>ssh_client_key_api:Module:add_host_key(HostNames, Key, ConnectOptions) -&gt; ok | {error, Reason}</string>
		<string>ssh_client_key_api:Module:is_host_key</string>
		<string>ssh_client_key_api:Module:is_host_key(&lt;#Key#&gt;, &lt;#Host#&gt;, &lt;#Algorithm#&gt;, &lt;#ConnectOptions#&gt;)</string>
		<string>ssh_client_key_api:Module:is_host_key(Key, Host, Algorithm, ConnectOptions) -&gt; Result</string>
		<string>ssh_client_key_api:Module:user_key</string>
		<string>ssh_client_key_api:Module:user_key(&lt;#Algorithm#&gt;, &lt;#ConnectOptions#&gt;)</string>
		<string>ssh_client_key_api:Module:user_key(Algorithm, ConnectOptions) -&gt; {ok, PrivateKey} | {error, Reason}</string>
		<string>ssh_connection:adjust_window</string>
		<string>ssh_connection:adjust_window(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#NumOfBytes#&gt;)</string>
		<string>ssh_connection:adjust_window(ConnectionRef, ChannelId, NumOfBytes) -&gt; ok</string>
		<string>ssh_connection:close</string>
		<string>ssh_connection:close(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;)</string>
		<string>ssh_connection:close(ConnectionRef, ChannelId) -&gt; ok</string>
		<string>ssh_connection:exec</string>
		<string>ssh_connection:exec(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#Command#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>ssh_connection:exec(ConnectionRef, ChannelId, Command, TimeOut) -&gt; ssh_request_status()  </string>
		<string>ssh_connection:exit_status</string>
		<string>ssh_connection:exit_status(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#Status#&gt;)</string>
		<string>ssh_connection:exit_status(ConnectionRef, ChannelId, Status) -&gt; ok</string>
		<string>ssh_connection:reply_request</string>
		<string>ssh_connection:reply_request(&lt;#ConnectionRef#&gt;, &lt;#WantReply#&gt;, &lt;#Status#&gt;, &lt;#ChannelId#&gt;)</string>
		<string>ssh_connection:reply_request(ConnectionRef, WantReply, Status, ChannelId) -&gt; ok</string>
		<string>ssh_connection:send</string>
		<string>ssh_connection:send(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#Data#&gt;)</string>
		<string>ssh_connection:send(ConnectionRef, ChannelId, Data) -&gt; ok | {error, timeout} | {error, closed}</string>
		<string>ssh_connection:send</string>
		<string>ssh_connection:send(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#Data#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_connection:send(ConnectionRef, ChannelId, Data, Timeout) -&gt; ok | {error, timeout} | {error, closed}</string>
		<string>ssh_connection:send</string>
		<string>ssh_connection:send(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#Type#&gt;, &lt;#Data#&gt;)</string>
		<string>ssh_connection:send(ConnectionRef, ChannelId, Type, Data) -&gt; ok | {error, timeout} | {error, closed}</string>
		<string>ssh_connection:send</string>
		<string>ssh_connection:send(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#Type#&gt;, &lt;#Data#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>ssh_connection:send(ConnectionRef, ChannelId, Type, Data, TimeOut) -&gt; ok | {error, timeout} | {error, closed}</string>
		<string>ssh_connection:send_eof</string>
		<string>ssh_connection:send_eof(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;)</string>
		<string>ssh_connection:send_eof(ConnectionRef, ChannelId) -&gt; ok | {error, closed}</string>
		<string>ssh_connection:session_channel</string>
		<string>ssh_connection:session_channel(&lt;#ConnectionRef#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_connection:session_channel(ConnectionRef, Timeout) -&gt; {ok, ssh_channel_id()} | {error, Reason}</string>
		<string>ssh_connection:session_channel</string>
		<string>ssh_connection:session_channel(&lt;#ConnectionRef#&gt;, &lt;#InitialWindowSize#&gt;, &lt;#MaxPacketSize#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_connection:session_channel(ConnectionRef, InitialWindowSize, MaxPacketSize, Timeout) -&gt; {ok, ssh_channel_id()} | {error, Reason}</string>
		<string>ssh_connection:setenv</string>
		<string>ssh_connection:setenv(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#Var#&gt;, &lt;#Value#&gt;, &lt;#TimeOut#&gt;)</string>
		<string>ssh_connection:setenv(ConnectionRef, ChannelId, Var, Value, TimeOut) -&gt; ssh_request_status()</string>
		<string>ssh_connection:shell</string>
		<string>ssh_connection:shell(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;)</string>
		<string>ssh_connection:shell(ConnectionRef, ChannelId) -&gt; ssh_request_status()      </string>
		<string>ssh_connection:subsystem</string>
		<string>ssh_connection:subsystem(&lt;#ConnectionRef#&gt;, &lt;#ChannelId#&gt;, &lt;#Subsystem#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_connection:subsystem(ConnectionRef, ChannelId, Subsystem, Timeout) -&gt; ssh_request_status()</string>
		<string>ssh_server_key_api:Module:host_key</string>
		<string>ssh_server_key_api:Module:host_key(&lt;#Algorithm#&gt;, &lt;#DaemonOptions#&gt;)</string>
		<string>ssh_server_key_api:Module:host_key(Algorithm, DaemonOptions) -&gt; {ok, Key} | {error, Reason}</string>
		<string>ssh_server_key_api:Module:is_auth_key</string>
		<string>ssh_server_key_api:Module:is_auth_key(&lt;#Key#&gt;, &lt;#User#&gt;, &lt;#DaemonOptions#&gt;)</string>
		<string>ssh_server_key_api:Module:is_auth_key(Key, User, DaemonOptions) -&gt; Result</string>
		<string>ssh_sftp:start_channel</string>
		<string>ssh_sftp:start_channel(&lt;#ConnectionRef#&gt;)</string>
		<string>ssh_sftp:start_channel(ConnectionRef) -&gt; {ok, Pid} | {ok, Pid, ConnectionRef} | {error, Reason}</string>
		<string>ssh_sftp:start_channel</string>
		<string>ssh_sftp:start_channel(&lt;#ConnectionRef#&gt;, &lt;#Options#&gt;)</string>
		<string>ssh_sftp:start_channel(ConnectionRef, Options) -&gt; {ok, Pid} | {ok, Pid, ConnectionRef} | {error, Reason}</string>
		<string>ssh_sftp:start_channel</string>
		<string>ssh_sftp:start_channel(&lt;#Host#&gt;, &lt;#Options#&gt;)</string>
		<string>ssh_sftp:start_channel(Host, Options) -&gt; {ok, Pid} | {ok, Pid, ConnectionRef} | {error, Reason}</string>
		<string>ssh_sftp:start_channel</string>
		<string>ssh_sftp:start_channel(&lt;#Host#&gt;, &lt;#Port#&gt;, &lt;#Options#&gt;)</string>
		<string>ssh_sftp:start_channel(Host, Port, Options) -&gt; {ok, Pid} | {ok, Pid, ConnectionRef} | {error, Reason}</string>
		<string>ssh_sftp:stop_channel</string>
		<string>ssh_sftp:stop_channel(&lt;#ChannelPid#&gt;)</string>
		<string>ssh_sftp:stop_channel(ChannelPid) -&gt; ok</string>
		<string>ssh_sftp:read_file</string>
		<string>ssh_sftp:read_file(&lt;#ChannelPid#&gt;, &lt;#File#&gt;)</string>
		<string>ssh_sftp:read_file(ChannelPid, File) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ssh_sftp:read_file</string>
		<string>ssh_sftp:read_file(&lt;#ChannelPid#&gt;, &lt;#File#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:read_file(ChannelPid, File, Timeout) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ssh_sftp:write_file</string>
		<string>ssh_sftp:write_file(&lt;#ChannelPid#&gt;, &lt;#File#&gt;, &lt;#Iolist#&gt;)</string>
		<string>ssh_sftp:write_file(ChannelPid, File, Iolist) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:write_file</string>
		<string>ssh_sftp:write_file(&lt;#ChannelPid#&gt;, &lt;#File#&gt;, &lt;#Iolist#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:write_file(ChannelPid, File, Iolist, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:list_dir</string>
		<string>ssh_sftp:list_dir(&lt;#ChannelPid#&gt;, &lt;#Path#&gt;)</string>
		<string>ssh_sftp:list_dir(ChannelPid, Path) -&gt; {ok, Filenames} | {error, Reason}</string>
		<string>ssh_sftp:list_dir</string>
		<string>ssh_sftp:list_dir(&lt;#ChannelPid#&gt;, &lt;#Path#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:list_dir(ChannelPid, Path, Timeout) -&gt; {ok, Filenames} | {error, Reason}</string>
		<string>ssh_sftp:open</string>
		<string>ssh_sftp:open(&lt;#ChannelPid#&gt;, &lt;#File#&gt;, &lt;#Mode#&gt;)</string>
		<string>ssh_sftp:open(ChannelPid, File, Mode) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ssh_sftp:open</string>
		<string>ssh_sftp:open(&lt;#ChannelPid#&gt;, &lt;#File#&gt;, &lt;#Mode#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:open(ChannelPid, File, Mode, Timeout) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ssh_sftp:opendir</string>
		<string>ssh_sftp:opendir(&lt;#ChannelPid#&gt;, &lt;#Path#&gt;)</string>
		<string>ssh_sftp:opendir(ChannelPid, Path) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ssh_sftp:opendir</string>
		<string>ssh_sftp:opendir(&lt;#ChannelPid#&gt;, &lt;#Path#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:opendir(ChannelPid, Path, Timeout) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>ssh_sftp:close</string>
		<string>ssh_sftp:close(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;)</string>
		<string>ssh_sftp:close(ChannelPid, Handle) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:close</string>
		<string>ssh_sftp:close(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:close(ChannelPid, Handle, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:read</string>
		<string>ssh_sftp:read(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Len#&gt;)</string>
		<string>ssh_sftp:read(ChannelPid, Handle, Len) -&gt; {ok, Data} | eof | {error, Error}</string>
		<string>ssh_sftp:read</string>
		<string>ssh_sftp:read(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Len#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:read(ChannelPid, Handle, Len, Timeout) -&gt; {ok, Data} | eof | {error, Error}</string>
		<string>ssh_sftp:pread</string>
		<string>ssh_sftp:pread(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Len#&gt;)</string>
		<string>ssh_sftp:pread(ChannelPid, Handle, Position, Len) -&gt; {ok, Data} | eof | {error, Error}</string>
		<string>ssh_sftp:pread</string>
		<string>ssh_sftp:pread(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Len#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:pread(ChannelPid, Handle, Position, Len, Timeout) -&gt; {ok, Data} | eof | {error, Error}</string>
		<string>ssh_sftp:aread</string>
		<string>ssh_sftp:aread(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Len#&gt;)</string>
		<string>ssh_sftp:aread(ChannelPid, Handle, Len) -&gt; {async, N} | {error, Error}</string>
		<string>ssh_sftp:apread</string>
		<string>ssh_sftp:apread(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Len#&gt;)</string>
		<string>ssh_sftp:apread(ChannelPid, Handle, Position, Len) -&gt; {async, N} | {error, Error}</string>
		<string>ssh_sftp:write</string>
		<string>ssh_sftp:write(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Data#&gt;)</string>
		<string>ssh_sftp:write(ChannelPid, Handle, Data) -&gt; ok | {error, Error}</string>
		<string>ssh_sftp:write</string>
		<string>ssh_sftp:write(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Data#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:write(ChannelPid, Handle, Data, Timeout) -&gt; ok | {error, Error}</string>
		<string>ssh_sftp:pwrite</string>
		<string>ssh_sftp:pwrite(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Data#&gt;)</string>
		<string>ssh_sftp:pwrite(ChannelPid, Handle, Position, Data) -&gt; ok </string>
		<string>ssh_sftp:pwrite</string>
		<string>ssh_sftp:pwrite(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Data#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:pwrite(ChannelPid, Handle, Position, Data, Timeout) -&gt; ok | {error, Error}</string>
		<string>ssh_sftp:awrite</string>
		<string>ssh_sftp:awrite(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Data#&gt;)</string>
		<string>ssh_sftp:awrite(ChannelPid, Handle, Data) -&gt; ok | {error, Reason} </string>
		<string>ssh_sftp:apwrite</string>
		<string>ssh_sftp:apwrite(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Position#&gt;, &lt;#Data#&gt;)</string>
		<string>ssh_sftp:apwrite(ChannelPid, Handle, Position, Data) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:position</string>
		<string>ssh_sftp:position(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Location#&gt;)</string>
		<string>ssh_sftp:position(ChannelPid, Handle, Location) -&gt; {ok, NewPosition | {error, Error}</string>
		<string>ssh_sftp:position</string>
		<string>ssh_sftp:position(&lt;#ChannelPid#&gt;, &lt;#Handle#&gt;, &lt;#Location#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:position(ChannelPid, Handle, Location, Timeout) -&gt; {ok, NewPosition | {error, Error}</string>
		<string>ssh_sftp:read_file_info</string>
		<string>ssh_sftp:read_file_info(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;)</string>
		<string>ssh_sftp:read_file_info(ChannelPid, Name) -&gt; {ok, FileInfo} | {error, Reason}</string>
		<string>ssh_sftp:read_file_info</string>
		<string>ssh_sftp:read_file_info(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:read_file_info(ChannelPid, Name, Timeout) -&gt; {ok, FileInfo} | {error, Reason}</string>
		<string>ssh_sftp:read_link_info</string>
		<string>ssh_sftp:read_link_info(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;)</string>
		<string>ssh_sftp:read_link_info(ChannelPid, Name) -&gt; {ok, FileInfo} | {error, Reason}</string>
		<string>ssh_sftp:read_link_info</string>
		<string>ssh_sftp:read_link_info(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:read_link_info(ChannelPid, Name, Timeout) -&gt; {ok, FileInfo} | {error, Reason}</string>
		<string>ssh_sftp:write_file_info</string>
		<string>ssh_sftp:write_file_info(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Info#&gt;)</string>
		<string>ssh_sftp:write_file_info(ChannelPid, Name, Info) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:write_file_info</string>
		<string>ssh_sftp:write_file_info(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Info#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:write_file_info(ChannelPid, Name, Info, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:read_link</string>
		<string>ssh_sftp:read_link(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;)</string>
		<string>ssh_sftp:read_link(ChannelPid, Name) -&gt; {ok, Target} | {error, Reason}</string>
		<string>ssh_sftp:read_link</string>
		<string>ssh_sftp:read_link(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:read_link(ChannelPid, Name, Timeout) -&gt; {ok, Target} | {error, Reason}</string>
		<string>ssh_sftp:make_symlink</string>
		<string>ssh_sftp:make_symlink(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Target#&gt;)</string>
		<string>ssh_sftp:make_symlink(ChannelPid, Name, Target) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:make_symlink</string>
		<string>ssh_sftp:make_symlink(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Target#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:make_symlink(ChannelPid, Name, Target, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:rename</string>
		<string>ssh_sftp:rename(&lt;#ChannelPid#&gt;, &lt;#OldName#&gt;, &lt;#NewName#&gt;)</string>
		<string>ssh_sftp:rename(ChannelPid, OldName, NewName) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:rename</string>
		<string>ssh_sftp:rename(&lt;#ChannelPid#&gt;, &lt;#OldName#&gt;, &lt;#NewName#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:rename(ChannelPid, OldName, NewName, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:delete</string>
		<string>ssh_sftp:delete(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;)</string>
		<string>ssh_sftp:delete(ChannelPid, Name) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:delete</string>
		<string>ssh_sftp:delete(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:delete(ChannelPid, Name, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:make_dir</string>
		<string>ssh_sftp:make_dir(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;)</string>
		<string>ssh_sftp:make_dir(ChannelPid, Name) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:make_dir</string>
		<string>ssh_sftp:make_dir(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:make_dir(ChannelPid, Name, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:del_dir</string>
		<string>ssh_sftp:del_dir(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;)</string>
		<string>ssh_sftp:del_dir(ChannelPid, Name) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftp:del_dir</string>
		<string>ssh_sftp:del_dir(&lt;#ChannelPid#&gt;, &lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssh_sftp:del_dir(ChannelPid, Name, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssh_sftpd:subsystem_spec</string>
		<string>ssh_sftpd:subsystem_spec(&lt;#Options#&gt;)</string>
		<string>ssh_sftpd:subsystem_spec(Options) -&gt; subsystem_spec()</string>
		<string>ssl:cipher_suites</string>
		<string>ssl:cipher_suites()</string>
		<string>ssl:cipher_suites() -&gt; ciphers()</string>
		<string>ssl:cipher_suites</string>
		<string>ssl:cipher_suites(&lt;#Type#&gt;)</string>
		<string>ssl:cipher_suites(Type) -&gt; ciphers()</string>
		<string>ssl:connect</string>
		<string>ssl:connect(&lt;#Socket#&gt;, &lt;#SslOptions#&gt;)</string>
		<string>ssl:connect(Socket, SslOptions) -&gt; {ok, SslSocket} | {error, Reason}</string>
		<string>ssl:connect</string>
		<string>ssl:connect(&lt;#Socket#&gt;, &lt;#SslOptions#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssl:connect(Socket, SslOptions, Timeout) -&gt; {ok, SslSocket} | {error, Reason}</string>
		<string>ssl:connect</string>
		<string>ssl:connect(&lt;#Host#&gt;, &lt;#Port#&gt;, &lt;#Options#&gt;)</string>
		<string>ssl:connect(Host, Port, Options) -&gt; {ok, SslSocket} | {error, Reason}</string>
		<string>ssl:connect</string>
		<string>ssl:connect(&lt;#Host#&gt;, &lt;#Port#&gt;, &lt;#Options#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssl:connect(Host, Port, Options, Timeout) -&gt; {ok, SslSocket} | {error, Reason}</string>
		<string>ssl:close</string>
		<string>ssl:close(&lt;#SslSocket#&gt;)</string>
		<string>ssl:close(SslSocket) -&gt; ok | {error, Reason}</string>
		<string>ssl:controlling_process</string>
		<string>ssl:controlling_process(&lt;#SslSocket#&gt;, &lt;#NewOwner#&gt;)</string>
		<string>ssl:controlling_process(SslSocket, NewOwner) -&gt; ok | {error, Reason}</string>
		<string>ssl:connection_info</string>
		<string>ssl:connection_info(&lt;#SslSocket#&gt;)</string>
		<string>ssl:connection_info(SslSocket) -&gt; {ok, {ProtocolVersion, CipherSuite}} | {error, Reason} </string>
		<string>ssl:format_error</string>
		<string>ssl:format_error(&lt;#Reason#&gt;)</string>
		<string>ssl:format_error(Reason) -&gt; string()</string>
		<string>ssl:getopts</string>
		<string>ssl:getopts(&lt;#Socket#&gt;, &lt;#OptionNames#&gt;)</string>
		<string>ssl:getopts(Socket, OptionNames) -&gt; {ok, [socketoption()]} | {error, Reason}</string>
		<string>ssl:listen</string>
		<string>ssl:listen(&lt;#Port#&gt;, &lt;#Options#&gt;)</string>
		<string>ssl:listen(Port, Options) -&gt; {ok, ListenSocket} | {error, Reason}</string>
		<string>ssl:peercert</string>
		<string>ssl:peercert(&lt;#Socket#&gt;)</string>
		<string>ssl:peercert(Socket) -&gt; {ok, Cert} | {error, Reason}</string>
		<string>ssl:peername</string>
		<string>ssl:peername(&lt;#Socket#&gt;)</string>
		<string>ssl:peername(Socket) -&gt; {ok, {Address, Port}} | {error, Reason}</string>
		<string>ssl:recv</string>
		<string>ssl:recv(&lt;#Socket#&gt;, &lt;#Length#&gt;)</string>
		<string>ssl:recv(Socket, Length) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ssl:recv</string>
		<string>ssl:recv(&lt;#Socket#&gt;, &lt;#Length#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssl:recv(Socket, Length, Timeout) -&gt; {ok, Data} | {error, Reason}</string>
		<string>ssl:prf</string>
		<string>ssl:prf(&lt;#Socket#&gt;, &lt;#Secret#&gt;, &lt;#Label#&gt;, &lt;#Seed#&gt;, &lt;#WantedLength#&gt;)</string>
		<string>ssl:prf(Socket, Secret, Label, Seed, WantedLength) -&gt; {ok, binary()} | {error, reason()}</string>
		<string>ssl:renegotiate</string>
		<string>ssl:renegotiate(&lt;#Socket#&gt;)</string>
		<string>ssl:renegotiate(Socket) -&gt; ok | {error, Reason}</string>
		<string>ssl:send</string>
		<string>ssl:send(&lt;#Socket#&gt;, &lt;#Data#&gt;)</string>
		<string>ssl:send(Socket, Data) -&gt; ok | {error, Reason}</string>
		<string>ssl:setopts</string>
		<string>ssl:setopts(&lt;#Socket#&gt;, &lt;#Options#&gt;)</string>
		<string>ssl:setopts(Socket, Options) -&gt; ok | {error, Reason}</string>
		<string>ssl:shutdown</string>
		<string>ssl:shutdown(&lt;#Socket#&gt;, &lt;#How#&gt;)</string>
		<string>ssl:shutdown(Socket, How) -&gt; ok | {error, Reason}</string>
		<string>ssl:ssl_accept</string>
		<string>ssl:ssl_accept(&lt;#Socket#&gt;)</string>
		<string>ssl:ssl_accept(Socket) -&gt; ok | {error, Reason}</string>
		<string>ssl:ssl_accept</string>
		<string>ssl:ssl_accept(&lt;#Socket#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssl:ssl_accept(Socket, Timeout) -&gt; ok | {error, Reason}</string>
		<string>ssl:ssl_accept</string>
		<string>ssl:ssl_accept(&lt;#Socket#&gt;, &lt;#SslOptions#&gt;)</string>
		<string>ssl:ssl_accept(Socket, SslOptions) -&gt; {ok, Socket} | ok | {error, Reason}</string>
		<string>ssl:ssl_accept</string>
		<string>ssl:ssl_accept(&lt;#Socket#&gt;, &lt;#SslOptions#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssl:ssl_accept(Socket, SslOptions, Timeout) -&gt; {ok, Socket} | ok | {error, Reason}</string>
		<string>ssl:sockname</string>
		<string>ssl:sockname(&lt;#Socket#&gt;)</string>
		<string>ssl:sockname(Socket) -&gt; {ok, {Address, Port}} | {error, Reason}</string>
		<string>ssl:start</string>
		<string>ssl:start()</string>
		<string>ssl:start() -&gt; ok | {error, Reason}</string>
		<string>ssl:start</string>
		<string>ssl:start(&lt;#Type#&gt;)</string>
		<string>ssl:start(Type) -&gt; ok | {error, Reason}</string>
		<string>ssl:stop</string>
		<string>ssl:stop()</string>
		<string>ssl:stop() -&gt; ok </string>
		<string>ssl:transport_accept</string>
		<string>ssl:transport_accept(&lt;#ListenSocket#&gt;)</string>
		<string>ssl:transport_accept(ListenSocket) -&gt; {ok, NewSocket} | {error, Reason}</string>
		<string>ssl:transport_accept</string>
		<string>ssl:transport_accept(&lt;#ListenSocket#&gt;, &lt;#Timeout#&gt;)</string>
		<string>ssl:transport_accept(ListenSocket, Timeout) -&gt; {ok, NewSocket} | {error, Reason}</string>
		<string>ssl:versions</string>
		<string>ssl:versions()</string>
		<string>ssl:versions() -&gt; [{SslAppVer, SupportedSslVer, AvailableSslVsn}]</string>
		<string>ssl:negotiated_next_protocol</string>
		<string>ssl:negotiated_next_protocol(&lt;#Socket#&gt;)</string>
		<string>ssl:negotiated_next_protocol(Socket) -&gt; {ok, Protocol} | {error, next_protocol_not_negotiated}</string>
		<string>ssl_session_cache_api:delete</string>
		<string>ssl_session_cache_api:delete(&lt;#Cache#&gt;, &lt;#Key#&gt;)</string>
		<string>ssl_session_cache_api:delete(Cache, Key) -&gt; _</string>
		<string>ssl_session_cache_api:foldl</string>
		<string>ssl_session_cache_api:foldl(&lt;#Fun#&gt;, &lt;#Acc0#&gt;, &lt;#Cache#&gt;)</string>
		<string>ssl_session_cache_api:foldl(Fun, Acc0, Cache) -&gt; Acc</string>
		<string>ssl_session_cache_api:init</string>
		<string>ssl_session_cache_api:init()</string>
		<string>ssl_session_cache_api:init() -&gt; opaque() </string>
		<string>ssl_session_cache_api:lookup</string>
		<string>ssl_session_cache_api:lookup(&lt;#Cache#&gt;, &lt;#Key#&gt;)</string>
		<string>ssl_session_cache_api:lookup(Cache, Key) -&gt; Entry</string>
		<string>ssl_session_cache_api:select_session</string>
		<string>ssl_session_cache_api:select_session(&lt;#Cache#&gt;, &lt;#PartialKey#&gt;)</string>
		<string>ssl_session_cache_api:select_session(Cache, PartialKey) -&gt; [session()]</string>
		<string>ssl_session_cache_api:terminate</string>
		<string>ssl_session_cache_api:terminate(&lt;#Cache#&gt;)</string>
		<string>ssl_session_cache_api:terminate(Cache) -&gt; _</string>
		<string>ssl_session_cache_api:update</string>
		<string>ssl_session_cache_api:update(&lt;#Cache#&gt;, &lt;#Key#&gt;, &lt;#Session#&gt;)</string>
		<string>ssl_session_cache_api:update(Cache, Key, Session) -&gt; _</string>
		<string>string:centre</string>
		<string>string:centre(&lt;#String#&gt;, &lt;#Number#&gt;)</string>
		<string>string:centre(String, Number) -&gt; Centered</string>
		<string>string:centre</string>
		<string>string:centre(&lt;#String#&gt;, &lt;#Number#&gt;, &lt;#Character#&gt;)</string>
		<string>string:centre(String, Number, Character) -&gt; Centered</string>
		<string>string:chars</string>
		<string>string:chars(&lt;#Character#&gt;, &lt;#Number#&gt;)</string>
		<string>string:chars(Character, Number) -&gt; String</string>
		<string>string:chars</string>
		<string>string:chars(&lt;#Character#&gt;, &lt;#Number#&gt;, &lt;#Tail#&gt;)</string>
		<string>string:chars(Character, Number, Tail) -&gt; String</string>
		<string>string:chr</string>
		<string>string:chr(&lt;#String#&gt;, &lt;#Character#&gt;)</string>
		<string>string:chr(String, Character) -&gt; Index</string>
		<string>string:concat</string>
		<string>string:concat(&lt;#String1#&gt;, &lt;#String2#&gt;)</string>
		<string>string:concat(String1, String2) -&gt; String3</string>
		<string>string:copies</string>
		<string>string:copies(&lt;#String#&gt;, &lt;#Number#&gt;)</string>
		<string>string:copies(String, Number) -&gt; Copies</string>
		<string>string:cspan</string>
		<string>string:cspan(&lt;#String#&gt;, &lt;#Chars#&gt;)</string>
		<string>string:cspan(String, Chars) -&gt; Length</string>
		<string>string:equal</string>
		<string>string:equal(&lt;#String1#&gt;, &lt;#String2#&gt;)</string>
		<string>string:equal(String1, String2) -&gt; boolean()</string>
		<string>string:join</string>
		<string>string:join(&lt;#StringList#&gt;, &lt;#Separator#&gt;)</string>
		<string>string:join(StringList, Separator) -&gt; String</string>
		<string>string:left</string>
		<string>string:left(&lt;#String#&gt;, &lt;#Number#&gt;)</string>
		<string>string:left(String, Number) -&gt; Left</string>
		<string>string:left</string>
		<string>string:left(&lt;#String#&gt;, &lt;#Number#&gt;, &lt;#Character#&gt;)</string>
		<string>string:left(String, Number, Character) -&gt; Left</string>
		<string>string:len</string>
		<string>string:len(&lt;#String#&gt;)</string>
		<string>string:len(String) -&gt; Length</string>
		<string>string:rchr</string>
		<string>string:rchr(&lt;#String#&gt;, &lt;#Character#&gt;)</string>
		<string>string:rchr(String, Character) -&gt; Index</string>
		<string>string:right</string>
		<string>string:right(&lt;#String#&gt;, &lt;#Number#&gt;)</string>
		<string>string:right(String, Number) -&gt; Right</string>
		<string>string:right</string>
		<string>string:right(&lt;#String#&gt;, &lt;#Number#&gt;, &lt;#Character#&gt;)</string>
		<string>string:right(String, Number, Character) -&gt; Right</string>
		<string>string:rstr</string>
		<string>string:rstr(&lt;#String#&gt;, &lt;#SubString#&gt;)</string>
		<string>string:rstr(String, SubString) -&gt; Index</string>
		<string>string:span</string>
		<string>string:span(&lt;#String#&gt;, &lt;#Chars#&gt;)</string>
		<string>string:span(String, Chars) -&gt; Length</string>
		<string>string:str</string>
		<string>string:str(&lt;#String#&gt;, &lt;#SubString#&gt;)</string>
		<string>string:str(String, SubString) -&gt; Index</string>
		<string>string:strip</string>
		<string>string:strip(&lt;#String :: string()#&gt;)</string>
		<string>string:strip(String :: string()) -&gt; string()</string>
		<string>string:strip</string>
		<string>string:strip(&lt;#String#&gt;, &lt;#Direction#&gt;)</string>
		<string>string:strip(String, Direction) -&gt; Stripped</string>
		<string>string:strip</string>
		<string>string:strip(&lt;#String#&gt;, &lt;#Direction#&gt;, &lt;#Character#&gt;)</string>
		<string>string:strip(String, Direction, Character) -&gt; Stripped</string>
		<string>string:sub_string</string>
		<string>string:sub_string(&lt;#String#&gt;, &lt;#Start#&gt;)</string>
		<string>string:sub_string(String, Start) -&gt; SubString</string>
		<string>string:sub_string</string>
		<string>string:sub_string(&lt;#String#&gt;, &lt;#Start#&gt;, &lt;#Stop#&gt;)</string>
		<string>string:sub_string(String, Start, Stop) -&gt; SubString</string>
		<string>string:sub_word</string>
		<string>string:sub_word(&lt;#String#&gt;, &lt;#Number#&gt;)</string>
		<string>string:sub_word(String, Number) -&gt; Word</string>
		<string>string:sub_word</string>
		<string>string:sub_word(&lt;#String#&gt;, &lt;#Number#&gt;, &lt;#Character#&gt;)</string>
		<string>string:sub_word(String, Number, Character) -&gt; Word</string>
		<string>string:substr</string>
		<string>string:substr(&lt;#String#&gt;, &lt;#Start#&gt;)</string>
		<string>string:substr(String, Start) -&gt; SubString</string>
		<string>string:substr</string>
		<string>string:substr(&lt;#String#&gt;, &lt;#Start#&gt;, &lt;#Length#&gt;)</string>
		<string>string:substr(String, Start, Length) -&gt; SubString</string>
		<string>string:to_float</string>
		<string>string:to_float(&lt;#String#&gt;)</string>
		<string>string:to_float(String) -&gt; {Float, Rest} | {error, Reason}</string>
		<string>string:to_integer</string>
		<string>string:to_integer(&lt;#String#&gt;)</string>
		<string>string:to_integer(String) -&gt; {Int, Rest} | {error, Reason}</string>
		<string>string:to_lower</string>
		<string>string:to_lower(&lt;#String#&gt;)</string>
		<string>string:to_lower(String) -&gt; Result</string>
		<string>string:to_lower</string>
		<string>string:to_lower(&lt;#Char#&gt;)</string>
		<string>string:to_lower(Char) -&gt; CharResult</string>
		<string>string:to_upper</string>
		<string>string:to_upper(&lt;#String#&gt;)</string>
		<string>string:to_upper(String) -&gt; Result</string>
		<string>string:to_upper</string>
		<string>string:to_upper(&lt;#Char#&gt;)</string>
		<string>string:to_upper(Char) -&gt; CharResult</string>
		<string>string:tokens</string>
		<string>string:tokens(&lt;#String#&gt;, &lt;#SeparatorList#&gt;)</string>
		<string>string:tokens(String, SeparatorList) -&gt; Tokens</string>
		<string>string:words</string>
		<string>string:words(&lt;#String#&gt;)</string>
		<string>string:words(String) -&gt; Count</string>
		<string>string:words</string>
		<string>string:words(&lt;#String#&gt;, &lt;#Character#&gt;)</string>
		<string>string:words(String, Character) -&gt; Count</string>
		<string>supervisor:check_childspecs</string>
		<string>supervisor:check_childspecs(&lt;#ChildSpecs#&gt;)</string>
		<string>supervisor:check_childspecs(ChildSpecs) -&gt; Result</string>
		<string>supervisor:code_change</string>
		<string>supervisor:code_change(&lt;#X1 :: term()#&gt;, &lt;#State :: state()#&gt;, &lt;#X3 :: term()#&gt;)</string>
		<string>supervisor:code_change(X1 :: term(), State :: state(), X3 :: term()) -&gt; {ok, state()} | {error, term()}</string>
		<string>supervisor:count_children</string>
		<string>supervisor:count_children(&lt;#SupRef#&gt;)</string>
		<string>supervisor:count_children(SupRef) -&gt; PropListOfCounts</string>
		<string>supervisor:delete_child</string>
		<string>supervisor:delete_child(&lt;#SupRef#&gt;, &lt;#Id#&gt;)</string>
		<string>supervisor:delete_child(SupRef, Id) -&gt; Result</string>
		<string>supervisor:handle_call</string>
		<string>supervisor:handle_call(&lt;#X1 :: call()#&gt;, &lt;#From :: term()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>supervisor:handle_call(X1 :: call(), From :: term(), State :: state()) -&gt; {reply, term(), state()}</string>
		<string>supervisor:handle_cast</string>
		<string>supervisor:handle_cast(&lt;#X1 :: {try_again_restart#&gt;, &lt;#child_id() | pid()}#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>supervisor:handle_cast(X1 :: {try_again_restart, child_id() | pid()}, State :: state()) -&gt; {noreply, state()} | {stop, shutdown, state()}</string>
		<string>supervisor:handle_info</string>
		<string>supervisor:handle_info(&lt;#Msg :: term()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>supervisor:handle_info(Msg :: term(), State :: state()) -&gt; {noreply, state()} | {stop, shutdown, state()}</string>
		<string>supervisor:init</string>
		<string>supervisor:init(&lt;#X1 :: {init_sup_name()#&gt;, &lt;#module()#&gt;, &lt;#[term()]}#&gt;)</string>
		<string>supervisor:init(X1 :: {init_sup_name(), module(), [term()]}) -&gt; {ok, state()} | ignore | {stop, stop_rsn()}</string>
		<string>supervisor:restart_child</string>
		<string>supervisor:restart_child(&lt;#SupRef#&gt;, &lt;#Id#&gt;)</string>
		<string>supervisor:restart_child(SupRef, Id) -&gt; Result</string>
		<string>supervisor:start_child</string>
		<string>supervisor:start_child(&lt;#SupRef#&gt;, &lt;#ChildSpec#&gt;)</string>
		<string>supervisor:start_child(SupRef, ChildSpec) -&gt; startchild_ret()</string>
		<string>supervisor:start_link</string>
		<string>supervisor:start_link(&lt;#Module#&gt;, &lt;#Args#&gt;)</string>
		<string>supervisor:start_link(Module, Args) -&gt; startlink_ret()</string>
		<string>supervisor:start_link</string>
		<string>supervisor:start_link(&lt;#SupName#&gt;, &lt;#Module#&gt;, &lt;#Args#&gt;)</string>
		<string>supervisor:start_link(SupName, Module, Args) -&gt; startlink_ret()</string>
		<string>supervisor:terminate</string>
		<string>supervisor:terminate(&lt;#Reason :: term()#&gt;, &lt;#State :: state()#&gt;)</string>
		<string>supervisor:terminate(Reason :: term(), State :: state()) -&gt; ok</string>
		<string>supervisor:terminate_child</string>
		<string>supervisor:terminate_child(&lt;#SupRef#&gt;, &lt;#Id#&gt;)</string>
		<string>supervisor:terminate_child(SupRef, Id) -&gt; Result</string>
		<string>supervisor:try_again_restart</string>
		<string>supervisor:try_again_restart(&lt;#SupRef#&gt;, &lt;#Child#&gt;)</string>
		<string>supervisor:try_again_restart(SupRef, Child) -&gt; ok</string>
		<string>supervisor:which_children</string>
		<string>supervisor:which_children(&lt;#SupRef#&gt;)</string>
		<string>supervisor:which_children(SupRef) -&gt; [{Id, Child, Type, Modules}]</string>
		<string>supervisor_bridge:start_link</string>
		<string>supervisor_bridge:start_link(&lt;#Module#&gt;, &lt;#Args#&gt;)</string>
		<string>supervisor_bridge:start_link(Module, Args) -&gt; Result</string>
		<string>supervisor_bridge:start_link</string>
		<string>supervisor_bridge:start_link(&lt;#SupBridgeName#&gt;, &lt;#Module#&gt;, &lt;#Args#&gt;)</string>
		<string>supervisor_bridge:start_link(SupBridgeName, Module, Args) -&gt; Result</string>
		<string>sys:change_code</string>
		<string>sys:change_code(&lt;#Name#&gt;, &lt;#Module#&gt;, &lt;#OldVsn#&gt;, &lt;#Extra#&gt;)</string>
		<string>sys:change_code(Name, Module, OldVsn, Extra) -&gt; ok | {error, Reason}</string>
		<string>sys:change_code</string>
		<string>sys:change_code(&lt;#Name#&gt;, &lt;#Module#&gt;, &lt;#OldVsn#&gt;, &lt;#Extra#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:change_code(Name, Module, OldVsn, Extra, Timeout) -&gt; ok | {error, Reason}</string>
		<string>sys:debug_options</string>
		<string>sys:debug_options(&lt;#Options#&gt;)</string>
		<string>sys:debug_options(Options) -&gt; [dbg_opt()]</string>
		<string>sys:get_debug</string>
		<string>sys:get_debug(&lt;#Item#&gt;, &lt;#Debug#&gt;, &lt;#Default#&gt;)</string>
		<string>sys:get_debug(Item, Debug, Default) -&gt; term()</string>
		<string>sys:get_state</string>
		<string>sys:get_state(&lt;#Name#&gt;)</string>
		<string>sys:get_state(Name) -&gt; State</string>
		<string>sys:get_state</string>
		<string>sys:get_state(&lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:get_state(Name, Timeout) -&gt; State</string>
		<string>sys:get_status</string>
		<string>sys:get_status(&lt;#Name#&gt;)</string>
		<string>sys:get_status(Name) -&gt; Status</string>
		<string>sys:get_status</string>
		<string>sys:get_status(&lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:get_status(Name, Timeout) -&gt; Status</string>
		<string>sys:handle_debug</string>
		<string>sys:handle_debug(&lt;#Debug#&gt;, &lt;#FormFunc#&gt;, &lt;#Extra#&gt;, &lt;#Event#&gt;)</string>
		<string>sys:handle_debug(Debug, FormFunc, Extra, Event) -&gt; [dbg_opt()]</string>
		<string>sys:handle_system_msg</string>
		<string>sys:handle_system_msg(&lt;#Msg#&gt;, &lt;#From#&gt;, &lt;#Parent#&gt;, &lt;#Module#&gt;, &lt;#Debug#&gt;, &lt;#Misc#&gt;)</string>
		<string>sys:handle_system_msg(Msg, From, Parent, Module, Debug, Misc) -&gt; no_return()</string>
		<string>sys:install</string>
		<string>sys:install(&lt;#Name#&gt;, &lt;#FuncSpec#&gt;)</string>
		<string>sys:install(Name, FuncSpec) -&gt; ok</string>
		<string>sys:install</string>
		<string>sys:install(&lt;#Name#&gt;, &lt;#FuncSpec#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:install(Name, FuncSpec, Timeout) -&gt; ok</string>
		<string>sys:log</string>
		<string>sys:log(&lt;#Name#&gt;, &lt;#Flag#&gt;)</string>
		<string>sys:log(Name, Flag) -&gt; ok | {ok, [system_event()]}</string>
		<string>sys:log</string>
		<string>sys:log(&lt;#Name#&gt;, &lt;#Flag#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:log(Name, Flag, Timeout) -&gt; ok | {ok, [system_event()]}</string>
		<string>sys:log_to_file</string>
		<string>sys:log_to_file(&lt;#Name#&gt;, &lt;#Flag#&gt;)</string>
		<string>sys:log_to_file(Name, Flag) -&gt; ok | {error, open_file}</string>
		<string>sys:log_to_file</string>
		<string>sys:log_to_file(&lt;#Name#&gt;, &lt;#Flag#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:log_to_file(Name, Flag, Timeout) -&gt; ok | {error, open_file}</string>
		<string>sys:no_debug</string>
		<string>sys:no_debug(&lt;#Name#&gt;)</string>
		<string>sys:no_debug(Name) -&gt; ok</string>
		<string>sys:no_debug</string>
		<string>sys:no_debug(&lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:no_debug(Name, Timeout) -&gt; ok</string>
		<string>sys:print_log</string>
		<string>sys:print_log(&lt;#Debug#&gt;)</string>
		<string>sys:print_log(Debug) -&gt; ok</string>
		<string>sys:remove</string>
		<string>sys:remove(&lt;#Name#&gt;, &lt;#Func#&gt;)</string>
		<string>sys:remove(Name, Func) -&gt; ok</string>
		<string>sys:remove</string>
		<string>sys:remove(&lt;#Name#&gt;, &lt;#Func#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:remove(Name, Func, Timeout) -&gt; ok</string>
		<string>sys:replace_state</string>
		<string>sys:replace_state(&lt;#Name#&gt;, &lt;#StateFun#&gt;)</string>
		<string>sys:replace_state(Name, StateFun) -&gt; NewState</string>
		<string>sys:replace_state</string>
		<string>sys:replace_state(&lt;#Name#&gt;, &lt;#StateFun#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:replace_state(Name, StateFun, Timeout) -&gt; NewState</string>
		<string>sys:resume</string>
		<string>sys:resume(&lt;#Name#&gt;)</string>
		<string>sys:resume(Name) -&gt; ok</string>
		<string>sys:resume</string>
		<string>sys:resume(&lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:resume(Name, Timeout) -&gt; ok</string>
		<string>sys:statistics</string>
		<string>sys:statistics(&lt;#Name#&gt;, &lt;#Flag#&gt;)</string>
		<string>sys:statistics(Name, Flag) -&gt; ok | {ok, Statistics}</string>
		<string>sys:statistics</string>
		<string>sys:statistics(&lt;#Name#&gt;, &lt;#Flag#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:statistics(Name, Flag, Timeout) -&gt; ok | {ok, Statistics}</string>
		<string>sys:suspend</string>
		<string>sys:suspend(&lt;#Name#&gt;)</string>
		<string>sys:suspend(Name) -&gt; ok</string>
		<string>sys:suspend</string>
		<string>sys:suspend(&lt;#Name#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:suspend(Name, Timeout) -&gt; ok</string>
		<string>sys:trace</string>
		<string>sys:trace(&lt;#Name#&gt;, &lt;#Flag#&gt;)</string>
		<string>sys:trace(Name, Flag) -&gt; ok</string>
		<string>sys:trace</string>
		<string>sys:trace(&lt;#Name#&gt;, &lt;#Flag#&gt;, &lt;#Timeout#&gt;)</string>
		<string>sys:trace(Name, Flag, Timeout) -&gt; ok</string>
		<string>system_information:sanity_check</string>
		<string>system_information:sanity_check()</string>
		<string>system_information:sanity_check() -&gt; ok | {failed, Failures}</string>
		<string>system_information:to_file</string>
		<string>system_information:to_file(&lt;#FileName#&gt;)</string>
		<string>system_information:to_file(FileName) -&gt; ok | {error, Reason}</string>
		<string>systools:make_relup</string>
		<string>systools:make_relup(&lt;#Name#&gt;, &lt;#UpFrom#&gt;, &lt;#DownTo#&gt;)</string>
		<string>systools:make_relup(Name, UpFrom, DownTo) -&gt; Result</string>
		<string>systools:make_relup</string>
		<string>systools:make_relup(&lt;#Name#&gt;, &lt;#UpFrom#&gt;, &lt;#DownTo#&gt;, &lt;#[Opt]#&gt;)</string>
		<string>systools:make_relup(Name, UpFrom, DownTo, [Opt]) -&gt; Result</string>
		<string>systools:make_script</string>
		<string>systools:make_script(&lt;#Name#&gt;)</string>
		<string>systools:make_script(Name) -&gt; Result</string>
		<string>systools:make_script</string>
		<string>systools:make_script(&lt;#Name#&gt;, &lt;#[Opt]#&gt;)</string>
		<string>systools:make_script(Name, [Opt]) -&gt; Result</string>
		<string>systools:make_tar</string>
		<string>systools:make_tar(&lt;#Name#&gt;)</string>
		<string>systools:make_tar(Name) -&gt; Result</string>
		<string>systools:make_tar</string>
		<string>systools:make_tar(&lt;#Name#&gt;, &lt;#[Opt]#&gt;)</string>
		<string>systools:make_tar(Name, [Opt]) -&gt; Result</string>
		<string>systools:script2boot</string>
		<string>systools:script2boot(&lt;#File#&gt;)</string>
		<string>systools:script2boot(File) -&gt; ok | error</string>
		<string>tags:file</string>
		<string>tags:file(&lt;#File [#&gt;, &lt;#Options]#&gt;)</string>
		<string>tags:file(File [, Options])</string>
		<string>tags:files</string>
		<string>tags:files(&lt;#FileList [#&gt;, &lt;#Options]#&gt;)</string>
		<string>tags:files(FileList [, Options])</string>
		<string>tags:dir</string>
		<string>tags:dir(&lt;#Dir [#&gt;, &lt;#Options]#&gt;)</string>
		<string>tags:dir(Dir [, Options])</string>
		<string>tags:dirs</string>
		<string>tags:dirs(&lt;#DirList [#&gt;, &lt;#Options]#&gt;)</string>
		<string>tags:dirs(DirList [, Options])</string>
		<string>tags:subdir</string>
		<string>tags:subdir(&lt;#Dir [#&gt;, &lt;#Options]#&gt;)</string>
		<string>tags:subdir(Dir [, Options])</string>
		<string>tags:subdirs</string>
		<string>tags:subdirs(&lt;#DirList [#&gt;, &lt;#Options]#&gt;)</string>
		<string>tags:subdirs(DirList [, Options])</string>
		<string>tags:root</string>
		<string>tags:root(&lt;#[Options]#&gt;)</string>
		<string>tags:root([Options])</string>
		<string>test_server:os_type</string>
		<string>test_server:os_type()</string>
		<string>test_server:os_type() -&gt; OSType</string>
		<string>test_server:fail</string>
		<string>test_server:fail()</string>
		<string>test_server:fail()</string>
		<string>test_server:fail</string>
		<string>test_server:fail(&lt;#Reason#&gt;)</string>
		<string>test_server:fail(Reason)</string>
		<string>test_server:timetrap</string>
		<string>test_server:timetrap(&lt;#Timout#&gt;)</string>
		<string>test_server:timetrap(Timout) -&gt; Handle</string>
		<string>test_server:timetrap_cancel</string>
		<string>test_server:timetrap_cancel(&lt;#Handle#&gt;)</string>
		<string>test_server:timetrap_cancel(Handle) -&gt; ok</string>
		<string>test_server:timetrap_scale_factor</string>
		<string>test_server:timetrap_scale_factor()</string>
		<string>test_server:timetrap_scale_factor() -&gt; ScaleFactor</string>
		<string>test_server:sleep</string>
		<string>test_server:sleep(&lt;#MSecs#&gt;)</string>
		<string>test_server:sleep(MSecs) -&gt; ok</string>
		<string>test_server:adjusted_sleep</string>
		<string>test_server:adjusted_sleep(&lt;#MSecs#&gt;)</string>
		<string>test_server:adjusted_sleep(MSecs) -&gt; ok</string>
		<string>test_server:hours</string>
		<string>test_server:hours(&lt;#N#&gt;)</string>
		<string>test_server:hours(N) -&gt; MSecs</string>
		<string>test_server:minutes</string>
		<string>test_server:minutes(&lt;#N#&gt;)</string>
		<string>test_server:minutes(N) -&gt; MSecs</string>
		<string>test_server:seconds</string>
		<string>test_server:seconds(&lt;#N#&gt;)</string>
		<string>test_server:seconds(N) -&gt; MSecs</string>
		<string>test_server:format</string>
		<string>test_server:format(&lt;#Format#&gt;)</string>
		<string>test_server:format(Format) -&gt; ok</string>
		<string>test_server:format</string>
		<string>test_server:format(&lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>test_server:format(Format, Args)</string>
		<string>test_server:format</string>
		<string>test_server:format(&lt;#Pri#&gt;, &lt;#Format#&gt;)</string>
		<string>test_server:format(Pri, Format)</string>
		<string>test_server:format</string>
		<string>test_server:format(&lt;#Pri#&gt;, &lt;#Format#&gt;, &lt;#Args#&gt;)</string>
		<string>test_server:format(Pri, Format, Args)</string>
		<string>test_server:capture_start</string>
		<string>test_server:capture_start()</string>
		<string>test_server:capture_start() -&gt; ok</string>
		<string>test_server:capture_stop</string>
		<string>test_server:capture_stop()</string>
		<string>test_server:capture_stop() -&gt; ok</string>
		<string>test_server:capture_get</string>
		<string>test_server:capture_get()</string>
		<string>test_server:capture_get() -&gt; list()</string>
		<string>test_server:messages_get</string>
		<string>test_server:messages_get()</string>
		<string>test_server:messages_get() -&gt; list()</string>
		<string>test_server:timecall</string>
		<string>test_server:timecall(&lt;#M#&gt;, &lt;#F#&gt;, &lt;#A#&gt;)</string>
		<string>test_server:timecall(M, F, A) -&gt; {Time, Value}</string>
		<string>test_server:do_times</string>
		<string>test_server:do_times(&lt;#N#&gt;, &lt;#M#&gt;, &lt;#F#&gt;, &lt;#A#&gt;)</string>
		<string>test_server:do_times(N, M, F, A) -&gt; ok</string>
		<string>test_server:do_times</string>
		<string>test_server:do_times(&lt;#N#&gt;, &lt;#Fun#&gt;)</string>
		<string>test_server:do_times(N, Fun)</string>
		<string>test_server:m_out_of_n</string>
		<string>test_server:m_out_of_n(&lt;#M#&gt;, &lt;#N#&gt;, &lt;#Fun#&gt;)</string>
		<string>test_server:m_out_of_n(M, N, Fun) -&gt; ok | exit({m_out_of_n_failed, {R, left_to_do}}</string>
		<string>test_server:call_crash</string>
		<string>test_server:call_crash(&lt;#M#&gt;, &lt;#F#&gt;, &lt;#A#&gt;)</string>
		<string>test_server:call_crash(M, F, A) -&gt; Result</string>
		<string>test_server:call_crash</string>
		<string>test_server:call_crash(&lt;#Time#&gt;, &lt;#M#&gt;, &lt;#F#&gt;, &lt;#A#&gt;)</string>
		<string>test_server:call_crash(Time, M, F, A) -&gt; Result</string>
		<string>test_server:call_crash</string>
		<string>test_server:call_crash(&lt;#Time#&gt;, &lt;#Crash#&gt;, &lt;#M#&gt;, &lt;#F#&gt;, &lt;#A#&gt;)</string>
		<string>test_server:call_crash(Time, Crash, M, F, A) -&gt; Result</string>
		<string>test_server:temp_name</string>
		<string>test_server:temp_name(&lt;#Stem#&gt;)</string>
		<string>test_server:temp_name(Stem) -&gt; Name</string>
		<string>test_server:break</string>
		<string>test_server:break(&lt;#Comment#&gt;)</string>
		<string>test_server:break(Comment) -&gt; ok</string>
		<string>test_server:continue</string>
		<string>test_server:continue()</string>
		<string>test_server:continue() -&gt; ok</string>
		<string>test_server:run_on_shielded_node</string>
		<string>test_server:run_on_shielded_node(&lt;#Fun#&gt;, &lt;#CArgs#&gt;)</string>
		<string>test_server:run_on_shielded_node(Fun, CArgs) -&gt; term()</string>
		<string>test_server:start_node</string>
		<string>test_server:start_node(&lt;#Name#&gt;, &lt;#Type#&gt;, &lt;#Options#&gt;)</string>
		<string>test_server:start_node(Name, Type, Options) -&gt; {ok, Node} | {error, Reason}</string>
		<string>test_server:stop_node</string>
		<string>test_server:stop_node(&lt;#NodeName#&gt;)</string>
		<string>test_server:stop_node(NodeName) -&gt; bool()</string>
		<string>test_server:is_commercial</string>
		<string>test_server:is_commercial()</string>
		<string>test_server:is_commercial() -&gt; bool()</string>
		<string>test_server:is_release_available</string>
		<string>test_server:is_release_available(&lt;#Release#&gt;)</string>
		<string>test_server:is_release_available(Release) -&gt; bool()</string>
		<string>test_server:is_native</string>
		<string>test_server:is_native(&lt;#Mod#&gt;)</string>
		<string>test_server:is_native(Mod) -&gt; bool()</string>
		<string>test_server:app_test</string>
		<string>test_server:app_test(&lt;#App#&gt;)</string>
		<string>test_server:app_test(App) -&gt; ok | test_server:fail()</string>
		<string>test_server:app_test</string>
		<string>test_server:app_test(&lt;#App#&gt;, &lt;#Mode#&gt;)</string>
		<string>test_server:app_test(App, Mode)</string>
		<string>test_server:appup_test</string>
		<string>test_server:appup_test(&lt;#App#&gt;)</string>
		<string>test_server:appup_test(App) -&gt; ok | test_server:fail()</string>
		<string>test_server:comment</string>
		<string>test_server:comment(&lt;#Comment#&gt;)</string>
		<string>test_server:comment(Comment) -&gt; ok</string>
		<string>test_server_ctrl:start</string>
		<string>test_server_ctrl:start()</string>
		<string>test_server_ctrl:start() -&gt; Result</string>
		<string>test_server_ctrl:stop</string>
		<string>test_server_ctrl:stop()</string>
		<string>test_server_ctrl:stop() -&gt; ok</string>
		<string>test_server_ctrl:add_dir</string>
		<string>test_server_ctrl:add_dir(&lt;#Name#&gt;, &lt;#Dir#&gt;)</string>
		<string>test_server_ctrl:add_dir(Name, Dir) -&gt; ok</string>
		<string>test_server_ctrl:add_dir</string>
		<string>test_server_ctrl:add_dir(&lt;#Name#&gt;, &lt;#Dir#&gt;, &lt;#Pattern#&gt;)</string>
		<string>test_server_ctrl:add_dir(Name, Dir, Pattern) -&gt; ok</string>
		<string>test_server_ctrl:add_dir</string>
		<string>test_server_ctrl:add_dir(&lt;#Name#&gt;, &lt;#[Dir | Dirs]#&gt;)</string>
		<string>test_server_ctrl:add_dir(Name, [Dir | Dirs]) -&gt; ok</string>
		<string>test_server_ctrl:add_dir</string>
		<string>test_server_ctrl:add_dir(&lt;#Name#&gt;, &lt;#[Dir | Dirs]#&gt;, &lt;#Pattern#&gt;)</string>
		<string>test_server_ctrl:add_dir(Name, [Dir | Dirs], Pattern) -&gt; ok</string>
		<string>test_server_ctrl:add_module</string>
		<string>test_server_ctrl:add_module(&lt;#Mod#&gt;)</string>
		<string>test_server_ctrl:add_module(Mod) -&gt; ok</string>
		<string>test_server_ctrl:add_module</string>
		<string>test_server_ctrl:add_module(&lt;#Name#&gt;, &lt;#[Mod | Mods]#&gt;)</string>
		<string>test_server_ctrl:add_module(Name, [Mod | Mods]) -&gt; ok</string>
		<string>test_server_ctrl:add_case</string>
		<string>test_server_ctrl:add_case(&lt;#Mod#&gt;, &lt;#Case#&gt;)</string>
		<string>test_server_ctrl:add_case(Mod, Case) -&gt; ok</string>
		<string>test_server_ctrl:add_case</string>
		<string>test_server_ctrl:add_case(&lt;#Name#&gt;, &lt;#Mod#&gt;, &lt;#Case#&gt;)</string>
		<string>test_server_ctrl:add_case(Name, Mod, Case) -&gt; ok</string>
		<string>test_server_ctrl:add_cases</string>
		<string>test_server_ctrl:add_cases(&lt;#Mod#&gt;, &lt;#Cases#&gt;)</string>
		<string>test_server_ctrl:add_cases(Mod, Cases) -&gt; ok</string>
		<string>test_server_ctrl:add_cases</string>
		<string>test_server_ctrl:add_cases(&lt;#Name#&gt;, &lt;#Mod#&gt;, &lt;#Cases#&gt;)</string>
		<string>test_server_ctrl:add_cases(Name, Mod, Cases) -&gt; ok</string>
		<string>test_server_ctrl:add_spec</string>
		<string>test_server_ctrl:add_spec(&lt;#TestSpecFile#&gt;)</string>
		<string>test_server_ctrl:add_spec(TestSpecFile) -&gt; ok | {error, nofile}</string>
		<string>test_server_ctrl:add_dir_with_skip</string>
		<string>test_server_ctrl:add_dir_with_skip(&lt;#Name#&gt;, &lt;#[Dir | Dirs]#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_dir_with_skip(Name, [Dir | Dirs], Skip) -&gt; ok</string>
		<string>test_server_ctrl:add_dir_with_skip</string>
		<string>test_server_ctrl:add_dir_with_skip(&lt;#Name#&gt;, &lt;#[Dir | Dirs]#&gt;, &lt;#Pattern#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_dir_with_skip(Name, [Dir | Dirs], Pattern, Skip) -&gt; ok</string>
		<string>test_server_ctrl:add_module_with_skip</string>
		<string>test_server_ctrl:add_module_with_skip(&lt;#Mod#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_module_with_skip(Mod, Skip) -&gt; ok</string>
		<string>test_server_ctrl:add_module_with_skip</string>
		<string>test_server_ctrl:add_module_with_skip(&lt;#Name#&gt;, &lt;#[Mod | Mods]#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_module_with_skip(Name, [Mod | Mods], Skip) -&gt; ok</string>
		<string>test_server_ctrl:add_case_with_skip</string>
		<string>test_server_ctrl:add_case_with_skip(&lt;#Mod#&gt;, &lt;#Case#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_case_with_skip(Mod, Case, Skip) -&gt; ok</string>
		<string>test_server_ctrl:add_case_with_skip</string>
		<string>test_server_ctrl:add_case_with_skip(&lt;#Name#&gt;, &lt;#Mod#&gt;, &lt;#Case#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_case_with_skip(Name, Mod, Case, Skip) -&gt; ok</string>
		<string>test_server_ctrl:add_cases_with_skip</string>
		<string>test_server_ctrl:add_cases_with_skip(&lt;#Mod#&gt;, &lt;#Cases#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_cases_with_skip(Mod, Cases, Skip) -&gt; ok</string>
		<string>test_server_ctrl:add_cases_with_skip</string>
		<string>test_server_ctrl:add_cases_with_skip(&lt;#Name#&gt;, &lt;#Mod#&gt;, &lt;#Cases#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_cases_with_skip(Name, Mod, Cases, Skip) -&gt; ok</string>
		<string>test_server_ctrl:add_tests_with_skip</string>
		<string>test_server_ctrl:add_tests_with_skip(&lt;#Name#&gt;, &lt;#Tests#&gt;, &lt;#Skip#&gt;)</string>
		<string>test_server_ctrl:add_tests_with_skip(Name, Tests, Skip) -&gt; ok</string>
		<string>test_server_ctrl:abort_current_testcase</string>
		<string>test_server_ctrl:abort_current_testcase(&lt;#Reason#&gt;)</string>
		<string>test_server_ctrl:abort_current_testcase(Reason) -&gt; ok | {error, no_testcase_running}</string>
		<string>test_server_ctrl:set_levels</string>
		<string>test_server_ctrl:set_levels(&lt;#Console#&gt;, &lt;#Major#&gt;, &lt;#Minor#&gt;)</string>
		<string>test_server_ctrl:set_levels(Console, Major, Minor) -&gt; ok</string>
		<string>test_server_ctrl:get_levels</string>
		<string>test_server_ctrl:get_levels()</string>
		<string>test_server_ctrl:get_levels() -&gt; {Console, Major, Minor}</string>
		<string>test_server_ctrl:jobs</string>
		<string>test_server_ctrl:jobs()</string>
		<string>test_server_ctrl:jobs() -&gt; JobQueue</string>
		<string>test_server_ctrl:multiply_timetraps</string>
		<string>test_server_ctrl:multiply_timetraps(&lt;#N#&gt;)</string>
		<string>test_server_ctrl:multiply_timetraps(N) -&gt; ok</string>
		<string>test_server_ctrl:scale_timetraps</string>
		<string>test_server_ctrl:scale_timetraps(&lt;#Bool#&gt;)</string>
		<string>test_server_ctrl:scale_timetraps(Bool) -&gt; ok</string>
		<string>test_server_ctrl:get_timetrap_parameters</string>
		<string>test_server_ctrl:get_timetrap_parameters()</string>
		<string>test_server_ctrl:get_timetrap_parameters() -&gt; {N, Bool} </string>
		<string>test_server_ctrl:cover</string>
		<string>test_server_ctrl:cover(&lt;#Application#&gt;, &lt;#Analyse#&gt;)</string>
		<string>test_server_ctrl:cover(Application, Analyse) -&gt; ok</string>
		<string>test_server_ctrl:cover</string>
		<string>test_server_ctrl:cover(&lt;#CoverFile#&gt;, &lt;#Analyse#&gt;)</string>
		<string>test_server_ctrl:cover(CoverFile, Analyse) -&gt; ok</string>
		<string>test_server_ctrl:cover</string>
		<string>test_server_ctrl:cover(&lt;#App#&gt;, &lt;#CoverFile#&gt;, &lt;#Analyse#&gt;)</string>
		<string>test_server_ctrl:cover(App, CoverFile, Analyse) -&gt; ok</string>
		<string>test_server_ctrl:cross_cover_analyse</string>
		<string>test_server_ctrl:cross_cover_analyse(&lt;#Level#&gt;, &lt;#Tests#&gt;)</string>
		<string>test_server_ctrl:cross_cover_analyse(Level, Tests) -&gt; ok</string>
		<string>test_server_ctrl:trc</string>
		<string>test_server_ctrl:trc(&lt;#TraceInfoFile#&gt;)</string>
		<string>test_server_ctrl:trc(TraceInfoFile) -&gt; ok | {error, Reason}</string>
		<string>test_server_ctrl:stop_trace</string>
		<string>test_server_ctrl:stop_trace()</string>
		<string>test_server_ctrl:stop_trace() -&gt; ok | {error, not_tracing}</string>
		<string>tftp:start</string>
		<string>tftp:start(&lt;#Options#&gt;)</string>
		<string>tftp:start(Options) -&gt; {ok, Pid} | {error, Reason}</string>
		<string>tftp:read_file</string>
		<string>tftp:read_file(&lt;#RemoteFilename#&gt;, &lt;#LocalFilename#&gt;, &lt;#Options#&gt;)</string>
		<string>tftp:read_file(RemoteFilename, LocalFilename, Options) -&gt; {ok, LastCallbackState} | {error, Reason}</string>
		<string>tftp:write_file</string>
		<string>tftp:write_file(&lt;#RemoteFilename#&gt;, &lt;#LocalFilename#&gt;, &lt;#Options#&gt;)</string>
		<string>tftp:write_file(RemoteFilename, LocalFilename, Options) -&gt; {ok, LastCallbackState} | {error, Reason}</string>
		<string>tftp:info</string>
		<string>tftp:info(&lt;#daemons#&gt;)</string>
		<string>tftp:info(daemons) -&gt; [{Pid, Options}]</string>
		<string>tftp:info</string>
		<string>tftp:info(&lt;#servers#&gt;)</string>
		<string>tftp:info(servers) -&gt; [{Pid, Options}]</string>
		<string>tftp:info</string>
		<string>tftp:info(&lt;#Pid#&gt;)</string>
		<string>tftp:info(Pid) -&gt; {ok, Options} | {error, Reason}</string>
		<string>tftp:change_config</string>
		<string>tftp:change_config(&lt;#daemons#&gt;, &lt;#Options#&gt;)</string>
		<string>tftp:change_config(daemons, Options) -&gt; [{Pid, Result}]</string>
		<string>tftp:change_config</string>
		<string>tftp:change_config(&lt;#servers#&gt;, &lt;#Options#&gt;)</string>
		<string>tftp:change_config(servers, Options) -&gt; [{Pid, Result}]</string>
		<string>tftp:change_config</string>
		<string>tftp:change_config(&lt;#Pid#&gt;, &lt;#Options#&gt;)</string>
		<string>tftp:change_config(Pid, Options) -&gt; Result</string>
		<string>tftp:start</string>
		<string>tftp:start()</string>
		<string>tftp:start() -&gt; ok | {error, Reason}</string>
		<string>timer:apply_after</string>
		<string>timer:apply_after(&lt;#Time#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Arguments#&gt;)</string>
		<string>timer:apply_after(Time, Module, Function, Arguments) -&gt; {ok, TRef} | {error, Reason}</string>
		<string>timer:apply_interval</string>
		<string>timer:apply_interval(&lt;#Time#&gt;, &lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Arguments#&gt;)</string>
		<string>timer:apply_interval(Time, Module, Function, Arguments) -&gt; {ok, TRef} | {error, Reason}</string>
		<string>timer:cancel</string>
		<string>timer:cancel(&lt;#TRef#&gt;)</string>
		<string>timer:cancel(TRef) -&gt; {ok, cancel} | {error, Reason}</string>
		<string>timer:code_change</string>
		<string>timer:code_change(&lt;#OldVsn :: term()#&gt;, &lt;#State#&gt;, &lt;#Extra :: term()#&gt;)</string>
		<string>timer:code_change(OldVsn :: term(), State, Extra :: term()) -&gt; {ok, State}</string>
		<string>timer:exit_after</string>
		<string>timer:exit_after(&lt;#Time#&gt;, &lt;#Reason1#&gt;)</string>
		<string>timer:exit_after(Time, Reason1) -&gt; {ok, TRef} | {error, Reason2}</string>
		<string>timer:exit_after</string>
		<string>timer:exit_after(&lt;#Time#&gt;, &lt;#Pid#&gt;, &lt;#Reason1#&gt;)</string>
		<string>timer:exit_after(Time, Pid, Reason1) -&gt; {ok, TRef} | {error, Reason2}</string>
		<string>timer:get_status</string>
		<string>timer:get_status()</string>
		<string>timer:get_status() -&gt; {{timer_tab, integer() &gt;= 0}, {timer_interval_tab, integer() &gt;= 0}}</string>
		<string>timer:handle_call</string>
		<string>timer:handle_call(&lt;#Else :: term()#&gt;, &lt;#From :: term()#&gt;, &lt;#Ts :: timers()#&gt;)</string>
		<string>timer:handle_call(Else :: term(), From :: term(), Ts :: timers()) -&gt; {reply, term(), timers(), timeout()} | {noreply, timers(), timeout()}</string>
		<string>timer:handle_cast</string>
		<string>timer:handle_cast(&lt;#Req :: term()#&gt;, &lt;#Ts :: timers()#&gt;)</string>
		<string>timer:handle_cast(Req :: term(), Ts :: timers()) -&gt; {noreply, timers(), timeout()}</string>
		<string>timer:handle_info</string>
		<string>timer:handle_info(&lt;#OtherMsg :: term()#&gt;, &lt;#Ts :: timers()#&gt;)</string>
		<string>timer:handle_info(OtherMsg :: term(), Ts :: timers()) -&gt; {noreply, timers(), timeout()}</string>
		<string>timer:hms</string>
		<string>timer:hms(&lt;#Hours#&gt;, &lt;#Minutes#&gt;, &lt;#Seconds#&gt;)</string>
		<string>timer:hms(Hours, Minutes, Seconds) -&gt; MilliSeconds</string>
		<string>timer:hours</string>
		<string>timer:hours(&lt;#Hours#&gt;)</string>
		<string>timer:hours(Hours) -&gt; MilliSeconds</string>
		<string>timer:init</string>
		<string>timer:init(&lt;#X1 :: []#&gt;)</string>
		<string>timer:init(X1 :: []) -&gt; {ok, [], infinity}</string>
		<string>timer:kill_after</string>
		<string>timer:kill_after(&lt;#Time#&gt;)</string>
		<string>timer:kill_after(Time) -&gt; {ok, TRef} | {error, Reason2}</string>
		<string>timer:kill_after</string>
		<string>timer:kill_after(&lt;#Time#&gt;, &lt;#Pid#&gt;)</string>
		<string>timer:kill_after(Time, Pid) -&gt; {ok, TRef} | {error, Reason2}</string>
		<string>timer:minutes</string>
		<string>timer:minutes(&lt;#Minutes#&gt;)</string>
		<string>timer:minutes(Minutes) -&gt; MilliSeconds</string>
		<string>timer:now_diff</string>
		<string>timer:now_diff(&lt;#T2#&gt;, &lt;#T1#&gt;)</string>
		<string>timer:now_diff(T2, T1) -&gt; Tdiff</string>
		<string>timer:seconds</string>
		<string>timer:seconds(&lt;#Seconds#&gt;)</string>
		<string>timer:seconds(Seconds) -&gt; MilliSeconds</string>
		<string>timer:send_after</string>
		<string>timer:send_after(&lt;#Time#&gt;, &lt;#Message#&gt;)</string>
		<string>timer:send_after(Time, Message) -&gt; {ok, TRef} | {error, Reason}</string>
		<string>timer:send_after</string>
		<string>timer:send_after(&lt;#Time#&gt;, &lt;#Pid#&gt;, &lt;#Message#&gt;)</string>
		<string>timer:send_after(Time, Pid, Message) -&gt; {ok, TRef} | {error, Reason}</string>
		<string>timer:send_interval</string>
		<string>timer:send_interval(&lt;#Time#&gt;, &lt;#Message#&gt;)</string>
		<string>timer:send_interval(Time, Message) -&gt; {ok, TRef} | {error, Reason}</string>
		<string>timer:send_interval</string>
		<string>timer:send_interval(&lt;#Time#&gt;, &lt;#Pid#&gt;, &lt;#Message#&gt;)</string>
		<string>timer:send_interval(Time, Pid, Message) -&gt; {ok, TRef} | {error, Reason}</string>
		<string>timer:sleep</string>
		<string>timer:sleep(&lt;#Time#&gt;)</string>
		<string>timer:sleep(Time) -&gt; ok</string>
		<string>timer:start</string>
		<string>timer:start()</string>
		<string>timer:start() -&gt; ok</string>
		<string>timer:start_link</string>
		<string>timer:start_link()</string>
		<string>timer:start_link() -&gt; {ok, pid()} | {error, term()}</string>
		<string>timer:tc</string>
		<string>timer:tc(&lt;#Fun#&gt;)</string>
		<string>timer:tc(Fun) -&gt; {Time, Value}</string>
		<string>timer:tc</string>
		<string>timer:tc(&lt;#Fun#&gt;, &lt;#Arguments#&gt;)</string>
		<string>timer:tc(Fun, Arguments) -&gt; {Time, Value}</string>
		<string>timer:tc</string>
		<string>timer:tc(&lt;#Module#&gt;, &lt;#Function#&gt;, &lt;#Arguments#&gt;)</string>
		<string>timer:tc(Module, Function, Arguments) -&gt; {Time, Value}</string>
		<string>timer:terminate</string>
		<string>timer:terminate(&lt;#Reason :: term()#&gt;, &lt;#_State#&gt;)</string>
		<string>timer:terminate(Reason :: term(), _State) -&gt; ok</string>
		<string>ts:install</string>
		<string>ts:install()</string>
		<string>ts:install() -&gt; ok | {error, Reason}</string>
		<string>ts:install</string>
		<string>ts:install(&lt;#TargetSystem#&gt;)</string>
		<string>ts:install(TargetSystem) -&gt; ok | {error, Reason}</string>
		<string>ts:install</string>
		<string>ts:install(&lt;#Opts#&gt;)</string>
		<string>ts:install(Opts) -&gt; ok | {error, Reason}</string>
		<string>ts:install</string>
		<string>ts:install(&lt;#TargetSystem#&gt;, &lt;#Opts#&gt;)</string>
		<string>ts:install(TargetSystem, Opts) -&gt; ok | {error, Reason}</string>
		<string>ts:help</string>
		<string>ts:help()</string>
		<string>ts:help() -&gt; ok</string>
		<string>ts:tests</string>
		<string>ts:tests()</string>
		<string>ts:tests() -&gt; Tests</string>
		<string>ts:run</string>
		<string>ts:run()</string>
		<string>ts:run() -&gt; ok | {error, Reason}</string>
		<string>ts:run</string>
		<string>ts:run(&lt;#[all_tests | Opts]#&gt;)</string>
		<string>ts:run([all_tests | Opts])</string>
		<string>ts:run</string>
		<string>ts:run(&lt;#Specs#&gt;)</string>
		<string>ts:run(Specs)</string>
		<string>ts:run</string>
		<string>ts:run(&lt;#Specs#&gt;, &lt;#Opts#&gt;)</string>
		<string>ts:run(Specs, Opts)</string>
		<string>ts:run</string>
		<string>ts:run(&lt;#Spec#&gt;, &lt;#Module#&gt;)</string>
		<string>ts:run(Spec, Module)</string>
		<string>ts:run</string>
		<string>ts:run(&lt;#Spec#&gt;, &lt;#Module#&gt;, &lt;#Opts#&gt;)</string>
		<string>ts:run(Spec, Module, Opts)</string>
		<string>ts:run</string>
		<string>ts:run(&lt;#Spec#&gt;, &lt;#Module#&gt;, &lt;#Case#&gt;)</string>
		<string>ts:run(Spec, Module, Case)</string>
		<string>ts:run</string>
		<string>ts:run(&lt;#Spec#&gt;, &lt;#Module#&gt;, &lt;#Case#&gt;, &lt;#Opts#&gt;)</string>
		<string>ts:run(Spec, Module, Case, Opts)</string>
		<string>ts:cross_cover_analyse</string>
		<string>ts:cross_cover_analyse(&lt;#Level#&gt;)</string>
		<string>ts:cross_cover_analyse(Level) -&gt; ok</string>
		<string>ts:cross_cover_analyse</string>
		<string>ts:cross_cover_analyse(&lt;#[Level]#&gt;)</string>
		<string>ts:cross_cover_analyse([Level]) -&gt; ok</string>
		<string>ts:r</string>
		<string>ts:r()</string>
		<string>ts:r() -&gt; ok</string>
		<string>ts:r</string>
		<string>ts:r(&lt;#Opts#&gt;)</string>
		<string>ts:r(Opts) -&gt; ok</string>
		<string>ts:r</string>
		<string>ts:r(&lt;#SpecOrSuite#&gt;)</string>
		<string>ts:r(SpecOrSuite) -&gt; ok</string>
		<string>ts:r</string>
		<string>ts:r(&lt;#SpecOrSuite#&gt;, &lt;#Opts#&gt;)</string>
		<string>ts:r(SpecOrSuite, Opts) -&gt; ok</string>
		<string>ts:r</string>
		<string>ts:r(&lt;#Suite#&gt;, &lt;#Case#&gt;)</string>
		<string>ts:r(Suite, Case) -&gt; ok</string>
		<string>ts:r</string>
		<string>ts:r(&lt;#Suite#&gt;, &lt;#Case#&gt;, &lt;#Opts#&gt;)</string>
		<string>ts:r(Suite, Case, Opts) -&gt; ok</string>
		<string>ts:estone</string>
		<string>ts:estone()</string>
		<string>ts:estone() -&gt; ok | {error, Reason}</string>
		<string>ts:estone</string>
		<string>ts:estone(&lt;#Opts#&gt;)</string>
		<string>ts:estone(Opts) -&gt; ok</string>
		<string>ttb:start_trace</string>
		<string>ttb:start_trace(&lt;#Nodes#&gt;, &lt;#Patterns#&gt;, &lt;#FlagSpec#&gt;, &lt;#Opts#&gt;)</string>
		<string>ttb:start_trace(Nodes, Patterns, FlagSpec, Opts) -&gt; Result</string>
		<string>ttb:tracer</string>
		<string>ttb:tracer()</string>
		<string>ttb:tracer() -&gt; Result</string>
		<string>ttb:tracer</string>
		<string>ttb:tracer(&lt;#Shortcut#&gt;)</string>
		<string>ttb:tracer(Shortcut) -&gt; Result</string>
		<string>ttb:tracer</string>
		<string>ttb:tracer(&lt;#Nodes#&gt;)</string>
		<string>ttb:tracer(Nodes) -&gt; Result</string>
		<string>ttb:tracer</string>
		<string>ttb:tracer(&lt;#Nodes#&gt;, &lt;#Opts#&gt;)</string>
		<string>ttb:tracer(Nodes, Opts) -&gt; Result</string>
		<string>ttb:p</string>
		<string>ttb:p(&lt;#Procs#&gt;, &lt;#Flags#&gt;)</string>
		<string>ttb:p(Procs, Flags) -&gt; Return</string>
		<string>ttb:list_history</string>
		<string>ttb:list_history()</string>
		<string>ttb:list_history() -&gt; History</string>
		<string>ttb:run_history</string>
		<string>ttb:run_history(&lt;#N#&gt;)</string>
		<string>ttb:run_history(N) -&gt; ok | {error, Reason}</string>
		<string>ttb:write_config</string>
		<string>ttb:write_config(&lt;#ConfigFile#&gt;, &lt;#Config#&gt;)</string>
		<string>ttb:write_config(ConfigFile, Config)</string>
		<string>ttb:write_config</string>
		<string>ttb:write_config(&lt;#ConfigFile#&gt;, &lt;#Config#&gt;, &lt;#Opts#&gt;)</string>
		<string>ttb:write_config(ConfigFile, Config, Opts) -&gt; ok | {error, Reason}</string>
		<string>ttb:run_config</string>
		<string>ttb:run_config(&lt;#ConfigFile#&gt;)</string>
		<string>ttb:run_config(ConfigFile) -&gt; ok | {error, Reason}</string>
		<string>ttb:run_config</string>
		<string>ttb:run_config(&lt;#ConfigFile#&gt;, &lt;#NumList#&gt;)</string>
		<string>ttb:run_config(ConfigFile, NumList) -&gt; ok | {error, Reason}</string>
		<string>ttb:list_config</string>
		<string>ttb:list_config(&lt;#ConfigFile#&gt;)</string>
		<string>ttb:list_config(ConfigFile) -&gt; Config | {error, Reason}</string>
		<string>ttb:write_trace_info</string>
		<string>ttb:write_trace_info(&lt;#Key#&gt;, &lt;#Info#&gt;)</string>
		<string>ttb:write_trace_info(Key, Info) -&gt; ok</string>
		<string>ttb:seq_trigger_ms</string>
		<string>ttb:seq_trigger_ms()</string>
		<string>ttb:seq_trigger_ms() -&gt; MatchSpec</string>
		<string>ttb:seq_trigger_ms</string>
		<string>ttb:seq_trigger_ms(&lt;#Flags#&gt;)</string>
		<string>ttb:seq_trigger_ms(Flags) -&gt; MatchSpec</string>
		<string>ttb:stop</string>
		<string>ttb:stop()</string>
		<string>ttb:stop()</string>
		<string>ttb:stop</string>
		<string>ttb:stop(&lt;#Opts#&gt;)</string>
		<string>ttb:stop(Opts) -&gt; stopped | {stopped, Dir}</string>
		<string>ttb:get_et_handler</string>
		<string>ttb:get_et_handler()</string>
		<string>ttb:get_et_handler()</string>
		<string>ttb:format</string>
		<string>ttb:format(&lt;#File#&gt;)</string>
		<string>ttb:format(File)</string>
		<string>ttb:format</string>
		<string>ttb:format(&lt;#File#&gt;, &lt;#Options#&gt;)</string>
		<string>ttb:format(File, Options) -&gt; ok | {error, Reason}</string>
		<string>unicode:bin_is_7bit</string>
		<string>unicode:bin_is_7bit(&lt;#Binary#&gt;)</string>
		<string>unicode:bin_is_7bit(Binary) -&gt; boolean()</string>
		<string>unicode:bom_to_encoding</string>
		<string>unicode:bom_to_encoding(&lt;#Bin#&gt;)</string>
		<string>unicode:bom_to_encoding(Bin) -&gt; {Encoding, Length}</string>
		<string>unicode:characters_to_binary</string>
		<string>unicode:characters_to_binary(&lt;#Data#&gt;)</string>
		<string>unicode:characters_to_binary(Data) -&gt; Result</string>
		<string>unicode:characters_to_binary</string>
		<string>unicode:characters_to_binary(&lt;#Data#&gt;, &lt;#InEncoding#&gt;)</string>
		<string>unicode:characters_to_binary(Data, InEncoding) -&gt; Result</string>
		<string>unicode:characters_to_binary</string>
		<string>unicode:characters_to_binary(&lt;#Data#&gt;, &lt;#InEncoding#&gt;, &lt;#OutEncoding#&gt;)</string>
		<string>unicode:characters_to_binary(Data, InEncoding, OutEncoding) -&gt; Result</string>
		<string>unicode:characters_to_list</string>
		<string>unicode:characters_to_list(&lt;#Data#&gt;)</string>
		<string>unicode:characters_to_list(Data) -&gt; Result</string>
		<string>unicode:characters_to_list</string>
		<string>unicode:characters_to_list(&lt;#Data#&gt;, &lt;#InEncoding#&gt;)</string>
		<string>unicode:characters_to_list(Data, InEncoding) -&gt; Result</string>
		<string>unicode:encoding_to_bom</string>
		<string>unicode:encoding_to_bom(&lt;#InEncoding#&gt;)</string>
		<string>unicode:encoding_to_bom(InEncoding) -&gt; Bin</string>
		<string>unix_telnet:connect</string>
		<string>unix_telnet:connect(&lt;#ConnName#&gt;, &lt;#Ip#&gt;, &lt;#Port#&gt;, &lt;#Timeout#&gt;, &lt;#KeepAlive#&gt;, &lt;#Extra#&gt;)</string>
		<string>unix_telnet:connect(ConnName, Ip, Port, Timeout, KeepAlive, Extra) -&gt; {ok, Handle} | {error, Reason}</string>
		<string>unix_telnet:get_prompt_regexp</string>
		<string>unix_telnet:get_prompt_regexp()</string>
		<string>unix_telnet:get_prompt_regexp() -&gt; PromptRegexp</string>
		<string>webtool:start</string>
		<string>webtool:start()</string>
		<string>webtool:start() -&gt; {ok, Pid} | {stop, Reason}</string>
		<string>webtool:start</string>
		<string>webtool:start(&lt;#Path#&gt;, &lt;#Data#&gt;)</string>
		<string>webtool:start(Path, Data) -&gt; {ok, Pid} | {stop, Reason}</string>
		<string>webtool:stop</string>
		<string>webtool:stop()</string>
		<string>webtool:stop() -&gt; void</string>
		<string>webtool:debug_app</string>
		<string>webtool:debug_app(&lt;#Module#&gt;)</string>
		<string>webtool:debug_app(Module) -&gt; void</string>
		<string>webtool:stop_debug</string>
		<string>webtool:stop_debug()</string>
		<string>webtool:stop_debug() -&gt; void</string>
		<string>win32reg:change_key</string>
		<string>win32reg:change_key(&lt;#RegHandle#&gt;, &lt;#Key#&gt;)</string>
		<string>win32reg:change_key(RegHandle, Key) -&gt; ReturnValue</string>
		<string>win32reg:change_key_create</string>
		<string>win32reg:change_key_create(&lt;#RegHandle#&gt;, &lt;#Key#&gt;)</string>
		<string>win32reg:change_key_create(RegHandle, Key) -&gt; ReturnValue</string>
		<string>win32reg:close</string>
		<string>win32reg:close(&lt;#RegHandle#&gt;)</string>
		<string>win32reg:close(RegHandle) -&gt; ok</string>
		<string>win32reg:current_key</string>
		<string>win32reg:current_key(&lt;#RegHandle#&gt;)</string>
		<string>win32reg:current_key(RegHandle) -&gt; ReturnValue</string>
		<string>win32reg:delete_key</string>
		<string>win32reg:delete_key(&lt;#RegHandle#&gt;)</string>
		<string>win32reg:delete_key(RegHandle) -&gt; ReturnValue</string>
		<string>win32reg:delete_value</string>
		<string>win32reg:delete_value(&lt;#RegHandle#&gt;, &lt;#Name#&gt;)</string>
		<string>win32reg:delete_value(RegHandle, Name) -&gt; ReturnValue</string>
		<string>win32reg:expand</string>
		<string>win32reg:expand(&lt;#String#&gt;)</string>
		<string>win32reg:expand(String) -&gt; ExpandedString</string>
		<string>win32reg:format_error</string>
		<string>win32reg:format_error(&lt;#ErrorId#&gt;)</string>
		<string>win32reg:format_error(ErrorId) -&gt; ErrorString</string>
		<string>win32reg:open</string>
		<string>win32reg:open(&lt;#OpenModeList#&gt;)</string>
		<string>win32reg:open(OpenModeList) -&gt; ReturnValue</string>
		<string>win32reg:set_value</string>
		<string>win32reg:set_value(&lt;#RegHandle#&gt;, &lt;#Name#&gt;, &lt;#Value#&gt;)</string>
		<string>win32reg:set_value(RegHandle, Name, Value) -&gt; ReturnValue</string>
		<string>win32reg:sub_keys</string>
		<string>win32reg:sub_keys(&lt;#RegHandle#&gt;)</string>
		<string>win32reg:sub_keys(RegHandle) -&gt; ReturnValue</string>
		<string>win32reg:value</string>
		<string>win32reg:value(&lt;#RegHandle#&gt;, &lt;#Name#&gt;)</string>
		<string>win32reg:value(RegHandle, Name) -&gt; ReturnValue</string>
		<string>win32reg:values</string>
		<string>win32reg:values(&lt;#RegHandle#&gt;)</string>
		<string>win32reg:values(RegHandle) -&gt; ReturnValue</string>
		<string>wrap_log_reader:chunk</string>
		<string>wrap_log_reader:chunk(&lt;#Continuation#&gt;)</string>
		<string>wrap_log_reader:chunk(Continuation) -&gt; chunk_ret()</string>
		<string>wrap_log_reader:chunk</string>
		<string>wrap_log_reader:chunk(&lt;#Continuation#&gt;, &lt;#N#&gt;)</string>
		<string>wrap_log_reader:chunk(Continuation, N) -&gt; chunk_ret()</string>
		<string>wrap_log_reader:close</string>
		<string>wrap_log_reader:close(&lt;#Continuation#&gt;)</string>
		<string>wrap_log_reader:close(Continuation) -&gt; ok | {error, Reason}</string>
		<string>wrap_log_reader:open</string>
		<string>wrap_log_reader:open(&lt;#Filename#&gt;)</string>
		<string>wrap_log_reader:open(Filename) -&gt; open_ret()</string>
		<string>wrap_log_reader:open</string>
		<string>wrap_log_reader:open(&lt;#Filename#&gt;, &lt;#N#&gt;)</string>
		<string>wrap_log_reader:open(Filename, N) -&gt; open_ret()</string>
		<string>wx:parent_class</string>
		<string>wx:parent_class(&lt;#X1#&gt;)</string>
		<string>wx:parent_class(X1) -&gt; term()</string>
		<string>wx:new</string>
		<string>wx:new()</string>
		<string>wx:new() -&gt; wx_object()</string>
		<string>wx:new</string>
		<string>wx:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wx:new(Option::[Option]) -&gt; wx_object()</string>
		<string>wx:destroy</string>
		<string>wx:destroy()</string>
		<string>wx:destroy() -&gt; ok</string>
		<string>wx:get_env</string>
		<string>wx:get_env()</string>
		<string>wx:get_env() -&gt; wx_env()</string>
		<string>wx:set_env</string>
		<string>wx:set_env(&lt;#Wx_env::wx_env()#&gt;)</string>
		<string>wx:set_env(Wx_env::wx_env()) -&gt; ok</string>
		<string>wx:null</string>
		<string>wx:null()</string>
		<string>wx:null() -&gt; wx_object()</string>
		<string>wx:is_null</string>
		<string>wx:is_null(&lt;#Wx_ref::wx_object()#&gt;)</string>
		<string>wx:is_null(Wx_ref::wx_object()) -&gt; boolean()</string>
		<string>wx:getObjectType</string>
		<string>wx:getObjectType(&lt;#Wx_ref::wx_object()#&gt;)</string>
		<string>wx:getObjectType(Wx_ref::wx_object()) -&gt; atom()</string>
		<string>wx:typeCast</string>
		<string>wx:typeCast(&lt;#Old::wx_object()#&gt;, &lt;#NewType::atom()#&gt;)</string>
		<string>wx:typeCast(Old::wx_object(), NewType::atom()) -&gt; wx_object()</string>
		<string>wx:batch</string>
		<string>wx:batch(&lt;#Fun::function()#&gt;)</string>
		<string>wx:batch(Fun::function()) -&gt; term()</string>
		<string>wx:foreach</string>
		<string>wx:foreach(&lt;#Fun::function()#&gt;, &lt;#List::list()#&gt;)</string>
		<string>wx:foreach(Fun::function(), List::list()) -&gt; ok</string>
		<string>wx:map</string>
		<string>wx:map(&lt;#Fun::function()#&gt;, &lt;#List::list()#&gt;)</string>
		<string>wx:map(Fun::function(), List::list()) -&gt; list()</string>
		<string>wx:foldl</string>
		<string>wx:foldl(&lt;#Fun::function()#&gt;, &lt;#Acc::term()#&gt;, &lt;#List::list()#&gt;)</string>
		<string>wx:foldl(Fun::function(), Acc::term(), List::list()) -&gt; term()</string>
		<string>wx:foldr</string>
		<string>wx:foldr(&lt;#Fun::function()#&gt;, &lt;#Acc::term()#&gt;, &lt;#List::list()#&gt;)</string>
		<string>wx:foldr(Fun::function(), Acc::term(), List::list()) -&gt; term()</string>
		<string>wx:create_memory</string>
		<string>wx:create_memory(&lt;#Size::integer()#&gt;)</string>
		<string>wx:create_memory(Size::integer()) -&gt; wx_memory()</string>
		<string>wx:get_memory_bin</string>
		<string>wx:get_memory_bin(&lt;#Wx_mem::wx_memory()#&gt;)</string>
		<string>wx:get_memory_bin(Wx_mem::wx_memory()) -&gt; binary()</string>
		<string>wx:retain_memory</string>
		<string>wx:retain_memory(&lt;#Wx_mem::wx_memory()#&gt;)</string>
		<string>wx:retain_memory(Wx_mem::wx_memory()) -&gt; ok</string>
		<string>wx:release_memory</string>
		<string>wx:release_memory(&lt;#Wx_mem::wx_memory()#&gt;)</string>
		<string>wx:release_memory(Wx_mem::wx_memory()) -&gt; ok</string>
		<string>wx:debug</string>
		<string>wx:debug(&lt;#Debug::Level | [Level]#&gt;)</string>
		<string>wx:debug(Debug::Level | [Level]) -&gt; ok</string>
		<string>wx:demo</string>
		<string>wx:demo()</string>
		<string>wx:demo() -&gt; ok | {error, atom()}</string>
		<string>wx_misc:getKeyState</string>
		<string>wx_misc:getKeyState(&lt;#Key#&gt;)</string>
		<string>wx_misc:getKeyState(Key) -&gt; boolean()</string>
		<string>wx_misc:getMousePosition</string>
		<string>wx_misc:getMousePosition()</string>
		<string>wx_misc:getMousePosition() -&gt; {X::integer(), Y::integer()}</string>
		<string>wx_misc:getMouseState</string>
		<string>wx_misc:getMouseState()</string>
		<string>wx_misc:getMouseState() -&gt; wx_wxMouseState() (see module wx)</string>
		<string>wx_misc:setDetectableAutoRepeat</string>
		<string>wx_misc:setDetectableAutoRepeat(&lt;#Flag#&gt;)</string>
		<string>wx_misc:setDetectableAutoRepeat(Flag) -&gt; boolean()</string>
		<string>wx_misc:bell</string>
		<string>wx_misc:bell()</string>
		<string>wx_misc:bell() -&gt; ok</string>
		<string>wx_misc:findMenuItemId</string>
		<string>wx_misc:findMenuItemId(&lt;#Frame#&gt;, &lt;#MenuString#&gt;, &lt;#ItemString#&gt;)</string>
		<string>wx_misc:findMenuItemId(Frame, MenuString, ItemString) -&gt; integer()</string>
		<string>wx_misc:genericFindWindowAtPoint</string>
		<string>wx_misc:genericFindWindowAtPoint(&lt;#Pt#&gt;)</string>
		<string>wx_misc:genericFindWindowAtPoint(Pt) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wx_misc:findWindowAtPoint</string>
		<string>wx_misc:findWindowAtPoint(&lt;#Pt#&gt;)</string>
		<string>wx_misc:findWindowAtPoint(Pt) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wx_misc:beginBusyCursor</string>
		<string>wx_misc:beginBusyCursor()</string>
		<string>wx_misc:beginBusyCursor() -&gt; ok</string>
		<string>wx_misc:beginBusyCursor</string>
		<string>wx_misc:beginBusyCursor(&lt;#Option::[Option]#&gt;)</string>
		<string>wx_misc:beginBusyCursor(Option::[Option]) -&gt; ok</string>
		<string>wx_misc:endBusyCursor</string>
		<string>wx_misc:endBusyCursor()</string>
		<string>wx_misc:endBusyCursor() -&gt; ok</string>
		<string>wx_misc:isBusy</string>
		<string>wx_misc:isBusy()</string>
		<string>wx_misc:isBusy() -&gt; boolean()</string>
		<string>wx_misc:shutdown</string>
		<string>wx_misc:shutdown(&lt;#WFlags#&gt;)</string>
		<string>wx_misc:shutdown(WFlags) -&gt; boolean()</string>
		<string>wx_misc:shell</string>
		<string>wx_misc:shell()</string>
		<string>wx_misc:shell() -&gt; boolean()</string>
		<string>wx_misc:shell</string>
		<string>wx_misc:shell(&lt;#Option::[Option]#&gt;)</string>
		<string>wx_misc:shell(Option::[Option]) -&gt; boolean()</string>
		<string>wx_misc:launchDefaultBrowser</string>
		<string>wx_misc:launchDefaultBrowser(&lt;#Url#&gt;)</string>
		<string>wx_misc:launchDefaultBrowser(Url) -&gt; boolean()</string>
		<string>wx_misc:launchDefaultBrowser</string>
		<string>wx_misc:launchDefaultBrowser(&lt;#Url#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wx_misc:launchDefaultBrowser(Url, Option::[Option]) -&gt; boolean()</string>
		<string>wx_misc:getEmailAddress</string>
		<string>wx_misc:getEmailAddress()</string>
		<string>wx_misc:getEmailAddress() -&gt; charlist() (see module unicode)</string>
		<string>wx_misc:getUserId</string>
		<string>wx_misc:getUserId()</string>
		<string>wx_misc:getUserId() -&gt; charlist() (see module unicode)</string>
		<string>wx_misc:getHomeDir</string>
		<string>wx_misc:getHomeDir()</string>
		<string>wx_misc:getHomeDir() -&gt; charlist() (see module unicode)</string>
		<string>wx_misc:newId</string>
		<string>wx_misc:newId()</string>
		<string>wx_misc:newId() -&gt; integer()</string>
		<string>wx_misc:registerId</string>
		<string>wx_misc:registerId(&lt;#Id#&gt;)</string>
		<string>wx_misc:registerId(Id) -&gt; ok</string>
		<string>wx_misc:getCurrentId</string>
		<string>wx_misc:getCurrentId()</string>
		<string>wx_misc:getCurrentId() -&gt; integer()</string>
		<string>wx_misc:getOsDescription</string>
		<string>wx_misc:getOsDescription()</string>
		<string>wx_misc:getOsDescription() -&gt; charlist() (see module unicode)</string>
		<string>wx_misc:isPlatformLittleEndian</string>
		<string>wx_misc:isPlatformLittleEndian()</string>
		<string>wx_misc:isPlatformLittleEndian() -&gt; boolean()</string>
		<string>wx_misc:isPlatform64Bit</string>
		<string>wx_misc:isPlatform64Bit()</string>
		<string>wx_misc:isPlatform64Bit() -&gt; boolean()</string>
		<string>wx_misc:displaySize</string>
		<string>wx_misc:displaySize()</string>
		<string>wx_misc:displaySize() -&gt; {Width::integer(), Height::integer()}</string>
		<string>wx_misc:setCursor</string>
		<string>wx_misc:setCursor(&lt;#Cursor#&gt;)</string>
		<string>wx_misc:setCursor(Cursor) -&gt; ok</string>
		<string>wx_object:start</string>
		<string>wx_object:start(&lt;#Name#&gt;, &lt;#Mod#&gt;, &lt;#Args#&gt;, &lt;#Options#&gt;)</string>
		<string>wx_object:start(Name, Mod, Args, Options) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wx_object:start_link</string>
		<string>wx_object:start_link(&lt;#Mod#&gt;, &lt;#Args#&gt;, &lt;#Options#&gt;)</string>
		<string>wx_object:start_link(Mod, Args, Options) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wx_object:start_link</string>
		<string>wx_object:start_link(&lt;#Name#&gt;, &lt;#Mod#&gt;, &lt;#Args#&gt;, &lt;#Options#&gt;)</string>
		<string>wx_object:start_link(Name, Mod, Args, Options) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wx_object:call</string>
		<string>wx_object:call(&lt;#Ref::wxObject() | atom() | pid()#&gt;, &lt;#Request::term()#&gt;)</string>
		<string>wx_object:call(Ref::wxObject() | atom() | pid(), Request::term()) -&gt; term()</string>
		<string>wx_object:call</string>
		<string>wx_object:call(&lt;#Ref::wxObject() | atom() | pid()#&gt;, &lt;#Request::term()#&gt;, &lt;#Timeout::integer()#&gt;)</string>
		<string>wx_object:call(Ref::wxObject() | atom() | pid(), Request::term(), Timeout::integer()) -&gt; term()</string>
		<string>wx_object:cast</string>
		<string>wx_object:cast(&lt;#Ref::wxObject() | atom() | pid()#&gt;, &lt;#Request::term()#&gt;)</string>
		<string>wx_object:cast(Ref::wxObject() | atom() | pid(), Request::term()) -&gt; ok</string>
		<string>wx_object:get_pid</string>
		<string>wx_object:get_pid(&lt;#Ref::wxObject()#&gt;)</string>
		<string>wx_object:get_pid(Ref::wxObject()) -&gt; pid()</string>
		<string>wx_object:reply</string>
		<string>wx_object:reply(&lt;#From::tuple()#&gt;, &lt;#Reply::term()#&gt;)</string>
		<string>wx_object:reply(From::tuple(), Reply::term()) -&gt; pid()</string>
		<string>wxAcceleratorEntry:new</string>
		<string>wxAcceleratorEntry:new()</string>
		<string>wxAcceleratorEntry:new() -&gt; wxAcceleratorEntry()</string>
		<string>wxAcceleratorEntry:new</string>
		<string>wxAcceleratorEntry:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxAcceleratorEntry:new(Option::[Option]) -&gt; wxAcceleratorEntry()</string>
		<string>wxAcceleratorEntry:getCommand</string>
		<string>wxAcceleratorEntry:getCommand(&lt;#This#&gt;)</string>
		<string>wxAcceleratorEntry:getCommand(This) -&gt; integer()</string>
		<string>wxAcceleratorEntry:getFlags</string>
		<string>wxAcceleratorEntry:getFlags(&lt;#This#&gt;)</string>
		<string>wxAcceleratorEntry:getFlags(This) -&gt; integer()</string>
		<string>wxAcceleratorEntry:getKeyCode</string>
		<string>wxAcceleratorEntry:getKeyCode(&lt;#This#&gt;)</string>
		<string>wxAcceleratorEntry:getKeyCode(This) -&gt; integer()</string>
		<string>wxAcceleratorEntry:set</string>
		<string>wxAcceleratorEntry:set(&lt;#This#&gt;, &lt;#Flags#&gt;, &lt;#KeyCode#&gt;, &lt;#Cmd#&gt;)</string>
		<string>wxAcceleratorEntry:set(This, Flags, KeyCode, Cmd) -&gt; ok</string>
		<string>wxAcceleratorEntry:set</string>
		<string>wxAcceleratorEntry:set(&lt;#This#&gt;, &lt;#Flags#&gt;, &lt;#KeyCode#&gt;, &lt;#Cmd#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAcceleratorEntry:set(This, Flags, KeyCode, Cmd, Option::[Option]) -&gt; ok</string>
		<string>wxAcceleratorEntry:destroy</string>
		<string>wxAcceleratorEntry:destroy(&lt;#This::wxAcceleratorEntry()#&gt;)</string>
		<string>wxAcceleratorEntry:destroy(This::wxAcceleratorEntry()) -&gt; ok</string>
		<string>wxAcceleratorTable:new</string>
		<string>wxAcceleratorTable:new()</string>
		<string>wxAcceleratorTable:new() -&gt; wxAcceleratorTable()</string>
		<string>wxAcceleratorTable:new</string>
		<string>wxAcceleratorTable:new(&lt;#N#&gt;, &lt;#Entries#&gt;)</string>
		<string>wxAcceleratorTable:new(N, Entries) -&gt; wxAcceleratorTable()</string>
		<string>wxAcceleratorTable:ok</string>
		<string>wxAcceleratorTable:ok(&lt;#This#&gt;)</string>
		<string>wxAcceleratorTable:ok(This) -&gt; boolean()</string>
		<string>wxAcceleratorTable:destroy</string>
		<string>wxAcceleratorTable:destroy(&lt;#This::wxAcceleratorTable()#&gt;)</string>
		<string>wxAcceleratorTable:destroy(This::wxAcceleratorTable()) -&gt; ok</string>
		<string>wxActivateEvent:getActive</string>
		<string>wxActivateEvent:getActive(&lt;#This#&gt;)</string>
		<string>wxActivateEvent:getActive(This) -&gt; boolean()</string>
		<string>wxArtProvider:getBitmap</string>
		<string>wxArtProvider:getBitmap(&lt;#Id#&gt;)</string>
		<string>wxArtProvider:getBitmap(Id) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxArtProvider:getBitmap</string>
		<string>wxArtProvider:getBitmap(&lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxArtProvider:getBitmap(Id, Option::[Option]) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxArtProvider:getIcon</string>
		<string>wxArtProvider:getIcon(&lt;#Id#&gt;)</string>
		<string>wxArtProvider:getIcon(Id) -&gt; wxIcon() (see module wxIcon)</string>
		<string>wxArtProvider:getIcon</string>
		<string>wxArtProvider:getIcon(&lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxArtProvider:getIcon(Id, Option::[Option]) -&gt; wxIcon() (see module wxIcon)</string>
		<string>wxAuiManager:new</string>
		<string>wxAuiManager:new()</string>
		<string>wxAuiManager:new() -&gt; wxAuiManager()</string>
		<string>wxAuiManager:new</string>
		<string>wxAuiManager:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiManager:new(Option::[Option]) -&gt; wxAuiManager()</string>
		<string>wxAuiManager:addPane</string>
		<string>wxAuiManager:addPane(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxAuiManager:addPane(This, Window) -&gt; boolean()</string>
		<string>wxAuiManager:addPane</string>
		<string>wxAuiManager:addPane(&lt;#This#&gt;, &lt;#Window#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiManager:addPane(This, Window, Option::[Option]) -&gt; boolean()</string>
		<string>wxAuiManager:addPane</string>
		<string>wxAuiManager:addPane(&lt;#This#&gt;, &lt;#Window#&gt;, &lt;#Pane_info#&gt;, &lt;#Drop_pos#&gt;)</string>
		<string>wxAuiManager:addPane(This, Window, Pane_info, Drop_pos) -&gt; boolean()</string>
		<string>wxAuiManager:detachPane</string>
		<string>wxAuiManager:detachPane(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxAuiManager:detachPane(This, Window) -&gt; boolean()</string>
		<string>wxAuiManager:getAllPanes</string>
		<string>wxAuiManager:getAllPanes(&lt;#This#&gt;)</string>
		<string>wxAuiManager:getAllPanes(This) -&gt; wx_object() (see module wx)</string>
		<string>wxAuiManager:getArtProvider</string>
		<string>wxAuiManager:getArtProvider(&lt;#This#&gt;)</string>
		<string>wxAuiManager:getArtProvider(This) -&gt; wxAuiDockArt() (see module wxAuiDockArt)</string>
		<string>wxAuiManager:getDockSizeConstraint</string>
		<string>wxAuiManager:getDockSizeConstraint(&lt;#This#&gt;)</string>
		<string>wxAuiManager:getDockSizeConstraint(This) -&gt; {Width_pct::number(), Height_pct::number()}</string>
		<string>wxAuiManager:getFlags</string>
		<string>wxAuiManager:getFlags(&lt;#This#&gt;)</string>
		<string>wxAuiManager:getFlags(This) -&gt; integer()</string>
		<string>wxAuiManager:getManagedWindow</string>
		<string>wxAuiManager:getManagedWindow(&lt;#This#&gt;)</string>
		<string>wxAuiManager:getManagedWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxAuiManager:getManager</string>
		<string>wxAuiManager:getManager(&lt;#Window#&gt;)</string>
		<string>wxAuiManager:getManager(Window) -&gt; wxAuiManager()</string>
		<string>wxAuiManager:getPane</string>
		<string>wxAuiManager:getPane(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxAuiManager:getPane(This, Name) -&gt; wxAuiPaneInfo() (see module wxAuiPaneInfo)</string>
		<string>wxAuiManager:hideHint</string>
		<string>wxAuiManager:hideHint(&lt;#This#&gt;)</string>
		<string>wxAuiManager:hideHint(This) -&gt; ok</string>
		<string>wxAuiManager:insertPane</string>
		<string>wxAuiManager:insertPane(&lt;#This#&gt;, &lt;#Window#&gt;, &lt;#Insert_location#&gt;)</string>
		<string>wxAuiManager:insertPane(This, Window, Insert_location) -&gt; boolean()</string>
		<string>wxAuiManager:insertPane</string>
		<string>wxAuiManager:insertPane(&lt;#This#&gt;, &lt;#Window#&gt;, &lt;#Insert_location#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiManager:insertPane(This, Window, Insert_location, Option::[Option]) -&gt; boolean()</string>
		<string>wxAuiManager:loadPaneInfo</string>
		<string>wxAuiManager:loadPaneInfo(&lt;#This#&gt;, &lt;#Pane_part#&gt;, &lt;#Pane#&gt;)</string>
		<string>wxAuiManager:loadPaneInfo(This, Pane_part, Pane) -&gt; ok</string>
		<string>wxAuiManager:loadPerspective</string>
		<string>wxAuiManager:loadPerspective(&lt;#This#&gt;, &lt;#Perspective#&gt;)</string>
		<string>wxAuiManager:loadPerspective(This, Perspective) -&gt; boolean()</string>
		<string>wxAuiManager:loadPerspective</string>
		<string>wxAuiManager:loadPerspective(&lt;#This#&gt;, &lt;#Perspective#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiManager:loadPerspective(This, Perspective, Option::[Option]) -&gt; boolean()</string>
		<string>wxAuiManager:savePaneInfo</string>
		<string>wxAuiManager:savePaneInfo(&lt;#This#&gt;, &lt;#Pane#&gt;)</string>
		<string>wxAuiManager:savePaneInfo(This, Pane) -&gt; charlist() (see module unicode)</string>
		<string>wxAuiManager:savePerspective</string>
		<string>wxAuiManager:savePerspective(&lt;#This#&gt;)</string>
		<string>wxAuiManager:savePerspective(This) -&gt; charlist() (see module unicode)</string>
		<string>wxAuiManager:setArtProvider</string>
		<string>wxAuiManager:setArtProvider(&lt;#This#&gt;, &lt;#Art_provider#&gt;)</string>
		<string>wxAuiManager:setArtProvider(This, Art_provider) -&gt; ok</string>
		<string>wxAuiManager:setDockSizeConstraint</string>
		<string>wxAuiManager:setDockSizeConstraint(&lt;#This#&gt;, &lt;#Width_pct#&gt;, &lt;#Height_pct#&gt;)</string>
		<string>wxAuiManager:setDockSizeConstraint(This, Width_pct, Height_pct) -&gt; ok</string>
		<string>wxAuiManager:setFlags</string>
		<string>wxAuiManager:setFlags(&lt;#This#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxAuiManager:setFlags(This, Flags) -&gt; ok</string>
		<string>wxAuiManager:setManagedWindow</string>
		<string>wxAuiManager:setManagedWindow(&lt;#This#&gt;, &lt;#Managed_wnd#&gt;)</string>
		<string>wxAuiManager:setManagedWindow(This, Managed_wnd) -&gt; ok</string>
		<string>wxAuiManager:showHint</string>
		<string>wxAuiManager:showHint(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxAuiManager:showHint(This, Rect) -&gt; ok</string>
		<string>wxAuiManager:unInit</string>
		<string>wxAuiManager:unInit(&lt;#This#&gt;)</string>
		<string>wxAuiManager:unInit(This) -&gt; ok</string>
		<string>wxAuiManager:update</string>
		<string>wxAuiManager:update(&lt;#This#&gt;)</string>
		<string>wxAuiManager:update(This) -&gt; ok</string>
		<string>wxAuiManager:destroy</string>
		<string>wxAuiManager:destroy(&lt;#This::wxAuiManager()#&gt;)</string>
		<string>wxAuiManager:destroy(This::wxAuiManager()) -&gt; ok</string>
		<string>wxAuiManagerEvent:setManager</string>
		<string>wxAuiManagerEvent:setManager(&lt;#This#&gt;, &lt;#Mgr#&gt;)</string>
		<string>wxAuiManagerEvent:setManager(This, Mgr) -&gt; ok</string>
		<string>wxAuiManagerEvent:getManager</string>
		<string>wxAuiManagerEvent:getManager(&lt;#This#&gt;)</string>
		<string>wxAuiManagerEvent:getManager(This) -&gt; wxAuiManager() (see module wxAuiManager)</string>
		<string>wxAuiManagerEvent:setPane</string>
		<string>wxAuiManagerEvent:setPane(&lt;#This#&gt;, &lt;#P#&gt;)</string>
		<string>wxAuiManagerEvent:setPane(This, P) -&gt; ok</string>
		<string>wxAuiManagerEvent:getPane</string>
		<string>wxAuiManagerEvent:getPane(&lt;#This#&gt;)</string>
		<string>wxAuiManagerEvent:getPane(This) -&gt; wxAuiPaneInfo() (see module wxAuiPaneInfo)</string>
		<string>wxAuiManagerEvent:setButton</string>
		<string>wxAuiManagerEvent:setButton(&lt;#This#&gt;, &lt;#B#&gt;)</string>
		<string>wxAuiManagerEvent:setButton(This, B) -&gt; ok</string>
		<string>wxAuiManagerEvent:getButton</string>
		<string>wxAuiManagerEvent:getButton(&lt;#This#&gt;)</string>
		<string>wxAuiManagerEvent:getButton(This) -&gt; integer()</string>
		<string>wxAuiManagerEvent:setDC</string>
		<string>wxAuiManagerEvent:setDC(&lt;#This#&gt;, &lt;#Pdc#&gt;)</string>
		<string>wxAuiManagerEvent:setDC(This, Pdc) -&gt; ok</string>
		<string>wxAuiManagerEvent:getDC</string>
		<string>wxAuiManagerEvent:getDC(&lt;#This#&gt;)</string>
		<string>wxAuiManagerEvent:getDC(This) -&gt; wxDC() (see module wxDC)</string>
		<string>wxAuiManagerEvent:veto</string>
		<string>wxAuiManagerEvent:veto(&lt;#This#&gt;)</string>
		<string>wxAuiManagerEvent:veto(This) -&gt; ok</string>
		<string>wxAuiManagerEvent:veto</string>
		<string>wxAuiManagerEvent:veto(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiManagerEvent:veto(This, Option::[Option]) -&gt; ok</string>
		<string>wxAuiManagerEvent:getVeto</string>
		<string>wxAuiManagerEvent:getVeto(&lt;#This#&gt;)</string>
		<string>wxAuiManagerEvent:getVeto(This) -&gt; boolean()</string>
		<string>wxAuiManagerEvent:setCanVeto</string>
		<string>wxAuiManagerEvent:setCanVeto(&lt;#This#&gt;, &lt;#Can_veto#&gt;)</string>
		<string>wxAuiManagerEvent:setCanVeto(This, Can_veto) -&gt; ok</string>
		<string>wxAuiManagerEvent:canVeto</string>
		<string>wxAuiManagerEvent:canVeto(&lt;#This#&gt;)</string>
		<string>wxAuiManagerEvent:canVeto(This) -&gt; boolean()</string>
		<string>wxAuiNotebook:new</string>
		<string>wxAuiNotebook:new()</string>
		<string>wxAuiNotebook:new() -&gt; wxAuiNotebook()</string>
		<string>wxAuiNotebook:new</string>
		<string>wxAuiNotebook:new(&lt;#Parent#&gt;)</string>
		<string>wxAuiNotebook:new(Parent) -&gt; wxAuiNotebook()</string>
		<string>wxAuiNotebook:new</string>
		<string>wxAuiNotebook:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiNotebook:new(Parent, Option::[Option]) -&gt; wxAuiNotebook()</string>
		<string>wxAuiNotebook:addPage</string>
		<string>wxAuiNotebook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Caption#&gt;)</string>
		<string>wxAuiNotebook:addPage(This, Page, Caption) -&gt; boolean()</string>
		<string>wxAuiNotebook:addPage</string>
		<string>wxAuiNotebook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Caption#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiNotebook:addPage(This, Page, Caption, Option::[Option]) -&gt; boolean()</string>
		<string>wxAuiNotebook:create</string>
		<string>wxAuiNotebook:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxAuiNotebook:create(This, Parent) -&gt; boolean()</string>
		<string>wxAuiNotebook:create</string>
		<string>wxAuiNotebook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiNotebook:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxAuiNotebook:deletePage</string>
		<string>wxAuiNotebook:deletePage(&lt;#This#&gt;, &lt;#Page#&gt;)</string>
		<string>wxAuiNotebook:deletePage(This, Page) -&gt; boolean()</string>
		<string>wxAuiNotebook:getArtProvider</string>
		<string>wxAuiNotebook:getArtProvider(&lt;#This#&gt;)</string>
		<string>wxAuiNotebook:getArtProvider(This) -&gt; wxAuiTabArt() (see module wxAuiTabArt)</string>
		<string>wxAuiNotebook:getPage</string>
		<string>wxAuiNotebook:getPage(&lt;#This#&gt;, &lt;#Page_idx#&gt;)</string>
		<string>wxAuiNotebook:getPage(This, Page_idx) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxAuiNotebook:getPageBitmap</string>
		<string>wxAuiNotebook:getPageBitmap(&lt;#This#&gt;, &lt;#Page_idx#&gt;)</string>
		<string>wxAuiNotebook:getPageBitmap(This, Page_idx) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxAuiNotebook:getPageCount</string>
		<string>wxAuiNotebook:getPageCount(&lt;#This#&gt;)</string>
		<string>wxAuiNotebook:getPageCount(This) -&gt; integer()</string>
		<string>wxAuiNotebook:getPageIndex</string>
		<string>wxAuiNotebook:getPageIndex(&lt;#This#&gt;, &lt;#Page_wnd#&gt;)</string>
		<string>wxAuiNotebook:getPageIndex(This, Page_wnd) -&gt; integer()</string>
		<string>wxAuiNotebook:getPageText</string>
		<string>wxAuiNotebook:getPageText(&lt;#This#&gt;, &lt;#Page_idx#&gt;)</string>
		<string>wxAuiNotebook:getPageText(This, Page_idx) -&gt; charlist() (see module unicode)</string>
		<string>wxAuiNotebook:getSelection</string>
		<string>wxAuiNotebook:getSelection(&lt;#This#&gt;)</string>
		<string>wxAuiNotebook:getSelection(This) -&gt; integer()</string>
		<string>wxAuiNotebook:insertPage</string>
		<string>wxAuiNotebook:insertPage(&lt;#This#&gt;, &lt;#Page_idx#&gt;, &lt;#Page#&gt;, &lt;#Caption#&gt;)</string>
		<string>wxAuiNotebook:insertPage(This, Page_idx, Page, Caption) -&gt; boolean()</string>
		<string>wxAuiNotebook:insertPage</string>
		<string>wxAuiNotebook:insertPage(&lt;#This#&gt;, &lt;#Page_idx#&gt;, &lt;#Page#&gt;, &lt;#Caption#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiNotebook:insertPage(This, Page_idx, Page, Caption, Option::[Option]) -&gt; boolean()</string>
		<string>wxAuiNotebook:removePage</string>
		<string>wxAuiNotebook:removePage(&lt;#This#&gt;, &lt;#Page#&gt;)</string>
		<string>wxAuiNotebook:removePage(This, Page) -&gt; boolean()</string>
		<string>wxAuiNotebook:setArtProvider</string>
		<string>wxAuiNotebook:setArtProvider(&lt;#This#&gt;, &lt;#Art#&gt;)</string>
		<string>wxAuiNotebook:setArtProvider(This, Art) -&gt; ok</string>
		<string>wxAuiNotebook:setFont</string>
		<string>wxAuiNotebook:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxAuiNotebook:setFont(This, Font) -&gt; boolean()</string>
		<string>wxAuiNotebook:setPageBitmap</string>
		<string>wxAuiNotebook:setPageBitmap(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxAuiNotebook:setPageBitmap(This, Page, Bitmap) -&gt; boolean()</string>
		<string>wxAuiNotebook:setPageText</string>
		<string>wxAuiNotebook:setPageText(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxAuiNotebook:setPageText(This, Page, Text) -&gt; boolean()</string>
		<string>wxAuiNotebook:setSelection</string>
		<string>wxAuiNotebook:setSelection(&lt;#This#&gt;, &lt;#New_page#&gt;)</string>
		<string>wxAuiNotebook:setSelection(This, New_page) -&gt; integer()</string>
		<string>wxAuiNotebook:setTabCtrlHeight</string>
		<string>wxAuiNotebook:setTabCtrlHeight(&lt;#This#&gt;, &lt;#Height#&gt;)</string>
		<string>wxAuiNotebook:setTabCtrlHeight(This, Height) -&gt; ok</string>
		<string>wxAuiNotebook:setUniformBitmapSize</string>
		<string>wxAuiNotebook:setUniformBitmapSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxAuiNotebook:setUniformBitmapSize(This, Size) -&gt; ok</string>
		<string>wxAuiNotebook:destroy</string>
		<string>wxAuiNotebook:destroy(&lt;#This::wxAuiNotebook()#&gt;)</string>
		<string>wxAuiNotebook:destroy(This::wxAuiNotebook()) -&gt; ok</string>
		<string>wxAuiNotebookEvent:setSelection</string>
		<string>wxAuiNotebookEvent:setSelection(&lt;#This#&gt;, &lt;#S#&gt;)</string>
		<string>wxAuiNotebookEvent:setSelection(This, S) -&gt; ok</string>
		<string>wxAuiNotebookEvent:getSelection</string>
		<string>wxAuiNotebookEvent:getSelection(&lt;#This#&gt;)</string>
		<string>wxAuiNotebookEvent:getSelection(This) -&gt; integer()</string>
		<string>wxAuiNotebookEvent:setOldSelection</string>
		<string>wxAuiNotebookEvent:setOldSelection(&lt;#This#&gt;, &lt;#S#&gt;)</string>
		<string>wxAuiNotebookEvent:setOldSelection(This, S) -&gt; ok</string>
		<string>wxAuiNotebookEvent:getOldSelection</string>
		<string>wxAuiNotebookEvent:getOldSelection(&lt;#This#&gt;)</string>
		<string>wxAuiNotebookEvent:getOldSelection(This) -&gt; integer()</string>
		<string>wxAuiNotebookEvent:setDragSource</string>
		<string>wxAuiNotebookEvent:setDragSource(&lt;#This#&gt;, &lt;#S#&gt;)</string>
		<string>wxAuiNotebookEvent:setDragSource(This, S) -&gt; ok</string>
		<string>wxAuiNotebookEvent:getDragSource</string>
		<string>wxAuiNotebookEvent:getDragSource(&lt;#This#&gt;)</string>
		<string>wxAuiNotebookEvent:getDragSource(This) -&gt; wxAuiNotebook() (see module wxAuiNotebook)</string>
		<string>wxAuiPaneInfo:new</string>
		<string>wxAuiPaneInfo:new()</string>
		<string>wxAuiPaneInfo:new() -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:new</string>
		<string>wxAuiPaneInfo:new(&lt;#C#&gt;)</string>
		<string>wxAuiPaneInfo:new(C) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:bestSize</string>
		<string>wxAuiPaneInfo:bestSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxAuiPaneInfo:bestSize(This, Size) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:bestSize</string>
		<string>wxAuiPaneInfo:bestSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxAuiPaneInfo:bestSize(This, X, Y) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:bottom</string>
		<string>wxAuiPaneInfo:bottom(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:bottom(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:bottomDockable</string>
		<string>wxAuiPaneInfo:bottomDockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:bottomDockable(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:bottomDockable</string>
		<string>wxAuiPaneInfo:bottomDockable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:bottomDockable(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:caption</string>
		<string>wxAuiPaneInfo:caption(&lt;#This#&gt;, &lt;#C#&gt;)</string>
		<string>wxAuiPaneInfo:caption(This, C) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:captionVisible</string>
		<string>wxAuiPaneInfo:captionVisible(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:captionVisible(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:captionVisible</string>
		<string>wxAuiPaneInfo:captionVisible(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:captionVisible(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:centre</string>
		<string>wxAuiPaneInfo:centre(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:centre(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:centrePane</string>
		<string>wxAuiPaneInfo:centrePane(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:centrePane(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:closeButton</string>
		<string>wxAuiPaneInfo:closeButton(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:closeButton(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:closeButton</string>
		<string>wxAuiPaneInfo:closeButton(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:closeButton(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:defaultPane</string>
		<string>wxAuiPaneInfo:defaultPane(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:defaultPane(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:destroyOnClose</string>
		<string>wxAuiPaneInfo:destroyOnClose(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:destroyOnClose(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:destroyOnClose</string>
		<string>wxAuiPaneInfo:destroyOnClose(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:destroyOnClose(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:direction</string>
		<string>wxAuiPaneInfo:direction(&lt;#This#&gt;, &lt;#Direction#&gt;)</string>
		<string>wxAuiPaneInfo:direction(This, Direction) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:dock</string>
		<string>wxAuiPaneInfo:dock(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:dock(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:dockable</string>
		<string>wxAuiPaneInfo:dockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:dockable(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:dockable</string>
		<string>wxAuiPaneInfo:dockable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:dockable(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:fixed</string>
		<string>wxAuiPaneInfo:fixed(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:fixed(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:float</string>
		<string>wxAuiPaneInfo:float(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:float(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:floatable</string>
		<string>wxAuiPaneInfo:floatable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:floatable(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:floatable</string>
		<string>wxAuiPaneInfo:floatable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:floatable(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:floatingPosition</string>
		<string>wxAuiPaneInfo:floatingPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxAuiPaneInfo:floatingPosition(This, Pos) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:floatingPosition</string>
		<string>wxAuiPaneInfo:floatingPosition(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxAuiPaneInfo:floatingPosition(This, X, Y) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:floatingSize</string>
		<string>wxAuiPaneInfo:floatingSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxAuiPaneInfo:floatingSize(This, Size) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:floatingSize</string>
		<string>wxAuiPaneInfo:floatingSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxAuiPaneInfo:floatingSize(This, X, Y) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:gripper</string>
		<string>wxAuiPaneInfo:gripper(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:gripper(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:gripper</string>
		<string>wxAuiPaneInfo:gripper(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:gripper(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:gripperTop</string>
		<string>wxAuiPaneInfo:gripperTop(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:gripperTop(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:gripperTop</string>
		<string>wxAuiPaneInfo:gripperTop(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:gripperTop(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:hasBorder</string>
		<string>wxAuiPaneInfo:hasBorder(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hasBorder(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hasCaption</string>
		<string>wxAuiPaneInfo:hasCaption(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hasCaption(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hasCloseButton</string>
		<string>wxAuiPaneInfo:hasCloseButton(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hasCloseButton(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hasFlag</string>
		<string>wxAuiPaneInfo:hasFlag(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxAuiPaneInfo:hasFlag(This, Flag) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hasGripper</string>
		<string>wxAuiPaneInfo:hasGripper(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hasGripper(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hasGripperTop</string>
		<string>wxAuiPaneInfo:hasGripperTop(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hasGripperTop(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hasMaximizeButton</string>
		<string>wxAuiPaneInfo:hasMaximizeButton(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hasMaximizeButton(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hasMinimizeButton</string>
		<string>wxAuiPaneInfo:hasMinimizeButton(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hasMinimizeButton(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hasPinButton</string>
		<string>wxAuiPaneInfo:hasPinButton(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hasPinButton(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:hide</string>
		<string>wxAuiPaneInfo:hide(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:hide(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:isBottomDockable</string>
		<string>wxAuiPaneInfo:isBottomDockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isBottomDockable(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isDocked</string>
		<string>wxAuiPaneInfo:isDocked(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isDocked(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isFixed</string>
		<string>wxAuiPaneInfo:isFixed(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isFixed(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isFloatable</string>
		<string>wxAuiPaneInfo:isFloatable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isFloatable(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isFloating</string>
		<string>wxAuiPaneInfo:isFloating(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isFloating(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isLeftDockable</string>
		<string>wxAuiPaneInfo:isLeftDockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isLeftDockable(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isMovable</string>
		<string>wxAuiPaneInfo:isMovable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isMovable(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isOk</string>
		<string>wxAuiPaneInfo:isOk(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isOk(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isResizable</string>
		<string>wxAuiPaneInfo:isResizable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isResizable(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isRightDockable</string>
		<string>wxAuiPaneInfo:isRightDockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isRightDockable(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isShown</string>
		<string>wxAuiPaneInfo:isShown(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isShown(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isToolbar</string>
		<string>wxAuiPaneInfo:isToolbar(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isToolbar(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:isTopDockable</string>
		<string>wxAuiPaneInfo:isTopDockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:isTopDockable(This) -&gt; boolean()</string>
		<string>wxAuiPaneInfo:layer</string>
		<string>wxAuiPaneInfo:layer(&lt;#This#&gt;, &lt;#Layer#&gt;)</string>
		<string>wxAuiPaneInfo:layer(This, Layer) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:left</string>
		<string>wxAuiPaneInfo:left(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:left(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:leftDockable</string>
		<string>wxAuiPaneInfo:leftDockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:leftDockable(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:leftDockable</string>
		<string>wxAuiPaneInfo:leftDockable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:leftDockable(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:maxSize</string>
		<string>wxAuiPaneInfo:maxSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxAuiPaneInfo:maxSize(This, Size) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:maxSize</string>
		<string>wxAuiPaneInfo:maxSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxAuiPaneInfo:maxSize(This, X, Y) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:maximizeButton</string>
		<string>wxAuiPaneInfo:maximizeButton(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:maximizeButton(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:maximizeButton</string>
		<string>wxAuiPaneInfo:maximizeButton(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:maximizeButton(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:minSize</string>
		<string>wxAuiPaneInfo:minSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxAuiPaneInfo:minSize(This, Size) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:minSize</string>
		<string>wxAuiPaneInfo:minSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxAuiPaneInfo:minSize(This, X, Y) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:minimizeButton</string>
		<string>wxAuiPaneInfo:minimizeButton(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:minimizeButton(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:minimizeButton</string>
		<string>wxAuiPaneInfo:minimizeButton(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:minimizeButton(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:movable</string>
		<string>wxAuiPaneInfo:movable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:movable(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:movable</string>
		<string>wxAuiPaneInfo:movable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:movable(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:name</string>
		<string>wxAuiPaneInfo:name(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxAuiPaneInfo:name(This, N) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:paneBorder</string>
		<string>wxAuiPaneInfo:paneBorder(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:paneBorder(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:paneBorder</string>
		<string>wxAuiPaneInfo:paneBorder(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:paneBorder(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:pinButton</string>
		<string>wxAuiPaneInfo:pinButton(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:pinButton(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:pinButton</string>
		<string>wxAuiPaneInfo:pinButton(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:pinButton(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:position</string>
		<string>wxAuiPaneInfo:position(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxAuiPaneInfo:position(This, Pos) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:resizable</string>
		<string>wxAuiPaneInfo:resizable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:resizable(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:resizable</string>
		<string>wxAuiPaneInfo:resizable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:resizable(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:right</string>
		<string>wxAuiPaneInfo:right(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:right(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:rightDockable</string>
		<string>wxAuiPaneInfo:rightDockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:rightDockable(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:rightDockable</string>
		<string>wxAuiPaneInfo:rightDockable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:rightDockable(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:row</string>
		<string>wxAuiPaneInfo:row(&lt;#This#&gt;, &lt;#Row#&gt;)</string>
		<string>wxAuiPaneInfo:row(This, Row) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:safeSet</string>
		<string>wxAuiPaneInfo:safeSet(&lt;#This#&gt;, &lt;#Source#&gt;)</string>
		<string>wxAuiPaneInfo:safeSet(This, Source) -&gt; ok</string>
		<string>wxAuiPaneInfo:setFlag</string>
		<string>wxAuiPaneInfo:setFlag(&lt;#This#&gt;, &lt;#Flag#&gt;, &lt;#Option_state#&gt;)</string>
		<string>wxAuiPaneInfo:setFlag(This, Flag, Option_state) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:show</string>
		<string>wxAuiPaneInfo:show(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:show(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:show</string>
		<string>wxAuiPaneInfo:show(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:show(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:toolbarPane</string>
		<string>wxAuiPaneInfo:toolbarPane(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:toolbarPane(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:top</string>
		<string>wxAuiPaneInfo:top(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:top(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:topDockable</string>
		<string>wxAuiPaneInfo:topDockable(&lt;#This#&gt;)</string>
		<string>wxAuiPaneInfo:topDockable(This) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:topDockable</string>
		<string>wxAuiPaneInfo:topDockable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxAuiPaneInfo:topDockable(This, Option::[Option]) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:window</string>
		<string>wxAuiPaneInfo:window(&lt;#This#&gt;, &lt;#W#&gt;)</string>
		<string>wxAuiPaneInfo:window(This, W) -&gt; wxAuiPaneInfo()</string>
		<string>wxAuiPaneInfo:destroy</string>
		<string>wxAuiPaneInfo:destroy(&lt;#This::wxAuiPaneInfo()#&gt;)</string>
		<string>wxAuiPaneInfo:destroy(This::wxAuiPaneInfo()) -&gt; ok</string>
		<string>wxBitmap:new</string>
		<string>wxBitmap:new()</string>
		<string>wxBitmap:new() -&gt; wxBitmap()</string>
		<string>wxBitmap:new</string>
		<string>wxBitmap:new(&lt;#Filename#&gt;)</string>
		<string>wxBitmap:new(Filename) -&gt; wxBitmap()</string>
		<string>wxBitmap:new</string>
		<string>wxBitmap:new(&lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxBitmap:new(Width, Height) -&gt; wxBitmap()</string>
		<string>wxBitmap:new</string>
		<string>wxBitmap:new(&lt;#Bits#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxBitmap:new(Bits, Width, Height) -&gt; wxBitmap()</string>
		<string>wxBitmap:new</string>
		<string>wxBitmap:new(&lt;#Bits#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBitmap:new(Bits, Width, Height, Option::[Option]) -&gt; wxBitmap()</string>
		<string>wxBitmap:convertToImage</string>
		<string>wxBitmap:convertToImage(&lt;#This#&gt;)</string>
		<string>wxBitmap:convertToImage(This) -&gt; wxImage() (see module wxImage)</string>
		<string>wxBitmap:copyFromIcon</string>
		<string>wxBitmap:copyFromIcon(&lt;#This#&gt;, &lt;#Icon#&gt;)</string>
		<string>wxBitmap:copyFromIcon(This, Icon) -&gt; boolean()</string>
		<string>wxBitmap:create</string>
		<string>wxBitmap:create(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxBitmap:create(This, Width, Height) -&gt; boolean()</string>
		<string>wxBitmap:create</string>
		<string>wxBitmap:create(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBitmap:create(This, Width, Height, Option::[Option]) -&gt; boolean()</string>
		<string>wxBitmap:getDepth</string>
		<string>wxBitmap:getDepth(&lt;#This#&gt;)</string>
		<string>wxBitmap:getDepth(This) -&gt; integer()</string>
		<string>wxBitmap:getHeight</string>
		<string>wxBitmap:getHeight(&lt;#This#&gt;)</string>
		<string>wxBitmap:getHeight(This) -&gt; integer()</string>
		<string>wxBitmap:getPalette</string>
		<string>wxBitmap:getPalette(&lt;#This#&gt;)</string>
		<string>wxBitmap:getPalette(This) -&gt; wxPalette() (see module wxPalette)</string>
		<string>wxBitmap:getMask</string>
		<string>wxBitmap:getMask(&lt;#This#&gt;)</string>
		<string>wxBitmap:getMask(This) -&gt; wxMask() (see module wxMask)</string>
		<string>wxBitmap:getWidth</string>
		<string>wxBitmap:getWidth(&lt;#This#&gt;)</string>
		<string>wxBitmap:getWidth(This) -&gt; integer()</string>
		<string>wxBitmap:getSubBitmap</string>
		<string>wxBitmap:getSubBitmap(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxBitmap:getSubBitmap(This, Rect) -&gt; wxBitmap()</string>
		<string>wxBitmap:loadFile</string>
		<string>wxBitmap:loadFile(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxBitmap:loadFile(This, Name) -&gt; boolean()</string>
		<string>wxBitmap:loadFile</string>
		<string>wxBitmap:loadFile(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBitmap:loadFile(This, Name, Option::[Option]) -&gt; boolean()</string>
		<string>wxBitmap:ok</string>
		<string>wxBitmap:ok(&lt;#This#&gt;)</string>
		<string>wxBitmap:ok(This) -&gt; boolean()</string>
		<string>wxBitmap:saveFile</string>
		<string>wxBitmap:saveFile(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Type#&gt;)</string>
		<string>wxBitmap:saveFile(This, Name, Type) -&gt; boolean()</string>
		<string>wxBitmap:saveFile</string>
		<string>wxBitmap:saveFile(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Type#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBitmap:saveFile(This, Name, Type, Option::[Option]) -&gt; boolean()</string>
		<string>wxBitmap:setDepth</string>
		<string>wxBitmap:setDepth(&lt;#This#&gt;, &lt;#Depth#&gt;)</string>
		<string>wxBitmap:setDepth(This, Depth) -&gt; ok</string>
		<string>wxBitmap:setHeight</string>
		<string>wxBitmap:setHeight(&lt;#This#&gt;, &lt;#Height#&gt;)</string>
		<string>wxBitmap:setHeight(This, Height) -&gt; ok</string>
		<string>wxBitmap:setMask</string>
		<string>wxBitmap:setMask(&lt;#This#&gt;, &lt;#Mask#&gt;)</string>
		<string>wxBitmap:setMask(This, Mask) -&gt; ok</string>
		<string>wxBitmap:setPalette</string>
		<string>wxBitmap:setPalette(&lt;#This#&gt;, &lt;#Palette#&gt;)</string>
		<string>wxBitmap:setPalette(This, Palette) -&gt; ok</string>
		<string>wxBitmap:setWidth</string>
		<string>wxBitmap:setWidth(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxBitmap:setWidth(This, Width) -&gt; ok</string>
		<string>wxBitmap:destroy</string>
		<string>wxBitmap:destroy(&lt;#This::wxBitmap()#&gt;)</string>
		<string>wxBitmap:destroy(This::wxBitmap()) -&gt; ok</string>
		<string>wxBitmapButton:new</string>
		<string>wxBitmapButton:new()</string>
		<string>wxBitmapButton:new() -&gt; wxBitmapButton()</string>
		<string>wxBitmapButton:new</string>
		<string>wxBitmapButton:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxBitmapButton:new(Parent, Id, Bitmap) -&gt; wxBitmapButton()</string>
		<string>wxBitmapButton:new</string>
		<string>wxBitmapButton:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Bitmap#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBitmapButton:new(Parent, Id, Bitmap, Option::[Option]) -&gt; wxBitmapButton()</string>
		<string>wxBitmapButton:create</string>
		<string>wxBitmapButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxBitmapButton:create(This, Parent, Id, Bitmap) -&gt; boolean()</string>
		<string>wxBitmapButton:create</string>
		<string>wxBitmapButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Bitmap#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBitmapButton:create(This, Parent, Id, Bitmap, Option::[Option]) -&gt; boolean()</string>
		<string>wxBitmapButton:getBitmapDisabled</string>
		<string>wxBitmapButton:getBitmapDisabled(&lt;#This#&gt;)</string>
		<string>wxBitmapButton:getBitmapDisabled(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxBitmapButton:getBitmapFocus</string>
		<string>wxBitmapButton:getBitmapFocus(&lt;#This#&gt;)</string>
		<string>wxBitmapButton:getBitmapFocus(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxBitmapButton:getBitmapLabel</string>
		<string>wxBitmapButton:getBitmapLabel(&lt;#This#&gt;)</string>
		<string>wxBitmapButton:getBitmapLabel(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxBitmapButton:getBitmapSelected</string>
		<string>wxBitmapButton:getBitmapSelected(&lt;#This#&gt;)</string>
		<string>wxBitmapButton:getBitmapSelected(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxBitmapButton:setBitmapDisabled</string>
		<string>wxBitmapButton:setBitmapDisabled(&lt;#This#&gt;, &lt;#Disabled#&gt;)</string>
		<string>wxBitmapButton:setBitmapDisabled(This, Disabled) -&gt; ok</string>
		<string>wxBitmapButton:setBitmapFocus</string>
		<string>wxBitmapButton:setBitmapFocus(&lt;#This#&gt;, &lt;#Focus#&gt;)</string>
		<string>wxBitmapButton:setBitmapFocus(This, Focus) -&gt; ok</string>
		<string>wxBitmapButton:setBitmapLabel</string>
		<string>wxBitmapButton:setBitmapLabel(&lt;#This#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxBitmapButton:setBitmapLabel(This, Bitmap) -&gt; ok</string>
		<string>wxBitmapButton:setBitmapSelected</string>
		<string>wxBitmapButton:setBitmapSelected(&lt;#This#&gt;, &lt;#Sel#&gt;)</string>
		<string>wxBitmapButton:setBitmapSelected(This, Sel) -&gt; ok</string>
		<string>wxBitmapButton:destroy</string>
		<string>wxBitmapButton:destroy(&lt;#This::wxBitmapButton()#&gt;)</string>
		<string>wxBitmapButton:destroy(This::wxBitmapButton()) -&gt; ok</string>
		<string>wxBitmapDataObject:new</string>
		<string>wxBitmapDataObject:new()</string>
		<string>wxBitmapDataObject:new() -&gt; wxBitmapDataObject()</string>
		<string>wxBitmapDataObject:new</string>
		<string>wxBitmapDataObject:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxBitmapDataObject:new(Option::[Option]) -&gt; wxBitmapDataObject()</string>
		<string>wxBitmapDataObject:getBitmap</string>
		<string>wxBitmapDataObject:getBitmap(&lt;#This#&gt;)</string>
		<string>wxBitmapDataObject:getBitmap(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxBitmapDataObject:setBitmap</string>
		<string>wxBitmapDataObject:setBitmap(&lt;#This#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxBitmapDataObject:setBitmap(This, Bitmap) -&gt; ok</string>
		<string>wxBitmapDataObject:destroy</string>
		<string>wxBitmapDataObject:destroy(&lt;#This::wxBitmapDataObject()#&gt;)</string>
		<string>wxBitmapDataObject:destroy(This::wxBitmapDataObject()) -&gt; ok</string>
		<string>wxBoxSizer:new</string>
		<string>wxBoxSizer:new(&lt;#Orient#&gt;)</string>
		<string>wxBoxSizer:new(Orient) -&gt; wxBoxSizer()</string>
		<string>wxBoxSizer:getOrientation</string>
		<string>wxBoxSizer:getOrientation(&lt;#This#&gt;)</string>
		<string>wxBoxSizer:getOrientation(This) -&gt; integer()</string>
		<string>wxBoxSizer:destroy</string>
		<string>wxBoxSizer:destroy(&lt;#This::wxBoxSizer()#&gt;)</string>
		<string>wxBoxSizer:destroy(This::wxBoxSizer()) -&gt; ok</string>
		<string>wxBrush:new</string>
		<string>wxBrush:new()</string>
		<string>wxBrush:new() -&gt; wxBrush()</string>
		<string>wxBrush:new</string>
		<string>wxBrush:new(&lt;#Colour#&gt;)</string>
		<string>wxBrush:new(Colour) -&gt; wxBrush()</string>
		<string>wxBrush:new</string>
		<string>wxBrush:new(&lt;#Colour#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBrush:new(Colour, Option::[Option]) -&gt; wxBrush()</string>
		<string>wxBrush:getColour</string>
		<string>wxBrush:getColour(&lt;#This#&gt;)</string>
		<string>wxBrush:getColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxBrush:getStipple</string>
		<string>wxBrush:getStipple(&lt;#This#&gt;)</string>
		<string>wxBrush:getStipple(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxBrush:getStyle</string>
		<string>wxBrush:getStyle(&lt;#This#&gt;)</string>
		<string>wxBrush:getStyle(This) -&gt; integer()</string>
		<string>wxBrush:isHatch</string>
		<string>wxBrush:isHatch(&lt;#This#&gt;)</string>
		<string>wxBrush:isHatch(This) -&gt; boolean()</string>
		<string>wxBrush:isOk</string>
		<string>wxBrush:isOk(&lt;#This#&gt;)</string>
		<string>wxBrush:isOk(This) -&gt; boolean()</string>
		<string>wxBrush:setColour</string>
		<string>wxBrush:setColour(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxBrush:setColour(This, Col) -&gt; ok</string>
		<string>wxBrush:setColour</string>
		<string>wxBrush:setColour(&lt;#This#&gt;, &lt;#R#&gt;, &lt;#G#&gt;, &lt;#B#&gt;)</string>
		<string>wxBrush:setColour(This, R, G, B) -&gt; ok</string>
		<string>wxBrush:setStipple</string>
		<string>wxBrush:setStipple(&lt;#This#&gt;, &lt;#Stipple#&gt;)</string>
		<string>wxBrush:setStipple(This, Stipple) -&gt; ok</string>
		<string>wxBrush:setStyle</string>
		<string>wxBrush:setStyle(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxBrush:setStyle(This, Style) -&gt; ok</string>
		<string>wxBrush:destroy</string>
		<string>wxBrush:destroy(&lt;#This::wxBrush()#&gt;)</string>
		<string>wxBrush:destroy(This::wxBrush()) -&gt; ok</string>
		<string>wxBufferedDC:new</string>
		<string>wxBufferedDC:new()</string>
		<string>wxBufferedDC:new() -&gt; wxBufferedDC()</string>
		<string>wxBufferedDC:new</string>
		<string>wxBufferedDC:new(&lt;#Dc#&gt;)</string>
		<string>wxBufferedDC:new(Dc) -&gt; wxBufferedDC()</string>
		<string>wxBufferedDC:new</string>
		<string>wxBufferedDC:new(&lt;#Dc#&gt;, &lt;#Area#&gt;)</string>
		<string>wxBufferedDC:new(Dc, Area) -&gt; wxBufferedDC()</string>
		<string>wxBufferedDC:new</string>
		<string>wxBufferedDC:new(&lt;#Dc#&gt;, &lt;#Area#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBufferedDC:new(Dc, Area, Option::[Option]) -&gt; wxBufferedDC()</string>
		<string>wxBufferedDC:init</string>
		<string>wxBufferedDC:init(&lt;#This#&gt;, &lt;#Dc#&gt;)</string>
		<string>wxBufferedDC:init(This, Dc) -&gt; ok</string>
		<string>wxBufferedDC:init</string>
		<string>wxBufferedDC:init(&lt;#This#&gt;, &lt;#Dc#&gt;, &lt;#Area#&gt;)</string>
		<string>wxBufferedDC:init(This, Dc, Area) -&gt; ok</string>
		<string>wxBufferedDC:init</string>
		<string>wxBufferedDC:init(&lt;#This#&gt;, &lt;#Dc#&gt;, &lt;#Area#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBufferedDC:init(This, Dc, Area, Option::[Option]) -&gt; ok</string>
		<string>wxBufferedDC:destroy</string>
		<string>wxBufferedDC:destroy(&lt;#This::wxBufferedDC()#&gt;)</string>
		<string>wxBufferedDC:destroy(This::wxBufferedDC()) -&gt; ok</string>
		<string>wxBufferedPaintDC:new</string>
		<string>wxBufferedPaintDC:new(&lt;#Window#&gt;)</string>
		<string>wxBufferedPaintDC:new(Window) -&gt; wxBufferedPaintDC()</string>
		<string>wxBufferedPaintDC:new</string>
		<string>wxBufferedPaintDC:new(&lt;#Window#&gt;, &lt;#Buffer#&gt;)</string>
		<string>wxBufferedPaintDC:new(Window, Buffer) -&gt; wxBufferedPaintDC()</string>
		<string>wxBufferedPaintDC:new</string>
		<string>wxBufferedPaintDC:new(&lt;#Window#&gt;, &lt;#Buffer#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxBufferedPaintDC:new(Window, Buffer, Option::[Option]) -&gt; wxBufferedPaintDC()</string>
		<string>wxBufferedPaintDC:destroy</string>
		<string>wxBufferedPaintDC:destroy(&lt;#This::wxBufferedPaintDC()#&gt;)</string>
		<string>wxBufferedPaintDC:destroy(This::wxBufferedPaintDC()) -&gt; ok</string>
		<string>wxButton:new</string>
		<string>wxButton:new()</string>
		<string>wxButton:new() -&gt; wxButton()</string>
		<string>wxButton:new</string>
		<string>wxButton:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxButton:new(Parent, Id) -&gt; wxButton()</string>
		<string>wxButton:new</string>
		<string>wxButton:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxButton:new(Parent, Id, Option::[Option]) -&gt; wxButton()</string>
		<string>wxButton:create</string>
		<string>wxButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxButton:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxButton:create</string>
		<string>wxButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxButton:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxButton:getDefaultSize</string>
		<string>wxButton:getDefaultSize()</string>
		<string>wxButton:getDefaultSize() -&gt; {W::integer(), H::integer()}</string>
		<string>wxButton:setDefault</string>
		<string>wxButton:setDefault(&lt;#This#&gt;)</string>
		<string>wxButton:setDefault(This) -&gt; ok</string>
		<string>wxButton:setLabel</string>
		<string>wxButton:setLabel(&lt;#This#&gt;, &lt;#Label#&gt;)</string>
		<string>wxButton:setLabel(This, Label) -&gt; ok</string>
		<string>wxButton:destroy</string>
		<string>wxButton:destroy(&lt;#This::wxButton()#&gt;)</string>
		<string>wxButton:destroy(This::wxButton()) -&gt; ok</string>
		<string>wxCalendarCtrl:new</string>
		<string>wxCalendarCtrl:new()</string>
		<string>wxCalendarCtrl:new() -&gt; wxCalendarCtrl()</string>
		<string>wxCalendarCtrl:new</string>
		<string>wxCalendarCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxCalendarCtrl:new(Parent, Id) -&gt; wxCalendarCtrl()</string>
		<string>wxCalendarCtrl:new</string>
		<string>wxCalendarCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCalendarCtrl:new(Parent, Id, Option::[Option]) -&gt; wxCalendarCtrl()</string>
		<string>wxCalendarCtrl:create</string>
		<string>wxCalendarCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxCalendarCtrl:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxCalendarCtrl:create</string>
		<string>wxCalendarCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCalendarCtrl:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxCalendarCtrl:setDate</string>
		<string>wxCalendarCtrl:setDate(&lt;#This#&gt;, &lt;#Date#&gt;)</string>
		<string>wxCalendarCtrl:setDate(This, Date) -&gt; boolean()</string>
		<string>wxCalendarCtrl:getDate</string>
		<string>wxCalendarCtrl:getDate(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:getDate(This) -&gt; wx_datetime() (see module wx)</string>
		<string>wxCalendarCtrl:enableYearChange</string>
		<string>wxCalendarCtrl:enableYearChange(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:enableYearChange(This) -&gt; ok</string>
		<string>wxCalendarCtrl:enableYearChange</string>
		<string>wxCalendarCtrl:enableYearChange(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCalendarCtrl:enableYearChange(This, Option::[Option]) -&gt; ok</string>
		<string>wxCalendarCtrl:enableMonthChange</string>
		<string>wxCalendarCtrl:enableMonthChange(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:enableMonthChange(This) -&gt; ok</string>
		<string>wxCalendarCtrl:enableMonthChange</string>
		<string>wxCalendarCtrl:enableMonthChange(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCalendarCtrl:enableMonthChange(This, Option::[Option]) -&gt; ok</string>
		<string>wxCalendarCtrl:enableHolidayDisplay</string>
		<string>wxCalendarCtrl:enableHolidayDisplay(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:enableHolidayDisplay(This) -&gt; ok</string>
		<string>wxCalendarCtrl:enableHolidayDisplay</string>
		<string>wxCalendarCtrl:enableHolidayDisplay(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCalendarCtrl:enableHolidayDisplay(This, Option::[Option]) -&gt; ok</string>
		<string>wxCalendarCtrl:setHeaderColours</string>
		<string>wxCalendarCtrl:setHeaderColours(&lt;#This#&gt;, &lt;#ColFg#&gt;, &lt;#ColBg#&gt;)</string>
		<string>wxCalendarCtrl:setHeaderColours(This, ColFg, ColBg) -&gt; ok</string>
		<string>wxCalendarCtrl:getHeaderColourFg</string>
		<string>wxCalendarCtrl:getHeaderColourFg(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:getHeaderColourFg(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarCtrl:getHeaderColourBg</string>
		<string>wxCalendarCtrl:getHeaderColourBg(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:getHeaderColourBg(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarCtrl:setHighlightColours</string>
		<string>wxCalendarCtrl:setHighlightColours(&lt;#This#&gt;, &lt;#ColFg#&gt;, &lt;#ColBg#&gt;)</string>
		<string>wxCalendarCtrl:setHighlightColours(This, ColFg, ColBg) -&gt; ok</string>
		<string>wxCalendarCtrl:getHighlightColourFg</string>
		<string>wxCalendarCtrl:getHighlightColourFg(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:getHighlightColourFg(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarCtrl:getHighlightColourBg</string>
		<string>wxCalendarCtrl:getHighlightColourBg(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:getHighlightColourBg(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarCtrl:setHolidayColours</string>
		<string>wxCalendarCtrl:setHolidayColours(&lt;#This#&gt;, &lt;#ColFg#&gt;, &lt;#ColBg#&gt;)</string>
		<string>wxCalendarCtrl:setHolidayColours(This, ColFg, ColBg) -&gt; ok</string>
		<string>wxCalendarCtrl:getHolidayColourFg</string>
		<string>wxCalendarCtrl:getHolidayColourFg(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:getHolidayColourFg(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarCtrl:getHolidayColourBg</string>
		<string>wxCalendarCtrl:getHolidayColourBg(&lt;#This#&gt;)</string>
		<string>wxCalendarCtrl:getHolidayColourBg(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarCtrl:getAttr</string>
		<string>wxCalendarCtrl:getAttr(&lt;#This#&gt;, &lt;#Day#&gt;)</string>
		<string>wxCalendarCtrl:getAttr(This, Day) -&gt; wxCalendarDateAttr() (see module wxCalendarDateAttr)</string>
		<string>wxCalendarCtrl:setAttr</string>
		<string>wxCalendarCtrl:setAttr(&lt;#This#&gt;, &lt;#Day#&gt;, &lt;#Attr#&gt;)</string>
		<string>wxCalendarCtrl:setAttr(This, Day, Attr) -&gt; ok</string>
		<string>wxCalendarCtrl:setHoliday</string>
		<string>wxCalendarCtrl:setHoliday(&lt;#This#&gt;, &lt;#Day#&gt;)</string>
		<string>wxCalendarCtrl:setHoliday(This, Day) -&gt; ok</string>
		<string>wxCalendarCtrl:resetAttr</string>
		<string>wxCalendarCtrl:resetAttr(&lt;#This#&gt;, &lt;#Day#&gt;)</string>
		<string>wxCalendarCtrl:resetAttr(This, Day) -&gt; ok</string>
		<string>wxCalendarCtrl:hitTest</string>
		<string>wxCalendarCtrl:hitTest(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxCalendarCtrl:hitTest(This, Pos) -&gt; Result</string>
		<string>wxCalendarCtrl:destroy</string>
		<string>wxCalendarCtrl:destroy(&lt;#This::wxCalendarCtrl()#&gt;)</string>
		<string>wxCalendarCtrl:destroy(This::wxCalendarCtrl()) -&gt; ok</string>
		<string>wxCalendarDateAttr:new</string>
		<string>wxCalendarDateAttr:new()</string>
		<string>wxCalendarDateAttr:new() -&gt; wxCalendarDateAttr()</string>
		<string>wxCalendarDateAttr:new</string>
		<string>wxCalendarDateAttr:new(&lt;#Border#&gt;)</string>
		<string>wxCalendarDateAttr:new(Border) -&gt; wxCalendarDateAttr()</string>
		<string>wxCalendarDateAttr:new</string>
		<string>wxCalendarDateAttr:new(&lt;#Border#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCalendarDateAttr:new(Border, Option::[Option]) -&gt; wxCalendarDateAttr()</string>
		<string>wxCalendarDateAttr:setTextColour</string>
		<string>wxCalendarDateAttr:setTextColour(&lt;#This#&gt;, &lt;#ColText#&gt;)</string>
		<string>wxCalendarDateAttr:setTextColour(This, ColText) -&gt; ok</string>
		<string>wxCalendarDateAttr:setBackgroundColour</string>
		<string>wxCalendarDateAttr:setBackgroundColour(&lt;#This#&gt;, &lt;#ColBack#&gt;)</string>
		<string>wxCalendarDateAttr:setBackgroundColour(This, ColBack) -&gt; ok</string>
		<string>wxCalendarDateAttr:setBorderColour</string>
		<string>wxCalendarDateAttr:setBorderColour(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxCalendarDateAttr:setBorderColour(This, Col) -&gt; ok</string>
		<string>wxCalendarDateAttr:setFont</string>
		<string>wxCalendarDateAttr:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxCalendarDateAttr:setFont(This, Font) -&gt; ok</string>
		<string>wxCalendarDateAttr:setBorder</string>
		<string>wxCalendarDateAttr:setBorder(&lt;#This#&gt;, &lt;#Border#&gt;)</string>
		<string>wxCalendarDateAttr:setBorder(This, Border) -&gt; ok</string>
		<string>wxCalendarDateAttr:setHoliday</string>
		<string>wxCalendarDateAttr:setHoliday(&lt;#This#&gt;, &lt;#Holiday#&gt;)</string>
		<string>wxCalendarDateAttr:setHoliday(This, Holiday) -&gt; ok</string>
		<string>wxCalendarDateAttr:hasTextColour</string>
		<string>wxCalendarDateAttr:hasTextColour(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:hasTextColour(This) -&gt; boolean()</string>
		<string>wxCalendarDateAttr:hasBackgroundColour</string>
		<string>wxCalendarDateAttr:hasBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:hasBackgroundColour(This) -&gt; boolean()</string>
		<string>wxCalendarDateAttr:hasBorderColour</string>
		<string>wxCalendarDateAttr:hasBorderColour(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:hasBorderColour(This) -&gt; boolean()</string>
		<string>wxCalendarDateAttr:hasFont</string>
		<string>wxCalendarDateAttr:hasFont(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:hasFont(This) -&gt; boolean()</string>
		<string>wxCalendarDateAttr:hasBorder</string>
		<string>wxCalendarDateAttr:hasBorder(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:hasBorder(This) -&gt; boolean()</string>
		<string>wxCalendarDateAttr:isHoliday</string>
		<string>wxCalendarDateAttr:isHoliday(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:isHoliday(This) -&gt; boolean()</string>
		<string>wxCalendarDateAttr:getTextColour</string>
		<string>wxCalendarDateAttr:getTextColour(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:getTextColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarDateAttr:getBackgroundColour</string>
		<string>wxCalendarDateAttr:getBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:getBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarDateAttr:getBorderColour</string>
		<string>wxCalendarDateAttr:getBorderColour(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:getBorderColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxCalendarDateAttr:getFont</string>
		<string>wxCalendarDateAttr:getFont(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:getFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxCalendarDateAttr:getBorder</string>
		<string>wxCalendarDateAttr:getBorder(&lt;#This#&gt;)</string>
		<string>wxCalendarDateAttr:getBorder(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxCalendarDateAttr:destroy</string>
		<string>wxCalendarDateAttr:destroy(&lt;#This::wxCalendarDateAttr()#&gt;)</string>
		<string>wxCalendarDateAttr:destroy(This::wxCalendarDateAttr()) -&gt; ok</string>
		<string>wxCalendarEvent:getWeekDay</string>
		<string>wxCalendarEvent:getWeekDay(&lt;#This#&gt;)</string>
		<string>wxCalendarEvent:getWeekDay(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxCaret:new</string>
		<string>wxCaret:new(&lt;#Window#&gt;, &lt;#Size#&gt;)</string>
		<string>wxCaret:new(Window, Size) -&gt; wxCaret()</string>
		<string>wxCaret:new</string>
		<string>wxCaret:new(&lt;#Window#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxCaret:new(Window, Width, Height) -&gt; wxCaret()</string>
		<string>wxCaret:create</string>
		<string>wxCaret:create(&lt;#This#&gt;, &lt;#Window#&gt;, &lt;#Size#&gt;)</string>
		<string>wxCaret:create(This, Window, Size) -&gt; boolean()</string>
		<string>wxCaret:create</string>
		<string>wxCaret:create(&lt;#This#&gt;, &lt;#Window#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxCaret:create(This, Window, Width, Height) -&gt; boolean()</string>
		<string>wxCaret:getBlinkTime</string>
		<string>wxCaret:getBlinkTime()</string>
		<string>wxCaret:getBlinkTime() -&gt; integer()</string>
		<string>wxCaret:getPosition</string>
		<string>wxCaret:getPosition(&lt;#This#&gt;)</string>
		<string>wxCaret:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxCaret:getSize</string>
		<string>wxCaret:getSize(&lt;#This#&gt;)</string>
		<string>wxCaret:getSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxCaret:getWindow</string>
		<string>wxCaret:getWindow(&lt;#This#&gt;)</string>
		<string>wxCaret:getWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxCaret:hide</string>
		<string>wxCaret:hide(&lt;#This#&gt;)</string>
		<string>wxCaret:hide(This) -&gt; ok</string>
		<string>wxCaret:isOk</string>
		<string>wxCaret:isOk(&lt;#This#&gt;)</string>
		<string>wxCaret:isOk(This) -&gt; boolean()</string>
		<string>wxCaret:isVisible</string>
		<string>wxCaret:isVisible(&lt;#This#&gt;)</string>
		<string>wxCaret:isVisible(This) -&gt; boolean()</string>
		<string>wxCaret:move</string>
		<string>wxCaret:move(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxCaret:move(This, Pt) -&gt; ok</string>
		<string>wxCaret:move</string>
		<string>wxCaret:move(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxCaret:move(This, X, Y) -&gt; ok</string>
		<string>wxCaret:setBlinkTime</string>
		<string>wxCaret:setBlinkTime(&lt;#Milliseconds#&gt;)</string>
		<string>wxCaret:setBlinkTime(Milliseconds) -&gt; ok</string>
		<string>wxCaret:setSize</string>
		<string>wxCaret:setSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxCaret:setSize(This, Size) -&gt; ok</string>
		<string>wxCaret:setSize</string>
		<string>wxCaret:setSize(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxCaret:setSize(This, Width, Height) -&gt; ok</string>
		<string>wxCaret:show</string>
		<string>wxCaret:show(&lt;#This#&gt;)</string>
		<string>wxCaret:show(This) -&gt; ok</string>
		<string>wxCaret:show</string>
		<string>wxCaret:show(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCaret:show(This, Option::[Option]) -&gt; ok</string>
		<string>wxCaret:destroy</string>
		<string>wxCaret:destroy(&lt;#This::wxCaret()#&gt;)</string>
		<string>wxCaret:destroy(This::wxCaret()) -&gt; ok</string>
		<string>wxCheckBox:new</string>
		<string>wxCheckBox:new()</string>
		<string>wxCheckBox:new() -&gt; wxCheckBox()</string>
		<string>wxCheckBox:new</string>
		<string>wxCheckBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxCheckBox:new(Parent, Id, Label) -&gt; wxCheckBox()</string>
		<string>wxCheckBox:new</string>
		<string>wxCheckBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCheckBox:new(Parent, Id, Label, Option::[Option]) -&gt; wxCheckBox()</string>
		<string>wxCheckBox:create</string>
		<string>wxCheckBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxCheckBox:create(This, Parent, Id, Label) -&gt; boolean()</string>
		<string>wxCheckBox:create</string>
		<string>wxCheckBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCheckBox:create(This, Parent, Id, Label, Option::[Option]) -&gt; boolean()</string>
		<string>wxCheckBox:getValue</string>
		<string>wxCheckBox:getValue(&lt;#This#&gt;)</string>
		<string>wxCheckBox:getValue(This) -&gt; boolean()</string>
		<string>wxCheckBox:get3StateValue</string>
		<string>wxCheckBox:get3StateValue(&lt;#This#&gt;)</string>
		<string>wxCheckBox:get3StateValue(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxCheckBox:is3rdStateAllowedForUser</string>
		<string>wxCheckBox:is3rdStateAllowedForUser(&lt;#This#&gt;)</string>
		<string>wxCheckBox:is3rdStateAllowedForUser(This) -&gt; boolean()</string>
		<string>wxCheckBox:is3State</string>
		<string>wxCheckBox:is3State(&lt;#This#&gt;)</string>
		<string>wxCheckBox:is3State(This) -&gt; boolean()</string>
		<string>wxCheckBox:isChecked</string>
		<string>wxCheckBox:isChecked(&lt;#This#&gt;)</string>
		<string>wxCheckBox:isChecked(This) -&gt; boolean()</string>
		<string>wxCheckBox:setValue</string>
		<string>wxCheckBox:setValue(&lt;#This#&gt;, &lt;#State#&gt;)</string>
		<string>wxCheckBox:setValue(This, State) -&gt; ok</string>
		<string>wxCheckBox:set3StateValue</string>
		<string>wxCheckBox:set3StateValue(&lt;#This#&gt;, &lt;#State#&gt;)</string>
		<string>wxCheckBox:set3StateValue(This, State) -&gt; ok</string>
		<string>wxCheckBox:destroy</string>
		<string>wxCheckBox:destroy(&lt;#This::wxCheckBox()#&gt;)</string>
		<string>wxCheckBox:destroy(This::wxCheckBox()) -&gt; ok</string>
		<string>wxCheckListBox:new</string>
		<string>wxCheckListBox:new()</string>
		<string>wxCheckListBox:new() -&gt; wxCheckListBox()</string>
		<string>wxCheckListBox:new</string>
		<string>wxCheckListBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxCheckListBox:new(Parent, Id) -&gt; wxCheckListBox()</string>
		<string>wxCheckListBox:new</string>
		<string>wxCheckListBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCheckListBox:new(Parent, Id, Option::[Option]) -&gt; wxCheckListBox()</string>
		<string>wxCheckListBox:check</string>
		<string>wxCheckListBox:check(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxCheckListBox:check(This, Index) -&gt; ok</string>
		<string>wxCheckListBox:check</string>
		<string>wxCheckListBox:check(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCheckListBox:check(This, Index, Option::[Option]) -&gt; ok</string>
		<string>wxCheckListBox:isChecked</string>
		<string>wxCheckListBox:isChecked(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxCheckListBox:isChecked(This, Index) -&gt; boolean()</string>
		<string>wxCheckListBox:destroy</string>
		<string>wxCheckListBox:destroy(&lt;#This::wxCheckListBox()#&gt;)</string>
		<string>wxCheckListBox:destroy(This::wxCheckListBox()) -&gt; ok</string>
		<string>wxChildFocusEvent:getWindow</string>
		<string>wxChildFocusEvent:getWindow(&lt;#This#&gt;)</string>
		<string>wxChildFocusEvent:getWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxChoice:new</string>
		<string>wxChoice:new()</string>
		<string>wxChoice:new() -&gt; wxChoice()</string>
		<string>wxChoice:new</string>
		<string>wxChoice:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxChoice:new(Parent, Id) -&gt; wxChoice()</string>
		<string>wxChoice:new</string>
		<string>wxChoice:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxChoice:new(Parent, Id, Option::[Option]) -&gt; wxChoice()</string>
		<string>wxChoice:create</string>
		<string>wxChoice:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;)</string>
		<string>wxChoice:create(This, Parent, Id, Pos, Size, Choices) -&gt; boolean()</string>
		<string>wxChoice:create</string>
		<string>wxChoice:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxChoice:create(This, Parent, Id, Pos, Size, Choices, Option::[Option]) -&gt; boolean()</string>
		<string>wxChoice:delete</string>
		<string>wxChoice:delete(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxChoice:delete(This, N) -&gt; ok</string>
		<string>wxChoice:getColumns</string>
		<string>wxChoice:getColumns(&lt;#This#&gt;)</string>
		<string>wxChoice:getColumns(This) -&gt; integer()</string>
		<string>wxChoice:setColumns</string>
		<string>wxChoice:setColumns(&lt;#This#&gt;)</string>
		<string>wxChoice:setColumns(This) -&gt; ok</string>
		<string>wxChoice:setColumns</string>
		<string>wxChoice:setColumns(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxChoice:setColumns(This, Option::[Option]) -&gt; ok</string>
		<string>wxChoice:destroy</string>
		<string>wxChoice:destroy(&lt;#This::wxChoice()#&gt;)</string>
		<string>wxChoice:destroy(This::wxChoice()) -&gt; ok</string>
		<string>wxChoicebook:new</string>
		<string>wxChoicebook:new()</string>
		<string>wxChoicebook:new() -&gt; wxChoicebook()</string>
		<string>wxChoicebook:new</string>
		<string>wxChoicebook:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxChoicebook:new(Parent, Id) -&gt; wxChoicebook()</string>
		<string>wxChoicebook:new</string>
		<string>wxChoicebook:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxChoicebook:new(Parent, Id, Option::[Option]) -&gt; wxChoicebook()</string>
		<string>wxChoicebook:addPage</string>
		<string>wxChoicebook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxChoicebook:addPage(This, Page, Text) -&gt; boolean()</string>
		<string>wxChoicebook:addPage</string>
		<string>wxChoicebook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxChoicebook:addPage(This, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxChoicebook:advanceSelection</string>
		<string>wxChoicebook:advanceSelection(&lt;#This#&gt;)</string>
		<string>wxChoicebook:advanceSelection(This) -&gt; ok</string>
		<string>wxChoicebook:advanceSelection</string>
		<string>wxChoicebook:advanceSelection(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxChoicebook:advanceSelection(This, Option::[Option]) -&gt; ok</string>
		<string>wxChoicebook:assignImageList</string>
		<string>wxChoicebook:assignImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxChoicebook:assignImageList(This, ImageList) -&gt; ok</string>
		<string>wxChoicebook:create</string>
		<string>wxChoicebook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxChoicebook:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxChoicebook:create</string>
		<string>wxChoicebook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxChoicebook:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxChoicebook:deleteAllPages</string>
		<string>wxChoicebook:deleteAllPages(&lt;#This#&gt;)</string>
		<string>wxChoicebook:deleteAllPages(This) -&gt; boolean()</string>
		<string>wxChoicebook:deletePage</string>
		<string>wxChoicebook:deletePage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxChoicebook:deletePage(This, N) -&gt; boolean()</string>
		<string>wxChoicebook:removePage</string>
		<string>wxChoicebook:removePage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxChoicebook:removePage(This, N) -&gt; boolean()</string>
		<string>wxChoicebook:getCurrentPage</string>
		<string>wxChoicebook:getCurrentPage(&lt;#This#&gt;)</string>
		<string>wxChoicebook:getCurrentPage(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxChoicebook:getImageList</string>
		<string>wxChoicebook:getImageList(&lt;#This#&gt;)</string>
		<string>wxChoicebook:getImageList(This) -&gt; wxImageList() (see module wxImageList)</string>
		<string>wxChoicebook:getPage</string>
		<string>wxChoicebook:getPage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxChoicebook:getPage(This, N) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxChoicebook:getPageCount</string>
		<string>wxChoicebook:getPageCount(&lt;#This#&gt;)</string>
		<string>wxChoicebook:getPageCount(This) -&gt; integer()</string>
		<string>wxChoicebook:getPageImage</string>
		<string>wxChoicebook:getPageImage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxChoicebook:getPageImage(This, N) -&gt; integer()</string>
		<string>wxChoicebook:getPageText</string>
		<string>wxChoicebook:getPageText(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxChoicebook:getPageText(This, N) -&gt; charlist() (see module unicode)</string>
		<string>wxChoicebook:getSelection</string>
		<string>wxChoicebook:getSelection(&lt;#This#&gt;)</string>
		<string>wxChoicebook:getSelection(This) -&gt; integer()</string>
		<string>wxChoicebook:hitTest</string>
		<string>wxChoicebook:hitTest(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxChoicebook:hitTest(This, Pt) -&gt; Result</string>
		<string>wxChoicebook:insertPage</string>
		<string>wxChoicebook:insertPage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxChoicebook:insertPage(This, N, Page, Text) -&gt; boolean()</string>
		<string>wxChoicebook:insertPage</string>
		<string>wxChoicebook:insertPage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxChoicebook:insertPage(This, N, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxChoicebook:setImageList</string>
		<string>wxChoicebook:setImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxChoicebook:setImageList(This, ImageList) -&gt; ok</string>
		<string>wxChoicebook:setPageSize</string>
		<string>wxChoicebook:setPageSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxChoicebook:setPageSize(This, Size) -&gt; ok</string>
		<string>wxChoicebook:setPageImage</string>
		<string>wxChoicebook:setPageImage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#ImageId#&gt;)</string>
		<string>wxChoicebook:setPageImage(This, N, ImageId) -&gt; boolean()</string>
		<string>wxChoicebook:setPageText</string>
		<string>wxChoicebook:setPageText(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#StrText#&gt;)</string>
		<string>wxChoicebook:setPageText(This, N, StrText) -&gt; boolean()</string>
		<string>wxChoicebook:setSelection</string>
		<string>wxChoicebook:setSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxChoicebook:setSelection(This, N) -&gt; integer()</string>
		<string>wxChoicebook:changeSelection</string>
		<string>wxChoicebook:changeSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxChoicebook:changeSelection(This, N) -&gt; integer()</string>
		<string>wxChoicebook:destroy</string>
		<string>wxChoicebook:destroy(&lt;#This::wxChoicebook()#&gt;)</string>
		<string>wxChoicebook:destroy(This::wxChoicebook()) -&gt; ok</string>
		<string>wxClientDC:new</string>
		<string>wxClientDC:new()</string>
		<string>wxClientDC:new() -&gt; wxClientDC()</string>
		<string>wxClientDC:new</string>
		<string>wxClientDC:new(&lt;#Win#&gt;)</string>
		<string>wxClientDC:new(Win) -&gt; wxClientDC()</string>
		<string>wxClientDC:destroy</string>
		<string>wxClientDC:destroy(&lt;#This::wxClientDC()#&gt;)</string>
		<string>wxClientDC:destroy(This::wxClientDC()) -&gt; ok</string>
		<string>wxClipboard:new</string>
		<string>wxClipboard:new()</string>
		<string>wxClipboard:new() -&gt; wxClipboard()</string>
		<string>wxClipboard:addData</string>
		<string>wxClipboard:addData(&lt;#This#&gt;, &lt;#Data#&gt;)</string>
		<string>wxClipboard:addData(This, Data) -&gt; boolean()</string>
		<string>wxClipboard:clear</string>
		<string>wxClipboard:clear(&lt;#This#&gt;)</string>
		<string>wxClipboard:clear(This) -&gt; ok</string>
		<string>wxClipboard:close</string>
		<string>wxClipboard:close(&lt;#This#&gt;)</string>
		<string>wxClipboard:close(This) -&gt; ok</string>
		<string>wxClipboard:flush</string>
		<string>wxClipboard:flush(&lt;#This#&gt;)</string>
		<string>wxClipboard:flush(This) -&gt; boolean()</string>
		<string>wxClipboard:getData</string>
		<string>wxClipboard:getData(&lt;#This#&gt;, &lt;#Data#&gt;)</string>
		<string>wxClipboard:getData(This, Data) -&gt; boolean()</string>
		<string>wxClipboard:isOpened</string>
		<string>wxClipboard:isOpened(&lt;#This#&gt;)</string>
		<string>wxClipboard:isOpened(This) -&gt; boolean()</string>
		<string>wxClipboard:open</string>
		<string>wxClipboard:open(&lt;#This#&gt;)</string>
		<string>wxClipboard:open(This) -&gt; boolean()</string>
		<string>wxClipboard:setData</string>
		<string>wxClipboard:setData(&lt;#This#&gt;, &lt;#Data#&gt;)</string>
		<string>wxClipboard:setData(This, Data) -&gt; boolean()</string>
		<string>wxClipboard:usePrimarySelection</string>
		<string>wxClipboard:usePrimarySelection(&lt;#This#&gt;)</string>
		<string>wxClipboard:usePrimarySelection(This) -&gt; ok</string>
		<string>wxClipboard:usePrimarySelection</string>
		<string>wxClipboard:usePrimarySelection(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxClipboard:usePrimarySelection(This, Option::[Option]) -&gt; ok</string>
		<string>wxClipboard:isSupported</string>
		<string>wxClipboard:isSupported(&lt;#This#&gt;, &lt;#Format#&gt;)</string>
		<string>wxClipboard:isSupported(This, Format) -&gt; boolean()</string>
		<string>wxClipboard:get</string>
		<string>wxClipboard:get()</string>
		<string>wxClipboard:get() -&gt; wxClipboard()</string>
		<string>wxClipboard:destroy</string>
		<string>wxClipboard:destroy(&lt;#This::wxClipboard()#&gt;)</string>
		<string>wxClipboard:destroy(This::wxClipboard()) -&gt; ok</string>
		<string>wxCloseEvent:canVeto</string>
		<string>wxCloseEvent:canVeto(&lt;#This#&gt;)</string>
		<string>wxCloseEvent:canVeto(This) -&gt; boolean()</string>
		<string>wxCloseEvent:getLoggingOff</string>
		<string>wxCloseEvent:getLoggingOff(&lt;#This#&gt;)</string>
		<string>wxCloseEvent:getLoggingOff(This) -&gt; boolean()</string>
		<string>wxCloseEvent:setCanVeto</string>
		<string>wxCloseEvent:setCanVeto(&lt;#This#&gt;, &lt;#CanVeto#&gt;)</string>
		<string>wxCloseEvent:setCanVeto(This, CanVeto) -&gt; ok</string>
		<string>wxCloseEvent:setLoggingOff</string>
		<string>wxCloseEvent:setLoggingOff(&lt;#This#&gt;, &lt;#LogOff#&gt;)</string>
		<string>wxCloseEvent:setLoggingOff(This, LogOff) -&gt; ok</string>
		<string>wxCloseEvent:veto</string>
		<string>wxCloseEvent:veto(&lt;#This#&gt;)</string>
		<string>wxCloseEvent:veto(This) -&gt; ok</string>
		<string>wxCloseEvent:veto</string>
		<string>wxCloseEvent:veto(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCloseEvent:veto(This, Option::[Option]) -&gt; ok</string>
		<string>wxColourData:new</string>
		<string>wxColourData:new()</string>
		<string>wxColourData:new() -&gt; wxColourData()</string>
		<string>wxColourData:new</string>
		<string>wxColourData:new(&lt;#Data#&gt;)</string>
		<string>wxColourData:new(Data) -&gt; wxColourData()</string>
		<string>wxColourData:getChooseFull</string>
		<string>wxColourData:getChooseFull(&lt;#This#&gt;)</string>
		<string>wxColourData:getChooseFull(This) -&gt; boolean()</string>
		<string>wxColourData:getColour</string>
		<string>wxColourData:getColour(&lt;#This#&gt;)</string>
		<string>wxColourData:getColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxColourData:getCustomColour</string>
		<string>wxColourData:getCustomColour(&lt;#This#&gt;, &lt;#I#&gt;)</string>
		<string>wxColourData:getCustomColour(This, I) -&gt; wx_colour4() (see module wx)</string>
		<string>wxColourData:setChooseFull</string>
		<string>wxColourData:setChooseFull(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxColourData:setChooseFull(This, Flag) -&gt; ok</string>
		<string>wxColourData:setColour</string>
		<string>wxColourData:setColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxColourData:setColour(This, Colour) -&gt; ok</string>
		<string>wxColourData:setCustomColour</string>
		<string>wxColourData:setCustomColour(&lt;#This#&gt;, &lt;#I#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxColourData:setCustomColour(This, I, Colour) -&gt; ok</string>
		<string>wxColourData:destroy</string>
		<string>wxColourData:destroy(&lt;#This::wxColourData()#&gt;)</string>
		<string>wxColourData:destroy(This::wxColourData()) -&gt; ok</string>
		<string>wxColourDialog:new</string>
		<string>wxColourDialog:new()</string>
		<string>wxColourDialog:new() -&gt; wxColourDialog()</string>
		<string>wxColourDialog:new</string>
		<string>wxColourDialog:new(&lt;#Parent#&gt;)</string>
		<string>wxColourDialog:new(Parent) -&gt; wxColourDialog()</string>
		<string>wxColourDialog:new</string>
		<string>wxColourDialog:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxColourDialog:new(Parent, Option::[Option]) -&gt; wxColourDialog()</string>
		<string>wxColourDialog:create</string>
		<string>wxColourDialog:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxColourDialog:create(This, Parent) -&gt; boolean()</string>
		<string>wxColourDialog:create</string>
		<string>wxColourDialog:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxColourDialog:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxColourDialog:getColourData</string>
		<string>wxColourDialog:getColourData(&lt;#This#&gt;)</string>
		<string>wxColourDialog:getColourData(This) -&gt; wxColourData() (see module wxColourData)</string>
		<string>wxColourDialog:destroy</string>
		<string>wxColourDialog:destroy(&lt;#This::wxColourDialog()#&gt;)</string>
		<string>wxColourDialog:destroy(This::wxColourDialog()) -&gt; ok</string>
		<string>wxColourPickerCtrl:new</string>
		<string>wxColourPickerCtrl:new()</string>
		<string>wxColourPickerCtrl:new() -&gt; wxColourPickerCtrl()</string>
		<string>wxColourPickerCtrl:new</string>
		<string>wxColourPickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxColourPickerCtrl:new(Parent, Id) -&gt; wxColourPickerCtrl()</string>
		<string>wxColourPickerCtrl:new</string>
		<string>wxColourPickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxColourPickerCtrl:new(Parent, Id, Option::[Option]) -&gt; wxColourPickerCtrl()</string>
		<string>wxColourPickerCtrl:create</string>
		<string>wxColourPickerCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxColourPickerCtrl:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxColourPickerCtrl:create</string>
		<string>wxColourPickerCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxColourPickerCtrl:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxColourPickerCtrl:getColour</string>
		<string>wxColourPickerCtrl:getColour(&lt;#This#&gt;)</string>
		<string>wxColourPickerCtrl:getColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxColourPickerCtrl:setColour</string>
		<string>wxColourPickerCtrl:setColour(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxColourPickerCtrl:setColour(This, Text) -&gt; boolean()</string>
		<string>wxColourPickerCtrl:destroy</string>
		<string>wxColourPickerCtrl:destroy(&lt;#This::wxColourPickerCtrl()#&gt;)</string>
		<string>wxColourPickerCtrl:destroy(This::wxColourPickerCtrl()) -&gt; ok</string>
		<string>wxColourPickerEvent:getColour</string>
		<string>wxColourPickerEvent:getColour(&lt;#This#&gt;)</string>
		<string>wxColourPickerEvent:getColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxComboBox:new</string>
		<string>wxComboBox:new()</string>
		<string>wxComboBox:new() -&gt; wxComboBox()</string>
		<string>wxComboBox:new</string>
		<string>wxComboBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxComboBox:new(Parent, Id) -&gt; wxComboBox()</string>
		<string>wxComboBox:new</string>
		<string>wxComboBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxComboBox:new(Parent, Id, Option::[Option]) -&gt; wxComboBox()</string>
		<string>wxComboBox:create</string>
		<string>wxComboBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Value#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;)</string>
		<string>wxComboBox:create(This, Parent, Id, Value, Pos, Size, Choices) -&gt; boolean()</string>
		<string>wxComboBox:create</string>
		<string>wxComboBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Value#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxComboBox:create(This, Parent, Id, Value, Pos, Size, Choices, Option::[Option]) -&gt; boolean()</string>
		<string>wxComboBox:canCopy</string>
		<string>wxComboBox:canCopy(&lt;#This#&gt;)</string>
		<string>wxComboBox:canCopy(This) -&gt; boolean()</string>
		<string>wxComboBox:canCut</string>
		<string>wxComboBox:canCut(&lt;#This#&gt;)</string>
		<string>wxComboBox:canCut(This) -&gt; boolean()</string>
		<string>wxComboBox:canPaste</string>
		<string>wxComboBox:canPaste(&lt;#This#&gt;)</string>
		<string>wxComboBox:canPaste(This) -&gt; boolean()</string>
		<string>wxComboBox:canRedo</string>
		<string>wxComboBox:canRedo(&lt;#This#&gt;)</string>
		<string>wxComboBox:canRedo(This) -&gt; boolean()</string>
		<string>wxComboBox:canUndo</string>
		<string>wxComboBox:canUndo(&lt;#This#&gt;)</string>
		<string>wxComboBox:canUndo(This) -&gt; boolean()</string>
		<string>wxComboBox:copy</string>
		<string>wxComboBox:copy(&lt;#This#&gt;)</string>
		<string>wxComboBox:copy(This) -&gt; ok</string>
		<string>wxComboBox:cut</string>
		<string>wxComboBox:cut(&lt;#This#&gt;)</string>
		<string>wxComboBox:cut(This) -&gt; ok</string>
		<string>wxComboBox:getInsertionPoint</string>
		<string>wxComboBox:getInsertionPoint(&lt;#This#&gt;)</string>
		<string>wxComboBox:getInsertionPoint(This) -&gt; integer()</string>
		<string>wxComboBox:getLastPosition</string>
		<string>wxComboBox:getLastPosition(&lt;#This#&gt;)</string>
		<string>wxComboBox:getLastPosition(This) -&gt; integer()</string>
		<string>wxComboBox:getValue</string>
		<string>wxComboBox:getValue(&lt;#This#&gt;)</string>
		<string>wxComboBox:getValue(This) -&gt; charlist() (see module unicode)</string>
		<string>wxComboBox:paste</string>
		<string>wxComboBox:paste(&lt;#This#&gt;)</string>
		<string>wxComboBox:paste(This) -&gt; ok</string>
		<string>wxComboBox:redo</string>
		<string>wxComboBox:redo(&lt;#This#&gt;)</string>
		<string>wxComboBox:redo(This) -&gt; ok</string>
		<string>wxComboBox:replace</string>
		<string>wxComboBox:replace(&lt;#This#&gt;, &lt;#From#&gt;, &lt;#To#&gt;, &lt;#Value#&gt;)</string>
		<string>wxComboBox:replace(This, From, To, Value) -&gt; ok</string>
		<string>wxComboBox:remove</string>
		<string>wxComboBox:remove(&lt;#This#&gt;, &lt;#From#&gt;, &lt;#To#&gt;)</string>
		<string>wxComboBox:remove(This, From, To) -&gt; ok</string>
		<string>wxComboBox:setInsertionPoint</string>
		<string>wxComboBox:setInsertionPoint(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxComboBox:setInsertionPoint(This, Pos) -&gt; ok</string>
		<string>wxComboBox:setInsertionPointEnd</string>
		<string>wxComboBox:setInsertionPointEnd(&lt;#This#&gt;)</string>
		<string>wxComboBox:setInsertionPointEnd(This) -&gt; ok</string>
		<string>wxComboBox:setSelection</string>
		<string>wxComboBox:setSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxComboBox:setSelection(This, N) -&gt; ok</string>
		<string>wxComboBox:setSelection</string>
		<string>wxComboBox:setSelection(&lt;#This#&gt;, &lt;#From#&gt;, &lt;#To#&gt;)</string>
		<string>wxComboBox:setSelection(This, From, To) -&gt; ok</string>
		<string>wxComboBox:setValue</string>
		<string>wxComboBox:setValue(&lt;#This#&gt;, &lt;#Value#&gt;)</string>
		<string>wxComboBox:setValue(This, Value) -&gt; ok</string>
		<string>wxComboBox:undo</string>
		<string>wxComboBox:undo(&lt;#This#&gt;)</string>
		<string>wxComboBox:undo(This) -&gt; ok</string>
		<string>wxComboBox:destroy</string>
		<string>wxComboBox:destroy(&lt;#This::wxComboBox()#&gt;)</string>
		<string>wxComboBox:destroy(This::wxComboBox()) -&gt; ok</string>
		<string>wxCommandEvent:getClientData</string>
		<string>wxCommandEvent:getClientData(&lt;#This#&gt;)</string>
		<string>wxCommandEvent:getClientData(This) -&gt; term()</string>
		<string>wxCommandEvent:getExtraLong</string>
		<string>wxCommandEvent:getExtraLong(&lt;#This#&gt;)</string>
		<string>wxCommandEvent:getExtraLong(This) -&gt; integer()</string>
		<string>wxCommandEvent:getInt</string>
		<string>wxCommandEvent:getInt(&lt;#This#&gt;)</string>
		<string>wxCommandEvent:getInt(This) -&gt; integer()</string>
		<string>wxCommandEvent:getSelection</string>
		<string>wxCommandEvent:getSelection(&lt;#This#&gt;)</string>
		<string>wxCommandEvent:getSelection(This) -&gt; integer()</string>
		<string>wxCommandEvent:getString</string>
		<string>wxCommandEvent:getString(&lt;#This#&gt;)</string>
		<string>wxCommandEvent:getString(This) -&gt; charlist() (see module unicode)</string>
		<string>wxCommandEvent:isChecked</string>
		<string>wxCommandEvent:isChecked(&lt;#This#&gt;)</string>
		<string>wxCommandEvent:isChecked(This) -&gt; boolean()</string>
		<string>wxCommandEvent:isSelection</string>
		<string>wxCommandEvent:isSelection(&lt;#This#&gt;)</string>
		<string>wxCommandEvent:isSelection(This) -&gt; boolean()</string>
		<string>wxCommandEvent:setInt</string>
		<string>wxCommandEvent:setInt(&lt;#This#&gt;, &lt;#I#&gt;)</string>
		<string>wxCommandEvent:setInt(This, I) -&gt; ok</string>
		<string>wxCommandEvent:setString</string>
		<string>wxCommandEvent:setString(&lt;#This#&gt;, &lt;#S#&gt;)</string>
		<string>wxCommandEvent:setString(This, S) -&gt; ok</string>
		<string>wxContextMenuEvent:getPosition</string>
		<string>wxContextMenuEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxContextMenuEvent:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxContextMenuEvent:setPosition</string>
		<string>wxContextMenuEvent:setPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxContextMenuEvent:setPosition(This, Pos) -&gt; ok</string>
		<string>wxControl:getLabel</string>
		<string>wxControl:getLabel(&lt;#This#&gt;)</string>
		<string>wxControl:getLabel(This) -&gt; charlist() (see module unicode)</string>
		<string>wxControl:setLabel</string>
		<string>wxControl:setLabel(&lt;#This#&gt;, &lt;#Label#&gt;)</string>
		<string>wxControl:setLabel(This, Label) -&gt; ok</string>
		<string>wxControlWithItems:append</string>
		<string>wxControlWithItems:append(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxControlWithItems:append(This, Item) -&gt; integer()</string>
		<string>wxControlWithItems:append</string>
		<string>wxControlWithItems:append(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#ClientData#&gt;)</string>
		<string>wxControlWithItems:append(This, Item, ClientData) -&gt; integer()</string>
		<string>wxControlWithItems:appendStrings</string>
		<string>wxControlWithItems:appendStrings(&lt;#This#&gt;, &lt;#Strings#&gt;)</string>
		<string>wxControlWithItems:appendStrings(This, Strings) -&gt; ok</string>
		<string>wxControlWithItems:clear</string>
		<string>wxControlWithItems:clear(&lt;#This#&gt;)</string>
		<string>wxControlWithItems:clear(This) -&gt; ok</string>
		<string>wxControlWithItems:delete</string>
		<string>wxControlWithItems:delete(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxControlWithItems:delete(This, N) -&gt; ok</string>
		<string>wxControlWithItems:findString</string>
		<string>wxControlWithItems:findString(&lt;#This#&gt;, &lt;#S#&gt;)</string>
		<string>wxControlWithItems:findString(This, S) -&gt; integer()</string>
		<string>wxControlWithItems:findString</string>
		<string>wxControlWithItems:findString(&lt;#This#&gt;, &lt;#S#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxControlWithItems:findString(This, S, Option::[Option]) -&gt; integer()</string>
		<string>wxControlWithItems:getClientData</string>
		<string>wxControlWithItems:getClientData(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxControlWithItems:getClientData(This, N) -&gt; term()</string>
		<string>wxControlWithItems:setClientData</string>
		<string>wxControlWithItems:setClientData(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#ClientData#&gt;)</string>
		<string>wxControlWithItems:setClientData(This, N, ClientData) -&gt; ok</string>
		<string>wxControlWithItems:getCount</string>
		<string>wxControlWithItems:getCount(&lt;#This#&gt;)</string>
		<string>wxControlWithItems:getCount(This) -&gt; integer()</string>
		<string>wxControlWithItems:getSelection</string>
		<string>wxControlWithItems:getSelection(&lt;#This#&gt;)</string>
		<string>wxControlWithItems:getSelection(This) -&gt; integer()</string>
		<string>wxControlWithItems:getString</string>
		<string>wxControlWithItems:getString(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxControlWithItems:getString(This, N) -&gt; charlist() (see module unicode)</string>
		<string>wxControlWithItems:getStringSelection</string>
		<string>wxControlWithItems:getStringSelection(&lt;#This#&gt;)</string>
		<string>wxControlWithItems:getStringSelection(This) -&gt; charlist() (see module unicode)</string>
		<string>wxControlWithItems:insert</string>
		<string>wxControlWithItems:insert(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxControlWithItems:insert(This, Item, Pos) -&gt; integer()</string>
		<string>wxControlWithItems:insert</string>
		<string>wxControlWithItems:insert(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Pos#&gt;, &lt;#ClientData#&gt;)</string>
		<string>wxControlWithItems:insert(This, Item, Pos, ClientData) -&gt; integer()</string>
		<string>wxControlWithItems:isEmpty</string>
		<string>wxControlWithItems:isEmpty(&lt;#This#&gt;)</string>
		<string>wxControlWithItems:isEmpty(This) -&gt; boolean()</string>
		<string>wxControlWithItems:select</string>
		<string>wxControlWithItems:select(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxControlWithItems:select(This, N) -&gt; ok</string>
		<string>wxControlWithItems:setSelection</string>
		<string>wxControlWithItems:setSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxControlWithItems:setSelection(This, N) -&gt; ok</string>
		<string>wxControlWithItems:setString</string>
		<string>wxControlWithItems:setString(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#S#&gt;)</string>
		<string>wxControlWithItems:setString(This, N, S) -&gt; ok</string>
		<string>wxControlWithItems:setStringSelection</string>
		<string>wxControlWithItems:setStringSelection(&lt;#This#&gt;, &lt;#S#&gt;)</string>
		<string>wxControlWithItems:setStringSelection(This, S) -&gt; boolean()</string>
		<string>wxCursor:new</string>
		<string>wxCursor:new()</string>
		<string>wxCursor:new() -&gt; wxCursor()</string>
		<string>wxCursor:new</string>
		<string>wxCursor:new(&lt;#CursorId#&gt;)</string>
		<string>wxCursor:new(CursorId) -&gt; wxCursor()</string>
		<string>wxCursor:new</string>
		<string>wxCursor:new(&lt;#Bits#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxCursor:new(Bits, Width, Height) -&gt; wxCursor()</string>
		<string>wxCursor:new</string>
		<string>wxCursor:new(&lt;#Bits#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxCursor:new(Bits, Width, Height, Option::[Option]) -&gt; wxCursor()</string>
		<string>wxCursor:ok</string>
		<string>wxCursor:ok(&lt;#This#&gt;)</string>
		<string>wxCursor:ok(This) -&gt; boolean()</string>
		<string>wxCursor:destroy</string>
		<string>wxCursor:destroy(&lt;#This::wxCursor()#&gt;)</string>
		<string>wxCursor:destroy(This::wxCursor()) -&gt; ok</string>
		<string>wxDateEvent:getDate</string>
		<string>wxDateEvent:getDate(&lt;#This#&gt;)</string>
		<string>wxDateEvent:getDate(This) -&gt; wx_datetime() (see module wx)</string>
		<string>wxDatePickerCtrl:new</string>
		<string>wxDatePickerCtrl:new()</string>
		<string>wxDatePickerCtrl:new() -&gt; wxDatePickerCtrl()</string>
		<string>wxDatePickerCtrl:new</string>
		<string>wxDatePickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxDatePickerCtrl:new(Parent, Id) -&gt; wxDatePickerCtrl()</string>
		<string>wxDatePickerCtrl:new</string>
		<string>wxDatePickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDatePickerCtrl:new(Parent, Id, Option::[Option]) -&gt; wxDatePickerCtrl()</string>
		<string>wxDatePickerCtrl:getRange</string>
		<string>wxDatePickerCtrl:getRange(&lt;#This#&gt;, &lt;#Dt1#&gt;, &lt;#Dt2#&gt;)</string>
		<string>wxDatePickerCtrl:getRange(This, Dt1, Dt2) -&gt; boolean()</string>
		<string>wxDatePickerCtrl:getValue</string>
		<string>wxDatePickerCtrl:getValue(&lt;#This#&gt;)</string>
		<string>wxDatePickerCtrl:getValue(This) -&gt; wx_datetime() (see module wx)</string>
		<string>wxDatePickerCtrl:setRange</string>
		<string>wxDatePickerCtrl:setRange(&lt;#This#&gt;, &lt;#Dt1#&gt;, &lt;#Dt2#&gt;)</string>
		<string>wxDatePickerCtrl:setRange(This, Dt1, Dt2) -&gt; ok</string>
		<string>wxDatePickerCtrl:setValue</string>
		<string>wxDatePickerCtrl:setValue(&lt;#This#&gt;, &lt;#Date#&gt;)</string>
		<string>wxDatePickerCtrl:setValue(This, Date) -&gt; ok</string>
		<string>wxDatePickerCtrl:destroy</string>
		<string>wxDatePickerCtrl:destroy(&lt;#This::wxDatePickerCtrl()#&gt;)</string>
		<string>wxDatePickerCtrl:destroy(This::wxDatePickerCtrl()) -&gt; ok</string>
		<string>wxDC:blit</string>
		<string>wxDC:blit(&lt;#This#&gt;, &lt;#DestPt#&gt;, &lt;#Sz#&gt;, &lt;#Source#&gt;, &lt;#SrcPt#&gt;)</string>
		<string>wxDC:blit(This, DestPt, Sz, Source, SrcPt) -&gt; boolean()</string>
		<string>wxDC:blit</string>
		<string>wxDC:blit(&lt;#This#&gt;, &lt;#DestPt#&gt;, &lt;#Sz#&gt;, &lt;#Source#&gt;, &lt;#SrcPt#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:blit(This, DestPt, Sz, Source, SrcPt, Option::[Option]) -&gt; boolean()</string>
		<string>wxDC:calcBoundingBox</string>
		<string>wxDC:calcBoundingBox(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxDC:calcBoundingBox(This, X, Y) -&gt; ok</string>
		<string>wxDC:clear</string>
		<string>wxDC:clear(&lt;#This#&gt;)</string>
		<string>wxDC:clear(This) -&gt; ok</string>
		<string>wxDC:computeScaleAndOrigin</string>
		<string>wxDC:computeScaleAndOrigin(&lt;#This#&gt;)</string>
		<string>wxDC:computeScaleAndOrigin(This) -&gt; ok</string>
		<string>wxDC:crossHair</string>
		<string>wxDC:crossHair(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxDC:crossHair(This, Pt) -&gt; ok</string>
		<string>wxDC:destroyClippingRegion</string>
		<string>wxDC:destroyClippingRegion(&lt;#This#&gt;)</string>
		<string>wxDC:destroyClippingRegion(This) -&gt; ok</string>
		<string>wxDC:deviceToLogicalX</string>
		<string>wxDC:deviceToLogicalX(&lt;#This#&gt;, &lt;#X#&gt;)</string>
		<string>wxDC:deviceToLogicalX(This, X) -&gt; integer()</string>
		<string>wxDC:deviceToLogicalXRel</string>
		<string>wxDC:deviceToLogicalXRel(&lt;#This#&gt;, &lt;#X#&gt;)</string>
		<string>wxDC:deviceToLogicalXRel(This, X) -&gt; integer()</string>
		<string>wxDC:deviceToLogicalY</string>
		<string>wxDC:deviceToLogicalY(&lt;#This#&gt;, &lt;#Y#&gt;)</string>
		<string>wxDC:deviceToLogicalY(This, Y) -&gt; integer()</string>
		<string>wxDC:deviceToLogicalYRel</string>
		<string>wxDC:deviceToLogicalYRel(&lt;#This#&gt;, &lt;#Y#&gt;)</string>
		<string>wxDC:deviceToLogicalYRel(This, Y) -&gt; integer()</string>
		<string>wxDC:drawArc</string>
		<string>wxDC:drawArc(&lt;#This#&gt;, &lt;#Pt1#&gt;, &lt;#Pt2#&gt;, &lt;#Centre#&gt;)</string>
		<string>wxDC:drawArc(This, Pt1, Pt2, Centre) -&gt; ok</string>
		<string>wxDC:drawBitmap</string>
		<string>wxDC:drawBitmap(&lt;#This#&gt;, &lt;#Bmp#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxDC:drawBitmap(This, Bmp, Pt) -&gt; ok</string>
		<string>wxDC:drawBitmap</string>
		<string>wxDC:drawBitmap(&lt;#This#&gt;, &lt;#Bmp#&gt;, &lt;#Pt#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:drawBitmap(This, Bmp, Pt, Option::[Option]) -&gt; ok</string>
		<string>wxDC:drawCheckMark</string>
		<string>wxDC:drawCheckMark(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxDC:drawCheckMark(This, Rect) -&gt; ok</string>
		<string>wxDC:drawCircle</string>
		<string>wxDC:drawCircle(&lt;#This#&gt;, &lt;#Pt#&gt;, &lt;#Radius#&gt;)</string>
		<string>wxDC:drawCircle(This, Pt, Radius) -&gt; ok</string>
		<string>wxDC:drawEllipse</string>
		<string>wxDC:drawEllipse(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxDC:drawEllipse(This, Rect) -&gt; ok</string>
		<string>wxDC:drawEllipse</string>
		<string>wxDC:drawEllipse(&lt;#This#&gt;, &lt;#Pt#&gt;, &lt;#Sz#&gt;)</string>
		<string>wxDC:drawEllipse(This, Pt, Sz) -&gt; ok</string>
		<string>wxDC:drawEllipticArc</string>
		<string>wxDC:drawEllipticArc(&lt;#This#&gt;, &lt;#Pt#&gt;, &lt;#Sz#&gt;, &lt;#Sa#&gt;, &lt;#Ea#&gt;)</string>
		<string>wxDC:drawEllipticArc(This, Pt, Sz, Sa, Ea) -&gt; ok</string>
		<string>wxDC:drawIcon</string>
		<string>wxDC:drawIcon(&lt;#This#&gt;, &lt;#Icon#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxDC:drawIcon(This, Icon, Pt) -&gt; ok</string>
		<string>wxDC:drawLabel</string>
		<string>wxDC:drawLabel(&lt;#This#&gt;, &lt;#Text#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxDC:drawLabel(This, Text, Rect) -&gt; ok</string>
		<string>wxDC:drawLabel</string>
		<string>wxDC:drawLabel(&lt;#This#&gt;, &lt;#Text#&gt;, &lt;#Rect#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:drawLabel(This, Text, Rect, Option::[Option]) -&gt; ok</string>
		<string>wxDC:drawLine</string>
		<string>wxDC:drawLine(&lt;#This#&gt;, &lt;#Pt1#&gt;, &lt;#Pt2#&gt;)</string>
		<string>wxDC:drawLine(This, Pt1, Pt2) -&gt; ok</string>
		<string>wxDC:drawLines</string>
		<string>wxDC:drawLines(&lt;#This#&gt;, &lt;#Points#&gt;)</string>
		<string>wxDC:drawLines(This, Points) -&gt; ok</string>
		<string>wxDC:drawLines</string>
		<string>wxDC:drawLines(&lt;#This#&gt;, &lt;#Points#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:drawLines(This, Points, Option::[Option]) -&gt; ok</string>
		<string>wxDC:drawPolygon</string>
		<string>wxDC:drawPolygon(&lt;#This#&gt;, &lt;#Points#&gt;)</string>
		<string>wxDC:drawPolygon(This, Points) -&gt; ok</string>
		<string>wxDC:drawPolygon</string>
		<string>wxDC:drawPolygon(&lt;#This#&gt;, &lt;#Points#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:drawPolygon(This, Points, Option::[Option]) -&gt; ok</string>
		<string>wxDC:drawPoint</string>
		<string>wxDC:drawPoint(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxDC:drawPoint(This, Pt) -&gt; ok</string>
		<string>wxDC:drawRectangle</string>
		<string>wxDC:drawRectangle(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxDC:drawRectangle(This, Rect) -&gt; ok</string>
		<string>wxDC:drawRectangle</string>
		<string>wxDC:drawRectangle(&lt;#This#&gt;, &lt;#Pt#&gt;, &lt;#Sz#&gt;)</string>
		<string>wxDC:drawRectangle(This, Pt, Sz) -&gt; ok</string>
		<string>wxDC:drawRotatedText</string>
		<string>wxDC:drawRotatedText(&lt;#This#&gt;, &lt;#Text#&gt;, &lt;#Pt#&gt;, &lt;#Angle#&gt;)</string>
		<string>wxDC:drawRotatedText(This, Text, Pt, Angle) -&gt; ok</string>
		<string>wxDC:drawRoundedRectangle</string>
		<string>wxDC:drawRoundedRectangle(&lt;#This#&gt;, &lt;#R#&gt;, &lt;#Radius#&gt;)</string>
		<string>wxDC:drawRoundedRectangle(This, R, Radius) -&gt; ok</string>
		<string>wxDC:drawRoundedRectangle</string>
		<string>wxDC:drawRoundedRectangle(&lt;#This#&gt;, &lt;#Pt#&gt;, &lt;#Sz#&gt;, &lt;#Radius#&gt;)</string>
		<string>wxDC:drawRoundedRectangle(This, Pt, Sz, Radius) -&gt; ok</string>
		<string>wxDC:drawText</string>
		<string>wxDC:drawText(&lt;#This#&gt;, &lt;#Text#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxDC:drawText(This, Text, Pt) -&gt; ok</string>
		<string>wxDC:endDoc</string>
		<string>wxDC:endDoc(&lt;#This#&gt;)</string>
		<string>wxDC:endDoc(This) -&gt; ok</string>
		<string>wxDC:endPage</string>
		<string>wxDC:endPage(&lt;#This#&gt;)</string>
		<string>wxDC:endPage(This) -&gt; ok</string>
		<string>wxDC:floodFill</string>
		<string>wxDC:floodFill(&lt;#This#&gt;, &lt;#Pt#&gt;, &lt;#Col#&gt;)</string>
		<string>wxDC:floodFill(This, Pt, Col) -&gt; boolean()</string>
		<string>wxDC:floodFill</string>
		<string>wxDC:floodFill(&lt;#This#&gt;, &lt;#Pt#&gt;, &lt;#Col#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:floodFill(This, Pt, Col, Option::[Option]) -&gt; boolean()</string>
		<string>wxDC:getBackground</string>
		<string>wxDC:getBackground(&lt;#This#&gt;)</string>
		<string>wxDC:getBackground(This) -&gt; wxBrush() (see module wxBrush)</string>
		<string>wxDC:getBackgroundMode</string>
		<string>wxDC:getBackgroundMode(&lt;#This#&gt;)</string>
		<string>wxDC:getBackgroundMode(This) -&gt; integer()</string>
		<string>wxDC:getBrush</string>
		<string>wxDC:getBrush(&lt;#This#&gt;)</string>
		<string>wxDC:getBrush(This) -&gt; wxBrush() (see module wxBrush)</string>
		<string>wxDC:getCharHeight</string>
		<string>wxDC:getCharHeight(&lt;#This#&gt;)</string>
		<string>wxDC:getCharHeight(This) -&gt; integer()</string>
		<string>wxDC:getCharWidth</string>
		<string>wxDC:getCharWidth(&lt;#This#&gt;)</string>
		<string>wxDC:getCharWidth(This) -&gt; integer()</string>
		<string>wxDC:getClippingBox</string>
		<string>wxDC:getClippingBox(&lt;#This#&gt;)</string>
		<string>wxDC:getClippingBox(This) -&gt; Result</string>
		<string>wxDC:getFont</string>
		<string>wxDC:getFont(&lt;#This#&gt;)</string>
		<string>wxDC:getFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxDC:getLayoutDirection</string>
		<string>wxDC:getLayoutDirection(&lt;#This#&gt;)</string>
		<string>wxDC:getLayoutDirection(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxDC:getLogicalFunction</string>
		<string>wxDC:getLogicalFunction(&lt;#This#&gt;)</string>
		<string>wxDC:getLogicalFunction(This) -&gt; integer()</string>
		<string>wxDC:getMapMode</string>
		<string>wxDC:getMapMode(&lt;#This#&gt;)</string>
		<string>wxDC:getMapMode(This) -&gt; integer()</string>
		<string>wxDC:getMultiLineTextExtent</string>
		<string>wxDC:getMultiLineTextExtent(&lt;#This#&gt;, &lt;#String#&gt;)</string>
		<string>wxDC:getMultiLineTextExtent(This, String) -&gt; {W::integer(), H::integer()}</string>
		<string>wxDC:getMultiLineTextExtent</string>
		<string>wxDC:getMultiLineTextExtent(&lt;#This#&gt;, &lt;#String#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:getMultiLineTextExtent(This, String, Option::[Option]) -&gt; {Width::integer(), Height::integer(), HeightLine::integer()}</string>
		<string>wxDC:getPartialTextExtents</string>
		<string>wxDC:getPartialTextExtents(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxDC:getPartialTextExtents(This, Text) -&gt; Result</string>
		<string>wxDC:getPen</string>
		<string>wxDC:getPen(&lt;#This#&gt;)</string>
		<string>wxDC:getPen(This) -&gt; wxPen() (see module wxPen)</string>
		<string>wxDC:getPixel</string>
		<string>wxDC:getPixel(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxDC:getPixel(This, Pt) -&gt; Result</string>
		<string>wxDC:getPPI</string>
		<string>wxDC:getPPI(&lt;#This#&gt;)</string>
		<string>wxDC:getPPI(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxDC:getSize</string>
		<string>wxDC:getSize(&lt;#This#&gt;)</string>
		<string>wxDC:getSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxDC:getSizeMM</string>
		<string>wxDC:getSizeMM(&lt;#This#&gt;)</string>
		<string>wxDC:getSizeMM(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxDC:getTextBackground</string>
		<string>wxDC:getTextBackground(&lt;#This#&gt;)</string>
		<string>wxDC:getTextBackground(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxDC:getTextExtent</string>
		<string>wxDC:getTextExtent(&lt;#This#&gt;, &lt;#String#&gt;)</string>
		<string>wxDC:getTextExtent(This, String) -&gt; {W::integer(), H::integer()}</string>
		<string>wxDC:getTextExtent</string>
		<string>wxDC:getTextExtent(&lt;#This#&gt;, &lt;#String#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:getTextExtent(This, String, Option::[Option]) -&gt; Result</string>
		<string>wxDC:getTextForeground</string>
		<string>wxDC:getTextForeground(&lt;#This#&gt;)</string>
		<string>wxDC:getTextForeground(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxDC:getUserScale</string>
		<string>wxDC:getUserScale(&lt;#This#&gt;)</string>
		<string>wxDC:getUserScale(This) -&gt; {X::number(), Y::number()}</string>
		<string>wxDC:gradientFillConcentric</string>
		<string>wxDC:gradientFillConcentric(&lt;#This#&gt;, &lt;#Rect#&gt;, &lt;#InitialColour#&gt;, &lt;#DestColour#&gt;)</string>
		<string>wxDC:gradientFillConcentric(This, Rect, InitialColour, DestColour) -&gt; ok</string>
		<string>wxDC:gradientFillConcentric</string>
		<string>wxDC:gradientFillConcentric(&lt;#This#&gt;, &lt;#Rect#&gt;, &lt;#InitialColour#&gt;, &lt;#DestColour#&gt;, &lt;#CircleCenter#&gt;)</string>
		<string>wxDC:gradientFillConcentric(This, Rect, InitialColour, DestColour, CircleCenter) -&gt; ok</string>
		<string>wxDC:gradientFillLinear</string>
		<string>wxDC:gradientFillLinear(&lt;#This#&gt;, &lt;#Rect#&gt;, &lt;#InitialColour#&gt;, &lt;#DestColour#&gt;)</string>
		<string>wxDC:gradientFillLinear(This, Rect, InitialColour, DestColour) -&gt; ok</string>
		<string>wxDC:gradientFillLinear</string>
		<string>wxDC:gradientFillLinear(&lt;#This#&gt;, &lt;#Rect#&gt;, &lt;#InitialColour#&gt;, &lt;#DestColour#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDC:gradientFillLinear(This, Rect, InitialColour, DestColour, Option::[Option]) -&gt; ok</string>
		<string>wxDC:logicalToDeviceX</string>
		<string>wxDC:logicalToDeviceX(&lt;#This#&gt;, &lt;#X#&gt;)</string>
		<string>wxDC:logicalToDeviceX(This, X) -&gt; integer()</string>
		<string>wxDC:logicalToDeviceXRel</string>
		<string>wxDC:logicalToDeviceXRel(&lt;#This#&gt;, &lt;#X#&gt;)</string>
		<string>wxDC:logicalToDeviceXRel(This, X) -&gt; integer()</string>
		<string>wxDC:logicalToDeviceY</string>
		<string>wxDC:logicalToDeviceY(&lt;#This#&gt;, &lt;#Y#&gt;)</string>
		<string>wxDC:logicalToDeviceY(This, Y) -&gt; integer()</string>
		<string>wxDC:logicalToDeviceYRel</string>
		<string>wxDC:logicalToDeviceYRel(&lt;#This#&gt;, &lt;#Y#&gt;)</string>
		<string>wxDC:logicalToDeviceYRel(This, Y) -&gt; integer()</string>
		<string>wxDC:maxX</string>
		<string>wxDC:maxX(&lt;#This#&gt;)</string>
		<string>wxDC:maxX(This) -&gt; integer()</string>
		<string>wxDC:maxY</string>
		<string>wxDC:maxY(&lt;#This#&gt;)</string>
		<string>wxDC:maxY(This) -&gt; integer()</string>
		<string>wxDC:minX</string>
		<string>wxDC:minX(&lt;#This#&gt;)</string>
		<string>wxDC:minX(This) -&gt; integer()</string>
		<string>wxDC:minY</string>
		<string>wxDC:minY(&lt;#This#&gt;)</string>
		<string>wxDC:minY(This) -&gt; integer()</string>
		<string>wxDC:isOk</string>
		<string>wxDC:isOk(&lt;#This#&gt;)</string>
		<string>wxDC:isOk(This) -&gt; boolean()</string>
		<string>wxDC:resetBoundingBox</string>
		<string>wxDC:resetBoundingBox(&lt;#This#&gt;)</string>
		<string>wxDC:resetBoundingBox(This) -&gt; ok</string>
		<string>wxDC:setAxisOrientation</string>
		<string>wxDC:setAxisOrientation(&lt;#This#&gt;, &lt;#XLeftRight#&gt;, &lt;#YBottomUp#&gt;)</string>
		<string>wxDC:setAxisOrientation(This, XLeftRight, YBottomUp) -&gt; ok</string>
		<string>wxDC:setBackground</string>
		<string>wxDC:setBackground(&lt;#This#&gt;, &lt;#Brush#&gt;)</string>
		<string>wxDC:setBackground(This, Brush) -&gt; ok</string>
		<string>wxDC:setBackgroundMode</string>
		<string>wxDC:setBackgroundMode(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxDC:setBackgroundMode(This, Mode) -&gt; ok</string>
		<string>wxDC:setBrush</string>
		<string>wxDC:setBrush(&lt;#This#&gt;, &lt;#Brush#&gt;)</string>
		<string>wxDC:setBrush(This, Brush) -&gt; ok</string>
		<string>wxDC:setClippingRegion</string>
		<string>wxDC:setClippingRegion(&lt;#This#&gt;, &lt;#Region#&gt;)</string>
		<string>wxDC:setClippingRegion(This, Region) -&gt; ok</string>
		<string>wxDC:setClippingRegion</string>
		<string>wxDC:setClippingRegion(&lt;#This#&gt;, &lt;#Pt#&gt;, &lt;#Sz#&gt;)</string>
		<string>wxDC:setClippingRegion(This, Pt, Sz) -&gt; ok</string>
		<string>wxDC:setDeviceOrigin</string>
		<string>wxDC:setDeviceOrigin(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxDC:setDeviceOrigin(This, X, Y) -&gt; ok</string>
		<string>wxDC:setFont</string>
		<string>wxDC:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxDC:setFont(This, Font) -&gt; ok</string>
		<string>wxDC:setLayoutDirection</string>
		<string>wxDC:setLayoutDirection(&lt;#This#&gt;, &lt;#Dir#&gt;)</string>
		<string>wxDC:setLayoutDirection(This, Dir) -&gt; ok</string>
		<string>wxDC:setLogicalFunction</string>
		<string>wxDC:setLogicalFunction(&lt;#This#&gt;, &lt;#Function#&gt;)</string>
		<string>wxDC:setLogicalFunction(This, Function) -&gt; ok</string>
		<string>wxDC:setMapMode</string>
		<string>wxDC:setMapMode(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxDC:setMapMode(This, Mode) -&gt; ok</string>
		<string>wxDC:setPalette</string>
		<string>wxDC:setPalette(&lt;#This#&gt;, &lt;#Palette#&gt;)</string>
		<string>wxDC:setPalette(This, Palette) -&gt; ok</string>
		<string>wxDC:setPen</string>
		<string>wxDC:setPen(&lt;#This#&gt;, &lt;#Pen#&gt;)</string>
		<string>wxDC:setPen(This, Pen) -&gt; ok</string>
		<string>wxDC:setTextBackground</string>
		<string>wxDC:setTextBackground(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxDC:setTextBackground(This, Colour) -&gt; ok</string>
		<string>wxDC:setTextForeground</string>
		<string>wxDC:setTextForeground(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxDC:setTextForeground(This, Colour) -&gt; ok</string>
		<string>wxDC:setUserScale</string>
		<string>wxDC:setUserScale(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxDC:setUserScale(This, X, Y) -&gt; ok</string>
		<string>wxDC:startDoc</string>
		<string>wxDC:startDoc(&lt;#This#&gt;, &lt;#Message#&gt;)</string>
		<string>wxDC:startDoc(This, Message) -&gt; boolean()</string>
		<string>wxDC:startPage</string>
		<string>wxDC:startPage(&lt;#This#&gt;)</string>
		<string>wxDC:startPage(This) -&gt; ok</string>
		<string>wxDialog:new</string>
		<string>wxDialog:new()</string>
		<string>wxDialog:new() -&gt; wxDialog()</string>
		<string>wxDialog:new</string>
		<string>wxDialog:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxDialog:new(Parent, Id, Title) -&gt; wxDialog()</string>
		<string>wxDialog:new</string>
		<string>wxDialog:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDialog:new(Parent, Id, Title, Option::[Option]) -&gt; wxDialog()</string>
		<string>wxDialog:create</string>
		<string>wxDialog:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxDialog:create(This, Parent, Id, Title) -&gt; boolean()</string>
		<string>wxDialog:create</string>
		<string>wxDialog:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDialog:create(This, Parent, Id, Title, Option::[Option]) -&gt; boolean()</string>
		<string>wxDialog:createButtonSizer</string>
		<string>wxDialog:createButtonSizer(&lt;#This#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxDialog:createButtonSizer(This, Flags) -&gt; wxSizer() (see module wxSizer)</string>
		<string>wxDialog:createStdDialogButtonSizer</string>
		<string>wxDialog:createStdDialogButtonSizer(&lt;#This#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxDialog:createStdDialogButtonSizer(This, Flags) -&gt; wxStdDialogButtonSizer() (see module wxStdDialogButtonSizer)</string>
		<string>wxDialog:endModal</string>
		<string>wxDialog:endModal(&lt;#This#&gt;, &lt;#RetCode#&gt;)</string>
		<string>wxDialog:endModal(This, RetCode) -&gt; ok</string>
		<string>wxDialog:getAffirmativeId</string>
		<string>wxDialog:getAffirmativeId(&lt;#This#&gt;)</string>
		<string>wxDialog:getAffirmativeId(This) -&gt; integer()</string>
		<string>wxDialog:getReturnCode</string>
		<string>wxDialog:getReturnCode(&lt;#This#&gt;)</string>
		<string>wxDialog:getReturnCode(This) -&gt; integer()</string>
		<string>wxDialog:isModal</string>
		<string>wxDialog:isModal(&lt;#This#&gt;)</string>
		<string>wxDialog:isModal(This) -&gt; boolean()</string>
		<string>wxDialog:setAffirmativeId</string>
		<string>wxDialog:setAffirmativeId(&lt;#This#&gt;, &lt;#AffirmativeId#&gt;)</string>
		<string>wxDialog:setAffirmativeId(This, AffirmativeId) -&gt; ok</string>
		<string>wxDialog:setReturnCode</string>
		<string>wxDialog:setReturnCode(&lt;#This#&gt;, &lt;#ReturnCode#&gt;)</string>
		<string>wxDialog:setReturnCode(This, ReturnCode) -&gt; ok</string>
		<string>wxDialog:show</string>
		<string>wxDialog:show(&lt;#This#&gt;)</string>
		<string>wxDialog:show(This) -&gt; boolean()</string>
		<string>wxDialog:show</string>
		<string>wxDialog:show(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDialog:show(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxDialog:showModal</string>
		<string>wxDialog:showModal(&lt;#This#&gt;)</string>
		<string>wxDialog:showModal(This) -&gt; integer()</string>
		<string>wxDialog:destroy</string>
		<string>wxDialog:destroy(&lt;#This::wxDialog()#&gt;)</string>
		<string>wxDialog:destroy(This::wxDialog()) -&gt; ok</string>
		<string>wxDirDialog:new</string>
		<string>wxDirDialog:new(&lt;#Parent#&gt;)</string>
		<string>wxDirDialog:new(Parent) -&gt; wxDirDialog()</string>
		<string>wxDirDialog:new</string>
		<string>wxDirDialog:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDirDialog:new(Parent, Option::[Option]) -&gt; wxDirDialog()</string>
		<string>wxDirDialog:getPath</string>
		<string>wxDirDialog:getPath(&lt;#This#&gt;)</string>
		<string>wxDirDialog:getPath(This) -&gt; charlist() (see module unicode)</string>
		<string>wxDirDialog:getMessage</string>
		<string>wxDirDialog:getMessage(&lt;#This#&gt;)</string>
		<string>wxDirDialog:getMessage(This) -&gt; charlist() (see module unicode)</string>
		<string>wxDirDialog:setMessage</string>
		<string>wxDirDialog:setMessage(&lt;#This#&gt;, &lt;#Message#&gt;)</string>
		<string>wxDirDialog:setMessage(This, Message) -&gt; ok</string>
		<string>wxDirDialog:setPath</string>
		<string>wxDirDialog:setPath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxDirDialog:setPath(This, Path) -&gt; ok</string>
		<string>wxDirDialog:destroy</string>
		<string>wxDirDialog:destroy(&lt;#This::wxDirDialog()#&gt;)</string>
		<string>wxDirDialog:destroy(This::wxDirDialog()) -&gt; ok</string>
		<string>wxDirPickerCtrl:new</string>
		<string>wxDirPickerCtrl:new()</string>
		<string>wxDirPickerCtrl:new() -&gt; wxDirPickerCtrl()</string>
		<string>wxDirPickerCtrl:new</string>
		<string>wxDirPickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxDirPickerCtrl:new(Parent, Id) -&gt; wxDirPickerCtrl()</string>
		<string>wxDirPickerCtrl:new</string>
		<string>wxDirPickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDirPickerCtrl:new(Parent, Id, Option::[Option]) -&gt; wxDirPickerCtrl()</string>
		<string>wxDirPickerCtrl:create</string>
		<string>wxDirPickerCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxDirPickerCtrl:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxDirPickerCtrl:create</string>
		<string>wxDirPickerCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxDirPickerCtrl:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxDirPickerCtrl:getPath</string>
		<string>wxDirPickerCtrl:getPath(&lt;#This#&gt;)</string>
		<string>wxDirPickerCtrl:getPath(This) -&gt; charlist() (see module unicode)</string>
		<string>wxDirPickerCtrl:setPath</string>
		<string>wxDirPickerCtrl:setPath(&lt;#This#&gt;, &lt;#Str#&gt;)</string>
		<string>wxDirPickerCtrl:setPath(This, Str) -&gt; ok</string>
		<string>wxDirPickerCtrl:destroy</string>
		<string>wxDirPickerCtrl:destroy(&lt;#This::wxDirPickerCtrl()#&gt;)</string>
		<string>wxDirPickerCtrl:destroy(This::wxDirPickerCtrl()) -&gt; ok</string>
		<string>wxEraseEvent:getDC</string>
		<string>wxEraseEvent:getDC(&lt;#This#&gt;)</string>
		<string>wxEraseEvent:getDC(This) -&gt; wxDC() (see module wxDC)</string>
		<string>wxEvent:getId</string>
		<string>wxEvent:getId(&lt;#This#&gt;)</string>
		<string>wxEvent:getId(This) -&gt; integer()</string>
		<string>wxEvent:getSkipped</string>
		<string>wxEvent:getSkipped(&lt;#This#&gt;)</string>
		<string>wxEvent:getSkipped(This) -&gt; boolean()</string>
		<string>wxEvent:getTimestamp</string>
		<string>wxEvent:getTimestamp(&lt;#This#&gt;)</string>
		<string>wxEvent:getTimestamp(This) -&gt; integer()</string>
		<string>wxEvent:isCommandEvent</string>
		<string>wxEvent:isCommandEvent(&lt;#This#&gt;)</string>
		<string>wxEvent:isCommandEvent(This) -&gt; boolean()</string>
		<string>wxEvent:resumePropagation</string>
		<string>wxEvent:resumePropagation(&lt;#This#&gt;, &lt;#PropagationLevel#&gt;)</string>
		<string>wxEvent:resumePropagation(This, PropagationLevel) -&gt; ok</string>
		<string>wxEvent:shouldPropagate</string>
		<string>wxEvent:shouldPropagate(&lt;#This#&gt;)</string>
		<string>wxEvent:shouldPropagate(This) -&gt; boolean()</string>
		<string>wxEvent:skip</string>
		<string>wxEvent:skip(&lt;#This#&gt;)</string>
		<string>wxEvent:skip(This) -&gt; ok</string>
		<string>wxEvent:skip</string>
		<string>wxEvent:skip(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxEvent:skip(This, Option::[Option]) -&gt; ok</string>
		<string>wxEvent:stopPropagation</string>
		<string>wxEvent:stopPropagation(&lt;#This#&gt;)</string>
		<string>wxEvent:stopPropagation(This) -&gt; integer()</string>
		<string>wxEvtHandler:connect</string>
		<string>wxEvtHandler:connect(&lt;#This::wxEvtHandler()#&gt;, &lt;#EventType::wxEventType()#&gt;)</string>
		<string>wxEvtHandler:connect(This::wxEvtHandler(), EventType::wxEventType()) -&gt; ok</string>
		<string>wxEvtHandler:connect</string>
		<string>wxEvtHandler:connect(&lt;#This::wxEvtHandler()#&gt;, &lt;#EventType::wxEventType()#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxEvtHandler:connect(This::wxEvtHandler(), EventType::wxEventType(), Option::[Option]) -&gt; ok</string>
		<string>wxEvtHandler:disconnect</string>
		<string>wxEvtHandler:disconnect(&lt;#This::wxEvtHandler()#&gt;)</string>
		<string>wxEvtHandler:disconnect(This::wxEvtHandler()) -&gt; boolean()</string>
		<string>wxEvtHandler:disconnect</string>
		<string>wxEvtHandler:disconnect(&lt;#This::wxEvtHandler()#&gt;, &lt;#EventType::wxEventType()#&gt;)</string>
		<string>wxEvtHandler:disconnect(This::wxEvtHandler(), EventType::wxEventType()) -&gt; boolean()</string>
		<string>wxEvtHandler:disconnect</string>
		<string>wxEvtHandler:disconnect(&lt;#This::wxEvtHandler()#&gt;, &lt;#EventType::wxEventType()#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxEvtHandler:disconnect(This::wxEvtHandler(), EventType::wxEventType(), Option::[Option]) -&gt; boolean()</string>
		<string>wxFileDataObject:new</string>
		<string>wxFileDataObject:new()</string>
		<string>wxFileDataObject:new() -&gt; wxFileDataObject()</string>
		<string>wxFileDataObject:addFile</string>
		<string>wxFileDataObject:addFile(&lt;#This#&gt;, &lt;#Filename#&gt;)</string>
		<string>wxFileDataObject:addFile(This, Filename) -&gt; ok</string>
		<string>wxFileDataObject:getFilenames</string>
		<string>wxFileDataObject:getFilenames(&lt;#This#&gt;)</string>
		<string>wxFileDataObject:getFilenames(This) -&gt; [charlist() (see module unicode)]</string>
		<string>wxFileDataObject:destroy</string>
		<string>wxFileDataObject:destroy(&lt;#This::wxFileDataObject()#&gt;)</string>
		<string>wxFileDataObject:destroy(This::wxFileDataObject()) -&gt; ok</string>
		<string>wxFileDialog:new</string>
		<string>wxFileDialog:new(&lt;#Parent#&gt;)</string>
		<string>wxFileDialog:new(Parent) -&gt; wxFileDialog()</string>
		<string>wxFileDialog:new</string>
		<string>wxFileDialog:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFileDialog:new(Parent, Option::[Option]) -&gt; wxFileDialog()</string>
		<string>wxFileDialog:getDirectory</string>
		<string>wxFileDialog:getDirectory(&lt;#This#&gt;)</string>
		<string>wxFileDialog:getDirectory(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFileDialog:getFilename</string>
		<string>wxFileDialog:getFilename(&lt;#This#&gt;)</string>
		<string>wxFileDialog:getFilename(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFileDialog:getFilenames</string>
		<string>wxFileDialog:getFilenames(&lt;#This#&gt;)</string>
		<string>wxFileDialog:getFilenames(This) -&gt; [charlist() (see module unicode)]</string>
		<string>wxFileDialog:getFilterIndex</string>
		<string>wxFileDialog:getFilterIndex(&lt;#This#&gt;)</string>
		<string>wxFileDialog:getFilterIndex(This) -&gt; integer()</string>
		<string>wxFileDialog:getMessage</string>
		<string>wxFileDialog:getMessage(&lt;#This#&gt;)</string>
		<string>wxFileDialog:getMessage(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFileDialog:getPath</string>
		<string>wxFileDialog:getPath(&lt;#This#&gt;)</string>
		<string>wxFileDialog:getPath(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFileDialog:getPaths</string>
		<string>wxFileDialog:getPaths(&lt;#This#&gt;)</string>
		<string>wxFileDialog:getPaths(This) -&gt; [charlist() (see module unicode)]</string>
		<string>wxFileDialog:getWildcard</string>
		<string>wxFileDialog:getWildcard(&lt;#This#&gt;)</string>
		<string>wxFileDialog:getWildcard(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFileDialog:setDirectory</string>
		<string>wxFileDialog:setDirectory(&lt;#This#&gt;, &lt;#Dir#&gt;)</string>
		<string>wxFileDialog:setDirectory(This, Dir) -&gt; ok</string>
		<string>wxFileDialog:setFilename</string>
		<string>wxFileDialog:setFilename(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxFileDialog:setFilename(This, Name) -&gt; ok</string>
		<string>wxFileDialog:setFilterIndex</string>
		<string>wxFileDialog:setFilterIndex(&lt;#This#&gt;, &lt;#FilterIndex#&gt;)</string>
		<string>wxFileDialog:setFilterIndex(This, FilterIndex) -&gt; ok</string>
		<string>wxFileDialog:setMessage</string>
		<string>wxFileDialog:setMessage(&lt;#This#&gt;, &lt;#Message#&gt;)</string>
		<string>wxFileDialog:setMessage(This, Message) -&gt; ok</string>
		<string>wxFileDialog:setPath</string>
		<string>wxFileDialog:setPath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxFileDialog:setPath(This, Path) -&gt; ok</string>
		<string>wxFileDialog:setWildcard</string>
		<string>wxFileDialog:setWildcard(&lt;#This#&gt;, &lt;#WildCard#&gt;)</string>
		<string>wxFileDialog:setWildcard(This, WildCard) -&gt; ok</string>
		<string>wxFileDialog:destroy</string>
		<string>wxFileDialog:destroy(&lt;#This::wxFileDialog()#&gt;)</string>
		<string>wxFileDialog:destroy(This::wxFileDialog()) -&gt; ok</string>
		<string>wxFileDirPickerEvent:getPath</string>
		<string>wxFileDirPickerEvent:getPath(&lt;#This#&gt;)</string>
		<string>wxFileDirPickerEvent:getPath(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFilePickerCtrl:new</string>
		<string>wxFilePickerCtrl:new()</string>
		<string>wxFilePickerCtrl:new() -&gt; wxFilePickerCtrl()</string>
		<string>wxFilePickerCtrl:new</string>
		<string>wxFilePickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxFilePickerCtrl:new(Parent, Id) -&gt; wxFilePickerCtrl()</string>
		<string>wxFilePickerCtrl:new</string>
		<string>wxFilePickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFilePickerCtrl:new(Parent, Id, Option::[Option]) -&gt; wxFilePickerCtrl()</string>
		<string>wxFilePickerCtrl:create</string>
		<string>wxFilePickerCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxFilePickerCtrl:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxFilePickerCtrl:create</string>
		<string>wxFilePickerCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFilePickerCtrl:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxFilePickerCtrl:getPath</string>
		<string>wxFilePickerCtrl:getPath(&lt;#This#&gt;)</string>
		<string>wxFilePickerCtrl:getPath(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFilePickerCtrl:setPath</string>
		<string>wxFilePickerCtrl:setPath(&lt;#This#&gt;, &lt;#Str#&gt;)</string>
		<string>wxFilePickerCtrl:setPath(This, Str) -&gt; ok</string>
		<string>wxFilePickerCtrl:destroy</string>
		<string>wxFilePickerCtrl:destroy(&lt;#This::wxFilePickerCtrl()#&gt;)</string>
		<string>wxFilePickerCtrl:destroy(This::wxFilePickerCtrl()) -&gt; ok</string>
		<string>wxFindReplaceData:new</string>
		<string>wxFindReplaceData:new()</string>
		<string>wxFindReplaceData:new() -&gt; wxFindReplaceData()</string>
		<string>wxFindReplaceData:new</string>
		<string>wxFindReplaceData:new(&lt;#Flags#&gt;)</string>
		<string>wxFindReplaceData:new(Flags) -&gt; wxFindReplaceData()</string>
		<string>wxFindReplaceData:getFindString</string>
		<string>wxFindReplaceData:getFindString(&lt;#This#&gt;)</string>
		<string>wxFindReplaceData:getFindString(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFindReplaceData:getReplaceString</string>
		<string>wxFindReplaceData:getReplaceString(&lt;#This#&gt;)</string>
		<string>wxFindReplaceData:getReplaceString(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFindReplaceData:getFlags</string>
		<string>wxFindReplaceData:getFlags(&lt;#This#&gt;)</string>
		<string>wxFindReplaceData:getFlags(This) -&gt; integer()</string>
		<string>wxFindReplaceData:setFlags</string>
		<string>wxFindReplaceData:setFlags(&lt;#This#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxFindReplaceData:setFlags(This, Flags) -&gt; ok</string>
		<string>wxFindReplaceData:setFindString</string>
		<string>wxFindReplaceData:setFindString(&lt;#This#&gt;, &lt;#Str#&gt;)</string>
		<string>wxFindReplaceData:setFindString(This, Str) -&gt; ok</string>
		<string>wxFindReplaceData:setReplaceString</string>
		<string>wxFindReplaceData:setReplaceString(&lt;#This#&gt;, &lt;#Str#&gt;)</string>
		<string>wxFindReplaceData:setReplaceString(This, Str) -&gt; ok</string>
		<string>wxFindReplaceData:destroy</string>
		<string>wxFindReplaceData:destroy(&lt;#This::wxFindReplaceData()#&gt;)</string>
		<string>wxFindReplaceData:destroy(This::wxFindReplaceData()) -&gt; ok</string>
		<string>wxFindReplaceDialog:new</string>
		<string>wxFindReplaceDialog:new()</string>
		<string>wxFindReplaceDialog:new() -&gt; wxFindReplaceDialog()</string>
		<string>wxFindReplaceDialog:new</string>
		<string>wxFindReplaceDialog:new(&lt;#Parent#&gt;, &lt;#Data#&gt;, &lt;#Title#&gt;)</string>
		<string>wxFindReplaceDialog:new(Parent, Data, Title) -&gt; wxFindReplaceDialog()</string>
		<string>wxFindReplaceDialog:new</string>
		<string>wxFindReplaceDialog:new(&lt;#Parent#&gt;, &lt;#Data#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFindReplaceDialog:new(Parent, Data, Title, Option::[Option]) -&gt; wxFindReplaceDialog()</string>
		<string>wxFindReplaceDialog:create</string>
		<string>wxFindReplaceDialog:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Data#&gt;, &lt;#Title#&gt;)</string>
		<string>wxFindReplaceDialog:create(This, Parent, Data, Title) -&gt; boolean()</string>
		<string>wxFindReplaceDialog:create</string>
		<string>wxFindReplaceDialog:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Data#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFindReplaceDialog:create(This, Parent, Data, Title, Option::[Option]) -&gt; boolean()</string>
		<string>wxFindReplaceDialog:getData</string>
		<string>wxFindReplaceDialog:getData(&lt;#This#&gt;)</string>
		<string>wxFindReplaceDialog:getData(This) -&gt; wxFindReplaceData() (see module wxFindReplaceData)</string>
		<string>wxFindReplaceDialog:destroy</string>
		<string>wxFindReplaceDialog:destroy(&lt;#This::wxFindReplaceDialog()#&gt;)</string>
		<string>wxFindReplaceDialog:destroy(This::wxFindReplaceDialog()) -&gt; ok</string>
		<string>wxFlexGridSizer:new</string>
		<string>wxFlexGridSizer:new(&lt;#Cols#&gt;)</string>
		<string>wxFlexGridSizer:new(Cols) -&gt; wxFlexGridSizer()</string>
		<string>wxFlexGridSizer:new</string>
		<string>wxFlexGridSizer:new(&lt;#Cols#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFlexGridSizer:new(Cols, Option::[Option]) -&gt; wxFlexGridSizer()</string>
		<string>wxFlexGridSizer:new</string>
		<string>wxFlexGridSizer:new(&lt;#Rows#&gt;, &lt;#Cols#&gt;, &lt;#Vgap#&gt;, &lt;#Hgap#&gt;)</string>
		<string>wxFlexGridSizer:new(Rows, Cols, Vgap, Hgap) -&gt; wxFlexGridSizer()</string>
		<string>wxFlexGridSizer:addGrowableCol</string>
		<string>wxFlexGridSizer:addGrowableCol(&lt;#This#&gt;, &lt;#Idx#&gt;)</string>
		<string>wxFlexGridSizer:addGrowableCol(This, Idx) -&gt; ok</string>
		<string>wxFlexGridSizer:addGrowableCol</string>
		<string>wxFlexGridSizer:addGrowableCol(&lt;#This#&gt;, &lt;#Idx#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFlexGridSizer:addGrowableCol(This, Idx, Option::[Option]) -&gt; ok</string>
		<string>wxFlexGridSizer:addGrowableRow</string>
		<string>wxFlexGridSizer:addGrowableRow(&lt;#This#&gt;, &lt;#Idx#&gt;)</string>
		<string>wxFlexGridSizer:addGrowableRow(This, Idx) -&gt; ok</string>
		<string>wxFlexGridSizer:addGrowableRow</string>
		<string>wxFlexGridSizer:addGrowableRow(&lt;#This#&gt;, &lt;#Idx#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFlexGridSizer:addGrowableRow(This, Idx, Option::[Option]) -&gt; ok</string>
		<string>wxFlexGridSizer:getFlexibleDirection</string>
		<string>wxFlexGridSizer:getFlexibleDirection(&lt;#This#&gt;)</string>
		<string>wxFlexGridSizer:getFlexibleDirection(This) -&gt; integer()</string>
		<string>wxFlexGridSizer:getNonFlexibleGrowMode</string>
		<string>wxFlexGridSizer:getNonFlexibleGrowMode(&lt;#This#&gt;)</string>
		<string>wxFlexGridSizer:getNonFlexibleGrowMode(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxFlexGridSizer:removeGrowableCol</string>
		<string>wxFlexGridSizer:removeGrowableCol(&lt;#This#&gt;, &lt;#Idx#&gt;)</string>
		<string>wxFlexGridSizer:removeGrowableCol(This, Idx) -&gt; ok</string>
		<string>wxFlexGridSizer:removeGrowableRow</string>
		<string>wxFlexGridSizer:removeGrowableRow(&lt;#This#&gt;, &lt;#Idx#&gt;)</string>
		<string>wxFlexGridSizer:removeGrowableRow(This, Idx) -&gt; ok</string>
		<string>wxFlexGridSizer:setFlexibleDirection</string>
		<string>wxFlexGridSizer:setFlexibleDirection(&lt;#This#&gt;, &lt;#Direction#&gt;)</string>
		<string>wxFlexGridSizer:setFlexibleDirection(This, Direction) -&gt; ok</string>
		<string>wxFlexGridSizer:setNonFlexibleGrowMode</string>
		<string>wxFlexGridSizer:setNonFlexibleGrowMode(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxFlexGridSizer:setNonFlexibleGrowMode(This, Mode) -&gt; ok</string>
		<string>wxFlexGridSizer:destroy</string>
		<string>wxFlexGridSizer:destroy(&lt;#This::wxFlexGridSizer()#&gt;)</string>
		<string>wxFlexGridSizer:destroy(This::wxFlexGridSizer()) -&gt; ok</string>
		<string>wxFocusEvent:getWindow</string>
		<string>wxFocusEvent:getWindow(&lt;#This#&gt;)</string>
		<string>wxFocusEvent:getWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxFont:new</string>
		<string>wxFont:new()</string>
		<string>wxFont:new() -&gt; wxFont()</string>
		<string>wxFont:new</string>
		<string>wxFont:new(&lt;#Fontname#&gt;)</string>
		<string>wxFont:new(Fontname) -&gt; wxFont()</string>
		<string>wxFont:new</string>
		<string>wxFont:new(&lt;#Size#&gt;, &lt;#Family#&gt;, &lt;#Style#&gt;, &lt;#Weight#&gt;)</string>
		<string>wxFont:new(Size, Family, Style, Weight) -&gt; wxFont()</string>
		<string>wxFont:new</string>
		<string>wxFont:new(&lt;#Size#&gt;, &lt;#Family#&gt;, &lt;#Style#&gt;, &lt;#Weight#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFont:new(Size, Family, Style, Weight, Option::[Option]) -&gt; wxFont()</string>
		<string>wxFont:isFixedWidth</string>
		<string>wxFont:isFixedWidth(&lt;#This#&gt;)</string>
		<string>wxFont:isFixedWidth(This) -&gt; boolean()</string>
		<string>wxFont:getDefaultEncoding</string>
		<string>wxFont:getDefaultEncoding()</string>
		<string>wxFont:getDefaultEncoding() -&gt; wx_enum() (see module wx)</string>
		<string>wxFont:getFaceName</string>
		<string>wxFont:getFaceName(&lt;#This#&gt;)</string>
		<string>wxFont:getFaceName(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFont:getFamily</string>
		<string>wxFont:getFamily(&lt;#This#&gt;)</string>
		<string>wxFont:getFamily(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxFont:getNativeFontInfoDesc</string>
		<string>wxFont:getNativeFontInfoDesc(&lt;#This#&gt;)</string>
		<string>wxFont:getNativeFontInfoDesc(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFont:getNativeFontInfoUserDesc</string>
		<string>wxFont:getNativeFontInfoUserDesc(&lt;#This#&gt;)</string>
		<string>wxFont:getNativeFontInfoUserDesc(This) -&gt; charlist() (see module unicode)</string>
		<string>wxFont:getPointSize</string>
		<string>wxFont:getPointSize(&lt;#This#&gt;)</string>
		<string>wxFont:getPointSize(This) -&gt; integer()</string>
		<string>wxFont:getStyle</string>
		<string>wxFont:getStyle(&lt;#This#&gt;)</string>
		<string>wxFont:getStyle(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxFont:getUnderlined</string>
		<string>wxFont:getUnderlined(&lt;#This#&gt;)</string>
		<string>wxFont:getUnderlined(This) -&gt; boolean()</string>
		<string>wxFont:getWeight</string>
		<string>wxFont:getWeight(&lt;#This#&gt;)</string>
		<string>wxFont:getWeight(This) -&gt; integer()</string>
		<string>wxFont:ok</string>
		<string>wxFont:ok(&lt;#This#&gt;)</string>
		<string>wxFont:ok(This) -&gt; boolean()</string>
		<string>wxFont:setDefaultEncoding</string>
		<string>wxFont:setDefaultEncoding(&lt;#Encoding#&gt;)</string>
		<string>wxFont:setDefaultEncoding(Encoding) -&gt; ok</string>
		<string>wxFont:setFaceName</string>
		<string>wxFont:setFaceName(&lt;#This#&gt;, &lt;#FaceName#&gt;)</string>
		<string>wxFont:setFaceName(This, FaceName) -&gt; boolean()</string>
		<string>wxFont:setFamily</string>
		<string>wxFont:setFamily(&lt;#This#&gt;, &lt;#Family#&gt;)</string>
		<string>wxFont:setFamily(This, Family) -&gt; ok</string>
		<string>wxFont:setPointSize</string>
		<string>wxFont:setPointSize(&lt;#This#&gt;, &lt;#PointSize#&gt;)</string>
		<string>wxFont:setPointSize(This, PointSize) -&gt; ok</string>
		<string>wxFont:setStyle</string>
		<string>wxFont:setStyle(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxFont:setStyle(This, Style) -&gt; ok</string>
		<string>wxFont:setUnderlined</string>
		<string>wxFont:setUnderlined(&lt;#This#&gt;, &lt;#Underlined#&gt;)</string>
		<string>wxFont:setUnderlined(This, Underlined) -&gt; ok</string>
		<string>wxFont:setWeight</string>
		<string>wxFont:setWeight(&lt;#This#&gt;, &lt;#Weight#&gt;)</string>
		<string>wxFont:setWeight(This, Weight) -&gt; ok</string>
		<string>wxFont:destroy</string>
		<string>wxFont:destroy(&lt;#This::wxFont()#&gt;)</string>
		<string>wxFont:destroy(This::wxFont()) -&gt; ok</string>
		<string>wxFontData:new</string>
		<string>wxFontData:new()</string>
		<string>wxFontData:new() -&gt; wxFontData()</string>
		<string>wxFontData:new</string>
		<string>wxFontData:new(&lt;#Data#&gt;)</string>
		<string>wxFontData:new(Data) -&gt; wxFontData()</string>
		<string>wxFontData:enableEffects</string>
		<string>wxFontData:enableEffects(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxFontData:enableEffects(This, Flag) -&gt; ok</string>
		<string>wxFontData:getAllowSymbols</string>
		<string>wxFontData:getAllowSymbols(&lt;#This#&gt;)</string>
		<string>wxFontData:getAllowSymbols(This) -&gt; boolean()</string>
		<string>wxFontData:getColour</string>
		<string>wxFontData:getColour(&lt;#This#&gt;)</string>
		<string>wxFontData:getColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxFontData:getChosenFont</string>
		<string>wxFontData:getChosenFont(&lt;#This#&gt;)</string>
		<string>wxFontData:getChosenFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxFontData:getEnableEffects</string>
		<string>wxFontData:getEnableEffects(&lt;#This#&gt;)</string>
		<string>wxFontData:getEnableEffects(This) -&gt; boolean()</string>
		<string>wxFontData:getInitialFont</string>
		<string>wxFontData:getInitialFont(&lt;#This#&gt;)</string>
		<string>wxFontData:getInitialFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxFontData:getShowHelp</string>
		<string>wxFontData:getShowHelp(&lt;#This#&gt;)</string>
		<string>wxFontData:getShowHelp(This) -&gt; boolean()</string>
		<string>wxFontData:setAllowSymbols</string>
		<string>wxFontData:setAllowSymbols(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxFontData:setAllowSymbols(This, Flag) -&gt; ok</string>
		<string>wxFontData:setChosenFont</string>
		<string>wxFontData:setChosenFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxFontData:setChosenFont(This, Font) -&gt; ok</string>
		<string>wxFontData:setColour</string>
		<string>wxFontData:setColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxFontData:setColour(This, Colour) -&gt; ok</string>
		<string>wxFontData:setInitialFont</string>
		<string>wxFontData:setInitialFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxFontData:setInitialFont(This, Font) -&gt; ok</string>
		<string>wxFontData:setRange</string>
		<string>wxFontData:setRange(&lt;#This#&gt;, &lt;#MinRange#&gt;, &lt;#MaxRange#&gt;)</string>
		<string>wxFontData:setRange(This, MinRange, MaxRange) -&gt; ok</string>
		<string>wxFontData:setShowHelp</string>
		<string>wxFontData:setShowHelp(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxFontData:setShowHelp(This, Flag) -&gt; ok</string>
		<string>wxFontData:destroy</string>
		<string>wxFontData:destroy(&lt;#This::wxFontData()#&gt;)</string>
		<string>wxFontData:destroy(This::wxFontData()) -&gt; ok</string>
		<string>wxFontDialog:new</string>
		<string>wxFontDialog:new()</string>
		<string>wxFontDialog:new() -&gt; wxFontDialog()</string>
		<string>wxFontDialog:new</string>
		<string>wxFontDialog:new(&lt;#Parent#&gt;, &lt;#Data#&gt;)</string>
		<string>wxFontDialog:new(Parent, Data) -&gt; wxFontDialog()</string>
		<string>wxFontDialog:create</string>
		<string>wxFontDialog:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Data#&gt;)</string>
		<string>wxFontDialog:create(This, Parent, Data) -&gt; boolean()</string>
		<string>wxFontDialog:getFontData</string>
		<string>wxFontDialog:getFontData(&lt;#This#&gt;)</string>
		<string>wxFontDialog:getFontData(This) -&gt; wxFontData() (see module wxFontData)</string>
		<string>wxFontDialog:destroy</string>
		<string>wxFontDialog:destroy(&lt;#This::wxFontDialog()#&gt;)</string>
		<string>wxFontDialog:destroy(This::wxFontDialog()) -&gt; ok</string>
		<string>wxFontPickerCtrl:new</string>
		<string>wxFontPickerCtrl:new()</string>
		<string>wxFontPickerCtrl:new() -&gt; wxFontPickerCtrl()</string>
		<string>wxFontPickerCtrl:new</string>
		<string>wxFontPickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxFontPickerCtrl:new(Parent, Id) -&gt; wxFontPickerCtrl()</string>
		<string>wxFontPickerCtrl:new</string>
		<string>wxFontPickerCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFontPickerCtrl:new(Parent, Id, Option::[Option]) -&gt; wxFontPickerCtrl()</string>
		<string>wxFontPickerCtrl:create</string>
		<string>wxFontPickerCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxFontPickerCtrl:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxFontPickerCtrl:create</string>
		<string>wxFontPickerCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFontPickerCtrl:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxFontPickerCtrl:getSelectedFont</string>
		<string>wxFontPickerCtrl:getSelectedFont(&lt;#This#&gt;)</string>
		<string>wxFontPickerCtrl:getSelectedFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxFontPickerCtrl:setSelectedFont</string>
		<string>wxFontPickerCtrl:setSelectedFont(&lt;#This#&gt;, &lt;#F#&gt;)</string>
		<string>wxFontPickerCtrl:setSelectedFont(This, F) -&gt; ok</string>
		<string>wxFontPickerCtrl:getMaxPointSize</string>
		<string>wxFontPickerCtrl:getMaxPointSize(&lt;#This#&gt;)</string>
		<string>wxFontPickerCtrl:getMaxPointSize(This) -&gt; integer()</string>
		<string>wxFontPickerCtrl:setMaxPointSize</string>
		<string>wxFontPickerCtrl:setMaxPointSize(&lt;#This#&gt;, &lt;#Max#&gt;)</string>
		<string>wxFontPickerCtrl:setMaxPointSize(This, Max) -&gt; ok</string>
		<string>wxFontPickerCtrl:destroy</string>
		<string>wxFontPickerCtrl:destroy(&lt;#This::wxFontPickerCtrl()#&gt;)</string>
		<string>wxFontPickerCtrl:destroy(This::wxFontPickerCtrl()) -&gt; ok</string>
		<string>wxFontPickerEvent:getFont</string>
		<string>wxFontPickerEvent:getFont(&lt;#This#&gt;)</string>
		<string>wxFontPickerEvent:getFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxFrame:new</string>
		<string>wxFrame:new()</string>
		<string>wxFrame:new() -&gt; wxFrame()</string>
		<string>wxFrame:new</string>
		<string>wxFrame:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxFrame:new(Parent, Id, Title) -&gt; wxFrame()</string>
		<string>wxFrame:new</string>
		<string>wxFrame:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFrame:new(Parent, Id, Title, Option::[Option]) -&gt; wxFrame()</string>
		<string>wxFrame:create</string>
		<string>wxFrame:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxFrame:create(This, Parent, Id, Title) -&gt; boolean()</string>
		<string>wxFrame:create</string>
		<string>wxFrame:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFrame:create(This, Parent, Id, Title, Option::[Option]) -&gt; boolean()</string>
		<string>wxFrame:createStatusBar</string>
		<string>wxFrame:createStatusBar(&lt;#This#&gt;)</string>
		<string>wxFrame:createStatusBar(This) -&gt; wxStatusBar() (see module wxStatusBar)</string>
		<string>wxFrame:createStatusBar</string>
		<string>wxFrame:createStatusBar(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFrame:createStatusBar(This, Option::[Option]) -&gt; wxStatusBar() (see module wxStatusBar)</string>
		<string>wxFrame:createToolBar</string>
		<string>wxFrame:createToolBar(&lt;#This#&gt;)</string>
		<string>wxFrame:createToolBar(This) -&gt; wxToolBar() (see module wxToolBar)</string>
		<string>wxFrame:createToolBar</string>
		<string>wxFrame:createToolBar(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFrame:createToolBar(This, Option::[Option]) -&gt; wxToolBar() (see module wxToolBar)</string>
		<string>wxFrame:getClientAreaOrigin</string>
		<string>wxFrame:getClientAreaOrigin(&lt;#This#&gt;)</string>
		<string>wxFrame:getClientAreaOrigin(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxFrame:getMenuBar</string>
		<string>wxFrame:getMenuBar(&lt;#This#&gt;)</string>
		<string>wxFrame:getMenuBar(This) -&gt; wxMenuBar() (see module wxMenuBar)</string>
		<string>wxFrame:getStatusBar</string>
		<string>wxFrame:getStatusBar(&lt;#This#&gt;)</string>
		<string>wxFrame:getStatusBar(This) -&gt; wxStatusBar() (see module wxStatusBar)</string>
		<string>wxFrame:getStatusBarPane</string>
		<string>wxFrame:getStatusBarPane(&lt;#This#&gt;)</string>
		<string>wxFrame:getStatusBarPane(This) -&gt; integer()</string>
		<string>wxFrame:getToolBar</string>
		<string>wxFrame:getToolBar(&lt;#This#&gt;)</string>
		<string>wxFrame:getToolBar(This) -&gt; wxToolBar() (see module wxToolBar)</string>
		<string>wxFrame:processCommand</string>
		<string>wxFrame:processCommand(&lt;#This#&gt;, &lt;#Winid#&gt;)</string>
		<string>wxFrame:processCommand(This, Winid) -&gt; boolean()</string>
		<string>wxFrame:sendSizeEvent</string>
		<string>wxFrame:sendSizeEvent(&lt;#This#&gt;)</string>
		<string>wxFrame:sendSizeEvent(This) -&gt; ok</string>
		<string>wxFrame:setMenuBar</string>
		<string>wxFrame:setMenuBar(&lt;#This#&gt;, &lt;#Menubar#&gt;)</string>
		<string>wxFrame:setMenuBar(This, Menubar) -&gt; ok</string>
		<string>wxFrame:setStatusBar</string>
		<string>wxFrame:setStatusBar(&lt;#This#&gt;, &lt;#Statbar#&gt;)</string>
		<string>wxFrame:setStatusBar(This, Statbar) -&gt; ok</string>
		<string>wxFrame:setStatusBarPane</string>
		<string>wxFrame:setStatusBarPane(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxFrame:setStatusBarPane(This, N) -&gt; ok</string>
		<string>wxFrame:setStatusText</string>
		<string>wxFrame:setStatusText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxFrame:setStatusText(This, Text) -&gt; ok</string>
		<string>wxFrame:setStatusText</string>
		<string>wxFrame:setStatusText(&lt;#This#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxFrame:setStatusText(This, Text, Option::[Option]) -&gt; ok</string>
		<string>wxFrame:setStatusWidths</string>
		<string>wxFrame:setStatusWidths(&lt;#This#&gt;, &lt;#Widths_field#&gt;)</string>
		<string>wxFrame:setStatusWidths(This, Widths_field) -&gt; ok</string>
		<string>wxFrame:setToolBar</string>
		<string>wxFrame:setToolBar(&lt;#This#&gt;, &lt;#Toolbar#&gt;)</string>
		<string>wxFrame:setToolBar(This, Toolbar) -&gt; ok</string>
		<string>wxFrame:destroy</string>
		<string>wxFrame:destroy(&lt;#This::wxFrame()#&gt;)</string>
		<string>wxFrame:destroy(This::wxFrame()) -&gt; ok</string>
		<string>wxGauge:new</string>
		<string>wxGauge:new()</string>
		<string>wxGauge:new() -&gt; wxGauge()</string>
		<string>wxGauge:new</string>
		<string>wxGauge:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Range#&gt;)</string>
		<string>wxGauge:new(Parent, Id, Range) -&gt; wxGauge()</string>
		<string>wxGauge:new</string>
		<string>wxGauge:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Range#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGauge:new(Parent, Id, Range, Option::[Option]) -&gt; wxGauge()</string>
		<string>wxGauge:create</string>
		<string>wxGauge:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Range#&gt;)</string>
		<string>wxGauge:create(This, Parent, Id, Range) -&gt; boolean()</string>
		<string>wxGauge:create</string>
		<string>wxGauge:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Range#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGauge:create(This, Parent, Id, Range, Option::[Option]) -&gt; boolean()</string>
		<string>wxGauge:getBezelFace</string>
		<string>wxGauge:getBezelFace(&lt;#This#&gt;)</string>
		<string>wxGauge:getBezelFace(This) -&gt; integer()</string>
		<string>wxGauge:getRange</string>
		<string>wxGauge:getRange(&lt;#This#&gt;)</string>
		<string>wxGauge:getRange(This) -&gt; integer()</string>
		<string>wxGauge:getShadowWidth</string>
		<string>wxGauge:getShadowWidth(&lt;#This#&gt;)</string>
		<string>wxGauge:getShadowWidth(This) -&gt; integer()</string>
		<string>wxGauge:getValue</string>
		<string>wxGauge:getValue(&lt;#This#&gt;)</string>
		<string>wxGauge:getValue(This) -&gt; integer()</string>
		<string>wxGauge:isVertical</string>
		<string>wxGauge:isVertical(&lt;#This#&gt;)</string>
		<string>wxGauge:isVertical(This) -&gt; boolean()</string>
		<string>wxGauge:setBezelFace</string>
		<string>wxGauge:setBezelFace(&lt;#This#&gt;, &lt;#W#&gt;)</string>
		<string>wxGauge:setBezelFace(This, W) -&gt; ok</string>
		<string>wxGauge:setRange</string>
		<string>wxGauge:setRange(&lt;#This#&gt;, &lt;#R#&gt;)</string>
		<string>wxGauge:setRange(This, R) -&gt; ok</string>
		<string>wxGauge:setShadowWidth</string>
		<string>wxGauge:setShadowWidth(&lt;#This#&gt;, &lt;#W#&gt;)</string>
		<string>wxGauge:setShadowWidth(This, W) -&gt; ok</string>
		<string>wxGauge:setValue</string>
		<string>wxGauge:setValue(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxGauge:setValue(This, Pos) -&gt; ok</string>
		<string>wxGauge:pulse</string>
		<string>wxGauge:pulse(&lt;#This#&gt;)</string>
		<string>wxGauge:pulse(This) -&gt; ok</string>
		<string>wxGauge:destroy</string>
		<string>wxGauge:destroy(&lt;#This::wxGauge()#&gt;)</string>
		<string>wxGauge:destroy(This::wxGauge()) -&gt; ok</string>
		<string>wxGenericDirCtrl:new</string>
		<string>wxGenericDirCtrl:new()</string>
		<string>wxGenericDirCtrl:new() -&gt; wxGenericDirCtrl()</string>
		<string>wxGenericDirCtrl:new</string>
		<string>wxGenericDirCtrl:new(&lt;#Parent#&gt;)</string>
		<string>wxGenericDirCtrl:new(Parent) -&gt; wxGenericDirCtrl()</string>
		<string>wxGenericDirCtrl:new</string>
		<string>wxGenericDirCtrl:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGenericDirCtrl:new(Parent, Option::[Option]) -&gt; wxGenericDirCtrl()</string>
		<string>wxGenericDirCtrl:create</string>
		<string>wxGenericDirCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxGenericDirCtrl:create(This, Parent) -&gt; boolean()</string>
		<string>wxGenericDirCtrl:create</string>
		<string>wxGenericDirCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGenericDirCtrl:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxGenericDirCtrl:init</string>
		<string>wxGenericDirCtrl:init(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:init(This) -&gt; ok</string>
		<string>wxGenericDirCtrl:collapseTree</string>
		<string>wxGenericDirCtrl:collapseTree(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:collapseTree(This) -&gt; ok</string>
		<string>wxGenericDirCtrl:expandPath</string>
		<string>wxGenericDirCtrl:expandPath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxGenericDirCtrl:expandPath(This, Path) -&gt; boolean()</string>
		<string>wxGenericDirCtrl:getDefaultPath</string>
		<string>wxGenericDirCtrl:getDefaultPath(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:getDefaultPath(This) -&gt; charlist() (see module unicode)</string>
		<string>wxGenericDirCtrl:getPath</string>
		<string>wxGenericDirCtrl:getPath(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:getPath(This) -&gt; charlist() (see module unicode)</string>
		<string>wxGenericDirCtrl:getFilePath</string>
		<string>wxGenericDirCtrl:getFilePath(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:getFilePath(This) -&gt; charlist() (see module unicode)</string>
		<string>wxGenericDirCtrl:getFilter</string>
		<string>wxGenericDirCtrl:getFilter(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:getFilter(This) -&gt; charlist() (see module unicode)</string>
		<string>wxGenericDirCtrl:getFilterIndex</string>
		<string>wxGenericDirCtrl:getFilterIndex(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:getFilterIndex(This) -&gt; integer()</string>
		<string>wxGenericDirCtrl:getRootId</string>
		<string>wxGenericDirCtrl:getRootId(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:getRootId(This) -&gt; integer()</string>
		<string>wxGenericDirCtrl:getTreeCtrl</string>
		<string>wxGenericDirCtrl:getTreeCtrl(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:getTreeCtrl(This) -&gt; wxTreeCtrl() (see module wxTreeCtrl)</string>
		<string>wxGenericDirCtrl:reCreateTree</string>
		<string>wxGenericDirCtrl:reCreateTree(&lt;#This#&gt;)</string>
		<string>wxGenericDirCtrl:reCreateTree(This) -&gt; ok</string>
		<string>wxGenericDirCtrl:setDefaultPath</string>
		<string>wxGenericDirCtrl:setDefaultPath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxGenericDirCtrl:setDefaultPath(This, Path) -&gt; ok</string>
		<string>wxGenericDirCtrl:setFilter</string>
		<string>wxGenericDirCtrl:setFilter(&lt;#This#&gt;, &lt;#Filter#&gt;)</string>
		<string>wxGenericDirCtrl:setFilter(This, Filter) -&gt; ok</string>
		<string>wxGenericDirCtrl:setFilterIndex</string>
		<string>wxGenericDirCtrl:setFilterIndex(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxGenericDirCtrl:setFilterIndex(This, N) -&gt; ok</string>
		<string>wxGenericDirCtrl:setPath</string>
		<string>wxGenericDirCtrl:setPath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxGenericDirCtrl:setPath(This, Path) -&gt; ok</string>
		<string>wxGenericDirCtrl:destroy</string>
		<string>wxGenericDirCtrl:destroy(&lt;#This::wxGenericDirCtrl()#&gt;)</string>
		<string>wxGenericDirCtrl:destroy(This::wxGenericDirCtrl()) -&gt; ok</string>
		<string>wxGLCanvas:new</string>
		<string>wxGLCanvas:new(&lt;#Parent#&gt;)</string>
		<string>wxGLCanvas:new(Parent) -&gt; wxGLCanvas()</string>
		<string>wxGLCanvas:new</string>
		<string>wxGLCanvas:new(&lt;#Parent#&gt;, &lt;#Shared#&gt;)</string>
		<string>wxGLCanvas:new(Parent, Shared) -&gt; wxGLCanvas()</string>
		<string>wxGLCanvas:new</string>
		<string>wxGLCanvas:new(&lt;#Parent#&gt;, &lt;#Shared#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGLCanvas:new(Parent, Shared, Option::[Option]) -&gt; wxGLCanvas()</string>
		<string>wxGLCanvas:getContext</string>
		<string>wxGLCanvas:getContext(&lt;#This#&gt;)</string>
		<string>wxGLCanvas:getContext(This) -&gt; wx_object() (see module wx)</string>
		<string>wxGLCanvas:setCurrent</string>
		<string>wxGLCanvas:setCurrent(&lt;#This#&gt;)</string>
		<string>wxGLCanvas:setCurrent(This) -&gt; ok</string>
		<string>wxGLCanvas:swapBuffers</string>
		<string>wxGLCanvas:swapBuffers(&lt;#This#&gt;)</string>
		<string>wxGLCanvas:swapBuffers(This) -&gt; ok</string>
		<string>wxGLCanvas:destroy</string>
		<string>wxGLCanvas:destroy(&lt;#This::wxGLCanvas()#&gt;)</string>
		<string>wxGLCanvas:destroy(This::wxGLCanvas()) -&gt; ok</string>
		<string>wxGraphicsContext:create</string>
		<string>wxGraphicsContext:create()</string>
		<string>wxGraphicsContext:create() -&gt; wxGraphicsContext()</string>
		<string>wxGraphicsContext:create</string>
		<string>wxGraphicsContext:create(&lt;#Dc#&gt;)</string>
		<string>wxGraphicsContext:create(Dc) -&gt; wxGraphicsContext()</string>
		<string>wxGraphicsContext:createPen</string>
		<string>wxGraphicsContext:createPen(&lt;#This#&gt;, &lt;#Pen#&gt;)</string>
		<string>wxGraphicsContext:createPen(This, Pen) -&gt; wxGraphicsPen() (see module wxGraphicsPen)</string>
		<string>wxGraphicsContext:createBrush</string>
		<string>wxGraphicsContext:createBrush(&lt;#This#&gt;, &lt;#Brush#&gt;)</string>
		<string>wxGraphicsContext:createBrush(This, Brush) -&gt; wxGraphicsBrush() (see module wxGraphicsBrush)</string>
		<string>wxGraphicsContext:createRadialGradientBrush</string>
		<string>wxGraphicsContext:createRadialGradientBrush(&lt;#This#&gt;, &lt;#Xo#&gt;, &lt;#Yo#&gt;, &lt;#Xc#&gt;, &lt;#Yc#&gt;, &lt;#Radius#&gt;, &lt;#OColor#&gt;, &lt;#CColor#&gt;)</string>
		<string>wxGraphicsContext:createRadialGradientBrush(This, Xo, Yo, Xc, Yc, Radius, OColor, CColor) -&gt; wxGraphicsBrush() (see module wxGraphicsBrush)</string>
		<string>wxGraphicsContext:createLinearGradientBrush</string>
		<string>wxGraphicsContext:createLinearGradientBrush(&lt;#This#&gt;, &lt;#X1#&gt;, &lt;#Y1#&gt;, &lt;#X2#&gt;, &lt;#Y2#&gt;, &lt;#C1#&gt;, &lt;#C2#&gt;)</string>
		<string>wxGraphicsContext:createLinearGradientBrush(This, X1, Y1, X2, Y2, C1, C2) -&gt; wxGraphicsBrush() (see module wxGraphicsBrush)</string>
		<string>wxGraphicsContext:createFont</string>
		<string>wxGraphicsContext:createFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxGraphicsContext:createFont(This, Font) -&gt; wxGraphicsFont() (see module wxGraphicsFont)</string>
		<string>wxGraphicsContext:createFont</string>
		<string>wxGraphicsContext:createFont(&lt;#This#&gt;, &lt;#Font#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsContext:createFont(This, Font, Option::[Option]) -&gt; wxGraphicsFont() (see module wxGraphicsFont)</string>
		<string>wxGraphicsContext:createMatrix</string>
		<string>wxGraphicsContext:createMatrix(&lt;#This#&gt;)</string>
		<string>wxGraphicsContext:createMatrix(This) -&gt; wxGraphicsMatrix() (see module wxGraphicsMatrix)</string>
		<string>wxGraphicsContext:createMatrix</string>
		<string>wxGraphicsContext:createMatrix(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsContext:createMatrix(This, Option::[Option]) -&gt; wxGraphicsMatrix() (see module wxGraphicsMatrix)</string>
		<string>wxGraphicsContext:createPath</string>
		<string>wxGraphicsContext:createPath(&lt;#This#&gt;)</string>
		<string>wxGraphicsContext:createPath(This) -&gt; wxGraphicsPath() (see module wxGraphicsPath)</string>
		<string>wxGraphicsContext:clip</string>
		<string>wxGraphicsContext:clip(&lt;#This#&gt;, &lt;#Region#&gt;)</string>
		<string>wxGraphicsContext:clip(This, Region) -&gt; ok</string>
		<string>wxGraphicsContext:clip</string>
		<string>wxGraphicsContext:clip(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxGraphicsContext:clip(This, X, Y, W, H) -&gt; ok</string>
		<string>wxGraphicsContext:resetClip</string>
		<string>wxGraphicsContext:resetClip(&lt;#This#&gt;)</string>
		<string>wxGraphicsContext:resetClip(This) -&gt; ok</string>
		<string>wxGraphicsContext:drawBitmap</string>
		<string>wxGraphicsContext:drawBitmap(&lt;#This#&gt;, &lt;#Bmp#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxGraphicsContext:drawBitmap(This, Bmp, X, Y, W, H) -&gt; ok</string>
		<string>wxGraphicsContext:drawEllipse</string>
		<string>wxGraphicsContext:drawEllipse(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxGraphicsContext:drawEllipse(This, X, Y, W, H) -&gt; ok</string>
		<string>wxGraphicsContext:drawIcon</string>
		<string>wxGraphicsContext:drawIcon(&lt;#This#&gt;, &lt;#Icon#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxGraphicsContext:drawIcon(This, Icon, X, Y, W, H) -&gt; ok</string>
		<string>wxGraphicsContext:drawLines</string>
		<string>wxGraphicsContext:drawLines(&lt;#This#&gt;, &lt;#Points#&gt;)</string>
		<string>wxGraphicsContext:drawLines(This, Points) -&gt; ok</string>
		<string>wxGraphicsContext:drawLines</string>
		<string>wxGraphicsContext:drawLines(&lt;#This#&gt;, &lt;#Points#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsContext:drawLines(This, Points, Option::[Option]) -&gt; ok</string>
		<string>wxGraphicsContext:drawPath</string>
		<string>wxGraphicsContext:drawPath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxGraphicsContext:drawPath(This, Path) -&gt; ok</string>
		<string>wxGraphicsContext:drawPath</string>
		<string>wxGraphicsContext:drawPath(&lt;#This#&gt;, &lt;#Path#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsContext:drawPath(This, Path, Option::[Option]) -&gt; ok</string>
		<string>wxGraphicsContext:drawRectangle</string>
		<string>wxGraphicsContext:drawRectangle(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxGraphicsContext:drawRectangle(This, X, Y, W, H) -&gt; ok</string>
		<string>wxGraphicsContext:drawRoundedRectangle</string>
		<string>wxGraphicsContext:drawRoundedRectangle(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;, &lt;#Radius#&gt;)</string>
		<string>wxGraphicsContext:drawRoundedRectangle(This, X, Y, W, H, Radius) -&gt; ok</string>
		<string>wxGraphicsContext:drawText</string>
		<string>wxGraphicsContext:drawText(&lt;#This#&gt;, &lt;#Str#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGraphicsContext:drawText(This, Str, X, Y) -&gt; ok</string>
		<string>wxGraphicsContext:drawText</string>
		<string>wxGraphicsContext:drawText(&lt;#This#&gt;, &lt;#Str#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Angle#&gt;)</string>
		<string>wxGraphicsContext:drawText(This, Str, X, Y, Angle) -&gt; ok</string>
		<string>wxGraphicsContext:drawText</string>
		<string>wxGraphicsContext:drawText(&lt;#This#&gt;, &lt;#Str#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Angle#&gt;, &lt;#BackgroundBrush#&gt;)</string>
		<string>wxGraphicsContext:drawText(This, Str, X, Y, Angle, BackgroundBrush) -&gt; ok</string>
		<string>wxGraphicsContext:fillPath</string>
		<string>wxGraphicsContext:fillPath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxGraphicsContext:fillPath(This, Path) -&gt; ok</string>
		<string>wxGraphicsContext:fillPath</string>
		<string>wxGraphicsContext:fillPath(&lt;#This#&gt;, &lt;#Path#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsContext:fillPath(This, Path, Option::[Option]) -&gt; ok</string>
		<string>wxGraphicsContext:strokePath</string>
		<string>wxGraphicsContext:strokePath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxGraphicsContext:strokePath(This, Path) -&gt; ok</string>
		<string>wxGraphicsContext:getPartialTextExtents</string>
		<string>wxGraphicsContext:getPartialTextExtents(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxGraphicsContext:getPartialTextExtents(This, Text) -&gt; [number()]</string>
		<string>wxGraphicsContext:getTextExtent</string>
		<string>wxGraphicsContext:getTextExtent(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxGraphicsContext:getTextExtent(This, Text) -&gt; Result</string>
		<string>wxGraphicsContext:rotate</string>
		<string>wxGraphicsContext:rotate(&lt;#This#&gt;, &lt;#Angle#&gt;)</string>
		<string>wxGraphicsContext:rotate(This, Angle) -&gt; ok</string>
		<string>wxGraphicsContext:scale</string>
		<string>wxGraphicsContext:scale(&lt;#This#&gt;, &lt;#XScale#&gt;, &lt;#YScale#&gt;)</string>
		<string>wxGraphicsContext:scale(This, XScale, YScale) -&gt; ok</string>
		<string>wxGraphicsContext:translate</string>
		<string>wxGraphicsContext:translate(&lt;#This#&gt;, &lt;#Dx#&gt;, &lt;#Dy#&gt;)</string>
		<string>wxGraphicsContext:translate(This, Dx, Dy) -&gt; ok</string>
		<string>wxGraphicsContext:getTransform</string>
		<string>wxGraphicsContext:getTransform(&lt;#This#&gt;)</string>
		<string>wxGraphicsContext:getTransform(This) -&gt; wxGraphicsMatrix() (see module wxGraphicsMatrix)</string>
		<string>wxGraphicsContext:setTransform</string>
		<string>wxGraphicsContext:setTransform(&lt;#This#&gt;, &lt;#Matrix#&gt;)</string>
		<string>wxGraphicsContext:setTransform(This, Matrix) -&gt; ok</string>
		<string>wxGraphicsContext:concatTransform</string>
		<string>wxGraphicsContext:concatTransform(&lt;#This#&gt;, &lt;#Matrix#&gt;)</string>
		<string>wxGraphicsContext:concatTransform(This, Matrix) -&gt; ok</string>
		<string>wxGraphicsContext:setBrush</string>
		<string>wxGraphicsContext:setBrush(&lt;#This#&gt;, &lt;#Brush#&gt;)</string>
		<string>wxGraphicsContext:setBrush(This, Brush) -&gt; ok</string>
		<string>wxGraphicsContext:setFont</string>
		<string>wxGraphicsContext:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxGraphicsContext:setFont(This, Font) -&gt; ok</string>
		<string>wxGraphicsContext:setFont</string>
		<string>wxGraphicsContext:setFont(&lt;#This#&gt;, &lt;#Font#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxGraphicsContext:setFont(This, Font, Colour) -&gt; ok</string>
		<string>wxGraphicsContext:setPen</string>
		<string>wxGraphicsContext:setPen(&lt;#This#&gt;, &lt;#Pen#&gt;)</string>
		<string>wxGraphicsContext:setPen(This, Pen) -&gt; ok</string>
		<string>wxGraphicsContext:strokeLine</string>
		<string>wxGraphicsContext:strokeLine(&lt;#This#&gt;, &lt;#X1#&gt;, &lt;#Y1#&gt;, &lt;#X2#&gt;, &lt;#Y2#&gt;)</string>
		<string>wxGraphicsContext:strokeLine(This, X1, Y1, X2, Y2) -&gt; ok</string>
		<string>wxGraphicsContext:strokeLines</string>
		<string>wxGraphicsContext:strokeLines(&lt;#This#&gt;, &lt;#Points#&gt;)</string>
		<string>wxGraphicsContext:strokeLines(This, Points) -&gt; ok</string>
		<string>wxGraphicsContext:destroy</string>
		<string>wxGraphicsContext:destroy(&lt;#This::wxGraphicsContext()#&gt;)</string>
		<string>wxGraphicsContext:destroy(This::wxGraphicsContext()) -&gt; ok</string>
		<string>wxGraphicsMatrix:concat</string>
		<string>wxGraphicsMatrix:concat(&lt;#This#&gt;, &lt;#T#&gt;)</string>
		<string>wxGraphicsMatrix:concat(This, T) -&gt; ok</string>
		<string>wxGraphicsMatrix:get</string>
		<string>wxGraphicsMatrix:get(&lt;#This#&gt;)</string>
		<string>wxGraphicsMatrix:get(This) -&gt; Result</string>
		<string>wxGraphicsMatrix:invert</string>
		<string>wxGraphicsMatrix:invert(&lt;#This#&gt;)</string>
		<string>wxGraphicsMatrix:invert(This) -&gt; ok</string>
		<string>wxGraphicsMatrix:isEqual</string>
		<string>wxGraphicsMatrix:isEqual(&lt;#This#&gt;, &lt;#T#&gt;)</string>
		<string>wxGraphicsMatrix:isEqual(This, T) -&gt; boolean()</string>
		<string>wxGraphicsMatrix:isIdentity</string>
		<string>wxGraphicsMatrix:isIdentity(&lt;#This#&gt;)</string>
		<string>wxGraphicsMatrix:isIdentity(This) -&gt; boolean()</string>
		<string>wxGraphicsMatrix:rotate</string>
		<string>wxGraphicsMatrix:rotate(&lt;#This#&gt;, &lt;#Angle#&gt;)</string>
		<string>wxGraphicsMatrix:rotate(This, Angle) -&gt; ok</string>
		<string>wxGraphicsMatrix:scale</string>
		<string>wxGraphicsMatrix:scale(&lt;#This#&gt;, &lt;#XScale#&gt;, &lt;#YScale#&gt;)</string>
		<string>wxGraphicsMatrix:scale(This, XScale, YScale) -&gt; ok</string>
		<string>wxGraphicsMatrix:translate</string>
		<string>wxGraphicsMatrix:translate(&lt;#This#&gt;, &lt;#Dx#&gt;, &lt;#Dy#&gt;)</string>
		<string>wxGraphicsMatrix:translate(This, Dx, Dy) -&gt; ok</string>
		<string>wxGraphicsMatrix:set</string>
		<string>wxGraphicsMatrix:set(&lt;#This#&gt;)</string>
		<string>wxGraphicsMatrix:set(This) -&gt; ok</string>
		<string>wxGraphicsMatrix:set</string>
		<string>wxGraphicsMatrix:set(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsMatrix:set(This, Option::[Option]) -&gt; ok</string>
		<string>wxGraphicsMatrix:transformPoint</string>
		<string>wxGraphicsMatrix:transformPoint(&lt;#This#&gt;)</string>
		<string>wxGraphicsMatrix:transformPoint(This) -&gt; {X::number(), Y::number()}</string>
		<string>wxGraphicsMatrix:transformDistance</string>
		<string>wxGraphicsMatrix:transformDistance(&lt;#This#&gt;)</string>
		<string>wxGraphicsMatrix:transformDistance(This) -&gt; {Dx::number(), Dy::number()}</string>
		<string>wxGraphicsObject:getRenderer</string>
		<string>wxGraphicsObject:getRenderer(&lt;#This#&gt;)</string>
		<string>wxGraphicsObject:getRenderer(This) -&gt; wxGraphicsRenderer() (see module wxGraphicsRenderer)</string>
		<string>wxGraphicsObject:isNull</string>
		<string>wxGraphicsObject:isNull(&lt;#This#&gt;)</string>
		<string>wxGraphicsObject:isNull(This) -&gt; boolean()</string>
		<string>wxGraphicsObject:destroy</string>
		<string>wxGraphicsObject:destroy(&lt;#This::wxGraphicsObject()#&gt;)</string>
		<string>wxGraphicsObject:destroy(This::wxGraphicsObject()) -&gt; ok</string>
		<string>wxGraphicsPath:moveToPoint</string>
		<string>wxGraphicsPath:moveToPoint(&lt;#This#&gt;, &lt;#P#&gt;)</string>
		<string>wxGraphicsPath:moveToPoint(This, P) -&gt; ok</string>
		<string>wxGraphicsPath:moveToPoint</string>
		<string>wxGraphicsPath:moveToPoint(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGraphicsPath:moveToPoint(This, X, Y) -&gt; ok</string>
		<string>wxGraphicsPath:addArc</string>
		<string>wxGraphicsPath:addArc(&lt;#This#&gt;, &lt;#C#&gt;, &lt;#R#&gt;, &lt;#StartAngle#&gt;, &lt;#EndAngle#&gt;, &lt;#Clockwise#&gt;)</string>
		<string>wxGraphicsPath:addArc(This, C, R, StartAngle, EndAngle, Clockwise) -&gt; ok</string>
		<string>wxGraphicsPath:addArc</string>
		<string>wxGraphicsPath:addArc(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#R#&gt;, &lt;#StartAngle#&gt;, &lt;#EndAngle#&gt;, &lt;#Clockwise#&gt;)</string>
		<string>wxGraphicsPath:addArc(This, X, Y, R, StartAngle, EndAngle, Clockwise) -&gt; ok</string>
		<string>wxGraphicsPath:addArcToPoint</string>
		<string>wxGraphicsPath:addArcToPoint(&lt;#This#&gt;, &lt;#X1#&gt;, &lt;#Y1#&gt;, &lt;#X2#&gt;, &lt;#Y2#&gt;, &lt;#R#&gt;)</string>
		<string>wxGraphicsPath:addArcToPoint(This, X1, Y1, X2, Y2, R) -&gt; ok</string>
		<string>wxGraphicsPath:addCircle</string>
		<string>wxGraphicsPath:addCircle(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#R#&gt;)</string>
		<string>wxGraphicsPath:addCircle(This, X, Y, R) -&gt; ok</string>
		<string>wxGraphicsPath:addCurveToPoint</string>
		<string>wxGraphicsPath:addCurveToPoint(&lt;#This#&gt;, &lt;#C1#&gt;, &lt;#C2#&gt;, &lt;#E#&gt;)</string>
		<string>wxGraphicsPath:addCurveToPoint(This, C1, C2, E) -&gt; ok</string>
		<string>wxGraphicsPath:addCurveToPoint</string>
		<string>wxGraphicsPath:addCurveToPoint(&lt;#This#&gt;, &lt;#Cx1#&gt;, &lt;#Cy1#&gt;, &lt;#Cx2#&gt;, &lt;#Cy2#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGraphicsPath:addCurveToPoint(This, Cx1, Cy1, Cx2, Cy2, X, Y) -&gt; ok</string>
		<string>wxGraphicsPath:addEllipse</string>
		<string>wxGraphicsPath:addEllipse(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxGraphicsPath:addEllipse(This, X, Y, W, H) -&gt; ok</string>
		<string>wxGraphicsPath:addLineToPoint</string>
		<string>wxGraphicsPath:addLineToPoint(&lt;#This#&gt;, &lt;#P#&gt;)</string>
		<string>wxGraphicsPath:addLineToPoint(This, P) -&gt; ok</string>
		<string>wxGraphicsPath:addLineToPoint</string>
		<string>wxGraphicsPath:addLineToPoint(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGraphicsPath:addLineToPoint(This, X, Y) -&gt; ok</string>
		<string>wxGraphicsPath:addPath</string>
		<string>wxGraphicsPath:addPath(&lt;#This#&gt;, &lt;#Path#&gt;)</string>
		<string>wxGraphicsPath:addPath(This, Path) -&gt; ok</string>
		<string>wxGraphicsPath:addQuadCurveToPoint</string>
		<string>wxGraphicsPath:addQuadCurveToPoint(&lt;#This#&gt;, &lt;#Cx#&gt;, &lt;#Cy#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGraphicsPath:addQuadCurveToPoint(This, Cx, Cy, X, Y) -&gt; ok</string>
		<string>wxGraphicsPath:addRectangle</string>
		<string>wxGraphicsPath:addRectangle(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxGraphicsPath:addRectangle(This, X, Y, W, H) -&gt; ok</string>
		<string>wxGraphicsPath:addRoundedRectangle</string>
		<string>wxGraphicsPath:addRoundedRectangle(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;, &lt;#Radius#&gt;)</string>
		<string>wxGraphicsPath:addRoundedRectangle(This, X, Y, W, H, Radius) -&gt; ok</string>
		<string>wxGraphicsPath:closeSubpath</string>
		<string>wxGraphicsPath:closeSubpath(&lt;#This#&gt;)</string>
		<string>wxGraphicsPath:closeSubpath(This) -&gt; ok</string>
		<string>wxGraphicsPath:contains</string>
		<string>wxGraphicsPath:contains(&lt;#This#&gt;, &lt;#C#&gt;)</string>
		<string>wxGraphicsPath:contains(This, C) -&gt; boolean()</string>
		<string>wxGraphicsPath:contains</string>
		<string>wxGraphicsPath:contains(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGraphicsPath:contains(This, X, Y) -&gt; boolean()</string>
		<string>wxGraphicsPath:contains</string>
		<string>wxGraphicsPath:contains(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsPath:contains(This, X, Y, Option::[Option]) -&gt; boolean()</string>
		<string>wxGraphicsPath:getBox</string>
		<string>wxGraphicsPath:getBox(&lt;#This#&gt;)</string>
		<string>wxGraphicsPath:getBox(This) -&gt; {X::float(), Y::float(), W::float(), H::float()}</string>
		<string>wxGraphicsPath:getCurrentPoint</string>
		<string>wxGraphicsPath:getCurrentPoint(&lt;#This#&gt;)</string>
		<string>wxGraphicsPath:getCurrentPoint(This) -&gt; {X::float(), Y::float()}</string>
		<string>wxGraphicsPath:transform</string>
		<string>wxGraphicsPath:transform(&lt;#This#&gt;, &lt;#Matrix#&gt;)</string>
		<string>wxGraphicsPath:transform(This, Matrix) -&gt; ok</string>
		<string>wxGraphicsRenderer:getDefaultRenderer</string>
		<string>wxGraphicsRenderer:getDefaultRenderer()</string>
		<string>wxGraphicsRenderer:getDefaultRenderer() -&gt; wxGraphicsRenderer()</string>
		<string>wxGraphicsRenderer:createContext</string>
		<string>wxGraphicsRenderer:createContext(&lt;#This#&gt;, &lt;#Dc#&gt;)</string>
		<string>wxGraphicsRenderer:createContext(This, Dc) -&gt; wxGraphicsContext() (see module wxGraphicsContext)</string>
		<string>wxGraphicsRenderer:createPen</string>
		<string>wxGraphicsRenderer:createPen(&lt;#This#&gt;, &lt;#Pen#&gt;)</string>
		<string>wxGraphicsRenderer:createPen(This, Pen) -&gt; wxGraphicsPen() (see module wxGraphicsPen)</string>
		<string>wxGraphicsRenderer:createBrush</string>
		<string>wxGraphicsRenderer:createBrush(&lt;#This#&gt;, &lt;#Brush#&gt;)</string>
		<string>wxGraphicsRenderer:createBrush(This, Brush) -&gt; wxGraphicsBrush() (see module wxGraphicsBrush)</string>
		<string>wxGraphicsRenderer:createLinearGradientBrush</string>
		<string>wxGraphicsRenderer:createLinearGradientBrush(&lt;#This#&gt;, &lt;#X1#&gt;, &lt;#Y1#&gt;, &lt;#X2#&gt;, &lt;#Y2#&gt;, &lt;#C1#&gt;, &lt;#C2#&gt;)</string>
		<string>wxGraphicsRenderer:createLinearGradientBrush(This, X1, Y1, X2, Y2, C1, C2) -&gt; wxGraphicsBrush() (see module wxGraphicsBrush)</string>
		<string>wxGraphicsRenderer:createRadialGradientBrush</string>
		<string>wxGraphicsRenderer:createRadialGradientBrush(&lt;#This#&gt;, &lt;#Xo#&gt;, &lt;#Yo#&gt;, &lt;#Xc#&gt;, &lt;#Yc#&gt;, &lt;#Radius#&gt;, &lt;#OColor#&gt;, &lt;#CColor#&gt;)</string>
		<string>wxGraphicsRenderer:createRadialGradientBrush(This, Xo, Yo, Xc, Yc, Radius, OColor, CColor) -&gt; wxGraphicsBrush() (see module wxGraphicsBrush)</string>
		<string>wxGraphicsRenderer:createFont</string>
		<string>wxGraphicsRenderer:createFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxGraphicsRenderer:createFont(This, Font) -&gt; wxGraphicsFont() (see module wxGraphicsFont)</string>
		<string>wxGraphicsRenderer:createFont</string>
		<string>wxGraphicsRenderer:createFont(&lt;#This#&gt;, &lt;#Font#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsRenderer:createFont(This, Font, Option::[Option]) -&gt; wxGraphicsFont() (see module wxGraphicsFont)</string>
		<string>wxGraphicsRenderer:createMatrix</string>
		<string>wxGraphicsRenderer:createMatrix(&lt;#This#&gt;)</string>
		<string>wxGraphicsRenderer:createMatrix(This) -&gt; wxGraphicsMatrix() (see module wxGraphicsMatrix)</string>
		<string>wxGraphicsRenderer:createMatrix</string>
		<string>wxGraphicsRenderer:createMatrix(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGraphicsRenderer:createMatrix(This, Option::[Option]) -&gt; wxGraphicsMatrix() (see module wxGraphicsMatrix)</string>
		<string>wxGraphicsRenderer:createPath</string>
		<string>wxGraphicsRenderer:createPath(&lt;#This#&gt;)</string>
		<string>wxGraphicsRenderer:createPath(This) -&gt; wxGraphicsPath() (see module wxGraphicsPath)</string>
		<string>wxGrid:new</string>
		<string>wxGrid:new()</string>
		<string>wxGrid:new() -&gt; wxGrid()</string>
		<string>wxGrid:new</string>
		<string>wxGrid:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxGrid:new(Parent, Id) -&gt; wxGrid()</string>
		<string>wxGrid:new</string>
		<string>wxGrid:new(&lt;#Parent#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGrid:new(Parent, X, Y) -&gt; wxGrid()</string>
		<string>wxGrid:new</string>
		<string>wxGrid:new(&lt;#Parent#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:new(Parent, X, Y, Option::[Option]) -&gt; wxGrid()</string>
		<string>wxGrid:appendCols</string>
		<string>wxGrid:appendCols(&lt;#This#&gt;)</string>
		<string>wxGrid:appendCols(This) -&gt; boolean()</string>
		<string>wxGrid:appendCols</string>
		<string>wxGrid:appendCols(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:appendCols(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxGrid:appendRows</string>
		<string>wxGrid:appendRows(&lt;#This#&gt;)</string>
		<string>wxGrid:appendRows(This) -&gt; boolean()</string>
		<string>wxGrid:appendRows</string>
		<string>wxGrid:appendRows(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:appendRows(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxGrid:autoSize</string>
		<string>wxGrid:autoSize(&lt;#This#&gt;)</string>
		<string>wxGrid:autoSize(This) -&gt; ok</string>
		<string>wxGrid:autoSizeColumn</string>
		<string>wxGrid:autoSizeColumn(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:autoSizeColumn(This, Col) -&gt; ok</string>
		<string>wxGrid:autoSizeColumn</string>
		<string>wxGrid:autoSizeColumn(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:autoSizeColumn(This, Col, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:autoSizeColumns</string>
		<string>wxGrid:autoSizeColumns(&lt;#This#&gt;)</string>
		<string>wxGrid:autoSizeColumns(This) -&gt; ok</string>
		<string>wxGrid:autoSizeColumns</string>
		<string>wxGrid:autoSizeColumns(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:autoSizeColumns(This, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:autoSizeRow</string>
		<string>wxGrid:autoSizeRow(&lt;#This#&gt;, &lt;#Row#&gt;)</string>
		<string>wxGrid:autoSizeRow(This, Row) -&gt; ok</string>
		<string>wxGrid:autoSizeRow</string>
		<string>wxGrid:autoSizeRow(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:autoSizeRow(This, Row, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:autoSizeRows</string>
		<string>wxGrid:autoSizeRows(&lt;#This#&gt;)</string>
		<string>wxGrid:autoSizeRows(This) -&gt; ok</string>
		<string>wxGrid:autoSizeRows</string>
		<string>wxGrid:autoSizeRows(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:autoSizeRows(This, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:beginBatch</string>
		<string>wxGrid:beginBatch(&lt;#This#&gt;)</string>
		<string>wxGrid:beginBatch(This) -&gt; ok</string>
		<string>wxGrid:blockToDeviceRect</string>
		<string>wxGrid:blockToDeviceRect(&lt;#This#&gt;, &lt;#TopLeft#&gt;, &lt;#BottomRight#&gt;)</string>
		<string>wxGrid:blockToDeviceRect(This, TopLeft, BottomRight) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxGrid:canDragColSize</string>
		<string>wxGrid:canDragColSize(&lt;#This#&gt;)</string>
		<string>wxGrid:canDragColSize(This) -&gt; boolean()</string>
		<string>wxGrid:canDragRowSize</string>
		<string>wxGrid:canDragRowSize(&lt;#This#&gt;)</string>
		<string>wxGrid:canDragRowSize(This) -&gt; boolean()</string>
		<string>wxGrid:canDragGridSize</string>
		<string>wxGrid:canDragGridSize(&lt;#This#&gt;)</string>
		<string>wxGrid:canDragGridSize(This) -&gt; boolean()</string>
		<string>wxGrid:canEnableCellControl</string>
		<string>wxGrid:canEnableCellControl(&lt;#This#&gt;)</string>
		<string>wxGrid:canEnableCellControl(This) -&gt; boolean()</string>
		<string>wxGrid:cellToRect</string>
		<string>wxGrid:cellToRect(&lt;#This#&gt;, &lt;#Coords#&gt;)</string>
		<string>wxGrid:cellToRect(This, Coords) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxGrid:cellToRect</string>
		<string>wxGrid:cellToRect(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:cellToRect(This, Row, Col) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxGrid:clearGrid</string>
		<string>wxGrid:clearGrid(&lt;#This#&gt;)</string>
		<string>wxGrid:clearGrid(This) -&gt; ok</string>
		<string>wxGrid:clearSelection</string>
		<string>wxGrid:clearSelection(&lt;#This#&gt;)</string>
		<string>wxGrid:clearSelection(This) -&gt; ok</string>
		<string>wxGrid:createGrid</string>
		<string>wxGrid:createGrid(&lt;#This#&gt;, &lt;#NumRows#&gt;, &lt;#NumCols#&gt;)</string>
		<string>wxGrid:createGrid(This, NumRows, NumCols) -&gt; boolean()</string>
		<string>wxGrid:createGrid</string>
		<string>wxGrid:createGrid(&lt;#This#&gt;, &lt;#NumRows#&gt;, &lt;#NumCols#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:createGrid(This, NumRows, NumCols, Option::[Option]) -&gt; boolean()</string>
		<string>wxGrid:deleteCols</string>
		<string>wxGrid:deleteCols(&lt;#This#&gt;)</string>
		<string>wxGrid:deleteCols(This) -&gt; boolean()</string>
		<string>wxGrid:deleteCols</string>
		<string>wxGrid:deleteCols(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:deleteCols(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxGrid:deleteRows</string>
		<string>wxGrid:deleteRows(&lt;#This#&gt;)</string>
		<string>wxGrid:deleteRows(This) -&gt; boolean()</string>
		<string>wxGrid:deleteRows</string>
		<string>wxGrid:deleteRows(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:deleteRows(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxGrid:disableCellEditControl</string>
		<string>wxGrid:disableCellEditControl(&lt;#This#&gt;)</string>
		<string>wxGrid:disableCellEditControl(This) -&gt; ok</string>
		<string>wxGrid:disableDragColSize</string>
		<string>wxGrid:disableDragColSize(&lt;#This#&gt;)</string>
		<string>wxGrid:disableDragColSize(This) -&gt; ok</string>
		<string>wxGrid:disableDragGridSize</string>
		<string>wxGrid:disableDragGridSize(&lt;#This#&gt;)</string>
		<string>wxGrid:disableDragGridSize(This) -&gt; ok</string>
		<string>wxGrid:disableDragRowSize</string>
		<string>wxGrid:disableDragRowSize(&lt;#This#&gt;)</string>
		<string>wxGrid:disableDragRowSize(This) -&gt; ok</string>
		<string>wxGrid:enableCellEditControl</string>
		<string>wxGrid:enableCellEditControl(&lt;#This#&gt;)</string>
		<string>wxGrid:enableCellEditControl(This) -&gt; ok</string>
		<string>wxGrid:enableCellEditControl</string>
		<string>wxGrid:enableCellEditControl(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:enableCellEditControl(This, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:enableDragColSize</string>
		<string>wxGrid:enableDragColSize(&lt;#This#&gt;)</string>
		<string>wxGrid:enableDragColSize(This) -&gt; ok</string>
		<string>wxGrid:enableDragColSize</string>
		<string>wxGrid:enableDragColSize(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:enableDragColSize(This, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:enableDragGridSize</string>
		<string>wxGrid:enableDragGridSize(&lt;#This#&gt;)</string>
		<string>wxGrid:enableDragGridSize(This) -&gt; ok</string>
		<string>wxGrid:enableDragGridSize</string>
		<string>wxGrid:enableDragGridSize(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:enableDragGridSize(This, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:enableDragRowSize</string>
		<string>wxGrid:enableDragRowSize(&lt;#This#&gt;)</string>
		<string>wxGrid:enableDragRowSize(This) -&gt; ok</string>
		<string>wxGrid:enableDragRowSize</string>
		<string>wxGrid:enableDragRowSize(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:enableDragRowSize(This, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:enableEditing</string>
		<string>wxGrid:enableEditing(&lt;#This#&gt;, &lt;#Edit#&gt;)</string>
		<string>wxGrid:enableEditing(This, Edit) -&gt; ok</string>
		<string>wxGrid:enableGridLines</string>
		<string>wxGrid:enableGridLines(&lt;#This#&gt;)</string>
		<string>wxGrid:enableGridLines(This) -&gt; ok</string>
		<string>wxGrid:enableGridLines</string>
		<string>wxGrid:enableGridLines(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:enableGridLines(This, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:endBatch</string>
		<string>wxGrid:endBatch(&lt;#This#&gt;)</string>
		<string>wxGrid:endBatch(This) -&gt; ok</string>
		<string>wxGrid:fit</string>
		<string>wxGrid:fit(&lt;#This#&gt;)</string>
		<string>wxGrid:fit(This) -&gt; ok</string>
		<string>wxGrid:forceRefresh</string>
		<string>wxGrid:forceRefresh(&lt;#This#&gt;)</string>
		<string>wxGrid:forceRefresh(This) -&gt; ok</string>
		<string>wxGrid:getBatchCount</string>
		<string>wxGrid:getBatchCount(&lt;#This#&gt;)</string>
		<string>wxGrid:getBatchCount(This) -&gt; integer()</string>
		<string>wxGrid:getCellAlignment</string>
		<string>wxGrid:getCellAlignment(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getCellAlignment(This, Row, Col) -&gt; {Horiz::integer(), Vert::integer()}</string>
		<string>wxGrid:getCellBackgroundColour</string>
		<string>wxGrid:getCellBackgroundColour(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getCellBackgroundColour(This, Row, Col) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:getCellEditor</string>
		<string>wxGrid:getCellEditor(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getCellEditor(This, Row, Col) -&gt; wxGridCellEditor() (see module wxGridCellEditor)</string>
		<string>wxGrid:getCellFont</string>
		<string>wxGrid:getCellFont(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getCellFont(This, Row, Col) -&gt; wxFont() (see module wxFont)</string>
		<string>wxGrid:getCellRenderer</string>
		<string>wxGrid:getCellRenderer(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getCellRenderer(This, Row, Col) -&gt; wxGridCellRenderer() (see module wxGridCellRenderer)</string>
		<string>wxGrid:getCellTextColour</string>
		<string>wxGrid:getCellTextColour(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getCellTextColour(This, Row, Col) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:getCellValue</string>
		<string>wxGrid:getCellValue(&lt;#This#&gt;, &lt;#Coords#&gt;)</string>
		<string>wxGrid:getCellValue(This, Coords) -&gt; charlist() (see module unicode)</string>
		<string>wxGrid:getCellValue</string>
		<string>wxGrid:getCellValue(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getCellValue(This, Row, Col) -&gt; charlist() (see module unicode)</string>
		<string>wxGrid:getColLabelAlignment</string>
		<string>wxGrid:getColLabelAlignment(&lt;#This#&gt;)</string>
		<string>wxGrid:getColLabelAlignment(This) -&gt; {Horiz::integer(), Vert::integer()}</string>
		<string>wxGrid:getColLabelSize</string>
		<string>wxGrid:getColLabelSize(&lt;#This#&gt;)</string>
		<string>wxGrid:getColLabelSize(This) -&gt; integer()</string>
		<string>wxGrid:getColLabelValue</string>
		<string>wxGrid:getColLabelValue(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getColLabelValue(This, Col) -&gt; charlist() (see module unicode)</string>
		<string>wxGrid:getColMinimalAcceptableWidth</string>
		<string>wxGrid:getColMinimalAcceptableWidth(&lt;#This#&gt;)</string>
		<string>wxGrid:getColMinimalAcceptableWidth(This) -&gt; integer()</string>
		<string>wxGrid:getDefaultCellAlignment</string>
		<string>wxGrid:getDefaultCellAlignment(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultCellAlignment(This) -&gt; {Horiz::integer(), Vert::integer()}</string>
		<string>wxGrid:getDefaultCellBackgroundColour</string>
		<string>wxGrid:getDefaultCellBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultCellBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:getDefaultCellFont</string>
		<string>wxGrid:getDefaultCellFont(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultCellFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxGrid:getDefaultCellTextColour</string>
		<string>wxGrid:getDefaultCellTextColour(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultCellTextColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:getDefaultColLabelSize</string>
		<string>wxGrid:getDefaultColLabelSize(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultColLabelSize(This) -&gt; integer()</string>
		<string>wxGrid:getDefaultColSize</string>
		<string>wxGrid:getDefaultColSize(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultColSize(This) -&gt; integer()</string>
		<string>wxGrid:getDefaultEditor</string>
		<string>wxGrid:getDefaultEditor(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultEditor(This) -&gt; wxGridCellEditor() (see module wxGridCellEditor)</string>
		<string>wxGrid:getDefaultEditorForCell</string>
		<string>wxGrid:getDefaultEditorForCell(&lt;#This#&gt;, &lt;#C#&gt;)</string>
		<string>wxGrid:getDefaultEditorForCell(This, C) -&gt; wxGridCellEditor() (see module wxGridCellEditor)</string>
		<string>wxGrid:getDefaultEditorForCell</string>
		<string>wxGrid:getDefaultEditorForCell(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getDefaultEditorForCell(This, Row, Col) -&gt; wxGridCellEditor() (see module wxGridCellEditor)</string>
		<string>wxGrid:getDefaultEditorForType</string>
		<string>wxGrid:getDefaultEditorForType(&lt;#This#&gt;, &lt;#TypeName#&gt;)</string>
		<string>wxGrid:getDefaultEditorForType(This, TypeName) -&gt; wxGridCellEditor() (see module wxGridCellEditor)</string>
		<string>wxGrid:getDefaultRenderer</string>
		<string>wxGrid:getDefaultRenderer(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultRenderer(This) -&gt; wxGridCellRenderer() (see module wxGridCellRenderer)</string>
		<string>wxGrid:getDefaultRendererForCell</string>
		<string>wxGrid:getDefaultRendererForCell(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getDefaultRendererForCell(This, Row, Col) -&gt; wxGridCellRenderer() (see module wxGridCellRenderer)</string>
		<string>wxGrid:getDefaultRendererForType</string>
		<string>wxGrid:getDefaultRendererForType(&lt;#This#&gt;, &lt;#TypeName#&gt;)</string>
		<string>wxGrid:getDefaultRendererForType(This, TypeName) -&gt; wxGridCellRenderer() (see module wxGridCellRenderer)</string>
		<string>wxGrid:getDefaultRowLabelSize</string>
		<string>wxGrid:getDefaultRowLabelSize(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultRowLabelSize(This) -&gt; integer()</string>
		<string>wxGrid:getDefaultRowSize</string>
		<string>wxGrid:getDefaultRowSize(&lt;#This#&gt;)</string>
		<string>wxGrid:getDefaultRowSize(This) -&gt; integer()</string>
		<string>wxGrid:getGridCursorCol</string>
		<string>wxGrid:getGridCursorCol(&lt;#This#&gt;)</string>
		<string>wxGrid:getGridCursorCol(This) -&gt; integer()</string>
		<string>wxGrid:getGridCursorRow</string>
		<string>wxGrid:getGridCursorRow(&lt;#This#&gt;)</string>
		<string>wxGrid:getGridCursorRow(This) -&gt; integer()</string>
		<string>wxGrid:getGridLineColour</string>
		<string>wxGrid:getGridLineColour(&lt;#This#&gt;)</string>
		<string>wxGrid:getGridLineColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:gridLinesEnabled</string>
		<string>wxGrid:gridLinesEnabled(&lt;#This#&gt;)</string>
		<string>wxGrid:gridLinesEnabled(This) -&gt; boolean()</string>
		<string>wxGrid:getLabelBackgroundColour</string>
		<string>wxGrid:getLabelBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxGrid:getLabelBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:getLabelFont</string>
		<string>wxGrid:getLabelFont(&lt;#This#&gt;)</string>
		<string>wxGrid:getLabelFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxGrid:getLabelTextColour</string>
		<string>wxGrid:getLabelTextColour(&lt;#This#&gt;)</string>
		<string>wxGrid:getLabelTextColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:getNumberCols</string>
		<string>wxGrid:getNumberCols(&lt;#This#&gt;)</string>
		<string>wxGrid:getNumberCols(This) -&gt; integer()</string>
		<string>wxGrid:getNumberRows</string>
		<string>wxGrid:getNumberRows(&lt;#This#&gt;)</string>
		<string>wxGrid:getNumberRows(This) -&gt; integer()</string>
		<string>wxGrid:getOrCreateCellAttr</string>
		<string>wxGrid:getOrCreateCellAttr(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:getOrCreateCellAttr(This, Row, Col) -&gt; wxGridCellAttr() (see module wxGridCellAttr)</string>
		<string>wxGrid:getRowMinimalAcceptableHeight</string>
		<string>wxGrid:getRowMinimalAcceptableHeight(&lt;#This#&gt;)</string>
		<string>wxGrid:getRowMinimalAcceptableHeight(This) -&gt; integer()</string>
		<string>wxGrid:getRowLabelAlignment</string>
		<string>wxGrid:getRowLabelAlignment(&lt;#This#&gt;)</string>
		<string>wxGrid:getRowLabelAlignment(This) -&gt; {Horiz::integer(), Vert::integer()}</string>
		<string>wxGrid:getRowLabelSize</string>
		<string>wxGrid:getRowLabelSize(&lt;#This#&gt;)</string>
		<string>wxGrid:getRowLabelSize(This) -&gt; integer()</string>
		<string>wxGrid:getRowLabelValue</string>
		<string>wxGrid:getRowLabelValue(&lt;#This#&gt;, &lt;#Row#&gt;)</string>
		<string>wxGrid:getRowLabelValue(This, Row) -&gt; charlist() (see module unicode)</string>
		<string>wxGrid:getRowSize</string>
		<string>wxGrid:getRowSize(&lt;#This#&gt;, &lt;#Row#&gt;)</string>
		<string>wxGrid:getRowSize(This, Row) -&gt; integer()</string>
		<string>wxGrid:getScrollLineX</string>
		<string>wxGrid:getScrollLineX(&lt;#This#&gt;)</string>
		<string>wxGrid:getScrollLineX(This) -&gt; integer()</string>
		<string>wxGrid:getScrollLineY</string>
		<string>wxGrid:getScrollLineY(&lt;#This#&gt;)</string>
		<string>wxGrid:getScrollLineY(This) -&gt; integer()</string>
		<string>wxGrid:getSelectedCells</string>
		<string>wxGrid:getSelectedCells(&lt;#This#&gt;)</string>
		<string>wxGrid:getSelectedCells(This) -&gt; [{R::integer(), C::integer()}]</string>
		<string>wxGrid:getSelectedCols</string>
		<string>wxGrid:getSelectedCols(&lt;#This#&gt;)</string>
		<string>wxGrid:getSelectedCols(This) -&gt; [integer()]</string>
		<string>wxGrid:getSelectedRows</string>
		<string>wxGrid:getSelectedRows(&lt;#This#&gt;)</string>
		<string>wxGrid:getSelectedRows(This) -&gt; [integer()]</string>
		<string>wxGrid:getSelectionBackground</string>
		<string>wxGrid:getSelectionBackground(&lt;#This#&gt;)</string>
		<string>wxGrid:getSelectionBackground(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:getSelectionBlockTopLeft</string>
		<string>wxGrid:getSelectionBlockTopLeft(&lt;#This#&gt;)</string>
		<string>wxGrid:getSelectionBlockTopLeft(This) -&gt; [{R::integer(), C::integer()}]</string>
		<string>wxGrid:getSelectionBlockBottomRight</string>
		<string>wxGrid:getSelectionBlockBottomRight(&lt;#This#&gt;)</string>
		<string>wxGrid:getSelectionBlockBottomRight(This) -&gt; [{R::integer(), C::integer()}]</string>
		<string>wxGrid:getSelectionForeground</string>
		<string>wxGrid:getSelectionForeground(&lt;#This#&gt;)</string>
		<string>wxGrid:getSelectionForeground(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGrid:getViewWidth</string>
		<string>wxGrid:getViewWidth(&lt;#This#&gt;)</string>
		<string>wxGrid:getViewWidth(This) -&gt; integer()</string>
		<string>wxGrid:getGridWindow</string>
		<string>wxGrid:getGridWindow(&lt;#This#&gt;)</string>
		<string>wxGrid:getGridWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxGrid:getGridRowLabelWindow</string>
		<string>wxGrid:getGridRowLabelWindow(&lt;#This#&gt;)</string>
		<string>wxGrid:getGridRowLabelWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxGrid:getGridColLabelWindow</string>
		<string>wxGrid:getGridColLabelWindow(&lt;#This#&gt;)</string>
		<string>wxGrid:getGridColLabelWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxGrid:getGridCornerLabelWindow</string>
		<string>wxGrid:getGridCornerLabelWindow(&lt;#This#&gt;)</string>
		<string>wxGrid:getGridCornerLabelWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxGrid:hideCellEditControl</string>
		<string>wxGrid:hideCellEditControl(&lt;#This#&gt;)</string>
		<string>wxGrid:hideCellEditControl(This) -&gt; ok</string>
		<string>wxGrid:insertCols</string>
		<string>wxGrid:insertCols(&lt;#This#&gt;)</string>
		<string>wxGrid:insertCols(This) -&gt; boolean()</string>
		<string>wxGrid:insertCols</string>
		<string>wxGrid:insertCols(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:insertCols(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxGrid:insertRows</string>
		<string>wxGrid:insertRows(&lt;#This#&gt;)</string>
		<string>wxGrid:insertRows(This) -&gt; boolean()</string>
		<string>wxGrid:insertRows</string>
		<string>wxGrid:insertRows(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:insertRows(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxGrid:isCellEditControlEnabled</string>
		<string>wxGrid:isCellEditControlEnabled(&lt;#This#&gt;)</string>
		<string>wxGrid:isCellEditControlEnabled(This) -&gt; boolean()</string>
		<string>wxGrid:isCurrentCellReadOnly</string>
		<string>wxGrid:isCurrentCellReadOnly(&lt;#This#&gt;)</string>
		<string>wxGrid:isCurrentCellReadOnly(This) -&gt; boolean()</string>
		<string>wxGrid:isEditable</string>
		<string>wxGrid:isEditable(&lt;#This#&gt;)</string>
		<string>wxGrid:isEditable(This) -&gt; boolean()</string>
		<string>wxGrid:isInSelection</string>
		<string>wxGrid:isInSelection(&lt;#This#&gt;, &lt;#Coords#&gt;)</string>
		<string>wxGrid:isInSelection(This, Coords) -&gt; boolean()</string>
		<string>wxGrid:isInSelection</string>
		<string>wxGrid:isInSelection(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:isInSelection(This, Row, Col) -&gt; boolean()</string>
		<string>wxGrid:isReadOnly</string>
		<string>wxGrid:isReadOnly(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:isReadOnly(This, Row, Col) -&gt; boolean()</string>
		<string>wxGrid:isSelection</string>
		<string>wxGrid:isSelection(&lt;#This#&gt;)</string>
		<string>wxGrid:isSelection(This) -&gt; boolean()</string>
		<string>wxGrid:isVisible</string>
		<string>wxGrid:isVisible(&lt;#This#&gt;, &lt;#Coords#&gt;)</string>
		<string>wxGrid:isVisible(This, Coords) -&gt; boolean()</string>
		<string>wxGrid:isVisible</string>
		<string>wxGrid:isVisible(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:isVisible(This, Row, Col) -&gt; boolean()</string>
		<string>wxGrid:isVisible</string>
		<string>wxGrid:isVisible(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:isVisible(This, Row, Col, Option::[Option]) -&gt; boolean()</string>
		<string>wxGrid:makeCellVisible</string>
		<string>wxGrid:makeCellVisible(&lt;#This#&gt;, &lt;#Coords#&gt;)</string>
		<string>wxGrid:makeCellVisible(This, Coords) -&gt; ok</string>
		<string>wxGrid:makeCellVisible</string>
		<string>wxGrid:makeCellVisible(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:makeCellVisible(This, Row, Col) -&gt; ok</string>
		<string>wxGrid:moveCursorDown</string>
		<string>wxGrid:moveCursorDown(&lt;#This#&gt;, &lt;#ExpandSelection#&gt;)</string>
		<string>wxGrid:moveCursorDown(This, ExpandSelection) -&gt; boolean()</string>
		<string>wxGrid:moveCursorLeft</string>
		<string>wxGrid:moveCursorLeft(&lt;#This#&gt;, &lt;#ExpandSelection#&gt;)</string>
		<string>wxGrid:moveCursorLeft(This, ExpandSelection) -&gt; boolean()</string>
		<string>wxGrid:moveCursorRight</string>
		<string>wxGrid:moveCursorRight(&lt;#This#&gt;, &lt;#ExpandSelection#&gt;)</string>
		<string>wxGrid:moveCursorRight(This, ExpandSelection) -&gt; boolean()</string>
		<string>wxGrid:moveCursorUp</string>
		<string>wxGrid:moveCursorUp(&lt;#This#&gt;, &lt;#ExpandSelection#&gt;)</string>
		<string>wxGrid:moveCursorUp(This, ExpandSelection) -&gt; boolean()</string>
		<string>wxGrid:moveCursorDownBlock</string>
		<string>wxGrid:moveCursorDownBlock(&lt;#This#&gt;, &lt;#ExpandSelection#&gt;)</string>
		<string>wxGrid:moveCursorDownBlock(This, ExpandSelection) -&gt; boolean()</string>
		<string>wxGrid:moveCursorLeftBlock</string>
		<string>wxGrid:moveCursorLeftBlock(&lt;#This#&gt;, &lt;#ExpandSelection#&gt;)</string>
		<string>wxGrid:moveCursorLeftBlock(This, ExpandSelection) -&gt; boolean()</string>
		<string>wxGrid:moveCursorRightBlock</string>
		<string>wxGrid:moveCursorRightBlock(&lt;#This#&gt;, &lt;#ExpandSelection#&gt;)</string>
		<string>wxGrid:moveCursorRightBlock(This, ExpandSelection) -&gt; boolean()</string>
		<string>wxGrid:moveCursorUpBlock</string>
		<string>wxGrid:moveCursorUpBlock(&lt;#This#&gt;, &lt;#ExpandSelection#&gt;)</string>
		<string>wxGrid:moveCursorUpBlock(This, ExpandSelection) -&gt; boolean()</string>
		<string>wxGrid:movePageDown</string>
		<string>wxGrid:movePageDown(&lt;#This#&gt;)</string>
		<string>wxGrid:movePageDown(This) -&gt; boolean()</string>
		<string>wxGrid:movePageUp</string>
		<string>wxGrid:movePageUp(&lt;#This#&gt;)</string>
		<string>wxGrid:movePageUp(This) -&gt; boolean()</string>
		<string>wxGrid:registerDataType</string>
		<string>wxGrid:registerDataType(&lt;#This#&gt;, &lt;#TypeName#&gt;, &lt;#Renderer#&gt;, &lt;#Editor#&gt;)</string>
		<string>wxGrid:registerDataType(This, TypeName, Renderer, Editor) -&gt; ok</string>
		<string>wxGrid:saveEditControlValue</string>
		<string>wxGrid:saveEditControlValue(&lt;#This#&gt;)</string>
		<string>wxGrid:saveEditControlValue(This) -&gt; ok</string>
		<string>wxGrid:selectAll</string>
		<string>wxGrid:selectAll(&lt;#This#&gt;)</string>
		<string>wxGrid:selectAll(This) -&gt; ok</string>
		<string>wxGrid:selectBlock</string>
		<string>wxGrid:selectBlock(&lt;#This#&gt;, &lt;#TopLeft#&gt;, &lt;#BottomRight#&gt;)</string>
		<string>wxGrid:selectBlock(This, TopLeft, BottomRight) -&gt; ok</string>
		<string>wxGrid:selectBlock</string>
		<string>wxGrid:selectBlock(&lt;#This#&gt;, &lt;#TopLeft#&gt;, &lt;#BottomRight#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:selectBlock(This, TopLeft, BottomRight, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:selectBlock</string>
		<string>wxGrid:selectBlock(&lt;#This#&gt;, &lt;#TopRow#&gt;, &lt;#LeftCol#&gt;, &lt;#BottomRow#&gt;, &lt;#RightCol#&gt;)</string>
		<string>wxGrid:selectBlock(This, TopRow, LeftCol, BottomRow, RightCol) -&gt; ok</string>
		<string>wxGrid:selectBlock</string>
		<string>wxGrid:selectBlock(&lt;#This#&gt;, &lt;#TopRow#&gt;, &lt;#LeftCol#&gt;, &lt;#BottomRow#&gt;, &lt;#RightCol#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:selectBlock(This, TopRow, LeftCol, BottomRow, RightCol, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:selectCol</string>
		<string>wxGrid:selectCol(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:selectCol(This, Col) -&gt; ok</string>
		<string>wxGrid:selectCol</string>
		<string>wxGrid:selectCol(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:selectCol(This, Col, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:selectRow</string>
		<string>wxGrid:selectRow(&lt;#This#&gt;, &lt;#Row#&gt;)</string>
		<string>wxGrid:selectRow(This, Row) -&gt; ok</string>
		<string>wxGrid:selectRow</string>
		<string>wxGrid:selectRow(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:selectRow(This, Row, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:setCellAlignment</string>
		<string>wxGrid:setCellAlignment(&lt;#This#&gt;, &lt;#Align#&gt;)</string>
		<string>wxGrid:setCellAlignment(This, Align) -&gt; ok</string>
		<string>wxGrid:setCellAlignment</string>
		<string>wxGrid:setCellAlignment(&lt;#This#&gt;, &lt;#Align#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:setCellAlignment(This, Align, Row, Col) -&gt; ok</string>
		<string>wxGrid:setCellAlignment</string>
		<string>wxGrid:setCellAlignment(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Horiz#&gt;, &lt;#Vert#&gt;)</string>
		<string>wxGrid:setCellAlignment(This, Row, Col, Horiz, Vert) -&gt; ok</string>
		<string>wxGrid:setCellBackgroundColour</string>
		<string>wxGrid:setCellBackgroundColour(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:setCellBackgroundColour(This, Col) -&gt; ok</string>
		<string>wxGrid:setCellBackgroundColour</string>
		<string>wxGrid:setCellBackgroundColour(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setCellBackgroundColour(This, Row, Col, Val) -&gt; ok</string>
		<string>wxGrid:setCellEditor</string>
		<string>wxGrid:setCellEditor(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Editor#&gt;)</string>
		<string>wxGrid:setCellEditor(This, Row, Col, Editor) -&gt; ok</string>
		<string>wxGrid:setCellFont</string>
		<string>wxGrid:setCellFont(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setCellFont(This, Row, Col, Val) -&gt; ok</string>
		<string>wxGrid:setCellRenderer</string>
		<string>wxGrid:setCellRenderer(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Renderer#&gt;)</string>
		<string>wxGrid:setCellRenderer(This, Row, Col, Renderer) -&gt; ok</string>
		<string>wxGrid:setCellTextColour</string>
		<string>wxGrid:setCellTextColour(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:setCellTextColour(This, Col) -&gt; ok</string>
		<string>wxGrid:setCellTextColour</string>
		<string>wxGrid:setCellTextColour(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setCellTextColour(This, Row, Col, Val) -&gt; ok</string>
		<string>wxGrid:setCellValue</string>
		<string>wxGrid:setCellValue(&lt;#This#&gt;, &lt;#Coords#&gt;, &lt;#S#&gt;)</string>
		<string>wxGrid:setCellValue(This, Coords, S) -&gt; ok</string>
		<string>wxGrid:setCellValue</string>
		<string>wxGrid:setCellValue(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#S#&gt;)</string>
		<string>wxGrid:setCellValue(This, Row, Col, S) -&gt; ok</string>
		<string>wxGrid:setColAttr</string>
		<string>wxGrid:setColAttr(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Attr#&gt;)</string>
		<string>wxGrid:setColAttr(This, Col, Attr) -&gt; ok</string>
		<string>wxGrid:setColFormatBool</string>
		<string>wxGrid:setColFormatBool(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:setColFormatBool(This, Col) -&gt; ok</string>
		<string>wxGrid:setColFormatNumber</string>
		<string>wxGrid:setColFormatNumber(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:setColFormatNumber(This, Col) -&gt; ok</string>
		<string>wxGrid:setColFormatFloat</string>
		<string>wxGrid:setColFormatFloat(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:setColFormatFloat(This, Col) -&gt; ok</string>
		<string>wxGrid:setColFormatFloat</string>
		<string>wxGrid:setColFormatFloat(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:setColFormatFloat(This, Col, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:setColFormatCustom</string>
		<string>wxGrid:setColFormatCustom(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#TypeName#&gt;)</string>
		<string>wxGrid:setColFormatCustom(This, Col, TypeName) -&gt; ok</string>
		<string>wxGrid:setColLabelAlignment</string>
		<string>wxGrid:setColLabelAlignment(&lt;#This#&gt;, &lt;#Horiz#&gt;, &lt;#Vert#&gt;)</string>
		<string>wxGrid:setColLabelAlignment(This, Horiz, Vert) -&gt; ok</string>
		<string>wxGrid:setColLabelSize</string>
		<string>wxGrid:setColLabelSize(&lt;#This#&gt;, &lt;#Height#&gt;)</string>
		<string>wxGrid:setColLabelSize(This, Height) -&gt; ok</string>
		<string>wxGrid:setColLabelValue</string>
		<string>wxGrid:setColLabelValue(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setColLabelValue(This, Col, Val) -&gt; ok</string>
		<string>wxGrid:setColMinimalWidth</string>
		<string>wxGrid:setColMinimalWidth(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Width#&gt;)</string>
		<string>wxGrid:setColMinimalWidth(This, Col, Width) -&gt; ok</string>
		<string>wxGrid:setColMinimalAcceptableWidth</string>
		<string>wxGrid:setColMinimalAcceptableWidth(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxGrid:setColMinimalAcceptableWidth(This, Width) -&gt; ok</string>
		<string>wxGrid:setColSize</string>
		<string>wxGrid:setColSize(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Width#&gt;)</string>
		<string>wxGrid:setColSize(This, Col, Width) -&gt; ok</string>
		<string>wxGrid:setDefaultCellAlignment</string>
		<string>wxGrid:setDefaultCellAlignment(&lt;#This#&gt;, &lt;#Horiz#&gt;, &lt;#Vert#&gt;)</string>
		<string>wxGrid:setDefaultCellAlignment(This, Horiz, Vert) -&gt; ok</string>
		<string>wxGrid:setDefaultCellBackgroundColour</string>
		<string>wxGrid:setDefaultCellBackgroundColour(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setDefaultCellBackgroundColour(This, Val) -&gt; ok</string>
		<string>wxGrid:setDefaultCellFont</string>
		<string>wxGrid:setDefaultCellFont(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setDefaultCellFont(This, Val) -&gt; ok</string>
		<string>wxGrid:setDefaultCellTextColour</string>
		<string>wxGrid:setDefaultCellTextColour(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setDefaultCellTextColour(This, Val) -&gt; ok</string>
		<string>wxGrid:setDefaultEditor</string>
		<string>wxGrid:setDefaultEditor(&lt;#This#&gt;, &lt;#Editor#&gt;)</string>
		<string>wxGrid:setDefaultEditor(This, Editor) -&gt; ok</string>
		<string>wxGrid:setDefaultRenderer</string>
		<string>wxGrid:setDefaultRenderer(&lt;#This#&gt;, &lt;#Renderer#&gt;)</string>
		<string>wxGrid:setDefaultRenderer(This, Renderer) -&gt; ok</string>
		<string>wxGrid:setDefaultColSize</string>
		<string>wxGrid:setDefaultColSize(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxGrid:setDefaultColSize(This, Width) -&gt; ok</string>
		<string>wxGrid:setDefaultColSize</string>
		<string>wxGrid:setDefaultColSize(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:setDefaultColSize(This, Width, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:setDefaultRowSize</string>
		<string>wxGrid:setDefaultRowSize(&lt;#This#&gt;, &lt;#Height#&gt;)</string>
		<string>wxGrid:setDefaultRowSize(This, Height) -&gt; ok</string>
		<string>wxGrid:setDefaultRowSize</string>
		<string>wxGrid:setDefaultRowSize(&lt;#This#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:setDefaultRowSize(This, Height, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:setGridCursor</string>
		<string>wxGrid:setGridCursor(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:setGridCursor(This, Row, Col) -&gt; ok</string>
		<string>wxGrid:setGridLineColour</string>
		<string>wxGrid:setGridLineColour(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setGridLineColour(This, Val) -&gt; ok</string>
		<string>wxGrid:setLabelBackgroundColour</string>
		<string>wxGrid:setLabelBackgroundColour(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setLabelBackgroundColour(This, Val) -&gt; ok</string>
		<string>wxGrid:setLabelFont</string>
		<string>wxGrid:setLabelFont(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setLabelFont(This, Val) -&gt; ok</string>
		<string>wxGrid:setLabelTextColour</string>
		<string>wxGrid:setLabelTextColour(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setLabelTextColour(This, Val) -&gt; ok</string>
		<string>wxGrid:setMargins</string>
		<string>wxGrid:setMargins(&lt;#This#&gt;, &lt;#ExtraWidth#&gt;, &lt;#ExtraHeight#&gt;)</string>
		<string>wxGrid:setMargins(This, ExtraWidth, ExtraHeight) -&gt; ok</string>
		<string>wxGrid:setReadOnly</string>
		<string>wxGrid:setReadOnly(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGrid:setReadOnly(This, Row, Col) -&gt; ok</string>
		<string>wxGrid:setReadOnly</string>
		<string>wxGrid:setReadOnly(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:setReadOnly(This, Row, Col, Option::[Option]) -&gt; ok</string>
		<string>wxGrid:setRowAttr</string>
		<string>wxGrid:setRowAttr(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Attr#&gt;)</string>
		<string>wxGrid:setRowAttr(This, Row, Attr) -&gt; ok</string>
		<string>wxGrid:setRowLabelAlignment</string>
		<string>wxGrid:setRowLabelAlignment(&lt;#This#&gt;, &lt;#Horiz#&gt;, &lt;#Vert#&gt;)</string>
		<string>wxGrid:setRowLabelAlignment(This, Horiz, Vert) -&gt; ok</string>
		<string>wxGrid:setRowLabelSize</string>
		<string>wxGrid:setRowLabelSize(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxGrid:setRowLabelSize(This, Width) -&gt; ok</string>
		<string>wxGrid:setRowLabelValue</string>
		<string>wxGrid:setRowLabelValue(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Val#&gt;)</string>
		<string>wxGrid:setRowLabelValue(This, Row, Val) -&gt; ok</string>
		<string>wxGrid:setRowMinimalHeight</string>
		<string>wxGrid:setRowMinimalHeight(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Width#&gt;)</string>
		<string>wxGrid:setRowMinimalHeight(This, Row, Width) -&gt; ok</string>
		<string>wxGrid:setRowMinimalAcceptableHeight</string>
		<string>wxGrid:setRowMinimalAcceptableHeight(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxGrid:setRowMinimalAcceptableHeight(This, Width) -&gt; ok</string>
		<string>wxGrid:setRowSize</string>
		<string>wxGrid:setRowSize(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Height#&gt;)</string>
		<string>wxGrid:setRowSize(This, Row, Height) -&gt; ok</string>
		<string>wxGrid:setScrollLineX</string>
		<string>wxGrid:setScrollLineX(&lt;#This#&gt;, &lt;#X#&gt;)</string>
		<string>wxGrid:setScrollLineX(This, X) -&gt; ok</string>
		<string>wxGrid:setScrollLineY</string>
		<string>wxGrid:setScrollLineY(&lt;#This#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGrid:setScrollLineY(This, Y) -&gt; ok</string>
		<string>wxGrid:setSelectionBackground</string>
		<string>wxGrid:setSelectionBackground(&lt;#This#&gt;, &lt;#C#&gt;)</string>
		<string>wxGrid:setSelectionBackground(This, C) -&gt; ok</string>
		<string>wxGrid:setSelectionForeground</string>
		<string>wxGrid:setSelectionForeground(&lt;#This#&gt;, &lt;#C#&gt;)</string>
		<string>wxGrid:setSelectionForeground(This, C) -&gt; ok</string>
		<string>wxGrid:setSelectionMode</string>
		<string>wxGrid:setSelectionMode(&lt;#This#&gt;, &lt;#Selmode#&gt;)</string>
		<string>wxGrid:setSelectionMode(This, Selmode) -&gt; ok</string>
		<string>wxGrid:showCellEditControl</string>
		<string>wxGrid:showCellEditControl(&lt;#This#&gt;)</string>
		<string>wxGrid:showCellEditControl(This) -&gt; ok</string>
		<string>wxGrid:xToCol</string>
		<string>wxGrid:xToCol(&lt;#This#&gt;, &lt;#X#&gt;)</string>
		<string>wxGrid:xToCol(This, X) -&gt; integer()</string>
		<string>wxGrid:xToCol</string>
		<string>wxGrid:xToCol(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGrid:xToCol(This, X, Option::[Option]) -&gt; integer()</string>
		<string>wxGrid:xToEdgeOfCol</string>
		<string>wxGrid:xToEdgeOfCol(&lt;#This#&gt;, &lt;#X#&gt;)</string>
		<string>wxGrid:xToEdgeOfCol(This, X) -&gt; integer()</string>
		<string>wxGrid:yToEdgeOfRow</string>
		<string>wxGrid:yToEdgeOfRow(&lt;#This#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGrid:yToEdgeOfRow(This, Y) -&gt; integer()</string>
		<string>wxGrid:yToRow</string>
		<string>wxGrid:yToRow(&lt;#This#&gt;, &lt;#Y#&gt;)</string>
		<string>wxGrid:yToRow(This, Y) -&gt; integer()</string>
		<string>wxGrid:destroy</string>
		<string>wxGrid:destroy(&lt;#This::wxGrid()#&gt;)</string>
		<string>wxGrid:destroy(This::wxGrid()) -&gt; ok</string>
		<string>wxGridBagSizer:new</string>
		<string>wxGridBagSizer:new()</string>
		<string>wxGridBagSizer:new() -&gt; wxGridBagSizer()</string>
		<string>wxGridBagSizer:new</string>
		<string>wxGridBagSizer:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxGridBagSizer:new(Option::[Option]) -&gt; wxGridBagSizer()</string>
		<string>wxGridBagSizer:add</string>
		<string>wxGridBagSizer:add(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxGridBagSizer:add(This, Item) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxGridBagSizer:add</string>
		<string>wxGridBagSizer:add(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxGridBagSizer:add(This, Width, Height) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxGridBagSizer:add</string>
		<string>wxGridBagSizer:add(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxGridBagSizer:add(This, Width, Height, Pos) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxGridBagSizer:add</string>
		<string>wxGridBagSizer:add(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Pos#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGridBagSizer:add(This, Width, Height, Pos, Option::[Option]) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxGridBagSizer:calcMin</string>
		<string>wxGridBagSizer:calcMin(&lt;#This#&gt;)</string>
		<string>wxGridBagSizer:calcMin(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxGridBagSizer:checkForIntersection</string>
		<string>wxGridBagSizer:checkForIntersection(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxGridBagSizer:checkForIntersection(This, Item) -&gt; boolean()</string>
		<string>wxGridBagSizer:checkForIntersection</string>
		<string>wxGridBagSizer:checkForIntersection(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Span#&gt;)</string>
		<string>wxGridBagSizer:checkForIntersection(This, Pos, Span) -&gt; boolean()</string>
		<string>wxGridBagSizer:checkForIntersection</string>
		<string>wxGridBagSizer:checkForIntersection(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Span#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGridBagSizer:checkForIntersection(This, Pos, Span, Option::[Option]) -&gt; boolean()</string>
		<string>wxGridBagSizer:findItem</string>
		<string>wxGridBagSizer:findItem(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxGridBagSizer:findItem(This, Window) -&gt; wxGBSizerItem() (see module wxGBSizerItem)</string>
		<string>wxGridBagSizer:findItemAtPoint</string>
		<string>wxGridBagSizer:findItemAtPoint(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxGridBagSizer:findItemAtPoint(This, Pt) -&gt; wxGBSizerItem() (see module wxGBSizerItem)</string>
		<string>wxGridBagSizer:findItemAtPosition</string>
		<string>wxGridBagSizer:findItemAtPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxGridBagSizer:findItemAtPosition(This, Pos) -&gt; wxGBSizerItem() (see module wxGBSizerItem)</string>
		<string>wxGridBagSizer:findItemWithData</string>
		<string>wxGridBagSizer:findItemWithData(&lt;#This#&gt;, &lt;#UserData#&gt;)</string>
		<string>wxGridBagSizer:findItemWithData(This, UserData) -&gt; wxGBSizerItem() (see module wxGBSizerItem)</string>
		<string>wxGridBagSizer:getCellSize</string>
		<string>wxGridBagSizer:getCellSize(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGridBagSizer:getCellSize(This, Row, Col) -&gt; {W::integer(), H::integer()}</string>
		<string>wxGridBagSizer:getEmptyCellSize</string>
		<string>wxGridBagSizer:getEmptyCellSize(&lt;#This#&gt;)</string>
		<string>wxGridBagSizer:getEmptyCellSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxGridBagSizer:getItemPosition</string>
		<string>wxGridBagSizer:getItemPosition(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxGridBagSizer:getItemPosition(This, Index) -&gt; {R::integer(), C::integer()}</string>
		<string>wxGridBagSizer:getItemSpan</string>
		<string>wxGridBagSizer:getItemSpan(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxGridBagSizer:getItemSpan(This, Index) -&gt; {RS::integer(), CS::integer()}</string>
		<string>wxGridBagSizer:setEmptyCellSize</string>
		<string>wxGridBagSizer:setEmptyCellSize(&lt;#This#&gt;, &lt;#Sz#&gt;)</string>
		<string>wxGridBagSizer:setEmptyCellSize(This, Sz) -&gt; ok</string>
		<string>wxGridBagSizer:setItemPosition</string>
		<string>wxGridBagSizer:setItemPosition(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxGridBagSizer:setItemPosition(This, Index, Pos) -&gt; boolean()</string>
		<string>wxGridBagSizer:setItemSpan</string>
		<string>wxGridBagSizer:setItemSpan(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Span#&gt;)</string>
		<string>wxGridBagSizer:setItemSpan(This, Index, Span) -&gt; boolean()</string>
		<string>wxGridBagSizer:destroy</string>
		<string>wxGridBagSizer:destroy(&lt;#This::wxGridBagSizer()#&gt;)</string>
		<string>wxGridBagSizer:destroy(This::wxGridBagSizer()) -&gt; ok</string>
		<string>wxGridCellAttr:setTextColour</string>
		<string>wxGridCellAttr:setTextColour(&lt;#This#&gt;, &lt;#ColText#&gt;)</string>
		<string>wxGridCellAttr:setTextColour(This, ColText) -&gt; ok</string>
		<string>wxGridCellAttr:setBackgroundColour</string>
		<string>wxGridCellAttr:setBackgroundColour(&lt;#This#&gt;, &lt;#ColBack#&gt;)</string>
		<string>wxGridCellAttr:setBackgroundColour(This, ColBack) -&gt; ok</string>
		<string>wxGridCellAttr:setFont</string>
		<string>wxGridCellAttr:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxGridCellAttr:setFont(This, Font) -&gt; ok</string>
		<string>wxGridCellAttr:setAlignment</string>
		<string>wxGridCellAttr:setAlignment(&lt;#This#&gt;, &lt;#HAlign#&gt;, &lt;#VAlign#&gt;)</string>
		<string>wxGridCellAttr:setAlignment(This, HAlign, VAlign) -&gt; ok</string>
		<string>wxGridCellAttr:setReadOnly</string>
		<string>wxGridCellAttr:setReadOnly(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:setReadOnly(This) -&gt; ok</string>
		<string>wxGridCellAttr:setReadOnly</string>
		<string>wxGridCellAttr:setReadOnly(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGridCellAttr:setReadOnly(This, Option::[Option]) -&gt; ok</string>
		<string>wxGridCellAttr:setRenderer</string>
		<string>wxGridCellAttr:setRenderer(&lt;#This#&gt;, &lt;#Renderer#&gt;)</string>
		<string>wxGridCellAttr:setRenderer(This, Renderer) -&gt; ok</string>
		<string>wxGridCellAttr:setEditor</string>
		<string>wxGridCellAttr:setEditor(&lt;#This#&gt;, &lt;#Editor#&gt;)</string>
		<string>wxGridCellAttr:setEditor(This, Editor) -&gt; ok</string>
		<string>wxGridCellAttr:hasTextColour</string>
		<string>wxGridCellAttr:hasTextColour(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:hasTextColour(This) -&gt; boolean()</string>
		<string>wxGridCellAttr:hasBackgroundColour</string>
		<string>wxGridCellAttr:hasBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:hasBackgroundColour(This) -&gt; boolean()</string>
		<string>wxGridCellAttr:hasFont</string>
		<string>wxGridCellAttr:hasFont(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:hasFont(This) -&gt; boolean()</string>
		<string>wxGridCellAttr:hasAlignment</string>
		<string>wxGridCellAttr:hasAlignment(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:hasAlignment(This) -&gt; boolean()</string>
		<string>wxGridCellAttr:hasRenderer</string>
		<string>wxGridCellAttr:hasRenderer(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:hasRenderer(This) -&gt; boolean()</string>
		<string>wxGridCellAttr:hasEditor</string>
		<string>wxGridCellAttr:hasEditor(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:hasEditor(This) -&gt; boolean()</string>
		<string>wxGridCellAttr:getTextColour</string>
		<string>wxGridCellAttr:getTextColour(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:getTextColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGridCellAttr:getBackgroundColour</string>
		<string>wxGridCellAttr:getBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:getBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxGridCellAttr:getFont</string>
		<string>wxGridCellAttr:getFont(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:getFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxGridCellAttr:getAlignment</string>
		<string>wxGridCellAttr:getAlignment(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:getAlignment(This) -&gt; {HAlign::integer(), VAlign::integer()}</string>
		<string>wxGridCellAttr:getRenderer</string>
		<string>wxGridCellAttr:getRenderer(&lt;#This#&gt;, &lt;#Grid#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGridCellAttr:getRenderer(This, Grid, Row, Col) -&gt; wxGridCellRenderer() (see module wxGridCellRenderer)</string>
		<string>wxGridCellAttr:getEditor</string>
		<string>wxGridCellAttr:getEditor(&lt;#This#&gt;, &lt;#Grid#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGridCellAttr:getEditor(This, Grid, Row, Col) -&gt; wxGridCellEditor() (see module wxGridCellEditor)</string>
		<string>wxGridCellAttr:isReadOnly</string>
		<string>wxGridCellAttr:isReadOnly(&lt;#This#&gt;)</string>
		<string>wxGridCellAttr:isReadOnly(This) -&gt; boolean()</string>
		<string>wxGridCellAttr:setDefAttr</string>
		<string>wxGridCellAttr:setDefAttr(&lt;#This#&gt;, &lt;#DefAttr#&gt;)</string>
		<string>wxGridCellAttr:setDefAttr(This, DefAttr) -&gt; ok</string>
		<string>wxGridCellBoolEditor:new</string>
		<string>wxGridCellBoolEditor:new()</string>
		<string>wxGridCellBoolEditor:new() -&gt; wxGridCellBoolEditor()</string>
		<string>wxGridCellBoolEditor:isTrueValue</string>
		<string>wxGridCellBoolEditor:isTrueValue(&lt;#Value#&gt;)</string>
		<string>wxGridCellBoolEditor:isTrueValue(Value) -&gt; boolean()</string>
		<string>wxGridCellBoolEditor:useStringValues</string>
		<string>wxGridCellBoolEditor:useStringValues()</string>
		<string>wxGridCellBoolEditor:useStringValues() -&gt; ok</string>
		<string>wxGridCellBoolEditor:useStringValues</string>
		<string>wxGridCellBoolEditor:useStringValues(&lt;#Option::[Option]#&gt;)</string>
		<string>wxGridCellBoolEditor:useStringValues(Option::[Option]) -&gt; ok</string>
		<string>wxGridCellBoolEditor:destroy</string>
		<string>wxGridCellBoolEditor:destroy(&lt;#This::wxGridCellBoolEditor()#&gt;)</string>
		<string>wxGridCellBoolEditor:destroy(This::wxGridCellBoolEditor()) -&gt; ok</string>
		<string>wxGridCellBoolRenderer:new</string>
		<string>wxGridCellBoolRenderer:new()</string>
		<string>wxGridCellBoolRenderer:new() -&gt; wxGridCellBoolRenderer()</string>
		<string>wxGridCellBoolRenderer:destroy</string>
		<string>wxGridCellBoolRenderer:destroy(&lt;#This::wxGridCellBoolRenderer()#&gt;)</string>
		<string>wxGridCellBoolRenderer:destroy(This::wxGridCellBoolRenderer()) -&gt; ok</string>
		<string>wxGridCellChoiceEditor:new</string>
		<string>wxGridCellChoiceEditor:new(&lt;#Choices#&gt;)</string>
		<string>wxGridCellChoiceEditor:new(Choices) -&gt; wxGridCellChoiceEditor()</string>
		<string>wxGridCellChoiceEditor:new</string>
		<string>wxGridCellChoiceEditor:new(&lt;#Choices#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGridCellChoiceEditor:new(Choices, Option::[Option]) -&gt; wxGridCellChoiceEditor()</string>
		<string>wxGridCellChoiceEditor:setParameters</string>
		<string>wxGridCellChoiceEditor:setParameters(&lt;#This#&gt;, &lt;#Params#&gt;)</string>
		<string>wxGridCellChoiceEditor:setParameters(This, Params) -&gt; ok</string>
		<string>wxGridCellChoiceEditor:destroy</string>
		<string>wxGridCellChoiceEditor:destroy(&lt;#This::wxGridCellChoiceEditor()#&gt;)</string>
		<string>wxGridCellChoiceEditor:destroy(This::wxGridCellChoiceEditor()) -&gt; ok</string>
		<string>wxGridCellEditor:create</string>
		<string>wxGridCellEditor:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#EvtHandler#&gt;)</string>
		<string>wxGridCellEditor:create(This, Parent, Id, EvtHandler) -&gt; ok</string>
		<string>wxGridCellEditor:isCreated</string>
		<string>wxGridCellEditor:isCreated(&lt;#This#&gt;)</string>
		<string>wxGridCellEditor:isCreated(This) -&gt; boolean()</string>
		<string>wxGridCellEditor:setSize</string>
		<string>wxGridCellEditor:setSize(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxGridCellEditor:setSize(This, Rect) -&gt; ok</string>
		<string>wxGridCellEditor:show</string>
		<string>wxGridCellEditor:show(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxGridCellEditor:show(This, Show) -&gt; ok</string>
		<string>wxGridCellEditor:show</string>
		<string>wxGridCellEditor:show(&lt;#This#&gt;, &lt;#Show#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGridCellEditor:show(This, Show, Option::[Option]) -&gt; ok</string>
		<string>wxGridCellEditor:paintBackground</string>
		<string>wxGridCellEditor:paintBackground(&lt;#This#&gt;, &lt;#RectCell#&gt;, &lt;#Attr#&gt;)</string>
		<string>wxGridCellEditor:paintBackground(This, RectCell, Attr) -&gt; ok</string>
		<string>wxGridCellEditor:beginEdit</string>
		<string>wxGridCellEditor:beginEdit(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Grid#&gt;)</string>
		<string>wxGridCellEditor:beginEdit(This, Row, Col, Grid) -&gt; ok</string>
		<string>wxGridCellEditor:endEdit</string>
		<string>wxGridCellEditor:endEdit(&lt;#This#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#Grid#&gt;)</string>
		<string>wxGridCellEditor:endEdit(This, Row, Col, Grid) -&gt; boolean()</string>
		<string>wxGridCellEditor:reset</string>
		<string>wxGridCellEditor:reset(&lt;#This#&gt;)</string>
		<string>wxGridCellEditor:reset(This) -&gt; ok</string>
		<string>wxGridCellEditor:startingKey</string>
		<string>wxGridCellEditor:startingKey(&lt;#This#&gt;, &lt;#Event#&gt;)</string>
		<string>wxGridCellEditor:startingKey(This, Event) -&gt; ok</string>
		<string>wxGridCellEditor:startingClick</string>
		<string>wxGridCellEditor:startingClick(&lt;#This#&gt;)</string>
		<string>wxGridCellEditor:startingClick(This) -&gt; ok</string>
		<string>wxGridCellEditor:handleReturn</string>
		<string>wxGridCellEditor:handleReturn(&lt;#This#&gt;, &lt;#Event#&gt;)</string>
		<string>wxGridCellEditor:handleReturn(This, Event) -&gt; ok</string>
		<string>wxGridCellFloatEditor:new</string>
		<string>wxGridCellFloatEditor:new()</string>
		<string>wxGridCellFloatEditor:new() -&gt; wxGridCellFloatEditor()</string>
		<string>wxGridCellFloatEditor:new</string>
		<string>wxGridCellFloatEditor:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxGridCellFloatEditor:new(Option::[Option]) -&gt; wxGridCellFloatEditor()</string>
		<string>wxGridCellFloatEditor:setParameters</string>
		<string>wxGridCellFloatEditor:setParameters(&lt;#This#&gt;, &lt;#Params#&gt;)</string>
		<string>wxGridCellFloatEditor:setParameters(This, Params) -&gt; ok</string>
		<string>wxGridCellFloatEditor:destroy</string>
		<string>wxGridCellFloatEditor:destroy(&lt;#This::wxGridCellFloatEditor()#&gt;)</string>
		<string>wxGridCellFloatEditor:destroy(This::wxGridCellFloatEditor()) -&gt; ok</string>
		<string>wxGridCellFloatRenderer:new</string>
		<string>wxGridCellFloatRenderer:new()</string>
		<string>wxGridCellFloatRenderer:new() -&gt; wxGridCellFloatRenderer()</string>
		<string>wxGridCellFloatRenderer:new</string>
		<string>wxGridCellFloatRenderer:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxGridCellFloatRenderer:new(Option::[Option]) -&gt; wxGridCellFloatRenderer()</string>
		<string>wxGridCellFloatRenderer:getPrecision</string>
		<string>wxGridCellFloatRenderer:getPrecision(&lt;#This#&gt;)</string>
		<string>wxGridCellFloatRenderer:getPrecision(This) -&gt; integer()</string>
		<string>wxGridCellFloatRenderer:getWidth</string>
		<string>wxGridCellFloatRenderer:getWidth(&lt;#This#&gt;)</string>
		<string>wxGridCellFloatRenderer:getWidth(This) -&gt; integer()</string>
		<string>wxGridCellFloatRenderer:setParameters</string>
		<string>wxGridCellFloatRenderer:setParameters(&lt;#This#&gt;, &lt;#Params#&gt;)</string>
		<string>wxGridCellFloatRenderer:setParameters(This, Params) -&gt; ok</string>
		<string>wxGridCellFloatRenderer:setPrecision</string>
		<string>wxGridCellFloatRenderer:setPrecision(&lt;#This#&gt;, &lt;#Precision#&gt;)</string>
		<string>wxGridCellFloatRenderer:setPrecision(This, Precision) -&gt; ok</string>
		<string>wxGridCellFloatRenderer:setWidth</string>
		<string>wxGridCellFloatRenderer:setWidth(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxGridCellFloatRenderer:setWidth(This, Width) -&gt; ok</string>
		<string>wxGridCellFloatRenderer:destroy</string>
		<string>wxGridCellFloatRenderer:destroy(&lt;#This::wxGridCellFloatRenderer()#&gt;)</string>
		<string>wxGridCellFloatRenderer:destroy(This::wxGridCellFloatRenderer()) -&gt; ok</string>
		<string>wxGridCellNumberEditor:new</string>
		<string>wxGridCellNumberEditor:new()</string>
		<string>wxGridCellNumberEditor:new() -&gt; wxGridCellNumberEditor()</string>
		<string>wxGridCellNumberEditor:new</string>
		<string>wxGridCellNumberEditor:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxGridCellNumberEditor:new(Option::[Option]) -&gt; wxGridCellNumberEditor()</string>
		<string>wxGridCellNumberEditor:getValue</string>
		<string>wxGridCellNumberEditor:getValue(&lt;#This#&gt;)</string>
		<string>wxGridCellNumberEditor:getValue(This) -&gt; charlist() (see module unicode)</string>
		<string>wxGridCellNumberEditor:setParameters</string>
		<string>wxGridCellNumberEditor:setParameters(&lt;#This#&gt;, &lt;#Params#&gt;)</string>
		<string>wxGridCellNumberEditor:setParameters(This, Params) -&gt; ok</string>
		<string>wxGridCellNumberEditor:destroy</string>
		<string>wxGridCellNumberEditor:destroy(&lt;#This::wxGridCellNumberEditor()#&gt;)</string>
		<string>wxGridCellNumberEditor:destroy(This::wxGridCellNumberEditor()) -&gt; ok</string>
		<string>wxGridCellNumberRenderer:new</string>
		<string>wxGridCellNumberRenderer:new()</string>
		<string>wxGridCellNumberRenderer:new() -&gt; wxGridCellNumberRenderer()</string>
		<string>wxGridCellNumberRenderer:destroy</string>
		<string>wxGridCellNumberRenderer:destroy(&lt;#This::wxGridCellNumberRenderer()#&gt;)</string>
		<string>wxGridCellNumberRenderer:destroy(This::wxGridCellNumberRenderer()) -&gt; ok</string>
		<string>wxGridCellRenderer:draw</string>
		<string>wxGridCellRenderer:draw(&lt;#This#&gt;, &lt;#Grid#&gt;, &lt;#Attr#&gt;, &lt;#Dc#&gt;, &lt;#Rect#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;, &lt;#IsSelected#&gt;)</string>
		<string>wxGridCellRenderer:draw(This, Grid, Attr, Dc, Rect, Row, Col, IsSelected) -&gt; ok</string>
		<string>wxGridCellRenderer:getBestSize</string>
		<string>wxGridCellRenderer:getBestSize(&lt;#This#&gt;, &lt;#Grid#&gt;, &lt;#Attr#&gt;, &lt;#Dc#&gt;, &lt;#Row#&gt;, &lt;#Col#&gt;)</string>
		<string>wxGridCellRenderer:getBestSize(This, Grid, Attr, Dc, Row, Col) -&gt; {W::integer(), H::integer()}</string>
		<string>wxGridCellStringRenderer:new</string>
		<string>wxGridCellStringRenderer:new()</string>
		<string>wxGridCellStringRenderer:new() -&gt; wxGridCellStringRenderer()</string>
		<string>wxGridCellStringRenderer:destroy</string>
		<string>wxGridCellStringRenderer:destroy(&lt;#This::wxGridCellStringRenderer()#&gt;)</string>
		<string>wxGridCellStringRenderer:destroy(This::wxGridCellStringRenderer()) -&gt; ok</string>
		<string>wxGridCellTextEditor:new</string>
		<string>wxGridCellTextEditor:new()</string>
		<string>wxGridCellTextEditor:new() -&gt; wxGridCellTextEditor()</string>
		<string>wxGridCellTextEditor:setParameters</string>
		<string>wxGridCellTextEditor:setParameters(&lt;#This#&gt;, &lt;#Params#&gt;)</string>
		<string>wxGridCellTextEditor:setParameters(This, Params) -&gt; ok</string>
		<string>wxGridCellTextEditor:destroy</string>
		<string>wxGridCellTextEditor:destroy(&lt;#This::wxGridCellTextEditor()#&gt;)</string>
		<string>wxGridCellTextEditor:destroy(This::wxGridCellTextEditor()) -&gt; ok</string>
		<string>wxGridEvent:altDown</string>
		<string>wxGridEvent:altDown(&lt;#This#&gt;)</string>
		<string>wxGridEvent:altDown(This) -&gt; boolean()</string>
		<string>wxGridEvent:controlDown</string>
		<string>wxGridEvent:controlDown(&lt;#This#&gt;)</string>
		<string>wxGridEvent:controlDown(This) -&gt; boolean()</string>
		<string>wxGridEvent:getCol</string>
		<string>wxGridEvent:getCol(&lt;#This#&gt;)</string>
		<string>wxGridEvent:getCol(This) -&gt; integer()</string>
		<string>wxGridEvent:getPosition</string>
		<string>wxGridEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxGridEvent:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxGridEvent:getRow</string>
		<string>wxGridEvent:getRow(&lt;#This#&gt;)</string>
		<string>wxGridEvent:getRow(This) -&gt; integer()</string>
		<string>wxGridEvent:metaDown</string>
		<string>wxGridEvent:metaDown(&lt;#This#&gt;)</string>
		<string>wxGridEvent:metaDown(This) -&gt; boolean()</string>
		<string>wxGridEvent:selecting</string>
		<string>wxGridEvent:selecting(&lt;#This#&gt;)</string>
		<string>wxGridEvent:selecting(This) -&gt; boolean()</string>
		<string>wxGridEvent:shiftDown</string>
		<string>wxGridEvent:shiftDown(&lt;#This#&gt;)</string>
		<string>wxGridEvent:shiftDown(This) -&gt; boolean()</string>
		<string>wxGridSizer:new</string>
		<string>wxGridSizer:new(&lt;#Cols#&gt;)</string>
		<string>wxGridSizer:new(Cols) -&gt; wxGridSizer()</string>
		<string>wxGridSizer:new</string>
		<string>wxGridSizer:new(&lt;#Cols#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxGridSizer:new(Cols, Option::[Option]) -&gt; wxGridSizer()</string>
		<string>wxGridSizer:new</string>
		<string>wxGridSizer:new(&lt;#Rows#&gt;, &lt;#Cols#&gt;, &lt;#Vgap#&gt;, &lt;#Hgap#&gt;)</string>
		<string>wxGridSizer:new(Rows, Cols, Vgap, Hgap) -&gt; wxGridSizer()</string>
		<string>wxGridSizer:getCols</string>
		<string>wxGridSizer:getCols(&lt;#This#&gt;)</string>
		<string>wxGridSizer:getCols(This) -&gt; integer()</string>
		<string>wxGridSizer:getHGap</string>
		<string>wxGridSizer:getHGap(&lt;#This#&gt;)</string>
		<string>wxGridSizer:getHGap(This) -&gt; integer()</string>
		<string>wxGridSizer:getRows</string>
		<string>wxGridSizer:getRows(&lt;#This#&gt;)</string>
		<string>wxGridSizer:getRows(This) -&gt; integer()</string>
		<string>wxGridSizer:getVGap</string>
		<string>wxGridSizer:getVGap(&lt;#This#&gt;)</string>
		<string>wxGridSizer:getVGap(This) -&gt; integer()</string>
		<string>wxGridSizer:setCols</string>
		<string>wxGridSizer:setCols(&lt;#This#&gt;, &lt;#Cols#&gt;)</string>
		<string>wxGridSizer:setCols(This, Cols) -&gt; ok</string>
		<string>wxGridSizer:setHGap</string>
		<string>wxGridSizer:setHGap(&lt;#This#&gt;, &lt;#Gap#&gt;)</string>
		<string>wxGridSizer:setHGap(This, Gap) -&gt; ok</string>
		<string>wxGridSizer:setRows</string>
		<string>wxGridSizer:setRows(&lt;#This#&gt;, &lt;#Rows#&gt;)</string>
		<string>wxGridSizer:setRows(This, Rows) -&gt; ok</string>
		<string>wxGridSizer:setVGap</string>
		<string>wxGridSizer:setVGap(&lt;#This#&gt;, &lt;#Gap#&gt;)</string>
		<string>wxGridSizer:setVGap(This, Gap) -&gt; ok</string>
		<string>wxGridSizer:destroy</string>
		<string>wxGridSizer:destroy(&lt;#This::wxGridSizer()#&gt;)</string>
		<string>wxGridSizer:destroy(This::wxGridSizer()) -&gt; ok</string>
		<string>wxHelpEvent:getOrigin</string>
		<string>wxHelpEvent:getOrigin(&lt;#This#&gt;)</string>
		<string>wxHelpEvent:getOrigin(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxHelpEvent:getPosition</string>
		<string>wxHelpEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxHelpEvent:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxHelpEvent:setOrigin</string>
		<string>wxHelpEvent:setOrigin(&lt;#This#&gt;, &lt;#Origin#&gt;)</string>
		<string>wxHelpEvent:setOrigin(This, Origin) -&gt; ok</string>
		<string>wxHelpEvent:setPosition</string>
		<string>wxHelpEvent:setPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxHelpEvent:setPosition(This, Pos) -&gt; ok</string>
		<string>wxHtmlEasyPrinting:new</string>
		<string>wxHtmlEasyPrinting:new()</string>
		<string>wxHtmlEasyPrinting:new() -&gt; wxHtmlEasyPrinting()</string>
		<string>wxHtmlEasyPrinting:new</string>
		<string>wxHtmlEasyPrinting:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxHtmlEasyPrinting:new(Option::[Option]) -&gt; wxHtmlEasyPrinting()</string>
		<string>wxHtmlEasyPrinting:getPrintData</string>
		<string>wxHtmlEasyPrinting:getPrintData(&lt;#This#&gt;)</string>
		<string>wxHtmlEasyPrinting:getPrintData(This) -&gt; wxPrintData() (see module wxPrintData)</string>
		<string>wxHtmlEasyPrinting:getPageSetupData</string>
		<string>wxHtmlEasyPrinting:getPageSetupData(&lt;#This#&gt;)</string>
		<string>wxHtmlEasyPrinting:getPageSetupData(This) -&gt; wxPageSetupDialogData() (see module wxPageSetupDialogData)</string>
		<string>wxHtmlEasyPrinting:previewFile</string>
		<string>wxHtmlEasyPrinting:previewFile(&lt;#This#&gt;, &lt;#Htmlfile#&gt;)</string>
		<string>wxHtmlEasyPrinting:previewFile(This, Htmlfile) -&gt; boolean()</string>
		<string>wxHtmlEasyPrinting:previewText</string>
		<string>wxHtmlEasyPrinting:previewText(&lt;#This#&gt;, &lt;#Htmltext#&gt;)</string>
		<string>wxHtmlEasyPrinting:previewText(This, Htmltext) -&gt; boolean()</string>
		<string>wxHtmlEasyPrinting:previewText</string>
		<string>wxHtmlEasyPrinting:previewText(&lt;#This#&gt;, &lt;#Htmltext#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxHtmlEasyPrinting:previewText(This, Htmltext, Option::[Option]) -&gt; boolean()</string>
		<string>wxHtmlEasyPrinting:printFile</string>
		<string>wxHtmlEasyPrinting:printFile(&lt;#This#&gt;, &lt;#Htmlfile#&gt;)</string>
		<string>wxHtmlEasyPrinting:printFile(This, Htmlfile) -&gt; boolean()</string>
		<string>wxHtmlEasyPrinting:printText</string>
		<string>wxHtmlEasyPrinting:printText(&lt;#This#&gt;, &lt;#Htmltext#&gt;)</string>
		<string>wxHtmlEasyPrinting:printText(This, Htmltext) -&gt; boolean()</string>
		<string>wxHtmlEasyPrinting:printText</string>
		<string>wxHtmlEasyPrinting:printText(&lt;#This#&gt;, &lt;#Htmltext#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxHtmlEasyPrinting:printText(This, Htmltext, Option::[Option]) -&gt; boolean()</string>
		<string>wxHtmlEasyPrinting:pageSetup</string>
		<string>wxHtmlEasyPrinting:pageSetup(&lt;#This#&gt;)</string>
		<string>wxHtmlEasyPrinting:pageSetup(This) -&gt; ok</string>
		<string>wxHtmlEasyPrinting:setFonts</string>
		<string>wxHtmlEasyPrinting:setFonts(&lt;#This#&gt;, &lt;#Normal_face#&gt;, &lt;#Fixed_face#&gt;)</string>
		<string>wxHtmlEasyPrinting:setFonts(This, Normal_face, Fixed_face) -&gt; ok</string>
		<string>wxHtmlEasyPrinting:setFonts</string>
		<string>wxHtmlEasyPrinting:setFonts(&lt;#This#&gt;, &lt;#Normal_face#&gt;, &lt;#Fixed_face#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxHtmlEasyPrinting:setFonts(This, Normal_face, Fixed_face, Option::[Option]) -&gt; ok</string>
		<string>wxHtmlEasyPrinting:setHeader</string>
		<string>wxHtmlEasyPrinting:setHeader(&lt;#This#&gt;, &lt;#Header#&gt;)</string>
		<string>wxHtmlEasyPrinting:setHeader(This, Header) -&gt; ok</string>
		<string>wxHtmlEasyPrinting:setHeader</string>
		<string>wxHtmlEasyPrinting:setHeader(&lt;#This#&gt;, &lt;#Header#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxHtmlEasyPrinting:setHeader(This, Header, Option::[Option]) -&gt; ok</string>
		<string>wxHtmlEasyPrinting:setFooter</string>
		<string>wxHtmlEasyPrinting:setFooter(&lt;#This#&gt;, &lt;#Footer#&gt;)</string>
		<string>wxHtmlEasyPrinting:setFooter(This, Footer) -&gt; ok</string>
		<string>wxHtmlEasyPrinting:setFooter</string>
		<string>wxHtmlEasyPrinting:setFooter(&lt;#This#&gt;, &lt;#Footer#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxHtmlEasyPrinting:setFooter(This, Footer, Option::[Option]) -&gt; ok</string>
		<string>wxHtmlEasyPrinting:destroy</string>
		<string>wxHtmlEasyPrinting:destroy(&lt;#This::wxHtmlEasyPrinting()#&gt;)</string>
		<string>wxHtmlEasyPrinting:destroy(This::wxHtmlEasyPrinting()) -&gt; ok</string>
		<string>wxHtmlLinkEvent:getLinkInfo</string>
		<string>wxHtmlLinkEvent:getLinkInfo(&lt;#This#&gt;)</string>
		<string>wxHtmlLinkEvent:getLinkInfo(This) -&gt; wx_wxHtmlLinkInfo() (see module wx)</string>
		<string>wxHtmlWindow:new</string>
		<string>wxHtmlWindow:new()</string>
		<string>wxHtmlWindow:new() -&gt; wxHtmlWindow()</string>
		<string>wxHtmlWindow:new</string>
		<string>wxHtmlWindow:new(&lt;#Parent#&gt;)</string>
		<string>wxHtmlWindow:new(Parent) -&gt; wxHtmlWindow()</string>
		<string>wxHtmlWindow:new</string>
		<string>wxHtmlWindow:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxHtmlWindow:new(Parent, Option::[Option]) -&gt; wxHtmlWindow()</string>
		<string>wxHtmlWindow:appendToPage</string>
		<string>wxHtmlWindow:appendToPage(&lt;#This#&gt;, &lt;#Source#&gt;)</string>
		<string>wxHtmlWindow:appendToPage(This, Source) -&gt; boolean()</string>
		<string>wxHtmlWindow:getOpenedAnchor</string>
		<string>wxHtmlWindow:getOpenedAnchor(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:getOpenedAnchor(This) -&gt; charlist() (see module unicode)</string>
		<string>wxHtmlWindow:getOpenedPage</string>
		<string>wxHtmlWindow:getOpenedPage(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:getOpenedPage(This) -&gt; charlist() (see module unicode)</string>
		<string>wxHtmlWindow:getOpenedPageTitle</string>
		<string>wxHtmlWindow:getOpenedPageTitle(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:getOpenedPageTitle(This) -&gt; charlist() (see module unicode)</string>
		<string>wxHtmlWindow:getRelatedFrame</string>
		<string>wxHtmlWindow:getRelatedFrame(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:getRelatedFrame(This) -&gt; wxFrame() (see module wxFrame)</string>
		<string>wxHtmlWindow:historyBack</string>
		<string>wxHtmlWindow:historyBack(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:historyBack(This) -&gt; boolean()</string>
		<string>wxHtmlWindow:historyCanBack</string>
		<string>wxHtmlWindow:historyCanBack(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:historyCanBack(This) -&gt; boolean()</string>
		<string>wxHtmlWindow:historyCanForward</string>
		<string>wxHtmlWindow:historyCanForward(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:historyCanForward(This) -&gt; boolean()</string>
		<string>wxHtmlWindow:historyClear</string>
		<string>wxHtmlWindow:historyClear(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:historyClear(This) -&gt; ok</string>
		<string>wxHtmlWindow:historyForward</string>
		<string>wxHtmlWindow:historyForward(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:historyForward(This) -&gt; boolean()</string>
		<string>wxHtmlWindow:loadFile</string>
		<string>wxHtmlWindow:loadFile(&lt;#This#&gt;, &lt;#Filename#&gt;)</string>
		<string>wxHtmlWindow:loadFile(This, Filename) -&gt; boolean()</string>
		<string>wxHtmlWindow:loadPage</string>
		<string>wxHtmlWindow:loadPage(&lt;#This#&gt;, &lt;#Location#&gt;)</string>
		<string>wxHtmlWindow:loadPage(This, Location) -&gt; boolean()</string>
		<string>wxHtmlWindow:selectAll</string>
		<string>wxHtmlWindow:selectAll(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:selectAll(This) -&gt; ok</string>
		<string>wxHtmlWindow:selectionToText</string>
		<string>wxHtmlWindow:selectionToText(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:selectionToText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxHtmlWindow:selectLine</string>
		<string>wxHtmlWindow:selectLine(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxHtmlWindow:selectLine(This, Pos) -&gt; ok</string>
		<string>wxHtmlWindow:selectWord</string>
		<string>wxHtmlWindow:selectWord(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxHtmlWindow:selectWord(This, Pos) -&gt; ok</string>
		<string>wxHtmlWindow:setBorders</string>
		<string>wxHtmlWindow:setBorders(&lt;#This#&gt;, &lt;#B#&gt;)</string>
		<string>wxHtmlWindow:setBorders(This, B) -&gt; ok</string>
		<string>wxHtmlWindow:setFonts</string>
		<string>wxHtmlWindow:setFonts(&lt;#This#&gt;, &lt;#Normal_face#&gt;, &lt;#Fixed_face#&gt;)</string>
		<string>wxHtmlWindow:setFonts(This, Normal_face, Fixed_face) -&gt; ok</string>
		<string>wxHtmlWindow:setFonts</string>
		<string>wxHtmlWindow:setFonts(&lt;#This#&gt;, &lt;#Normal_face#&gt;, &lt;#Fixed_face#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxHtmlWindow:setFonts(This, Normal_face, Fixed_face, Option::[Option]) -&gt; ok</string>
		<string>wxHtmlWindow:setPage</string>
		<string>wxHtmlWindow:setPage(&lt;#This#&gt;, &lt;#Source#&gt;)</string>
		<string>wxHtmlWindow:setPage(This, Source) -&gt; boolean()</string>
		<string>wxHtmlWindow:setRelatedFrame</string>
		<string>wxHtmlWindow:setRelatedFrame(&lt;#This#&gt;, &lt;#Frame#&gt;, &lt;#Format#&gt;)</string>
		<string>wxHtmlWindow:setRelatedFrame(This, Frame, Format) -&gt; ok</string>
		<string>wxHtmlWindow:setRelatedStatusBar</string>
		<string>wxHtmlWindow:setRelatedStatusBar(&lt;#This#&gt;, &lt;#Bar#&gt;)</string>
		<string>wxHtmlWindow:setRelatedStatusBar(This, Bar) -&gt; ok</string>
		<string>wxHtmlWindow:toText</string>
		<string>wxHtmlWindow:toText(&lt;#This#&gt;)</string>
		<string>wxHtmlWindow:toText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxHtmlWindow:destroy</string>
		<string>wxHtmlWindow:destroy(&lt;#This::wxHtmlWindow()#&gt;)</string>
		<string>wxHtmlWindow:destroy(This::wxHtmlWindow()) -&gt; ok</string>
		<string>wxIcon:new</string>
		<string>wxIcon:new()</string>
		<string>wxIcon:new() -&gt; wxIcon()</string>
		<string>wxIcon:new</string>
		<string>wxIcon:new(&lt;#Filename#&gt;)</string>
		<string>wxIcon:new(Filename) -&gt; wxIcon()</string>
		<string>wxIcon:new</string>
		<string>wxIcon:new(&lt;#Filename#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxIcon:new(Filename, Option::[Option]) -&gt; wxIcon()</string>
		<string>wxIcon:copyFromBitmap</string>
		<string>wxIcon:copyFromBitmap(&lt;#This#&gt;, &lt;#Bmp#&gt;)</string>
		<string>wxIcon:copyFromBitmap(This, Bmp) -&gt; ok</string>
		<string>wxIcon:destroy</string>
		<string>wxIcon:destroy(&lt;#This::wxIcon()#&gt;)</string>
		<string>wxIcon:destroy(This::wxIcon()) -&gt; ok</string>
		<string>wxIconBundle:new</string>
		<string>wxIconBundle:new()</string>
		<string>wxIconBundle:new() -&gt; wxIconBundle()</string>
		<string>wxIconBundle:new</string>
		<string>wxIconBundle:new(&lt;#Ic#&gt;)</string>
		<string>wxIconBundle:new(Ic) -&gt; wxIconBundle()</string>
		<string>wxIconBundle:new</string>
		<string>wxIconBundle:new(&lt;#File#&gt;, &lt;#Type#&gt;)</string>
		<string>wxIconBundle:new(File, Type) -&gt; wxIconBundle()</string>
		<string>wxIconBundle:addIcon</string>
		<string>wxIconBundle:addIcon(&lt;#This#&gt;, &lt;#Icon#&gt;)</string>
		<string>wxIconBundle:addIcon(This, Icon) -&gt; ok</string>
		<string>wxIconBundle:addIcon</string>
		<string>wxIconBundle:addIcon(&lt;#This#&gt;, &lt;#File#&gt;, &lt;#Type#&gt;)</string>
		<string>wxIconBundle:addIcon(This, File, Type) -&gt; ok</string>
		<string>wxIconBundle:getIcon</string>
		<string>wxIconBundle:getIcon(&lt;#This#&gt;)</string>
		<string>wxIconBundle:getIcon(This) -&gt; wxIcon() (see module wxIcon)</string>
		<string>wxIconBundle:getIcon</string>
		<string>wxIconBundle:getIcon(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxIconBundle:getIcon(This, Option::[Option]) -&gt; wxIcon() (see module wxIcon)</string>
		<string>wxIconBundle:destroy</string>
		<string>wxIconBundle:destroy(&lt;#This::wxIconBundle()#&gt;)</string>
		<string>wxIconBundle:destroy(This::wxIconBundle()) -&gt; ok</string>
		<string>wxIconizeEvent:iconized</string>
		<string>wxIconizeEvent:iconized(&lt;#This#&gt;)</string>
		<string>wxIconizeEvent:iconized(This) -&gt; boolean()</string>
		<string>wxIdleEvent:canSend</string>
		<string>wxIdleEvent:canSend(&lt;#Win#&gt;)</string>
		<string>wxIdleEvent:canSend(Win) -&gt; boolean()</string>
		<string>wxIdleEvent:getMode</string>
		<string>wxIdleEvent:getMode()</string>
		<string>wxIdleEvent:getMode() -&gt; wx_enum() (see module wx)</string>
		<string>wxIdleEvent:requestMore</string>
		<string>wxIdleEvent:requestMore(&lt;#This#&gt;)</string>
		<string>wxIdleEvent:requestMore(This) -&gt; ok</string>
		<string>wxIdleEvent:requestMore</string>
		<string>wxIdleEvent:requestMore(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxIdleEvent:requestMore(This, Option::[Option]) -&gt; ok</string>
		<string>wxIdleEvent:moreRequested</string>
		<string>wxIdleEvent:moreRequested(&lt;#This#&gt;)</string>
		<string>wxIdleEvent:moreRequested(This) -&gt; boolean()</string>
		<string>wxIdleEvent:setMode</string>
		<string>wxIdleEvent:setMode(&lt;#Mode#&gt;)</string>
		<string>wxIdleEvent:setMode(Mode) -&gt; ok</string>
		<string>wxImage:new</string>
		<string>wxImage:new()</string>
		<string>wxImage:new() -&gt; wxImage()</string>
		<string>wxImage:new</string>
		<string>wxImage:new(&lt;#Name#&gt;)</string>
		<string>wxImage:new(Name) -&gt; wxImage()</string>
		<string>wxImage:new</string>
		<string>wxImage:new(&lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxImage:new(Width, Height) -&gt; wxImage()</string>
		<string>wxImage:new</string>
		<string>wxImage:new(&lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Data#&gt;)</string>
		<string>wxImage:new(Width, Height, Data) -&gt; wxImage()</string>
		<string>wxImage:new</string>
		<string>wxImage:new(&lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Data#&gt;, &lt;#Alpha#&gt;)</string>
		<string>wxImage:new(Width, Height, Data, Alpha) -&gt; wxImage()</string>
		<string>wxImage:new</string>
		<string>wxImage:new(&lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Data#&gt;, &lt;#Alpha#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:new(Width, Height, Data, Alpha, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:blur</string>
		<string>wxImage:blur(&lt;#This#&gt;, &lt;#Radius#&gt;)</string>
		<string>wxImage:blur(This, Radius) -&gt; wxImage()</string>
		<string>wxImage:blurHorizontal</string>
		<string>wxImage:blurHorizontal(&lt;#This#&gt;, &lt;#Radius#&gt;)</string>
		<string>wxImage:blurHorizontal(This, Radius) -&gt; wxImage()</string>
		<string>wxImage:blurVertical</string>
		<string>wxImage:blurVertical(&lt;#This#&gt;, &lt;#Radius#&gt;)</string>
		<string>wxImage:blurVertical(This, Radius) -&gt; wxImage()</string>
		<string>wxImage:convertAlphaToMask</string>
		<string>wxImage:convertAlphaToMask(&lt;#This#&gt;)</string>
		<string>wxImage:convertAlphaToMask(This) -&gt; boolean()</string>
		<string>wxImage:convertAlphaToMask</string>
		<string>wxImage:convertAlphaToMask(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:convertAlphaToMask(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxImage:convertToGreyscale</string>
		<string>wxImage:convertToGreyscale(&lt;#This#&gt;)</string>
		<string>wxImage:convertToGreyscale(This) -&gt; wxImage()</string>
		<string>wxImage:convertToGreyscale</string>
		<string>wxImage:convertToGreyscale(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:convertToGreyscale(This, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:convertToMono</string>
		<string>wxImage:convertToMono(&lt;#This#&gt;, &lt;#R#&gt;, &lt;#G#&gt;, &lt;#B#&gt;)</string>
		<string>wxImage:convertToMono(This, R, G, B) -&gt; wxImage()</string>
		<string>wxImage:copy</string>
		<string>wxImage:copy(&lt;#This#&gt;)</string>
		<string>wxImage:copy(This) -&gt; wxImage()</string>
		<string>wxImage:create</string>
		<string>wxImage:create(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxImage:create(This, Width, Height) -&gt; boolean()</string>
		<string>wxImage:create</string>
		<string>wxImage:create(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Data#&gt;)</string>
		<string>wxImage:create(This, Width, Height, Data) -&gt; boolean()</string>
		<string>wxImage:create</string>
		<string>wxImage:create(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Data#&gt;, &lt;#Alpha#&gt;)</string>
		<string>wxImage:create(This, Width, Height, Data, Alpha) -&gt; boolean()</string>
		<string>wxImage:create</string>
		<string>wxImage:create(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Data#&gt;, &lt;#Alpha#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:create(This, Width, Height, Data, Alpha, Option::[Option]) -&gt; boolean()</string>
		<string>wxImage:Destroy</string>
		<string>wxImage:Destroy(&lt;#This#&gt;)</string>
		<string>wxImage:Destroy(This) -&gt; ok</string>
		<string>wxImage:findFirstUnusedColour</string>
		<string>wxImage:findFirstUnusedColour(&lt;#This#&gt;)</string>
		<string>wxImage:findFirstUnusedColour(This) -&gt; Result</string>
		<string>wxImage:findFirstUnusedColour</string>
		<string>wxImage:findFirstUnusedColour(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:findFirstUnusedColour(This, Option::[Option]) -&gt; Result</string>
		<string>wxImage:getImageExtWildcard</string>
		<string>wxImage:getImageExtWildcard()</string>
		<string>wxImage:getImageExtWildcard() -&gt; charlist() (see module unicode)</string>
		<string>wxImage:getAlpha</string>
		<string>wxImage:getAlpha(&lt;#This#&gt;)</string>
		<string>wxImage:getAlpha(This) -&gt; binary()</string>
		<string>wxImage:getAlpha</string>
		<string>wxImage:getAlpha(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxImage:getAlpha(This, X, Y) -&gt; integer()</string>
		<string>wxImage:getBlue</string>
		<string>wxImage:getBlue(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxImage:getBlue(This, X, Y) -&gt; integer()</string>
		<string>wxImage:getData</string>
		<string>wxImage:getData(&lt;#This#&gt;)</string>
		<string>wxImage:getData(This) -&gt; binary()</string>
		<string>wxImage:getGreen</string>
		<string>wxImage:getGreen(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxImage:getGreen(This, X, Y) -&gt; integer()</string>
		<string>wxImage:getImageCount</string>
		<string>wxImage:getImageCount(&lt;#Name#&gt;)</string>
		<string>wxImage:getImageCount(Name) -&gt; integer()</string>
		<string>wxImage:getImageCount</string>
		<string>wxImage:getImageCount(&lt;#Name#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:getImageCount(Name, Option::[Option]) -&gt; integer()</string>
		<string>wxImage:getHeight</string>
		<string>wxImage:getHeight(&lt;#This#&gt;)</string>
		<string>wxImage:getHeight(This) -&gt; integer()</string>
		<string>wxImage:getMaskBlue</string>
		<string>wxImage:getMaskBlue(&lt;#This#&gt;)</string>
		<string>wxImage:getMaskBlue(This) -&gt; integer()</string>
		<string>wxImage:getMaskGreen</string>
		<string>wxImage:getMaskGreen(&lt;#This#&gt;)</string>
		<string>wxImage:getMaskGreen(This) -&gt; integer()</string>
		<string>wxImage:getMaskRed</string>
		<string>wxImage:getMaskRed(&lt;#This#&gt;)</string>
		<string>wxImage:getMaskRed(This) -&gt; integer()</string>
		<string>wxImage:getOrFindMaskColour</string>
		<string>wxImage:getOrFindMaskColour(&lt;#This#&gt;)</string>
		<string>wxImage:getOrFindMaskColour(This) -&gt; Result</string>
		<string>wxImage:getPalette</string>
		<string>wxImage:getPalette(&lt;#This#&gt;)</string>
		<string>wxImage:getPalette(This) -&gt; wxPalette() (see module wxPalette)</string>
		<string>wxImage:getRed</string>
		<string>wxImage:getRed(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxImage:getRed(This, X, Y) -&gt; integer()</string>
		<string>wxImage:getSubImage</string>
		<string>wxImage:getSubImage(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxImage:getSubImage(This, Rect) -&gt; wxImage()</string>
		<string>wxImage:getWidth</string>
		<string>wxImage:getWidth(&lt;#This#&gt;)</string>
		<string>wxImage:getWidth(This) -&gt; integer()</string>
		<string>wxImage:hasAlpha</string>
		<string>wxImage:hasAlpha(&lt;#This#&gt;)</string>
		<string>wxImage:hasAlpha(This) -&gt; boolean()</string>
		<string>wxImage:hasMask</string>
		<string>wxImage:hasMask(&lt;#This#&gt;)</string>
		<string>wxImage:hasMask(This) -&gt; boolean()</string>
		<string>wxImage:getOption</string>
		<string>wxImage:getOption(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxImage:getOption(This, Name) -&gt; charlist() (see module unicode)</string>
		<string>wxImage:getOptionInt</string>
		<string>wxImage:getOptionInt(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxImage:getOptionInt(This, Name) -&gt; integer()</string>
		<string>wxImage:hasOption</string>
		<string>wxImage:hasOption(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxImage:hasOption(This, Name) -&gt; boolean()</string>
		<string>wxImage:initAlpha</string>
		<string>wxImage:initAlpha(&lt;#This#&gt;)</string>
		<string>wxImage:initAlpha(This) -&gt; ok</string>
		<string>wxImage:initStandardHandlers</string>
		<string>wxImage:initStandardHandlers()</string>
		<string>wxImage:initStandardHandlers() -&gt; ok</string>
		<string>wxImage:isTransparent</string>
		<string>wxImage:isTransparent(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxImage:isTransparent(This, X, Y) -&gt; boolean()</string>
		<string>wxImage:isTransparent</string>
		<string>wxImage:isTransparent(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:isTransparent(This, X, Y, Option::[Option]) -&gt; boolean()</string>
		<string>wxImage:loadFile</string>
		<string>wxImage:loadFile(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxImage:loadFile(This, Name) -&gt; boolean()</string>
		<string>wxImage:loadFile</string>
		<string>wxImage:loadFile(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:loadFile(This, Name, Option::[Option]) -&gt; boolean()</string>
		<string>wxImage:loadFile</string>
		<string>wxImage:loadFile(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Mimetype#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:loadFile(This, Name, Mimetype, Option::[Option]) -&gt; boolean()</string>
		<string>wxImage:ok</string>
		<string>wxImage:ok(&lt;#This#&gt;)</string>
		<string>wxImage:ok(This) -&gt; boolean()</string>
		<string>wxImage:removeHandler</string>
		<string>wxImage:removeHandler(&lt;#Name#&gt;)</string>
		<string>wxImage:removeHandler(Name) -&gt; boolean()</string>
		<string>wxImage:mirror</string>
		<string>wxImage:mirror(&lt;#This#&gt;)</string>
		<string>wxImage:mirror(This) -&gt; wxImage()</string>
		<string>wxImage:mirror</string>
		<string>wxImage:mirror(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:mirror(This, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:replace</string>
		<string>wxImage:replace(&lt;#This#&gt;, &lt;#R1#&gt;, &lt;#G1#&gt;, &lt;#B1#&gt;, &lt;#R2#&gt;, &lt;#G2#&gt;, &lt;#B2#&gt;)</string>
		<string>wxImage:replace(This, R1, G1, B1, R2, G2, B2) -&gt; ok</string>
		<string>wxImage:rescale</string>
		<string>wxImage:rescale(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxImage:rescale(This, Width, Height) -&gt; wxImage()</string>
		<string>wxImage:rescale</string>
		<string>wxImage:rescale(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:rescale(This, Width, Height, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:resize</string>
		<string>wxImage:resize(&lt;#This#&gt;, &lt;#Size#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxImage:resize(This, Size, Pos) -&gt; wxImage()</string>
		<string>wxImage:resize</string>
		<string>wxImage:resize(&lt;#This#&gt;, &lt;#Size#&gt;, &lt;#Pos#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:resize(This, Size, Pos, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:rotate</string>
		<string>wxImage:rotate(&lt;#This#&gt;, &lt;#Angle#&gt;, &lt;#Centre_of_rotation#&gt;)</string>
		<string>wxImage:rotate(This, Angle, Centre_of_rotation) -&gt; wxImage()</string>
		<string>wxImage:rotate</string>
		<string>wxImage:rotate(&lt;#This#&gt;, &lt;#Angle#&gt;, &lt;#Centre_of_rotation#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:rotate(This, Angle, Centre_of_rotation, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:rotateHue</string>
		<string>wxImage:rotateHue(&lt;#This#&gt;, &lt;#Angle#&gt;)</string>
		<string>wxImage:rotateHue(This, Angle) -&gt; ok</string>
		<string>wxImage:rotate90</string>
		<string>wxImage:rotate90(&lt;#This#&gt;)</string>
		<string>wxImage:rotate90(This) -&gt; wxImage()</string>
		<string>wxImage:rotate90</string>
		<string>wxImage:rotate90(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:rotate90(This, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:saveFile</string>
		<string>wxImage:saveFile(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxImage:saveFile(This, Name) -&gt; boolean()</string>
		<string>wxImage:saveFile</string>
		<string>wxImage:saveFile(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Type#&gt;)</string>
		<string>wxImage:saveFile(This, Name, Type) -&gt; boolean()</string>
		<string>wxImage:scale</string>
		<string>wxImage:scale(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxImage:scale(This, Width, Height) -&gt; wxImage()</string>
		<string>wxImage:scale</string>
		<string>wxImage:scale(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:scale(This, Width, Height, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:size</string>
		<string>wxImage:size(&lt;#This#&gt;, &lt;#Size#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxImage:size(This, Size, Pos) -&gt; wxImage()</string>
		<string>wxImage:size</string>
		<string>wxImage:size(&lt;#This#&gt;, &lt;#Size#&gt;, &lt;#Pos#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:size(This, Size, Pos, Option::[Option]) -&gt; wxImage()</string>
		<string>wxImage:setAlpha</string>
		<string>wxImage:setAlpha(&lt;#This#&gt;, &lt;#Alpha#&gt;)</string>
		<string>wxImage:setAlpha(This, Alpha) -&gt; ok</string>
		<string>wxImage:setAlpha</string>
		<string>wxImage:setAlpha(&lt;#This#&gt;, &lt;#Alpha#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:setAlpha(This, Alpha, Option::[Option]) -&gt; ok</string>
		<string>wxImage:setAlpha</string>
		<string>wxImage:setAlpha(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Alpha#&gt;)</string>
		<string>wxImage:setAlpha(This, X, Y, Alpha) -&gt; ok</string>
		<string>wxImage:setData</string>
		<string>wxImage:setData(&lt;#This#&gt;, &lt;#Data#&gt;)</string>
		<string>wxImage:setData(This, Data) -&gt; ok</string>
		<string>wxImage:setData</string>
		<string>wxImage:setData(&lt;#This#&gt;, &lt;#Data#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:setData(This, Data, Option::[Option]) -&gt; ok</string>
		<string>wxImage:setData</string>
		<string>wxImage:setData(&lt;#This#&gt;, &lt;#Data#&gt;, &lt;#New_width#&gt;, &lt;#New_height#&gt;)</string>
		<string>wxImage:setData(This, Data, New_width, New_height) -&gt; ok</string>
		<string>wxImage:setData</string>
		<string>wxImage:setData(&lt;#This#&gt;, &lt;#Data#&gt;, &lt;#New_width#&gt;, &lt;#New_height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:setData(This, Data, New_width, New_height, Option::[Option]) -&gt; ok</string>
		<string>wxImage:setMask</string>
		<string>wxImage:setMask(&lt;#This#&gt;)</string>
		<string>wxImage:setMask(This) -&gt; ok</string>
		<string>wxImage:setMask</string>
		<string>wxImage:setMask(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImage:setMask(This, Option::[Option]) -&gt; ok</string>
		<string>wxImage:setMaskColour</string>
		<string>wxImage:setMaskColour(&lt;#This#&gt;, &lt;#R#&gt;, &lt;#G#&gt;, &lt;#B#&gt;)</string>
		<string>wxImage:setMaskColour(This, R, G, B) -&gt; ok</string>
		<string>wxImage:setMaskFromImage</string>
		<string>wxImage:setMaskFromImage(&lt;#This#&gt;, &lt;#Mask#&gt;, &lt;#Mr#&gt;, &lt;#Mg#&gt;, &lt;#Mb#&gt;)</string>
		<string>wxImage:setMaskFromImage(This, Mask, Mr, Mg, Mb) -&gt; boolean()</string>
		<string>wxImage:setOption</string>
		<string>wxImage:setOption(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Value#&gt;)</string>
		<string>wxImage:setOption(This, Name, Value) -&gt; ok</string>
		<string>wxImage:setPalette</string>
		<string>wxImage:setPalette(&lt;#This#&gt;, &lt;#Palette#&gt;)</string>
		<string>wxImage:setPalette(This, Palette) -&gt; ok</string>
		<string>wxImage:setRGB</string>
		<string>wxImage:setRGB(&lt;#This#&gt;, &lt;#Rect#&gt;, &lt;#R#&gt;, &lt;#G#&gt;, &lt;#B#&gt;)</string>
		<string>wxImage:setRGB(This, Rect, R, G, B) -&gt; ok</string>
		<string>wxImage:setRGB</string>
		<string>wxImage:setRGB(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#R#&gt;, &lt;#G#&gt;, &lt;#B#&gt;)</string>
		<string>wxImage:setRGB(This, X, Y, R, G, B) -&gt; ok</string>
		<string>wxImage:destroy</string>
		<string>wxImage:destroy(&lt;#This::wxImage()#&gt;)</string>
		<string>wxImage:destroy(This::wxImage()) -&gt; ok</string>
		<string>wxImageList:new</string>
		<string>wxImageList:new()</string>
		<string>wxImageList:new() -&gt; wxImageList()</string>
		<string>wxImageList:new</string>
		<string>wxImageList:new(&lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxImageList:new(Width, Height) -&gt; wxImageList()</string>
		<string>wxImageList:new</string>
		<string>wxImageList:new(&lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImageList:new(Width, Height, Option::[Option]) -&gt; wxImageList()</string>
		<string>wxImageList:add</string>
		<string>wxImageList:add(&lt;#This#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxImageList:add(This, Bitmap) -&gt; integer()</string>
		<string>wxImageList:add</string>
		<string>wxImageList:add(&lt;#This#&gt;, &lt;#Bitmap#&gt;, &lt;#Mask#&gt;)</string>
		<string>wxImageList:add(This, Bitmap, Mask) -&gt; integer()</string>
		<string>wxImageList:create</string>
		<string>wxImageList:create(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxImageList:create(This, Width, Height) -&gt; boolean()</string>
		<string>wxImageList:create</string>
		<string>wxImageList:create(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImageList:create(This, Width, Height, Option::[Option]) -&gt; boolean()</string>
		<string>wxImageList:draw</string>
		<string>wxImageList:draw(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Dc#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxImageList:draw(This, Index, Dc, X, Y) -&gt; boolean()</string>
		<string>wxImageList:draw</string>
		<string>wxImageList:draw(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Dc#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxImageList:draw(This, Index, Dc, X, Y, Option::[Option]) -&gt; boolean()</string>
		<string>wxImageList:getBitmap</string>
		<string>wxImageList:getBitmap(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxImageList:getBitmap(This, Index) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxImageList:getIcon</string>
		<string>wxImageList:getIcon(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxImageList:getIcon(This, Index) -&gt; wxIcon() (see module wxIcon)</string>
		<string>wxImageList:getImageCount</string>
		<string>wxImageList:getImageCount(&lt;#This#&gt;)</string>
		<string>wxImageList:getImageCount(This) -&gt; integer()</string>
		<string>wxImageList:getSize</string>
		<string>wxImageList:getSize(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxImageList:getSize(This, Index) -&gt; Result</string>
		<string>wxImageList:remove</string>
		<string>wxImageList:remove(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxImageList:remove(This, Index) -&gt; boolean()</string>
		<string>wxImageList:removeAll</string>
		<string>wxImageList:removeAll(&lt;#This#&gt;)</string>
		<string>wxImageList:removeAll(This) -&gt; boolean()</string>
		<string>wxImageList:replace</string>
		<string>wxImageList:replace(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxImageList:replace(This, Index, Bitmap) -&gt; boolean()</string>
		<string>wxImageList:replace</string>
		<string>wxImageList:replace(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Bitmap#&gt;, &lt;#Mask#&gt;)</string>
		<string>wxImageList:replace(This, Index, Bitmap, Mask) -&gt; boolean()</string>
		<string>wxImageList:destroy</string>
		<string>wxImageList:destroy(&lt;#This::wxImageList()#&gt;)</string>
		<string>wxImageList:destroy(This::wxImageList()) -&gt; ok</string>
		<string>wxJoystickEvent:buttonDown</string>
		<string>wxJoystickEvent:buttonDown(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:buttonDown(This) -&gt; boolean()</string>
		<string>wxJoystickEvent:buttonDown</string>
		<string>wxJoystickEvent:buttonDown(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxJoystickEvent:buttonDown(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxJoystickEvent:buttonIsDown</string>
		<string>wxJoystickEvent:buttonIsDown(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:buttonIsDown(This) -&gt; boolean()</string>
		<string>wxJoystickEvent:buttonIsDown</string>
		<string>wxJoystickEvent:buttonIsDown(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxJoystickEvent:buttonIsDown(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxJoystickEvent:buttonUp</string>
		<string>wxJoystickEvent:buttonUp(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:buttonUp(This) -&gt; boolean()</string>
		<string>wxJoystickEvent:buttonUp</string>
		<string>wxJoystickEvent:buttonUp(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxJoystickEvent:buttonUp(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxJoystickEvent:getButtonChange</string>
		<string>wxJoystickEvent:getButtonChange(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:getButtonChange(This) -&gt; integer()</string>
		<string>wxJoystickEvent:getButtonState</string>
		<string>wxJoystickEvent:getButtonState(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:getButtonState(This) -&gt; integer()</string>
		<string>wxJoystickEvent:getJoystick</string>
		<string>wxJoystickEvent:getJoystick(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:getJoystick(This) -&gt; integer()</string>
		<string>wxJoystickEvent:getPosition</string>
		<string>wxJoystickEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxJoystickEvent:getZPosition</string>
		<string>wxJoystickEvent:getZPosition(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:getZPosition(This) -&gt; integer()</string>
		<string>wxJoystickEvent:isButton</string>
		<string>wxJoystickEvent:isButton(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:isButton(This) -&gt; boolean()</string>
		<string>wxJoystickEvent:isMove</string>
		<string>wxJoystickEvent:isMove(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:isMove(This) -&gt; boolean()</string>
		<string>wxJoystickEvent:isZMove</string>
		<string>wxJoystickEvent:isZMove(&lt;#This#&gt;)</string>
		<string>wxJoystickEvent:isZMove(This) -&gt; boolean()</string>
		<string>wxKeyEvent:altDown</string>
		<string>wxKeyEvent:altDown(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:altDown(This) -&gt; boolean()</string>
		<string>wxKeyEvent:cmdDown</string>
		<string>wxKeyEvent:cmdDown(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:cmdDown(This) -&gt; boolean()</string>
		<string>wxKeyEvent:controlDown</string>
		<string>wxKeyEvent:controlDown(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:controlDown(This) -&gt; boolean()</string>
		<string>wxKeyEvent:getKeyCode</string>
		<string>wxKeyEvent:getKeyCode(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:getKeyCode(This) -&gt; integer()</string>
		<string>wxKeyEvent:getModifiers</string>
		<string>wxKeyEvent:getModifiers(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:getModifiers(This) -&gt; integer()</string>
		<string>wxKeyEvent:getPosition</string>
		<string>wxKeyEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxKeyEvent:getRawKeyCode</string>
		<string>wxKeyEvent:getRawKeyCode(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:getRawKeyCode(This) -&gt; integer()</string>
		<string>wxKeyEvent:getRawKeyFlags</string>
		<string>wxKeyEvent:getRawKeyFlags(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:getRawKeyFlags(This) -&gt; integer()</string>
		<string>wxKeyEvent:getUnicodeKey</string>
		<string>wxKeyEvent:getUnicodeKey(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:getUnicodeKey(This) -&gt; integer()</string>
		<string>wxKeyEvent:getX</string>
		<string>wxKeyEvent:getX(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:getX(This) -&gt; integer()</string>
		<string>wxKeyEvent:getY</string>
		<string>wxKeyEvent:getY(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:getY(This) -&gt; integer()</string>
		<string>wxKeyEvent:hasModifiers</string>
		<string>wxKeyEvent:hasModifiers(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:hasModifiers(This) -&gt; boolean()</string>
		<string>wxKeyEvent:metaDown</string>
		<string>wxKeyEvent:metaDown(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:metaDown(This) -&gt; boolean()</string>
		<string>wxKeyEvent:shiftDown</string>
		<string>wxKeyEvent:shiftDown(&lt;#This#&gt;)</string>
		<string>wxKeyEvent:shiftDown(This) -&gt; boolean()</string>
		<string>wxLayoutAlgorithm:new</string>
		<string>wxLayoutAlgorithm:new()</string>
		<string>wxLayoutAlgorithm:new() -&gt; wxLayoutAlgorithm()</string>
		<string>wxLayoutAlgorithm:layoutFrame</string>
		<string>wxLayoutAlgorithm:layoutFrame(&lt;#This#&gt;, &lt;#Frame#&gt;)</string>
		<string>wxLayoutAlgorithm:layoutFrame(This, Frame) -&gt; boolean()</string>
		<string>wxLayoutAlgorithm:layoutFrame</string>
		<string>wxLayoutAlgorithm:layoutFrame(&lt;#This#&gt;, &lt;#Frame#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxLayoutAlgorithm:layoutFrame(This, Frame, Option::[Option]) -&gt; boolean()</string>
		<string>wxLayoutAlgorithm:layoutMDIFrame</string>
		<string>wxLayoutAlgorithm:layoutMDIFrame(&lt;#This#&gt;, &lt;#Frame#&gt;)</string>
		<string>wxLayoutAlgorithm:layoutMDIFrame(This, Frame) -&gt; boolean()</string>
		<string>wxLayoutAlgorithm:layoutMDIFrame</string>
		<string>wxLayoutAlgorithm:layoutMDIFrame(&lt;#This#&gt;, &lt;#Frame#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxLayoutAlgorithm:layoutMDIFrame(This, Frame, Option::[Option]) -&gt; boolean()</string>
		<string>wxLayoutAlgorithm:layoutWindow</string>
		<string>wxLayoutAlgorithm:layoutWindow(&lt;#This#&gt;, &lt;#Frame#&gt;)</string>
		<string>wxLayoutAlgorithm:layoutWindow(This, Frame) -&gt; boolean()</string>
		<string>wxLayoutAlgorithm:layoutWindow</string>
		<string>wxLayoutAlgorithm:layoutWindow(&lt;#This#&gt;, &lt;#Frame#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxLayoutAlgorithm:layoutWindow(This, Frame, Option::[Option]) -&gt; boolean()</string>
		<string>wxLayoutAlgorithm:destroy</string>
		<string>wxLayoutAlgorithm:destroy(&lt;#This::wxLayoutAlgorithm()#&gt;)</string>
		<string>wxLayoutAlgorithm:destroy(This::wxLayoutAlgorithm()) -&gt; ok</string>
		<string>wxListbook:new</string>
		<string>wxListbook:new()</string>
		<string>wxListbook:new() -&gt; wxListbook()</string>
		<string>wxListbook:new</string>
		<string>wxListbook:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxListbook:new(Parent, Id) -&gt; wxListbook()</string>
		<string>wxListbook:new</string>
		<string>wxListbook:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListbook:new(Parent, Id, Option::[Option]) -&gt; wxListbook()</string>
		<string>wxListbook:addPage</string>
		<string>wxListbook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxListbook:addPage(This, Page, Text) -&gt; boolean()</string>
		<string>wxListbook:addPage</string>
		<string>wxListbook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListbook:addPage(This, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxListbook:advanceSelection</string>
		<string>wxListbook:advanceSelection(&lt;#This#&gt;)</string>
		<string>wxListbook:advanceSelection(This) -&gt; ok</string>
		<string>wxListbook:advanceSelection</string>
		<string>wxListbook:advanceSelection(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListbook:advanceSelection(This, Option::[Option]) -&gt; ok</string>
		<string>wxListbook:assignImageList</string>
		<string>wxListbook:assignImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxListbook:assignImageList(This, ImageList) -&gt; ok</string>
		<string>wxListbook:create</string>
		<string>wxListbook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxListbook:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxListbook:create</string>
		<string>wxListbook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListbook:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxListbook:deleteAllPages</string>
		<string>wxListbook:deleteAllPages(&lt;#This#&gt;)</string>
		<string>wxListbook:deleteAllPages(This) -&gt; boolean()</string>
		<string>wxListbook:deletePage</string>
		<string>wxListbook:deletePage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListbook:deletePage(This, N) -&gt; boolean()</string>
		<string>wxListbook:removePage</string>
		<string>wxListbook:removePage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListbook:removePage(This, N) -&gt; boolean()</string>
		<string>wxListbook:getCurrentPage</string>
		<string>wxListbook:getCurrentPage(&lt;#This#&gt;)</string>
		<string>wxListbook:getCurrentPage(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxListbook:getImageList</string>
		<string>wxListbook:getImageList(&lt;#This#&gt;)</string>
		<string>wxListbook:getImageList(This) -&gt; wxImageList() (see module wxImageList)</string>
		<string>wxListbook:getPage</string>
		<string>wxListbook:getPage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListbook:getPage(This, N) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxListbook:getPageCount</string>
		<string>wxListbook:getPageCount(&lt;#This#&gt;)</string>
		<string>wxListbook:getPageCount(This) -&gt; integer()</string>
		<string>wxListbook:getPageImage</string>
		<string>wxListbook:getPageImage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListbook:getPageImage(This, N) -&gt; integer()</string>
		<string>wxListbook:getPageText</string>
		<string>wxListbook:getPageText(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListbook:getPageText(This, N) -&gt; charlist() (see module unicode)</string>
		<string>wxListbook:getSelection</string>
		<string>wxListbook:getSelection(&lt;#This#&gt;)</string>
		<string>wxListbook:getSelection(This) -&gt; integer()</string>
		<string>wxListbook:hitTest</string>
		<string>wxListbook:hitTest(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxListbook:hitTest(This, Pt) -&gt; Result</string>
		<string>wxListbook:insertPage</string>
		<string>wxListbook:insertPage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxListbook:insertPage(This, N, Page, Text) -&gt; boolean()</string>
		<string>wxListbook:insertPage</string>
		<string>wxListbook:insertPage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListbook:insertPage(This, N, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxListbook:setImageList</string>
		<string>wxListbook:setImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxListbook:setImageList(This, ImageList) -&gt; ok</string>
		<string>wxListbook:setPageSize</string>
		<string>wxListbook:setPageSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxListbook:setPageSize(This, Size) -&gt; ok</string>
		<string>wxListbook:setPageImage</string>
		<string>wxListbook:setPageImage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#ImageId#&gt;)</string>
		<string>wxListbook:setPageImage(This, N, ImageId) -&gt; boolean()</string>
		<string>wxListbook:setPageText</string>
		<string>wxListbook:setPageText(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#StrText#&gt;)</string>
		<string>wxListbook:setPageText(This, N, StrText) -&gt; boolean()</string>
		<string>wxListbook:setSelection</string>
		<string>wxListbook:setSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListbook:setSelection(This, N) -&gt; integer()</string>
		<string>wxListbook:changeSelection</string>
		<string>wxListbook:changeSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListbook:changeSelection(This, N) -&gt; integer()</string>
		<string>wxListbook:destroy</string>
		<string>wxListbook:destroy(&lt;#This::wxListbook()#&gt;)</string>
		<string>wxListbook:destroy(This::wxListbook()) -&gt; ok</string>
		<string>wxListBox:new</string>
		<string>wxListBox:new()</string>
		<string>wxListBox:new() -&gt; wxListBox()</string>
		<string>wxListBox:new</string>
		<string>wxListBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxListBox:new(Parent, Id) -&gt; wxListBox()</string>
		<string>wxListBox:new</string>
		<string>wxListBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListBox:new(Parent, Id, Option::[Option]) -&gt; wxListBox()</string>
		<string>wxListBox:create</string>
		<string>wxListBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;)</string>
		<string>wxListBox:create(This, Parent, Id, Pos, Size, Choices) -&gt; boolean()</string>
		<string>wxListBox:create</string>
		<string>wxListBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListBox:create(This, Parent, Id, Pos, Size, Choices, Option::[Option]) -&gt; boolean()</string>
		<string>wxListBox:deselect</string>
		<string>wxListBox:deselect(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListBox:deselect(This, N) -&gt; ok</string>
		<string>wxListBox:getSelections</string>
		<string>wxListBox:getSelections(&lt;#This#&gt;)</string>
		<string>wxListBox:getSelections(This) -&gt; Result</string>
		<string>wxListBox:insertItems</string>
		<string>wxListBox:insertItems(&lt;#This#&gt;, &lt;#Items#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxListBox:insertItems(This, Items, Pos) -&gt; ok</string>
		<string>wxListBox:isSelected</string>
		<string>wxListBox:isSelected(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListBox:isSelected(This, N) -&gt; boolean()</string>
		<string>wxListBox:set</string>
		<string>wxListBox:set(&lt;#This#&gt;, &lt;#Items#&gt;)</string>
		<string>wxListBox:set(This, Items) -&gt; ok</string>
		<string>wxListBox:hitTest</string>
		<string>wxListBox:hitTest(&lt;#This#&gt;, &lt;#Point#&gt;)</string>
		<string>wxListBox:hitTest(This, Point) -&gt; integer()</string>
		<string>wxListBox:setFirstItem</string>
		<string>wxListBox:setFirstItem(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListBox:setFirstItem(This, N) -&gt; ok</string>
		<string>wxListBox:destroy</string>
		<string>wxListBox:destroy(&lt;#This::wxListBox()#&gt;)</string>
		<string>wxListBox:destroy(This::wxListBox()) -&gt; ok</string>
		<string>wxListCtrl:new</string>
		<string>wxListCtrl:new()</string>
		<string>wxListCtrl:new() -&gt; wxListCtrl()</string>
		<string>wxListCtrl:new</string>
		<string>wxListCtrl:new(&lt;#Parent::wxWindow() (see module wxWindow)#&gt;)</string>
		<string>wxListCtrl:new(Parent::wxWindow() (see module wxWindow)) -&gt; wxListCtrl()</string>
		<string>wxListCtrl:new</string>
		<string>wxListCtrl:new(&lt;#Parent::wxWindow() (see module wxWindow)#&gt;, &lt;#Options::[Option]#&gt;)</string>
		<string>wxListCtrl:new(Parent::wxWindow() (see module wxWindow), Options::[Option]) -&gt; wxListCtrl()</string>
		<string>wxListCtrl:arrange</string>
		<string>wxListCtrl:arrange(&lt;#This#&gt;)</string>
		<string>wxListCtrl:arrange(This) -&gt; boolean()</string>
		<string>wxListCtrl:arrange</string>
		<string>wxListCtrl:arrange(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListCtrl:arrange(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxListCtrl:assignImageList</string>
		<string>wxListCtrl:assignImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;, &lt;#Which#&gt;)</string>
		<string>wxListCtrl:assignImageList(This, ImageList, Which) -&gt; ok</string>
		<string>wxListCtrl:clearAll</string>
		<string>wxListCtrl:clearAll(&lt;#This#&gt;)</string>
		<string>wxListCtrl:clearAll(This) -&gt; ok</string>
		<string>wxListCtrl:create</string>
		<string>wxListCtrl:create(&lt;#This::wxListCtrl()#&gt;, &lt;#Parent::wxWindow() (see module wxWindow)#&gt;)</string>
		<string>wxListCtrl:create(This::wxListCtrl(), Parent::wxWindow() (see module wxWindow)) -&gt; bool()</string>
		<string>wxListCtrl:create</string>
		<string>wxListCtrl:create(&lt;#This::wxListCtrl()#&gt;, &lt;#Parent::wxWindow() (see module wxWindow)#&gt;, &lt;#Options::[Option]#&gt;)</string>
		<string>wxListCtrl:create(This::wxListCtrl(), Parent::wxWindow() (see module wxWindow), Options::[Option]) -&gt; bool()</string>
		<string>wxListCtrl:deleteAllItems</string>
		<string>wxListCtrl:deleteAllItems(&lt;#This#&gt;)</string>
		<string>wxListCtrl:deleteAllItems(This) -&gt; boolean()</string>
		<string>wxListCtrl:deleteColumn</string>
		<string>wxListCtrl:deleteColumn(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxListCtrl:deleteColumn(This, Col) -&gt; boolean()</string>
		<string>wxListCtrl:deleteItem</string>
		<string>wxListCtrl:deleteItem(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:deleteItem(This, Item) -&gt; boolean()</string>
		<string>wxListCtrl:editLabel</string>
		<string>wxListCtrl:editLabel(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:editLabel(This, Item) -&gt; wxTextCtrl() (see module wxTextCtrl)</string>
		<string>wxListCtrl:ensureVisible</string>
		<string>wxListCtrl:ensureVisible(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:ensureVisible(This, Item) -&gt; boolean()</string>
		<string>wxListCtrl:findItem</string>
		<string>wxListCtrl:findItem(&lt;#This#&gt;, &lt;#Start#&gt;, &lt;#Str#&gt;)</string>
		<string>wxListCtrl:findItem(This, Start, Str) -&gt; integer()</string>
		<string>wxListCtrl:findItem</string>
		<string>wxListCtrl:findItem(&lt;#This#&gt;, &lt;#Start#&gt;, &lt;#Str#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListCtrl:findItem(This, Start, Str, Option::[Option]) -&gt; integer()</string>
		<string>wxListCtrl:getColumn</string>
		<string>wxListCtrl:getColumn(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getColumn(This, Col, Item) -&gt; boolean()</string>
		<string>wxListCtrl:getColumnCount</string>
		<string>wxListCtrl:getColumnCount(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getColumnCount(This) -&gt; integer()</string>
		<string>wxListCtrl:getColumnWidth</string>
		<string>wxListCtrl:getColumnWidth(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxListCtrl:getColumnWidth(This, Col) -&gt; integer()</string>
		<string>wxListCtrl:getCountPerPage</string>
		<string>wxListCtrl:getCountPerPage(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getCountPerPage(This) -&gt; integer()</string>
		<string>wxListCtrl:getEditControl</string>
		<string>wxListCtrl:getEditControl(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getEditControl(This) -&gt; wxTextCtrl() (see module wxTextCtrl)</string>
		<string>wxListCtrl:getImageList</string>
		<string>wxListCtrl:getImageList(&lt;#This#&gt;, &lt;#Which#&gt;)</string>
		<string>wxListCtrl:getImageList(This, Which) -&gt; wxImageList() (see module wxImageList)</string>
		<string>wxListCtrl:getItem</string>
		<string>wxListCtrl:getItem(&lt;#This#&gt;, &lt;#Info#&gt;)</string>
		<string>wxListCtrl:getItem(This, Info) -&gt; boolean()</string>
		<string>wxListCtrl:getItemBackgroundColour</string>
		<string>wxListCtrl:getItemBackgroundColour(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getItemBackgroundColour(This, Item) -&gt; wx_colour4() (see module wx)</string>
		<string>wxListCtrl:getItemCount</string>
		<string>wxListCtrl:getItemCount(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getItemCount(This) -&gt; integer()</string>
		<string>wxListCtrl:getItemData</string>
		<string>wxListCtrl:getItemData(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getItemData(This, Item) -&gt; integer()</string>
		<string>wxListCtrl:getItemFont</string>
		<string>wxListCtrl:getItemFont(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getItemFont(This, Item) -&gt; wxFont() (see module wxFont)</string>
		<string>wxListCtrl:getItemPosition</string>
		<string>wxListCtrl:getItemPosition(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getItemPosition(This, Item) -&gt; Result</string>
		<string>wxListCtrl:getItemRect</string>
		<string>wxListCtrl:getItemRect(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getItemRect(This, Item) -&gt; Result</string>
		<string>wxListCtrl:getItemRect</string>
		<string>wxListCtrl:getItemRect(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListCtrl:getItemRect(This, Item, Option::[Option]) -&gt; Result</string>
		<string>wxListCtrl:getItemSpacing</string>
		<string>wxListCtrl:getItemSpacing(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getItemSpacing(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxListCtrl:getItemState</string>
		<string>wxListCtrl:getItemState(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#StateMask#&gt;)</string>
		<string>wxListCtrl:getItemState(This, Item, StateMask) -&gt; integer()</string>
		<string>wxListCtrl:getItemText</string>
		<string>wxListCtrl:getItemText(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getItemText(This, Item) -&gt; charlist() (see module unicode)</string>
		<string>wxListCtrl:getItemTextColour</string>
		<string>wxListCtrl:getItemTextColour(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getItemTextColour(This, Item) -&gt; wx_colour4() (see module wx)</string>
		<string>wxListCtrl:getNextItem</string>
		<string>wxListCtrl:getNextItem(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:getNextItem(This, Item) -&gt; integer()</string>
		<string>wxListCtrl:getNextItem</string>
		<string>wxListCtrl:getNextItem(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListCtrl:getNextItem(This, Item, Option::[Option]) -&gt; integer()</string>
		<string>wxListCtrl:getSelectedItemCount</string>
		<string>wxListCtrl:getSelectedItemCount(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getSelectedItemCount(This) -&gt; integer()</string>
		<string>wxListCtrl:getTextColour</string>
		<string>wxListCtrl:getTextColour(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getTextColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxListCtrl:getTopItem</string>
		<string>wxListCtrl:getTopItem(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getTopItem(This) -&gt; integer()</string>
		<string>wxListCtrl:getViewRect</string>
		<string>wxListCtrl:getViewRect(&lt;#This#&gt;)</string>
		<string>wxListCtrl:getViewRect(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxListCtrl:hitTest</string>
		<string>wxListCtrl:hitTest(&lt;#This#&gt;, &lt;#Point#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxListCtrl:hitTest(This, Point, Flags) -&gt; integer()</string>
		<string>wxListCtrl:insertColumn</string>
		<string>wxListCtrl:insertColumn(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Heading#&gt;)</string>
		<string>wxListCtrl:insertColumn(This, Col, Heading) -&gt; integer()</string>
		<string>wxListCtrl:insertColumn</string>
		<string>wxListCtrl:insertColumn(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Heading#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListCtrl:insertColumn(This, Col, Heading, Option::[Option]) -&gt; integer()</string>
		<string>wxListCtrl:insertItem</string>
		<string>wxListCtrl:insertItem(&lt;#This#&gt;, &lt;#Info#&gt;)</string>
		<string>wxListCtrl:insertItem(This, Info) -&gt; integer()</string>
		<string>wxListCtrl:insertItem</string>
		<string>wxListCtrl:insertItem(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#ImageIndex#&gt;)</string>
		<string>wxListCtrl:insertItem(This, Index, ImageIndex) -&gt; integer()</string>
		<string>wxListCtrl:insertItem</string>
		<string>wxListCtrl:insertItem(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Label#&gt;, &lt;#ImageIndex#&gt;)</string>
		<string>wxListCtrl:insertItem(This, Index, Label, ImageIndex) -&gt; integer()</string>
		<string>wxListCtrl:refreshItem</string>
		<string>wxListCtrl:refreshItem(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:refreshItem(This, Item) -&gt; ok</string>
		<string>wxListCtrl:refreshItems</string>
		<string>wxListCtrl:refreshItems(&lt;#This#&gt;, &lt;#ItemFrom#&gt;, &lt;#ItemTo#&gt;)</string>
		<string>wxListCtrl:refreshItems(This, ItemFrom, ItemTo) -&gt; ok</string>
		<string>wxListCtrl:scrollList</string>
		<string>wxListCtrl:scrollList(&lt;#This#&gt;, &lt;#Dx#&gt;, &lt;#Dy#&gt;)</string>
		<string>wxListCtrl:scrollList(This, Dx, Dy) -&gt; boolean()</string>
		<string>wxListCtrl:setBackgroundColour</string>
		<string>wxListCtrl:setBackgroundColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxListCtrl:setBackgroundColour(This, Colour) -&gt; boolean()</string>
		<string>wxListCtrl:setColumn</string>
		<string>wxListCtrl:setColumn(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListCtrl:setColumn(This, Col, Item) -&gt; boolean()</string>
		<string>wxListCtrl:setColumnWidth</string>
		<string>wxListCtrl:setColumnWidth(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Width#&gt;)</string>
		<string>wxListCtrl:setColumnWidth(This, Col, Width) -&gt; boolean()</string>
		<string>wxListCtrl:setImageList</string>
		<string>wxListCtrl:setImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;, &lt;#Which#&gt;)</string>
		<string>wxListCtrl:setImageList(This, ImageList, Which) -&gt; ok</string>
		<string>wxListCtrl:setItem</string>
		<string>wxListCtrl:setItem(&lt;#This#&gt;, &lt;#Info#&gt;)</string>
		<string>wxListCtrl:setItem(This, Info) -&gt; boolean()</string>
		<string>wxListCtrl:setItem</string>
		<string>wxListCtrl:setItem(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Col#&gt;, &lt;#Label#&gt;)</string>
		<string>wxListCtrl:setItem(This, Index, Col, Label) -&gt; integer()</string>
		<string>wxListCtrl:setItem</string>
		<string>wxListCtrl:setItem(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Col#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListCtrl:setItem(This, Index, Col, Label, Option::[Option]) -&gt; integer()</string>
		<string>wxListCtrl:setItemBackgroundColour</string>
		<string>wxListCtrl:setItemBackgroundColour(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Col#&gt;)</string>
		<string>wxListCtrl:setItemBackgroundColour(This, Item, Col) -&gt; ok</string>
		<string>wxListCtrl:setItemCount</string>
		<string>wxListCtrl:setItemCount(&lt;#This#&gt;, &lt;#Count#&gt;)</string>
		<string>wxListCtrl:setItemCount(This, Count) -&gt; ok</string>
		<string>wxListCtrl:setItemData</string>
		<string>wxListCtrl:setItemData(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Data#&gt;)</string>
		<string>wxListCtrl:setItemData(This, Item, Data) -&gt; boolean()</string>
		<string>wxListCtrl:setItemFont</string>
		<string>wxListCtrl:setItemFont(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#F#&gt;)</string>
		<string>wxListCtrl:setItemFont(This, Item, F) -&gt; ok</string>
		<string>wxListCtrl:setItemImage</string>
		<string>wxListCtrl:setItemImage(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Image#&gt;)</string>
		<string>wxListCtrl:setItemImage(This, Item, Image) -&gt; boolean()</string>
		<string>wxListCtrl:setItemImage</string>
		<string>wxListCtrl:setItemImage(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Image#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListCtrl:setItemImage(This, Item, Image, Option::[Option]) -&gt; boolean()</string>
		<string>wxListCtrl:setItemColumnImage</string>
		<string>wxListCtrl:setItemColumnImage(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Column#&gt;, &lt;#Image#&gt;)</string>
		<string>wxListCtrl:setItemColumnImage(This, Item, Column, Image) -&gt; boolean()</string>
		<string>wxListCtrl:setItemPosition</string>
		<string>wxListCtrl:setItemPosition(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxListCtrl:setItemPosition(This, Item, Pos) -&gt; boolean()</string>
		<string>wxListCtrl:setItemState</string>
		<string>wxListCtrl:setItemState(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#State#&gt;, &lt;#StateMask#&gt;)</string>
		<string>wxListCtrl:setItemState(This, Item, State, StateMask) -&gt; boolean()</string>
		<string>wxListCtrl:setItemText</string>
		<string>wxListCtrl:setItemText(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Str#&gt;)</string>
		<string>wxListCtrl:setItemText(This, Item, Str) -&gt; ok</string>
		<string>wxListCtrl:setItemTextColour</string>
		<string>wxListCtrl:setItemTextColour(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Col#&gt;)</string>
		<string>wxListCtrl:setItemTextColour(This, Item, Col) -&gt; ok</string>
		<string>wxListCtrl:setSingleStyle</string>
		<string>wxListCtrl:setSingleStyle(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxListCtrl:setSingleStyle(This, Style) -&gt; ok</string>
		<string>wxListCtrl:setSingleStyle</string>
		<string>wxListCtrl:setSingleStyle(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListCtrl:setSingleStyle(This, Style, Option::[Option]) -&gt; ok</string>
		<string>wxListCtrl:setTextColour</string>
		<string>wxListCtrl:setTextColour(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxListCtrl:setTextColour(This, Col) -&gt; ok</string>
		<string>wxListCtrl:setWindowStyleFlag</string>
		<string>wxListCtrl:setWindowStyleFlag(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxListCtrl:setWindowStyleFlag(This, Style) -&gt; ok</string>
		<string>wxListCtrl:sortItems</string>
		<string>wxListCtrl:sortItems(&lt;#This::wxListCtrl()#&gt;, &lt;#SortCallBack::function()#&gt;)</string>
		<string>wxListCtrl:sortItems(This::wxListCtrl(), SortCallBack::function()) -&gt; boolean()</string>
		<string>wxListCtrl:destroy</string>
		<string>wxListCtrl:destroy(&lt;#This::wxListCtrl()#&gt;)</string>
		<string>wxListCtrl:destroy(This::wxListCtrl()) -&gt; ok</string>
		<string>wxListEvent:getCacheFrom</string>
		<string>wxListEvent:getCacheFrom(&lt;#This#&gt;)</string>
		<string>wxListEvent:getCacheFrom(This) -&gt; integer()</string>
		<string>wxListEvent:getCacheTo</string>
		<string>wxListEvent:getCacheTo(&lt;#This#&gt;)</string>
		<string>wxListEvent:getCacheTo(This) -&gt; integer()</string>
		<string>wxListEvent:getKeyCode</string>
		<string>wxListEvent:getKeyCode(&lt;#This#&gt;)</string>
		<string>wxListEvent:getKeyCode(This) -&gt; integer()</string>
		<string>wxListEvent:getIndex</string>
		<string>wxListEvent:getIndex(&lt;#This#&gt;)</string>
		<string>wxListEvent:getIndex(This) -&gt; integer()</string>
		<string>wxListEvent:getColumn</string>
		<string>wxListEvent:getColumn(&lt;#This#&gt;)</string>
		<string>wxListEvent:getColumn(This) -&gt; integer()</string>
		<string>wxListEvent:getPoint</string>
		<string>wxListEvent:getPoint(&lt;#This#&gt;)</string>
		<string>wxListEvent:getPoint(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxListEvent:getLabel</string>
		<string>wxListEvent:getLabel(&lt;#This#&gt;)</string>
		<string>wxListEvent:getLabel(This) -&gt; charlist() (see module unicode)</string>
		<string>wxListEvent:getText</string>
		<string>wxListEvent:getText(&lt;#This#&gt;)</string>
		<string>wxListEvent:getText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxListEvent:getImage</string>
		<string>wxListEvent:getImage(&lt;#This#&gt;)</string>
		<string>wxListEvent:getImage(This) -&gt; integer()</string>
		<string>wxListEvent:getData</string>
		<string>wxListEvent:getData(&lt;#This#&gt;)</string>
		<string>wxListEvent:getData(This) -&gt; integer()</string>
		<string>wxListEvent:getMask</string>
		<string>wxListEvent:getMask(&lt;#This#&gt;)</string>
		<string>wxListEvent:getMask(This) -&gt; integer()</string>
		<string>wxListEvent:getItem</string>
		<string>wxListEvent:getItem(&lt;#This#&gt;)</string>
		<string>wxListEvent:getItem(This) -&gt; wxListItem() (see module wxListItem)</string>
		<string>wxListEvent:isEditCancelled</string>
		<string>wxListEvent:isEditCancelled(&lt;#This#&gt;)</string>
		<string>wxListEvent:isEditCancelled(This) -&gt; boolean()</string>
		<string>wxListItem:new</string>
		<string>wxListItem:new()</string>
		<string>wxListItem:new() -&gt; wxListItem()</string>
		<string>wxListItem:new</string>
		<string>wxListItem:new(&lt;#Item#&gt;)</string>
		<string>wxListItem:new(Item) -&gt; wxListItem()</string>
		<string>wxListItem:clear</string>
		<string>wxListItem:clear(&lt;#This#&gt;)</string>
		<string>wxListItem:clear(This) -&gt; ok</string>
		<string>wxListItem:getAlign</string>
		<string>wxListItem:getAlign(&lt;#This#&gt;)</string>
		<string>wxListItem:getAlign(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxListItem:getBackgroundColour</string>
		<string>wxListItem:getBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxListItem:getBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxListItem:getColumn</string>
		<string>wxListItem:getColumn(&lt;#This#&gt;)</string>
		<string>wxListItem:getColumn(This) -&gt; integer()</string>
		<string>wxListItem:getFont</string>
		<string>wxListItem:getFont(&lt;#This#&gt;)</string>
		<string>wxListItem:getFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxListItem:getId</string>
		<string>wxListItem:getId(&lt;#This#&gt;)</string>
		<string>wxListItem:getId(This) -&gt; integer()</string>
		<string>wxListItem:getImage</string>
		<string>wxListItem:getImage(&lt;#This#&gt;)</string>
		<string>wxListItem:getImage(This) -&gt; integer()</string>
		<string>wxListItem:getMask</string>
		<string>wxListItem:getMask(&lt;#This#&gt;)</string>
		<string>wxListItem:getMask(This) -&gt; integer()</string>
		<string>wxListItem:getState</string>
		<string>wxListItem:getState(&lt;#This#&gt;)</string>
		<string>wxListItem:getState(This) -&gt; integer()</string>
		<string>wxListItem:getText</string>
		<string>wxListItem:getText(&lt;#This#&gt;)</string>
		<string>wxListItem:getText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxListItem:getTextColour</string>
		<string>wxListItem:getTextColour(&lt;#This#&gt;)</string>
		<string>wxListItem:getTextColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxListItem:getWidth</string>
		<string>wxListItem:getWidth(&lt;#This#&gt;)</string>
		<string>wxListItem:getWidth(This) -&gt; integer()</string>
		<string>wxListItem:setAlign</string>
		<string>wxListItem:setAlign(&lt;#This#&gt;, &lt;#Align#&gt;)</string>
		<string>wxListItem:setAlign(This, Align) -&gt; ok</string>
		<string>wxListItem:setBackgroundColour</string>
		<string>wxListItem:setBackgroundColour(&lt;#This#&gt;, &lt;#ColBack#&gt;)</string>
		<string>wxListItem:setBackgroundColour(This, ColBack) -&gt; ok</string>
		<string>wxListItem:setColumn</string>
		<string>wxListItem:setColumn(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxListItem:setColumn(This, Col) -&gt; ok</string>
		<string>wxListItem:setFont</string>
		<string>wxListItem:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxListItem:setFont(This, Font) -&gt; ok</string>
		<string>wxListItem:setId</string>
		<string>wxListItem:setId(&lt;#This#&gt;, &lt;#Id#&gt;)</string>
		<string>wxListItem:setId(This, Id) -&gt; ok</string>
		<string>wxListItem:setImage</string>
		<string>wxListItem:setImage(&lt;#This#&gt;, &lt;#Image#&gt;)</string>
		<string>wxListItem:setImage(This, Image) -&gt; ok</string>
		<string>wxListItem:setMask</string>
		<string>wxListItem:setMask(&lt;#This#&gt;, &lt;#Mask#&gt;)</string>
		<string>wxListItem:setMask(This, Mask) -&gt; ok</string>
		<string>wxListItem:setState</string>
		<string>wxListItem:setState(&lt;#This#&gt;, &lt;#State#&gt;)</string>
		<string>wxListItem:setState(This, State) -&gt; ok</string>
		<string>wxListItem:setStateMask</string>
		<string>wxListItem:setStateMask(&lt;#This#&gt;, &lt;#StateMask#&gt;)</string>
		<string>wxListItem:setStateMask(This, StateMask) -&gt; ok</string>
		<string>wxListItem:setText</string>
		<string>wxListItem:setText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxListItem:setText(This, Text) -&gt; ok</string>
		<string>wxListItem:setTextColour</string>
		<string>wxListItem:setTextColour(&lt;#This#&gt;, &lt;#ColText#&gt;)</string>
		<string>wxListItem:setTextColour(This, ColText) -&gt; ok</string>
		<string>wxListItem:setWidth</string>
		<string>wxListItem:setWidth(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxListItem:setWidth(This, Width) -&gt; ok</string>
		<string>wxListItem:destroy</string>
		<string>wxListItem:destroy(&lt;#This::wxListItem()#&gt;)</string>
		<string>wxListItem:destroy(This::wxListItem()) -&gt; ok</string>
		<string>wxListItemAttr:new</string>
		<string>wxListItemAttr:new()</string>
		<string>wxListItemAttr:new() -&gt; wxListItemAttr()</string>
		<string>wxListItemAttr:new</string>
		<string>wxListItemAttr:new(&lt;#ColText#&gt;, &lt;#ColBack#&gt;, &lt;#Font#&gt;)</string>
		<string>wxListItemAttr:new(ColText, ColBack, Font) -&gt; wxListItemAttr()</string>
		<string>wxListItemAttr:getBackgroundColour</string>
		<string>wxListItemAttr:getBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxListItemAttr:getBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxListItemAttr:getFont</string>
		<string>wxListItemAttr:getFont(&lt;#This#&gt;)</string>
		<string>wxListItemAttr:getFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxListItemAttr:getTextColour</string>
		<string>wxListItemAttr:getTextColour(&lt;#This#&gt;)</string>
		<string>wxListItemAttr:getTextColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxListItemAttr:hasBackgroundColour</string>
		<string>wxListItemAttr:hasBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxListItemAttr:hasBackgroundColour(This) -&gt; boolean()</string>
		<string>wxListItemAttr:hasFont</string>
		<string>wxListItemAttr:hasFont(&lt;#This#&gt;)</string>
		<string>wxListItemAttr:hasFont(This) -&gt; boolean()</string>
		<string>wxListItemAttr:hasTextColour</string>
		<string>wxListItemAttr:hasTextColour(&lt;#This#&gt;)</string>
		<string>wxListItemAttr:hasTextColour(This) -&gt; boolean()</string>
		<string>wxListItemAttr:setBackgroundColour</string>
		<string>wxListItemAttr:setBackgroundColour(&lt;#This#&gt;, &lt;#ColBack#&gt;)</string>
		<string>wxListItemAttr:setBackgroundColour(This, ColBack) -&gt; ok</string>
		<string>wxListItemAttr:setFont</string>
		<string>wxListItemAttr:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxListItemAttr:setFont(This, Font) -&gt; ok</string>
		<string>wxListItemAttr:setTextColour</string>
		<string>wxListItemAttr:setTextColour(&lt;#This#&gt;, &lt;#ColText#&gt;)</string>
		<string>wxListItemAttr:setTextColour(This, ColText) -&gt; ok</string>
		<string>wxListItemAttr:destroy</string>
		<string>wxListItemAttr:destroy(&lt;#This::wxListItemAttr()#&gt;)</string>
		<string>wxListItemAttr:destroy(This::wxListItemAttr()) -&gt; ok</string>
		<string>wxListView:clearColumnImage</string>
		<string>wxListView:clearColumnImage(&lt;#This#&gt;, &lt;#Col#&gt;)</string>
		<string>wxListView:clearColumnImage(This, Col) -&gt; ok</string>
		<string>wxListView:focus</string>
		<string>wxListView:focus(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxListView:focus(This, Index) -&gt; ok</string>
		<string>wxListView:getFirstSelected</string>
		<string>wxListView:getFirstSelected(&lt;#This#&gt;)</string>
		<string>wxListView:getFirstSelected(This) -&gt; integer()</string>
		<string>wxListView:getFocusedItem</string>
		<string>wxListView:getFocusedItem(&lt;#This#&gt;)</string>
		<string>wxListView:getFocusedItem(This) -&gt; integer()</string>
		<string>wxListView:getNextSelected</string>
		<string>wxListView:getNextSelected(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxListView:getNextSelected(This, Item) -&gt; integer()</string>
		<string>wxListView:isSelected</string>
		<string>wxListView:isSelected(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxListView:isSelected(This, Index) -&gt; boolean()</string>
		<string>wxListView:select</string>
		<string>wxListView:select(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxListView:select(This, N) -&gt; ok</string>
		<string>wxListView:select</string>
		<string>wxListView:select(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxListView:select(This, N, Option::[Option]) -&gt; ok</string>
		<string>wxListView:setColumnImage</string>
		<string>wxListView:setColumnImage(&lt;#This#&gt;, &lt;#Col#&gt;, &lt;#Image#&gt;)</string>
		<string>wxListView:setColumnImage(This, Col, Image) -&gt; ok</string>
		<string>wxLocale:new</string>
		<string>wxLocale:new()</string>
		<string>wxLocale:new() -&gt; wxLocale()</string>
		<string>wxLocale:new</string>
		<string>wxLocale:new(&lt;#Language#&gt;)</string>
		<string>wxLocale:new(Language) -&gt; wxLocale()</string>
		<string>wxLocale:new</string>
		<string>wxLocale:new(&lt;#Language#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxLocale:new(Language, Option::[Option]) -&gt; wxLocale()</string>
		<string>wxLocale:init</string>
		<string>wxLocale:init(&lt;#This#&gt;)</string>
		<string>wxLocale:init(This) -&gt; boolean()</string>
		<string>wxLocale:init</string>
		<string>wxLocale:init(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxLocale:init(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxLocale:addCatalog</string>
		<string>wxLocale:addCatalog(&lt;#This#&gt;, &lt;#SzDomain#&gt;)</string>
		<string>wxLocale:addCatalog(This, SzDomain) -&gt; boolean()</string>
		<string>wxLocale:addCatalog</string>
		<string>wxLocale:addCatalog(&lt;#This#&gt;, &lt;#SzDomain#&gt;, &lt;#MsgIdLanguage#&gt;, &lt;#MsgIdCharset#&gt;)</string>
		<string>wxLocale:addCatalog(This, SzDomain, MsgIdLanguage, MsgIdCharset) -&gt; boolean()</string>
		<string>wxLocale:addCatalogLookupPathPrefix</string>
		<string>wxLocale:addCatalogLookupPathPrefix(&lt;#Prefix#&gt;)</string>
		<string>wxLocale:addCatalogLookupPathPrefix(Prefix) -&gt; ok</string>
		<string>wxLocale:getCanonicalName</string>
		<string>wxLocale:getCanonicalName(&lt;#This#&gt;)</string>
		<string>wxLocale:getCanonicalName(This) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getLanguage</string>
		<string>wxLocale:getLanguage(&lt;#This#&gt;)</string>
		<string>wxLocale:getLanguage(This) -&gt; integer()</string>
		<string>wxLocale:getLanguageName</string>
		<string>wxLocale:getLanguageName(&lt;#Lang#&gt;)</string>
		<string>wxLocale:getLanguageName(Lang) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getLocale</string>
		<string>wxLocale:getLocale(&lt;#This#&gt;)</string>
		<string>wxLocale:getLocale(This) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getName</string>
		<string>wxLocale:getName(&lt;#This#&gt;)</string>
		<string>wxLocale:getName(This) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getString</string>
		<string>wxLocale:getString(&lt;#This#&gt;, &lt;#SzOrigString#&gt;)</string>
		<string>wxLocale:getString(This, SzOrigString) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getString</string>
		<string>wxLocale:getString(&lt;#This#&gt;, &lt;#SzOrigString#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxLocale:getString(This, SzOrigString, Option::[Option]) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getString</string>
		<string>wxLocale:getString(&lt;#This#&gt;, &lt;#SzOrigString#&gt;, &lt;#SzOrigString2#&gt;, &lt;#N#&gt;)</string>
		<string>wxLocale:getString(This, SzOrigString, SzOrigString2, N) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getString</string>
		<string>wxLocale:getString(&lt;#This#&gt;, &lt;#SzOrigString#&gt;, &lt;#SzOrigString2#&gt;, &lt;#N#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxLocale:getString(This, SzOrigString, SzOrigString2, N, Option::[Option]) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getHeaderValue</string>
		<string>wxLocale:getHeaderValue(&lt;#This#&gt;, &lt;#SzHeader#&gt;)</string>
		<string>wxLocale:getHeaderValue(This, SzHeader) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getHeaderValue</string>
		<string>wxLocale:getHeaderValue(&lt;#This#&gt;, &lt;#SzHeader#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxLocale:getHeaderValue(This, SzHeader, Option::[Option]) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getSysName</string>
		<string>wxLocale:getSysName(&lt;#This#&gt;)</string>
		<string>wxLocale:getSysName(This) -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getSystemEncoding</string>
		<string>wxLocale:getSystemEncoding()</string>
		<string>wxLocale:getSystemEncoding() -&gt; wx_enum() (see module wx)</string>
		<string>wxLocale:getSystemEncodingName</string>
		<string>wxLocale:getSystemEncodingName()</string>
		<string>wxLocale:getSystemEncodingName() -&gt; charlist() (see module unicode)</string>
		<string>wxLocale:getSystemLanguage</string>
		<string>wxLocale:getSystemLanguage()</string>
		<string>wxLocale:getSystemLanguage() -&gt; integer()</string>
		<string>wxLocale:isLoaded</string>
		<string>wxLocale:isLoaded(&lt;#This#&gt;, &lt;#SzDomain#&gt;)</string>
		<string>wxLocale:isLoaded(This, SzDomain) -&gt; boolean()</string>
		<string>wxLocale:isOk</string>
		<string>wxLocale:isOk(&lt;#This#&gt;)</string>
		<string>wxLocale:isOk(This) -&gt; boolean()</string>
		<string>wxLocale:destroy</string>
		<string>wxLocale:destroy(&lt;#This::wxLocale()#&gt;)</string>
		<string>wxLocale:destroy(This::wxLocale()) -&gt; ok</string>
		<string>wxLogNull:new</string>
		<string>wxLogNull:new()</string>
		<string>wxLogNull:new() -&gt; wxLogNull()</string>
		<string>wxLogNull:destroy</string>
		<string>wxLogNull:destroy(&lt;#This::wxLogNull()#&gt;)</string>
		<string>wxLogNull:destroy(This::wxLogNull()) -&gt; ok</string>
		<string>wxMask:new</string>
		<string>wxMask:new()</string>
		<string>wxMask:new() -&gt; wxMask()</string>
		<string>wxMask:new</string>
		<string>wxMask:new(&lt;#Bitmap#&gt;)</string>
		<string>wxMask:new(Bitmap) -&gt; wxMask()</string>
		<string>wxMask:new</string>
		<string>wxMask:new(&lt;#Bitmap#&gt;, &lt;#PaletteIndex#&gt;)</string>
		<string>wxMask:new(Bitmap, PaletteIndex) -&gt; wxMask()</string>
		<string>wxMask:create</string>
		<string>wxMask:create(&lt;#This#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxMask:create(This, Bitmap) -&gt; boolean()</string>
		<string>wxMask:create</string>
		<string>wxMask:create(&lt;#This#&gt;, &lt;#Bitmap#&gt;, &lt;#PaletteIndex#&gt;)</string>
		<string>wxMask:create(This, Bitmap, PaletteIndex) -&gt; boolean()</string>
		<string>wxMask:destroy</string>
		<string>wxMask:destroy(&lt;#This::wxMask()#&gt;)</string>
		<string>wxMask:destroy(This::wxMask()) -&gt; ok</string>
		<string>wxMDIChildFrame:new</string>
		<string>wxMDIChildFrame:new()</string>
		<string>wxMDIChildFrame:new() -&gt; wxMDIChildFrame()</string>
		<string>wxMDIChildFrame:new</string>
		<string>wxMDIChildFrame:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMDIChildFrame:new(Parent, Id, Title) -&gt; wxMDIChildFrame()</string>
		<string>wxMDIChildFrame:new</string>
		<string>wxMDIChildFrame:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMDIChildFrame:new(Parent, Id, Title, Option::[Option]) -&gt; wxMDIChildFrame()</string>
		<string>wxMDIChildFrame:activate</string>
		<string>wxMDIChildFrame:activate(&lt;#This#&gt;)</string>
		<string>wxMDIChildFrame:activate(This) -&gt; ok</string>
		<string>wxMDIChildFrame:create</string>
		<string>wxMDIChildFrame:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMDIChildFrame:create(This, Parent, Id, Title) -&gt; boolean()</string>
		<string>wxMDIChildFrame:create</string>
		<string>wxMDIChildFrame:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMDIChildFrame:create(This, Parent, Id, Title, Option::[Option]) -&gt; boolean()</string>
		<string>wxMDIChildFrame:maximize</string>
		<string>wxMDIChildFrame:maximize(&lt;#This#&gt;)</string>
		<string>wxMDIChildFrame:maximize(This) -&gt; ok</string>
		<string>wxMDIChildFrame:maximize</string>
		<string>wxMDIChildFrame:maximize(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMDIChildFrame:maximize(This, Option::[Option]) -&gt; ok</string>
		<string>wxMDIChildFrame:restore</string>
		<string>wxMDIChildFrame:restore(&lt;#This#&gt;)</string>
		<string>wxMDIChildFrame:restore(This) -&gt; ok</string>
		<string>wxMDIChildFrame:destroy</string>
		<string>wxMDIChildFrame:destroy(&lt;#This::wxMDIChildFrame()#&gt;)</string>
		<string>wxMDIChildFrame:destroy(This::wxMDIChildFrame()) -&gt; ok</string>
		<string>wxMDIClientWindow:new</string>
		<string>wxMDIClientWindow:new()</string>
		<string>wxMDIClientWindow:new() -&gt; wxMDIClientWindow()</string>
		<string>wxMDIClientWindow:new</string>
		<string>wxMDIClientWindow:new(&lt;#Parent#&gt;)</string>
		<string>wxMDIClientWindow:new(Parent) -&gt; wxMDIClientWindow()</string>
		<string>wxMDIClientWindow:new</string>
		<string>wxMDIClientWindow:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMDIClientWindow:new(Parent, Option::[Option]) -&gt; wxMDIClientWindow()</string>
		<string>wxMDIClientWindow:createClient</string>
		<string>wxMDIClientWindow:createClient(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxMDIClientWindow:createClient(This, Parent) -&gt; boolean()</string>
		<string>wxMDIClientWindow:createClient</string>
		<string>wxMDIClientWindow:createClient(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMDIClientWindow:createClient(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxMDIClientWindow:destroy</string>
		<string>wxMDIClientWindow:destroy(&lt;#This::wxMDIClientWindow()#&gt;)</string>
		<string>wxMDIClientWindow:destroy(This::wxMDIClientWindow()) -&gt; ok</string>
		<string>wxMDIParentFrame:new</string>
		<string>wxMDIParentFrame:new()</string>
		<string>wxMDIParentFrame:new() -&gt; wxMDIParentFrame()</string>
		<string>wxMDIParentFrame:new</string>
		<string>wxMDIParentFrame:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMDIParentFrame:new(Parent, Id, Title) -&gt; wxMDIParentFrame()</string>
		<string>wxMDIParentFrame:new</string>
		<string>wxMDIParentFrame:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMDIParentFrame:new(Parent, Id, Title, Option::[Option]) -&gt; wxMDIParentFrame()</string>
		<string>wxMDIParentFrame:activateNext</string>
		<string>wxMDIParentFrame:activateNext(&lt;#This#&gt;)</string>
		<string>wxMDIParentFrame:activateNext(This) -&gt; ok</string>
		<string>wxMDIParentFrame:activatePrevious</string>
		<string>wxMDIParentFrame:activatePrevious(&lt;#This#&gt;)</string>
		<string>wxMDIParentFrame:activatePrevious(This) -&gt; ok</string>
		<string>wxMDIParentFrame:arrangeIcons</string>
		<string>wxMDIParentFrame:arrangeIcons(&lt;#This#&gt;)</string>
		<string>wxMDIParentFrame:arrangeIcons(This) -&gt; ok</string>
		<string>wxMDIParentFrame:cascade</string>
		<string>wxMDIParentFrame:cascade(&lt;#This#&gt;)</string>
		<string>wxMDIParentFrame:cascade(This) -&gt; ok</string>
		<string>wxMDIParentFrame:create</string>
		<string>wxMDIParentFrame:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMDIParentFrame:create(This, Parent, Id, Title) -&gt; boolean()</string>
		<string>wxMDIParentFrame:create</string>
		<string>wxMDIParentFrame:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMDIParentFrame:create(This, Parent, Id, Title, Option::[Option]) -&gt; boolean()</string>
		<string>wxMDIParentFrame:getActiveChild</string>
		<string>wxMDIParentFrame:getActiveChild(&lt;#This#&gt;)</string>
		<string>wxMDIParentFrame:getActiveChild(This) -&gt; wxMDIChildFrame() (see module wxMDIChildFrame)</string>
		<string>wxMDIParentFrame:getClientWindow</string>
		<string>wxMDIParentFrame:getClientWindow(&lt;#This#&gt;)</string>
		<string>wxMDIParentFrame:getClientWindow(This) -&gt; wxMDIClientWindow() (see module wxMDIClientWindow)</string>
		<string>wxMDIParentFrame:tile</string>
		<string>wxMDIParentFrame:tile(&lt;#This#&gt;)</string>
		<string>wxMDIParentFrame:tile(This) -&gt; ok</string>
		<string>wxMDIParentFrame:tile</string>
		<string>wxMDIParentFrame:tile(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMDIParentFrame:tile(This, Option::[Option]) -&gt; ok</string>
		<string>wxMDIParentFrame:destroy</string>
		<string>wxMDIParentFrame:destroy(&lt;#This::wxMDIParentFrame()#&gt;)</string>
		<string>wxMDIParentFrame:destroy(This::wxMDIParentFrame()) -&gt; ok</string>
		<string>wxMemoryDC:new</string>
		<string>wxMemoryDC:new()</string>
		<string>wxMemoryDC:new() -&gt; wxMemoryDC()</string>
		<string>wxMemoryDC:new</string>
		<string>wxMemoryDC:new(&lt;#Dc#&gt;)</string>
		<string>wxMemoryDC:new(Dc) -&gt; wxMemoryDC()</string>
		<string>wxMemoryDC:selectObject</string>
		<string>wxMemoryDC:selectObject(&lt;#This#&gt;, &lt;#Bmp#&gt;)</string>
		<string>wxMemoryDC:selectObject(This, Bmp) -&gt; ok</string>
		<string>wxMemoryDC:selectObjectAsSource</string>
		<string>wxMemoryDC:selectObjectAsSource(&lt;#This#&gt;, &lt;#Bmp#&gt;)</string>
		<string>wxMemoryDC:selectObjectAsSource(This, Bmp) -&gt; ok</string>
		<string>wxMemoryDC:destroy</string>
		<string>wxMemoryDC:destroy(&lt;#This::wxMemoryDC()#&gt;)</string>
		<string>wxMemoryDC:destroy(This::wxMemoryDC()) -&gt; ok</string>
		<string>wxMenu:new</string>
		<string>wxMenu:new()</string>
		<string>wxMenu:new() -&gt; wxMenu()</string>
		<string>wxMenu:new</string>
		<string>wxMenu:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:new(Option::[Option]) -&gt; wxMenu()</string>
		<string>wxMenu:new</string>
		<string>wxMenu:new(&lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:new(Title, Option::[Option]) -&gt; wxMenu()</string>
		<string>wxMenu:append</string>
		<string>wxMenu:append(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxMenu:append(This, Item) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:append</string>
		<string>wxMenu:append(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;)</string>
		<string>wxMenu:append(This, Itemid, Text) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:append</string>
		<string>wxMenu:append(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Submenu#&gt;)</string>
		<string>wxMenu:append(This, Itemid, Text, Submenu) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:append</string>
		<string>wxMenu:append(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Help#&gt;, &lt;#IsCheckable#&gt;)</string>
		<string>wxMenu:append(This, Itemid, Text, Help, IsCheckable) -&gt; ok</string>
		<string>wxMenu:appendCheckItem</string>
		<string>wxMenu:appendCheckItem(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;)</string>
		<string>wxMenu:appendCheckItem(This, Itemid, Text) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:appendCheckItem</string>
		<string>wxMenu:appendCheckItem(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:appendCheckItem(This, Itemid, Text, Option::[Option]) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:appendRadioItem</string>
		<string>wxMenu:appendRadioItem(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;)</string>
		<string>wxMenu:appendRadioItem(This, Itemid, Text) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:appendRadioItem</string>
		<string>wxMenu:appendRadioItem(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:appendRadioItem(This, Itemid, Text, Option::[Option]) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:appendSeparator</string>
		<string>wxMenu:appendSeparator(&lt;#This#&gt;)</string>
		<string>wxMenu:appendSeparator(This) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:break</string>
		<string>wxMenu:break(&lt;#This#&gt;)</string>
		<string>wxMenu:break(This) -&gt; ok</string>
		<string>wxMenu:check</string>
		<string>wxMenu:check(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Check#&gt;)</string>
		<string>wxMenu:check(This, Itemid, Check) -&gt; ok</string>
		<string>wxMenu:delete</string>
		<string>wxMenu:delete(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:delete(This, Itemid) -&gt; boolean()</string>
		<string>wxMenu:Destroy</string>
		<string>wxMenu:Destroy(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:Destroy(This, Itemid) -&gt; boolean()</string>
		<string>wxMenu:enable</string>
		<string>wxMenu:enable(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Enable#&gt;)</string>
		<string>wxMenu:enable(This, Itemid, Enable) -&gt; ok</string>
		<string>wxMenu:findItem</string>
		<string>wxMenu:findItem(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:findItem(This, Itemid) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:findItemByPosition</string>
		<string>wxMenu:findItemByPosition(&lt;#This#&gt;, &lt;#Position#&gt;)</string>
		<string>wxMenu:findItemByPosition(This, Position) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:getHelpString</string>
		<string>wxMenu:getHelpString(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:getHelpString(This, Itemid) -&gt; charlist() (see module unicode)</string>
		<string>wxMenu:getLabel</string>
		<string>wxMenu:getLabel(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:getLabel(This, Itemid) -&gt; charlist() (see module unicode)</string>
		<string>wxMenu:getMenuItemCount</string>
		<string>wxMenu:getMenuItemCount(&lt;#This#&gt;)</string>
		<string>wxMenu:getMenuItemCount(This) -&gt; integer()</string>
		<string>wxMenu:getMenuItems</string>
		<string>wxMenu:getMenuItems(&lt;#This#&gt;)</string>
		<string>wxMenu:getMenuItems(This) -&gt; [wxMenuItem() (see module wxMenuItem)]</string>
		<string>wxMenu:getTitle</string>
		<string>wxMenu:getTitle(&lt;#This#&gt;)</string>
		<string>wxMenu:getTitle(This) -&gt; charlist() (see module unicode)</string>
		<string>wxMenu:insert</string>
		<string>wxMenu:insert(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:insert(This, Pos, Itemid) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:insert</string>
		<string>wxMenu:insert(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Itemid#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:insert(This, Pos, Itemid, Option::[Option]) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:insert</string>
		<string>wxMenu:insert(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Submenu#&gt;)</string>
		<string>wxMenu:insert(This, Pos, Itemid, Text, Submenu) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:insert</string>
		<string>wxMenu:insert(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Help#&gt;, &lt;#IsCheckable#&gt;)</string>
		<string>wxMenu:insert(This, Pos, Itemid, Text, Help, IsCheckable) -&gt; ok</string>
		<string>wxMenu:insertCheckItem</string>
		<string>wxMenu:insertCheckItem(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;)</string>
		<string>wxMenu:insertCheckItem(This, Pos, Itemid, Text) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:insertCheckItem</string>
		<string>wxMenu:insertCheckItem(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:insertCheckItem(This, Pos, Itemid, Text, Option::[Option]) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:insertRadioItem</string>
		<string>wxMenu:insertRadioItem(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;)</string>
		<string>wxMenu:insertRadioItem(This, Pos, Itemid, Text) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:insertRadioItem</string>
		<string>wxMenu:insertRadioItem(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:insertRadioItem(This, Pos, Itemid, Text, Option::[Option]) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:insertSeparator</string>
		<string>wxMenu:insertSeparator(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxMenu:insertSeparator(This, Pos) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:isChecked</string>
		<string>wxMenu:isChecked(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:isChecked(This, Itemid) -&gt; boolean()</string>
		<string>wxMenu:isEnabled</string>
		<string>wxMenu:isEnabled(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:isEnabled(This, Itemid) -&gt; boolean()</string>
		<string>wxMenu:prepend</string>
		<string>wxMenu:prepend(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:prepend(This, Itemid) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:prepend</string>
		<string>wxMenu:prepend(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:prepend(This, Itemid, Option::[Option]) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:prepend</string>
		<string>wxMenu:prepend(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Submenu#&gt;)</string>
		<string>wxMenu:prepend(This, Itemid, Text, Submenu) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:prepend</string>
		<string>wxMenu:prepend(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Help#&gt;, &lt;#IsCheckable#&gt;)</string>
		<string>wxMenu:prepend(This, Itemid, Text, Help, IsCheckable) -&gt; ok</string>
		<string>wxMenu:prependCheckItem</string>
		<string>wxMenu:prependCheckItem(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;)</string>
		<string>wxMenu:prependCheckItem(This, Itemid, Text) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:prependCheckItem</string>
		<string>wxMenu:prependCheckItem(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:prependCheckItem(This, Itemid, Text, Option::[Option]) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:prependRadioItem</string>
		<string>wxMenu:prependRadioItem(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;)</string>
		<string>wxMenu:prependRadioItem(This, Itemid, Text) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:prependRadioItem</string>
		<string>wxMenu:prependRadioItem(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenu:prependRadioItem(This, Itemid, Text, Option::[Option]) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:prependSeparator</string>
		<string>wxMenu:prependSeparator(&lt;#This#&gt;)</string>
		<string>wxMenu:prependSeparator(This) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:remove</string>
		<string>wxMenu:remove(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenu:remove(This, Itemid) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenu:setHelpString</string>
		<string>wxMenu:setHelpString(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#HelpString#&gt;)</string>
		<string>wxMenu:setHelpString(This, Itemid, HelpString) -&gt; ok</string>
		<string>wxMenu:setLabel</string>
		<string>wxMenu:setLabel(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Label#&gt;)</string>
		<string>wxMenu:setLabel(This, Itemid, Label) -&gt; ok</string>
		<string>wxMenu:setTitle</string>
		<string>wxMenu:setTitle(&lt;#This#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMenu:setTitle(This, Title) -&gt; ok</string>
		<string>wxMenu:destroy</string>
		<string>wxMenu:destroy(&lt;#This::wxMenu()#&gt;)</string>
		<string>wxMenu:destroy(This::wxMenu()) -&gt; ok</string>
		<string>wxMenuBar:new</string>
		<string>wxMenuBar:new()</string>
		<string>wxMenuBar:new() -&gt; wxMenuBar()</string>
		<string>wxMenuBar:new</string>
		<string>wxMenuBar:new(&lt;#Style#&gt;)</string>
		<string>wxMenuBar:new(Style) -&gt; wxMenuBar()</string>
		<string>wxMenuBar:append</string>
		<string>wxMenuBar:append(&lt;#This#&gt;, &lt;#Menu#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMenuBar:append(This, Menu, Title) -&gt; boolean()</string>
		<string>wxMenuBar:check</string>
		<string>wxMenuBar:check(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Check#&gt;)</string>
		<string>wxMenuBar:check(This, Itemid, Check) -&gt; ok</string>
		<string>wxMenuBar:enable</string>
		<string>wxMenuBar:enable(&lt;#This#&gt;)</string>
		<string>wxMenuBar:enable(This) -&gt; boolean()</string>
		<string>wxMenuBar:enable</string>
		<string>wxMenuBar:enable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenuBar:enable(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxMenuBar:enable</string>
		<string>wxMenuBar:enable(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Enable#&gt;)</string>
		<string>wxMenuBar:enable(This, Itemid, Enable) -&gt; ok</string>
		<string>wxMenuBar:enableTop</string>
		<string>wxMenuBar:enableTop(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxMenuBar:enableTop(This, Pos, Flag) -&gt; ok</string>
		<string>wxMenuBar:findMenu</string>
		<string>wxMenuBar:findMenu(&lt;#This#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMenuBar:findMenu(This, Title) -&gt; integer()</string>
		<string>wxMenuBar:findMenuItem</string>
		<string>wxMenuBar:findMenuItem(&lt;#This#&gt;, &lt;#MenuString#&gt;, &lt;#ItemString#&gt;)</string>
		<string>wxMenuBar:findMenuItem(This, MenuString, ItemString) -&gt; integer()</string>
		<string>wxMenuBar:findItem</string>
		<string>wxMenuBar:findItem(&lt;#This#&gt;, &lt;#Id#&gt;)</string>
		<string>wxMenuBar:findItem(This, Id) -&gt; wxMenuItem() (see module wxMenuItem)</string>
		<string>wxMenuBar:getHelpString</string>
		<string>wxMenuBar:getHelpString(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenuBar:getHelpString(This, Itemid) -&gt; charlist() (see module unicode)</string>
		<string>wxMenuBar:getLabel</string>
		<string>wxMenuBar:getLabel(&lt;#This#&gt;)</string>
		<string>wxMenuBar:getLabel(This) -&gt; charlist() (see module unicode)</string>
		<string>wxMenuBar:getLabel</string>
		<string>wxMenuBar:getLabel(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenuBar:getLabel(This, Itemid) -&gt; charlist() (see module unicode)</string>
		<string>wxMenuBar:getLabelTop</string>
		<string>wxMenuBar:getLabelTop(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxMenuBar:getLabelTop(This, Pos) -&gt; charlist() (see module unicode)</string>
		<string>wxMenuBar:getMenu</string>
		<string>wxMenuBar:getMenu(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxMenuBar:getMenu(This, Pos) -&gt; wxMenu() (see module wxMenu)</string>
		<string>wxMenuBar:getMenuCount</string>
		<string>wxMenuBar:getMenuCount(&lt;#This#&gt;)</string>
		<string>wxMenuBar:getMenuCount(This) -&gt; integer()</string>
		<string>wxMenuBar:insert</string>
		<string>wxMenuBar:insert(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Menu#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMenuBar:insert(This, Pos, Menu, Title) -&gt; boolean()</string>
		<string>wxMenuBar:isChecked</string>
		<string>wxMenuBar:isChecked(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenuBar:isChecked(This, Itemid) -&gt; boolean()</string>
		<string>wxMenuBar:isEnabled</string>
		<string>wxMenuBar:isEnabled(&lt;#This#&gt;)</string>
		<string>wxMenuBar:isEnabled(This) -&gt; boolean()</string>
		<string>wxMenuBar:isEnabled</string>
		<string>wxMenuBar:isEnabled(&lt;#This#&gt;, &lt;#Itemid#&gt;)</string>
		<string>wxMenuBar:isEnabled(This, Itemid) -&gt; boolean()</string>
		<string>wxMenuBar:remove</string>
		<string>wxMenuBar:remove(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxMenuBar:remove(This, Pos) -&gt; wxMenu() (see module wxMenu)</string>
		<string>wxMenuBar:replace</string>
		<string>wxMenuBar:replace(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Menu#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMenuBar:replace(This, Pos, Menu, Title) -&gt; wxMenu() (see module wxMenu)</string>
		<string>wxMenuBar:setHelpString</string>
		<string>wxMenuBar:setHelpString(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#HelpString#&gt;)</string>
		<string>wxMenuBar:setHelpString(This, Itemid, HelpString) -&gt; ok</string>
		<string>wxMenuBar:setLabel</string>
		<string>wxMenuBar:setLabel(&lt;#This#&gt;, &lt;#S#&gt;)</string>
		<string>wxMenuBar:setLabel(This, S) -&gt; ok</string>
		<string>wxMenuBar:setLabel</string>
		<string>wxMenuBar:setLabel(&lt;#This#&gt;, &lt;#Itemid#&gt;, &lt;#Label#&gt;)</string>
		<string>wxMenuBar:setLabel(This, Itemid, Label) -&gt; ok</string>
		<string>wxMenuBar:setLabelTop</string>
		<string>wxMenuBar:setLabelTop(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Label#&gt;)</string>
		<string>wxMenuBar:setLabelTop(This, Pos, Label) -&gt; ok</string>
		<string>wxMenuBar:destroy</string>
		<string>wxMenuBar:destroy(&lt;#This::wxMenuBar()#&gt;)</string>
		<string>wxMenuBar:destroy(This::wxMenuBar()) -&gt; ok</string>
		<string>wxMenuEvent:getMenu</string>
		<string>wxMenuEvent:getMenu(&lt;#This#&gt;)</string>
		<string>wxMenuEvent:getMenu(This) -&gt; wxMenu() (see module wxMenu)</string>
		<string>wxMenuEvent:getMenuId</string>
		<string>wxMenuEvent:getMenuId(&lt;#This#&gt;)</string>
		<string>wxMenuEvent:getMenuId(This) -&gt; integer()</string>
		<string>wxMenuEvent:isPopup</string>
		<string>wxMenuEvent:isPopup(&lt;#This#&gt;)</string>
		<string>wxMenuEvent:isPopup(This) -&gt; boolean()</string>
		<string>wxMenuItem:new</string>
		<string>wxMenuItem:new()</string>
		<string>wxMenuItem:new() -&gt; wxMenuItem()</string>
		<string>wxMenuItem:new</string>
		<string>wxMenuItem:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxMenuItem:new(Option::[Option]) -&gt; wxMenuItem()</string>
		<string>wxMenuItem:check</string>
		<string>wxMenuItem:check(&lt;#This#&gt;)</string>
		<string>wxMenuItem:check(This) -&gt; ok</string>
		<string>wxMenuItem:check</string>
		<string>wxMenuItem:check(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenuItem:check(This, Option::[Option]) -&gt; ok</string>
		<string>wxMenuItem:enable</string>
		<string>wxMenuItem:enable(&lt;#This#&gt;)</string>
		<string>wxMenuItem:enable(This) -&gt; ok</string>
		<string>wxMenuItem:enable</string>
		<string>wxMenuItem:enable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMenuItem:enable(This, Option::[Option]) -&gt; ok</string>
		<string>wxMenuItem:getBitmap</string>
		<string>wxMenuItem:getBitmap(&lt;#This#&gt;)</string>
		<string>wxMenuItem:getBitmap(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxMenuItem:getHelp</string>
		<string>wxMenuItem:getHelp(&lt;#This#&gt;)</string>
		<string>wxMenuItem:getHelp(This) -&gt; charlist() (see module unicode)</string>
		<string>wxMenuItem:getId</string>
		<string>wxMenuItem:getId(&lt;#This#&gt;)</string>
		<string>wxMenuItem:getId(This) -&gt; integer()</string>
		<string>wxMenuItem:getKind</string>
		<string>wxMenuItem:getKind(&lt;#This#&gt;)</string>
		<string>wxMenuItem:getKind(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxMenuItem:getLabel</string>
		<string>wxMenuItem:getLabel(&lt;#This#&gt;)</string>
		<string>wxMenuItem:getLabel(This) -&gt; charlist() (see module unicode)</string>
		<string>wxMenuItem:getLabelFromText</string>
		<string>wxMenuItem:getLabelFromText(&lt;#Text#&gt;)</string>
		<string>wxMenuItem:getLabelFromText(Text) -&gt; charlist() (see module unicode)</string>
		<string>wxMenuItem:getMenu</string>
		<string>wxMenuItem:getMenu(&lt;#This#&gt;)</string>
		<string>wxMenuItem:getMenu(This) -&gt; wxMenu() (see module wxMenu)</string>
		<string>wxMenuItem:getText</string>
		<string>wxMenuItem:getText(&lt;#This#&gt;)</string>
		<string>wxMenuItem:getText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxMenuItem:getSubMenu</string>
		<string>wxMenuItem:getSubMenu(&lt;#This#&gt;)</string>
		<string>wxMenuItem:getSubMenu(This) -&gt; wxMenu() (see module wxMenu)</string>
		<string>wxMenuItem:isCheckable</string>
		<string>wxMenuItem:isCheckable(&lt;#This#&gt;)</string>
		<string>wxMenuItem:isCheckable(This) -&gt; boolean()</string>
		<string>wxMenuItem:isChecked</string>
		<string>wxMenuItem:isChecked(&lt;#This#&gt;)</string>
		<string>wxMenuItem:isChecked(This) -&gt; boolean()</string>
		<string>wxMenuItem:isEnabled</string>
		<string>wxMenuItem:isEnabled(&lt;#This#&gt;)</string>
		<string>wxMenuItem:isEnabled(This) -&gt; boolean()</string>
		<string>wxMenuItem:isSeparator</string>
		<string>wxMenuItem:isSeparator(&lt;#This#&gt;)</string>
		<string>wxMenuItem:isSeparator(This) -&gt; boolean()</string>
		<string>wxMenuItem:isSubMenu</string>
		<string>wxMenuItem:isSubMenu(&lt;#This#&gt;)</string>
		<string>wxMenuItem:isSubMenu(This) -&gt; boolean()</string>
		<string>wxMenuItem:setBitmap</string>
		<string>wxMenuItem:setBitmap(&lt;#This#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxMenuItem:setBitmap(This, Bitmap) -&gt; ok</string>
		<string>wxMenuItem:setHelp</string>
		<string>wxMenuItem:setHelp(&lt;#This#&gt;, &lt;#Str#&gt;)</string>
		<string>wxMenuItem:setHelp(This, Str) -&gt; ok</string>
		<string>wxMenuItem:setMenu</string>
		<string>wxMenuItem:setMenu(&lt;#This#&gt;, &lt;#Menu#&gt;)</string>
		<string>wxMenuItem:setMenu(This, Menu) -&gt; ok</string>
		<string>wxMenuItem:setSubMenu</string>
		<string>wxMenuItem:setSubMenu(&lt;#This#&gt;, &lt;#Menu#&gt;)</string>
		<string>wxMenuItem:setSubMenu(This, Menu) -&gt; ok</string>
		<string>wxMenuItem:setText</string>
		<string>wxMenuItem:setText(&lt;#This#&gt;, &lt;#Str#&gt;)</string>
		<string>wxMenuItem:setText(This, Str) -&gt; ok</string>
		<string>wxMenuItem:destroy</string>
		<string>wxMenuItem:destroy(&lt;#This::wxMenuItem()#&gt;)</string>
		<string>wxMenuItem:destroy(This::wxMenuItem()) -&gt; ok</string>
		<string>wxMessageDialog:new</string>
		<string>wxMessageDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;)</string>
		<string>wxMessageDialog:new(Parent, Message) -&gt; wxMessageDialog()</string>
		<string>wxMessageDialog:new</string>
		<string>wxMessageDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMessageDialog:new(Parent, Message, Option::[Option]) -&gt; wxMessageDialog()</string>
		<string>wxMessageDialog:destroy</string>
		<string>wxMessageDialog:destroy(&lt;#This::wxMessageDialog()#&gt;)</string>
		<string>wxMessageDialog:destroy(This::wxMessageDialog()) -&gt; ok</string>
		<string>wxMiniFrame:new</string>
		<string>wxMiniFrame:new()</string>
		<string>wxMiniFrame:new() -&gt; wxMiniFrame()</string>
		<string>wxMiniFrame:new</string>
		<string>wxMiniFrame:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMiniFrame:new(Parent, Id, Title) -&gt; wxMiniFrame()</string>
		<string>wxMiniFrame:new</string>
		<string>wxMiniFrame:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMiniFrame:new(Parent, Id, Title, Option::[Option]) -&gt; wxMiniFrame()</string>
		<string>wxMiniFrame:create</string>
		<string>wxMiniFrame:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;)</string>
		<string>wxMiniFrame:create(This, Parent, Id, Title) -&gt; boolean()</string>
		<string>wxMiniFrame:create</string>
		<string>wxMiniFrame:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMiniFrame:create(This, Parent, Id, Title, Option::[Option]) -&gt; boolean()</string>
		<string>wxMiniFrame:destroy</string>
		<string>wxMiniFrame:destroy(&lt;#This::wxMiniFrame()#&gt;)</string>
		<string>wxMiniFrame:destroy(This::wxMiniFrame()) -&gt; ok</string>
		<string>wxMirrorDC:new</string>
		<string>wxMirrorDC:new(&lt;#Dc#&gt;, &lt;#Mirror#&gt;)</string>
		<string>wxMirrorDC:new(Dc, Mirror) -&gt; wxMirrorDC()</string>
		<string>wxMirrorDC:destroy</string>
		<string>wxMirrorDC:destroy(&lt;#This::wxMirrorDC()#&gt;)</string>
		<string>wxMirrorDC:destroy(This::wxMirrorDC()) -&gt; ok</string>
		<string>wxMouseCaptureChangedEvent:getCapturedWindow</string>
		<string>wxMouseCaptureChangedEvent:getCapturedWindow(&lt;#This#&gt;)</string>
		<string>wxMouseCaptureChangedEvent:getCapturedWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxMouseEvent:altDown</string>
		<string>wxMouseEvent:altDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:altDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:button</string>
		<string>wxMouseEvent:button(&lt;#This#&gt;, &lt;#But#&gt;)</string>
		<string>wxMouseEvent:button(This, But) -&gt; boolean()</string>
		<string>wxMouseEvent:buttonDClick</string>
		<string>wxMouseEvent:buttonDClick(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:buttonDClick(This) -&gt; boolean()</string>
		<string>wxMouseEvent:buttonDClick</string>
		<string>wxMouseEvent:buttonDClick(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMouseEvent:buttonDClick(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxMouseEvent:buttonDown</string>
		<string>wxMouseEvent:buttonDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:buttonDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:buttonDown</string>
		<string>wxMouseEvent:buttonDown(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMouseEvent:buttonDown(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxMouseEvent:buttonUp</string>
		<string>wxMouseEvent:buttonUp(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:buttonUp(This) -&gt; boolean()</string>
		<string>wxMouseEvent:buttonUp</string>
		<string>wxMouseEvent:buttonUp(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMouseEvent:buttonUp(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxMouseEvent:cmdDown</string>
		<string>wxMouseEvent:cmdDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:cmdDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:controlDown</string>
		<string>wxMouseEvent:controlDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:controlDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:dragging</string>
		<string>wxMouseEvent:dragging(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:dragging(This) -&gt; boolean()</string>
		<string>wxMouseEvent:entering</string>
		<string>wxMouseEvent:entering(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:entering(This) -&gt; boolean()</string>
		<string>wxMouseEvent:getButton</string>
		<string>wxMouseEvent:getButton(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:getButton(This) -&gt; integer()</string>
		<string>wxMouseEvent:getPosition</string>
		<string>wxMouseEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxMouseEvent:getLogicalPosition</string>
		<string>wxMouseEvent:getLogicalPosition(&lt;#This#&gt;, &lt;#Dc#&gt;)</string>
		<string>wxMouseEvent:getLogicalPosition(This, Dc) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxMouseEvent:getLinesPerAction</string>
		<string>wxMouseEvent:getLinesPerAction(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:getLinesPerAction(This) -&gt; integer()</string>
		<string>wxMouseEvent:getWheelRotation</string>
		<string>wxMouseEvent:getWheelRotation(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:getWheelRotation(This) -&gt; integer()</string>
		<string>wxMouseEvent:getWheelDelta</string>
		<string>wxMouseEvent:getWheelDelta(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:getWheelDelta(This) -&gt; integer()</string>
		<string>wxMouseEvent:getX</string>
		<string>wxMouseEvent:getX(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:getX(This) -&gt; integer()</string>
		<string>wxMouseEvent:getY</string>
		<string>wxMouseEvent:getY(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:getY(This) -&gt; integer()</string>
		<string>wxMouseEvent:isButton</string>
		<string>wxMouseEvent:isButton(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:isButton(This) -&gt; boolean()</string>
		<string>wxMouseEvent:isPageScroll</string>
		<string>wxMouseEvent:isPageScroll(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:isPageScroll(This) -&gt; boolean()</string>
		<string>wxMouseEvent:leaving</string>
		<string>wxMouseEvent:leaving(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:leaving(This) -&gt; boolean()</string>
		<string>wxMouseEvent:leftDClick</string>
		<string>wxMouseEvent:leftDClick(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:leftDClick(This) -&gt; boolean()</string>
		<string>wxMouseEvent:leftDown</string>
		<string>wxMouseEvent:leftDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:leftDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:leftIsDown</string>
		<string>wxMouseEvent:leftIsDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:leftIsDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:leftUp</string>
		<string>wxMouseEvent:leftUp(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:leftUp(This) -&gt; boolean()</string>
		<string>wxMouseEvent:metaDown</string>
		<string>wxMouseEvent:metaDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:metaDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:middleDClick</string>
		<string>wxMouseEvent:middleDClick(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:middleDClick(This) -&gt; boolean()</string>
		<string>wxMouseEvent:middleDown</string>
		<string>wxMouseEvent:middleDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:middleDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:middleIsDown</string>
		<string>wxMouseEvent:middleIsDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:middleIsDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:middleUp</string>
		<string>wxMouseEvent:middleUp(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:middleUp(This) -&gt; boolean()</string>
		<string>wxMouseEvent:moving</string>
		<string>wxMouseEvent:moving(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:moving(This) -&gt; boolean()</string>
		<string>wxMouseEvent:rightDClick</string>
		<string>wxMouseEvent:rightDClick(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:rightDClick(This) -&gt; boolean()</string>
		<string>wxMouseEvent:rightDown</string>
		<string>wxMouseEvent:rightDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:rightDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:rightIsDown</string>
		<string>wxMouseEvent:rightIsDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:rightIsDown(This) -&gt; boolean()</string>
		<string>wxMouseEvent:rightUp</string>
		<string>wxMouseEvent:rightUp(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:rightUp(This) -&gt; boolean()</string>
		<string>wxMouseEvent:shiftDown</string>
		<string>wxMouseEvent:shiftDown(&lt;#This#&gt;)</string>
		<string>wxMouseEvent:shiftDown(This) -&gt; boolean()</string>
		<string>wxMoveEvent:getPosition</string>
		<string>wxMoveEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxMoveEvent:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxMultiChoiceDialog:new</string>
		<string>wxMultiChoiceDialog:new()</string>
		<string>wxMultiChoiceDialog:new() -&gt; wxMultiChoiceDialog()</string>
		<string>wxMultiChoiceDialog:new</string>
		<string>wxMultiChoiceDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;, &lt;#Caption#&gt;, &lt;#Choices#&gt;)</string>
		<string>wxMultiChoiceDialog:new(Parent, Message, Caption, Choices) -&gt; wxMultiChoiceDialog()</string>
		<string>wxMultiChoiceDialog:new</string>
		<string>wxMultiChoiceDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;, &lt;#Caption#&gt;, &lt;#Choices#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxMultiChoiceDialog:new(Parent, Message, Caption, Choices, Option::[Option]) -&gt; wxMultiChoiceDialog()</string>
		<string>wxMultiChoiceDialog:getSelections</string>
		<string>wxMultiChoiceDialog:getSelections(&lt;#This#&gt;)</string>
		<string>wxMultiChoiceDialog:getSelections(This) -&gt; [integer()]</string>
		<string>wxMultiChoiceDialog:setSelections</string>
		<string>wxMultiChoiceDialog:setSelections(&lt;#This#&gt;, &lt;#Selections#&gt;)</string>
		<string>wxMultiChoiceDialog:setSelections(This, Selections) -&gt; ok</string>
		<string>wxMultiChoiceDialog:destroy</string>
		<string>wxMultiChoiceDialog:destroy(&lt;#This::wxMultiChoiceDialog()#&gt;)</string>
		<string>wxMultiChoiceDialog:destroy(This::wxMultiChoiceDialog()) -&gt; ok</string>
		<string>wxNavigationKeyEvent:getDirection</string>
		<string>wxNavigationKeyEvent:getDirection(&lt;#This#&gt;)</string>
		<string>wxNavigationKeyEvent:getDirection(This) -&gt; boolean()</string>
		<string>wxNavigationKeyEvent:setDirection</string>
		<string>wxNavigationKeyEvent:setDirection(&lt;#This#&gt;, &lt;#BForward#&gt;)</string>
		<string>wxNavigationKeyEvent:setDirection(This, BForward) -&gt; ok</string>
		<string>wxNavigationKeyEvent:isWindowChange</string>
		<string>wxNavigationKeyEvent:isWindowChange(&lt;#This#&gt;)</string>
		<string>wxNavigationKeyEvent:isWindowChange(This) -&gt; boolean()</string>
		<string>wxNavigationKeyEvent:setWindowChange</string>
		<string>wxNavigationKeyEvent:setWindowChange(&lt;#This#&gt;, &lt;#BIs#&gt;)</string>
		<string>wxNavigationKeyEvent:setWindowChange(This, BIs) -&gt; ok</string>
		<string>wxNavigationKeyEvent:isFromTab</string>
		<string>wxNavigationKeyEvent:isFromTab(&lt;#This#&gt;)</string>
		<string>wxNavigationKeyEvent:isFromTab(This) -&gt; boolean()</string>
		<string>wxNavigationKeyEvent:setFromTab</string>
		<string>wxNavigationKeyEvent:setFromTab(&lt;#This#&gt;, &lt;#BIs#&gt;)</string>
		<string>wxNavigationKeyEvent:setFromTab(This, BIs) -&gt; ok</string>
		<string>wxNavigationKeyEvent:getCurrentFocus</string>
		<string>wxNavigationKeyEvent:getCurrentFocus(&lt;#This#&gt;)</string>
		<string>wxNavigationKeyEvent:getCurrentFocus(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxNavigationKeyEvent:setCurrentFocus</string>
		<string>wxNavigationKeyEvent:setCurrentFocus(&lt;#This#&gt;, &lt;#Win#&gt;)</string>
		<string>wxNavigationKeyEvent:setCurrentFocus(This, Win) -&gt; ok</string>
		<string>wxNotebook:new</string>
		<string>wxNotebook:new()</string>
		<string>wxNotebook:new() -&gt; wxNotebook()</string>
		<string>wxNotebook:new</string>
		<string>wxNotebook:new(&lt;#Parent#&gt;, &lt;#Winid#&gt;)</string>
		<string>wxNotebook:new(Parent, Winid) -&gt; wxNotebook()</string>
		<string>wxNotebook:new</string>
		<string>wxNotebook:new(&lt;#Parent#&gt;, &lt;#Winid#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxNotebook:new(Parent, Winid, Option::[Option]) -&gt; wxNotebook()</string>
		<string>wxNotebook:addPage</string>
		<string>wxNotebook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxNotebook:addPage(This, Page, Text) -&gt; boolean()</string>
		<string>wxNotebook:addPage</string>
		<string>wxNotebook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxNotebook:addPage(This, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxNotebook:advanceSelection</string>
		<string>wxNotebook:advanceSelection(&lt;#This#&gt;)</string>
		<string>wxNotebook:advanceSelection(This) -&gt; ok</string>
		<string>wxNotebook:advanceSelection</string>
		<string>wxNotebook:advanceSelection(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxNotebook:advanceSelection(This, Option::[Option]) -&gt; ok</string>
		<string>wxNotebook:assignImageList</string>
		<string>wxNotebook:assignImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxNotebook:assignImageList(This, ImageList) -&gt; ok</string>
		<string>wxNotebook:create</string>
		<string>wxNotebook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxNotebook:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxNotebook:create</string>
		<string>wxNotebook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxNotebook:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxNotebook:deleteAllPages</string>
		<string>wxNotebook:deleteAllPages(&lt;#This#&gt;)</string>
		<string>wxNotebook:deleteAllPages(This) -&gt; boolean()</string>
		<string>wxNotebook:deletePage</string>
		<string>wxNotebook:deletePage(&lt;#This#&gt;, &lt;#NPage#&gt;)</string>
		<string>wxNotebook:deletePage(This, NPage) -&gt; boolean()</string>
		<string>wxNotebook:removePage</string>
		<string>wxNotebook:removePage(&lt;#This#&gt;, &lt;#NPage#&gt;)</string>
		<string>wxNotebook:removePage(This, NPage) -&gt; boolean()</string>
		<string>wxNotebook:getCurrentPage</string>
		<string>wxNotebook:getCurrentPage(&lt;#This#&gt;)</string>
		<string>wxNotebook:getCurrentPage(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxNotebook:getImageList</string>
		<string>wxNotebook:getImageList(&lt;#This#&gt;)</string>
		<string>wxNotebook:getImageList(This) -&gt; wxImageList() (see module wxImageList)</string>
		<string>wxNotebook:getPage</string>
		<string>wxNotebook:getPage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxNotebook:getPage(This, N) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxNotebook:getPageCount</string>
		<string>wxNotebook:getPageCount(&lt;#This#&gt;)</string>
		<string>wxNotebook:getPageCount(This) -&gt; integer()</string>
		<string>wxNotebook:getPageImage</string>
		<string>wxNotebook:getPageImage(&lt;#This#&gt;, &lt;#NPage#&gt;)</string>
		<string>wxNotebook:getPageImage(This, NPage) -&gt; integer()</string>
		<string>wxNotebook:getPageText</string>
		<string>wxNotebook:getPageText(&lt;#This#&gt;, &lt;#NPage#&gt;)</string>
		<string>wxNotebook:getPageText(This, NPage) -&gt; charlist() (see module unicode)</string>
		<string>wxNotebook:getRowCount</string>
		<string>wxNotebook:getRowCount(&lt;#This#&gt;)</string>
		<string>wxNotebook:getRowCount(This) -&gt; integer()</string>
		<string>wxNotebook:getSelection</string>
		<string>wxNotebook:getSelection(&lt;#This#&gt;)</string>
		<string>wxNotebook:getSelection(This) -&gt; integer()</string>
		<string>wxNotebook:getThemeBackgroundColour</string>
		<string>wxNotebook:getThemeBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxNotebook:getThemeBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxNotebook:hitTest</string>
		<string>wxNotebook:hitTest(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxNotebook:hitTest(This, Pt) -&gt; Result</string>
		<string>wxNotebook:insertPage</string>
		<string>wxNotebook:insertPage(&lt;#This#&gt;, &lt;#Position#&gt;, &lt;#Win#&gt;, &lt;#StrText#&gt;)</string>
		<string>wxNotebook:insertPage(This, Position, Win, StrText) -&gt; boolean()</string>
		<string>wxNotebook:insertPage</string>
		<string>wxNotebook:insertPage(&lt;#This#&gt;, &lt;#Position#&gt;, &lt;#Win#&gt;, &lt;#StrText#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxNotebook:insertPage(This, Position, Win, StrText, Option::[Option]) -&gt; boolean()</string>
		<string>wxNotebook:setImageList</string>
		<string>wxNotebook:setImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxNotebook:setImageList(This, ImageList) -&gt; ok</string>
		<string>wxNotebook:setPadding</string>
		<string>wxNotebook:setPadding(&lt;#This#&gt;, &lt;#Padding#&gt;)</string>
		<string>wxNotebook:setPadding(This, Padding) -&gt; ok</string>
		<string>wxNotebook:setPageSize</string>
		<string>wxNotebook:setPageSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxNotebook:setPageSize(This, Size) -&gt; ok</string>
		<string>wxNotebook:setPageImage</string>
		<string>wxNotebook:setPageImage(&lt;#This#&gt;, &lt;#NPage#&gt;, &lt;#NImage#&gt;)</string>
		<string>wxNotebook:setPageImage(This, NPage, NImage) -&gt; boolean()</string>
		<string>wxNotebook:setPageText</string>
		<string>wxNotebook:setPageText(&lt;#This#&gt;, &lt;#NPage#&gt;, &lt;#StrText#&gt;)</string>
		<string>wxNotebook:setPageText(This, NPage, StrText) -&gt; boolean()</string>
		<string>wxNotebook:setSelection</string>
		<string>wxNotebook:setSelection(&lt;#This#&gt;, &lt;#NPage#&gt;)</string>
		<string>wxNotebook:setSelection(This, NPage) -&gt; integer()</string>
		<string>wxNotebook:changeSelection</string>
		<string>wxNotebook:changeSelection(&lt;#This#&gt;, &lt;#NPage#&gt;)</string>
		<string>wxNotebook:changeSelection(This, NPage) -&gt; integer()</string>
		<string>wxNotebook:destroy</string>
		<string>wxNotebook:destroy(&lt;#This::wxNotebook()#&gt;)</string>
		<string>wxNotebook:destroy(This::wxNotebook()) -&gt; ok</string>
		<string>wxNotebookEvent:getOldSelection</string>
		<string>wxNotebookEvent:getOldSelection(&lt;#This#&gt;)</string>
		<string>wxNotebookEvent:getOldSelection(This) -&gt; integer()</string>
		<string>wxNotebookEvent:getSelection</string>
		<string>wxNotebookEvent:getSelection(&lt;#This#&gt;)</string>
		<string>wxNotebookEvent:getSelection(This) -&gt; integer()</string>
		<string>wxNotebookEvent:setOldSelection</string>
		<string>wxNotebookEvent:setOldSelection(&lt;#This#&gt;, &lt;#NOldSel#&gt;)</string>
		<string>wxNotebookEvent:setOldSelection(This, NOldSel) -&gt; ok</string>
		<string>wxNotebookEvent:setSelection</string>
		<string>wxNotebookEvent:setSelection(&lt;#This#&gt;, &lt;#NSel#&gt;)</string>
		<string>wxNotebookEvent:setSelection(This, NSel) -&gt; ok</string>
		<string>wxNotifyEvent:allow</string>
		<string>wxNotifyEvent:allow(&lt;#This#&gt;)</string>
		<string>wxNotifyEvent:allow(This) -&gt; ok</string>
		<string>wxNotifyEvent:isAllowed</string>
		<string>wxNotifyEvent:isAllowed(&lt;#This#&gt;)</string>
		<string>wxNotifyEvent:isAllowed(This) -&gt; boolean()</string>
		<string>wxNotifyEvent:veto</string>
		<string>wxNotifyEvent:veto(&lt;#This#&gt;)</string>
		<string>wxNotifyEvent:veto(This) -&gt; ok</string>
		<string>wxPageSetupDialog:new</string>
		<string>wxPageSetupDialog:new(&lt;#Parent#&gt;)</string>
		<string>wxPageSetupDialog:new(Parent) -&gt; wxPageSetupDialog()</string>
		<string>wxPageSetupDialog:new</string>
		<string>wxPageSetupDialog:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPageSetupDialog:new(Parent, Option::[Option]) -&gt; wxPageSetupDialog()</string>
		<string>wxPageSetupDialog:getPageSetupData</string>
		<string>wxPageSetupDialog:getPageSetupData(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialog:getPageSetupData(This) -&gt; wxPageSetupDialogData() (see module wxPageSetupDialogData)</string>
		<string>wxPageSetupDialog:showModal</string>
		<string>wxPageSetupDialog:showModal(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialog:showModal(This) -&gt; integer()</string>
		<string>wxPageSetupDialog:destroy</string>
		<string>wxPageSetupDialog:destroy(&lt;#This::wxPageSetupDialog()#&gt;)</string>
		<string>wxPageSetupDialog:destroy(This::wxPageSetupDialog()) -&gt; ok</string>
		<string>wxPageSetupDialogData:new</string>
		<string>wxPageSetupDialogData:new()</string>
		<string>wxPageSetupDialogData:new() -&gt; wxPageSetupDialogData()</string>
		<string>wxPageSetupDialogData:new</string>
		<string>wxPageSetupDialogData:new(&lt;#PrintData#&gt;)</string>
		<string>wxPageSetupDialogData:new(PrintData) -&gt; wxPageSetupDialogData()</string>
		<string>wxPageSetupDialogData:enableHelp</string>
		<string>wxPageSetupDialogData:enableHelp(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPageSetupDialogData:enableHelp(This, Flag) -&gt; ok</string>
		<string>wxPageSetupDialogData:enableMargins</string>
		<string>wxPageSetupDialogData:enableMargins(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPageSetupDialogData:enableMargins(This, Flag) -&gt; ok</string>
		<string>wxPageSetupDialogData:enableOrientation</string>
		<string>wxPageSetupDialogData:enableOrientation(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPageSetupDialogData:enableOrientation(This, Flag) -&gt; ok</string>
		<string>wxPageSetupDialogData:enablePaper</string>
		<string>wxPageSetupDialogData:enablePaper(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPageSetupDialogData:enablePaper(This, Flag) -&gt; ok</string>
		<string>wxPageSetupDialogData:enablePrinter</string>
		<string>wxPageSetupDialogData:enablePrinter(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPageSetupDialogData:enablePrinter(This, Flag) -&gt; ok</string>
		<string>wxPageSetupDialogData:getDefaultMinMargins</string>
		<string>wxPageSetupDialogData:getDefaultMinMargins(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getDefaultMinMargins(This) -&gt; boolean()</string>
		<string>wxPageSetupDialogData:getEnableMargins</string>
		<string>wxPageSetupDialogData:getEnableMargins(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getEnableMargins(This) -&gt; boolean()</string>
		<string>wxPageSetupDialogData:getEnableOrientation</string>
		<string>wxPageSetupDialogData:getEnableOrientation(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getEnableOrientation(This) -&gt; boolean()</string>
		<string>wxPageSetupDialogData:getEnablePaper</string>
		<string>wxPageSetupDialogData:getEnablePaper(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getEnablePaper(This) -&gt; boolean()</string>
		<string>wxPageSetupDialogData:getEnablePrinter</string>
		<string>wxPageSetupDialogData:getEnablePrinter(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getEnablePrinter(This) -&gt; boolean()</string>
		<string>wxPageSetupDialogData:getEnableHelp</string>
		<string>wxPageSetupDialogData:getEnableHelp(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getEnableHelp(This) -&gt; boolean()</string>
		<string>wxPageSetupDialogData:getDefaultInfo</string>
		<string>wxPageSetupDialogData:getDefaultInfo(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getDefaultInfo(This) -&gt; boolean()</string>
		<string>wxPageSetupDialogData:getMarginTopLeft</string>
		<string>wxPageSetupDialogData:getMarginTopLeft(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getMarginTopLeft(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxPageSetupDialogData:getMarginBottomRight</string>
		<string>wxPageSetupDialogData:getMarginBottomRight(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getMarginBottomRight(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxPageSetupDialogData:getMinMarginTopLeft</string>
		<string>wxPageSetupDialogData:getMinMarginTopLeft(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getMinMarginTopLeft(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxPageSetupDialogData:getMinMarginBottomRight</string>
		<string>wxPageSetupDialogData:getMinMarginBottomRight(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getMinMarginBottomRight(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxPageSetupDialogData:getPaperId</string>
		<string>wxPageSetupDialogData:getPaperId(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getPaperId(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxPageSetupDialogData:getPaperSize</string>
		<string>wxPageSetupDialogData:getPaperSize(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getPaperSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxPageSetupDialogData:getPrintData</string>
		<string>wxPageSetupDialogData:getPrintData(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:getPrintData(This) -&gt; wxPrintData() (see module wxPrintData)</string>
		<string>wxPageSetupDialogData:isOk</string>
		<string>wxPageSetupDialogData:isOk(&lt;#This#&gt;)</string>
		<string>wxPageSetupDialogData:isOk(This) -&gt; boolean()</string>
		<string>wxPageSetupDialogData:setDefaultInfo</string>
		<string>wxPageSetupDialogData:setDefaultInfo(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPageSetupDialogData:setDefaultInfo(This, Flag) -&gt; ok</string>
		<string>wxPageSetupDialogData:setDefaultMinMargins</string>
		<string>wxPageSetupDialogData:setDefaultMinMargins(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPageSetupDialogData:setDefaultMinMargins(This, Flag) -&gt; ok</string>
		<string>wxPageSetupDialogData:setMarginTopLeft</string>
		<string>wxPageSetupDialogData:setMarginTopLeft(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxPageSetupDialogData:setMarginTopLeft(This, Pt) -&gt; ok</string>
		<string>wxPageSetupDialogData:setMarginBottomRight</string>
		<string>wxPageSetupDialogData:setMarginBottomRight(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxPageSetupDialogData:setMarginBottomRight(This, Pt) -&gt; ok</string>
		<string>wxPageSetupDialogData:setMinMarginTopLeft</string>
		<string>wxPageSetupDialogData:setMinMarginTopLeft(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxPageSetupDialogData:setMinMarginTopLeft(This, Pt) -&gt; ok</string>
		<string>wxPageSetupDialogData:setMinMarginBottomRight</string>
		<string>wxPageSetupDialogData:setMinMarginBottomRight(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxPageSetupDialogData:setMinMarginBottomRight(This, Pt) -&gt; ok</string>
		<string>wxPageSetupDialogData:setPaperId</string>
		<string>wxPageSetupDialogData:setPaperId(&lt;#This#&gt;, &lt;#Id#&gt;)</string>
		<string>wxPageSetupDialogData:setPaperId(This, Id) -&gt; ok</string>
		<string>wxPageSetupDialogData:setPaperSize</string>
		<string>wxPageSetupDialogData:setPaperSize(&lt;#This#&gt;, &lt;#Id#&gt;)</string>
		<string>wxPageSetupDialogData:setPaperSize(This, Id) -&gt; ok</string>
		<string>wxPageSetupDialogData:setPrintData</string>
		<string>wxPageSetupDialogData:setPrintData(&lt;#This#&gt;, &lt;#PrintData#&gt;)</string>
		<string>wxPageSetupDialogData:setPrintData(This, PrintData) -&gt; ok</string>
		<string>wxPageSetupDialogData:destroy</string>
		<string>wxPageSetupDialogData:destroy(&lt;#This::wxPageSetupDialogData()#&gt;)</string>
		<string>wxPageSetupDialogData:destroy(This::wxPageSetupDialogData()) -&gt; ok</string>
		<string>wxPaintDC:new</string>
		<string>wxPaintDC:new()</string>
		<string>wxPaintDC:new() -&gt; wxPaintDC()</string>
		<string>wxPaintDC:new</string>
		<string>wxPaintDC:new(&lt;#Win#&gt;)</string>
		<string>wxPaintDC:new(Win) -&gt; wxPaintDC()</string>
		<string>wxPaintDC:destroy</string>
		<string>wxPaintDC:destroy(&lt;#This::wxPaintDC()#&gt;)</string>
		<string>wxPaintDC:destroy(This::wxPaintDC()) -&gt; ok</string>
		<string>wxPalette:new</string>
		<string>wxPalette:new()</string>
		<string>wxPalette:new() -&gt; wxPalette()</string>
		<string>wxPalette:new</string>
		<string>wxPalette:new(&lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>wxPalette:new(Red, Green, Blue) -&gt; wxPalette()</string>
		<string>wxPalette:create</string>
		<string>wxPalette:create(&lt;#This#&gt;, &lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>wxPalette:create(This, Red, Green, Blue) -&gt; boolean()</string>
		<string>wxPalette:getColoursCount</string>
		<string>wxPalette:getColoursCount(&lt;#This#&gt;)</string>
		<string>wxPalette:getColoursCount(This) -&gt; integer()</string>
		<string>wxPalette:getPixel</string>
		<string>wxPalette:getPixel(&lt;#This#&gt;, &lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>wxPalette:getPixel(This, Red, Green, Blue) -&gt; integer()</string>
		<string>wxPalette:getRGB</string>
		<string>wxPalette:getRGB(&lt;#This#&gt;, &lt;#Pixel#&gt;)</string>
		<string>wxPalette:getRGB(This, Pixel) -&gt; Result</string>
		<string>wxPalette:isOk</string>
		<string>wxPalette:isOk(&lt;#This#&gt;)</string>
		<string>wxPalette:isOk(This) -&gt; boolean()</string>
		<string>wxPalette:destroy</string>
		<string>wxPalette:destroy(&lt;#This::wxPalette()#&gt;)</string>
		<string>wxPalette:destroy(This::wxPalette()) -&gt; ok</string>
		<string>wxPaletteChangedEvent:setChangedWindow</string>
		<string>wxPaletteChangedEvent:setChangedWindow(&lt;#This#&gt;, &lt;#Win#&gt;)</string>
		<string>wxPaletteChangedEvent:setChangedWindow(This, Win) -&gt; ok</string>
		<string>wxPaletteChangedEvent:getChangedWindow</string>
		<string>wxPaletteChangedEvent:getChangedWindow(&lt;#This#&gt;)</string>
		<string>wxPaletteChangedEvent:getChangedWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxPanel:new</string>
		<string>wxPanel:new()</string>
		<string>wxPanel:new() -&gt; wxPanel()</string>
		<string>wxPanel:new</string>
		<string>wxPanel:new(&lt;#Parent#&gt;)</string>
		<string>wxPanel:new(Parent) -&gt; wxPanel()</string>
		<string>wxPanel:new</string>
		<string>wxPanel:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPanel:new(Parent, Option::[Option]) -&gt; wxPanel()</string>
		<string>wxPanel:new</string>
		<string>wxPanel:new(&lt;#Parent#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxPanel:new(Parent, X, Y, Width, Height) -&gt; wxPanel()</string>
		<string>wxPanel:new</string>
		<string>wxPanel:new(&lt;#Parent#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPanel:new(Parent, X, Y, Width, Height, Option::[Option]) -&gt; wxPanel()</string>
		<string>wxPanel:initDialog</string>
		<string>wxPanel:initDialog(&lt;#This#&gt;)</string>
		<string>wxPanel:initDialog(This) -&gt; ok</string>
		<string>wxPanel:setFocusIgnoringChildren</string>
		<string>wxPanel:setFocusIgnoringChildren(&lt;#This#&gt;)</string>
		<string>wxPanel:setFocusIgnoringChildren(This) -&gt; ok</string>
		<string>wxPanel:destroy</string>
		<string>wxPanel:destroy(&lt;#This::wxPanel()#&gt;)</string>
		<string>wxPanel:destroy(This::wxPanel()) -&gt; ok</string>
		<string>wxPasswordEntryDialog:new</string>
		<string>wxPasswordEntryDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;)</string>
		<string>wxPasswordEntryDialog:new(Parent, Message) -&gt; wxPasswordEntryDialog()</string>
		<string>wxPasswordEntryDialog:new</string>
		<string>wxPasswordEntryDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPasswordEntryDialog:new(Parent, Message, Option::[Option]) -&gt; wxPasswordEntryDialog()</string>
		<string>wxPasswordEntryDialog:destroy</string>
		<string>wxPasswordEntryDialog:destroy(&lt;#This::wxPasswordEntryDialog()#&gt;)</string>
		<string>wxPasswordEntryDialog:destroy(This::wxPasswordEntryDialog()) -&gt; ok</string>
		<string>wxPen:new</string>
		<string>wxPen:new()</string>
		<string>wxPen:new() -&gt; wxPen()</string>
		<string>wxPen:new</string>
		<string>wxPen:new(&lt;#Colour#&gt;)</string>
		<string>wxPen:new(Colour) -&gt; wxPen()</string>
		<string>wxPen:new</string>
		<string>wxPen:new(&lt;#Colour#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPen:new(Colour, Option::[Option]) -&gt; wxPen()</string>
		<string>wxPen:getCap</string>
		<string>wxPen:getCap(&lt;#This#&gt;)</string>
		<string>wxPen:getCap(This) -&gt; integer()</string>
		<string>wxPen:getColour</string>
		<string>wxPen:getColour(&lt;#This#&gt;)</string>
		<string>wxPen:getColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxPen:getJoin</string>
		<string>wxPen:getJoin(&lt;#This#&gt;)</string>
		<string>wxPen:getJoin(This) -&gt; integer()</string>
		<string>wxPen:getStyle</string>
		<string>wxPen:getStyle(&lt;#This#&gt;)</string>
		<string>wxPen:getStyle(This) -&gt; integer()</string>
		<string>wxPen:getWidth</string>
		<string>wxPen:getWidth(&lt;#This#&gt;)</string>
		<string>wxPen:getWidth(This) -&gt; integer()</string>
		<string>wxPen:isOk</string>
		<string>wxPen:isOk(&lt;#This#&gt;)</string>
		<string>wxPen:isOk(This) -&gt; boolean()</string>
		<string>wxPen:setCap</string>
		<string>wxPen:setCap(&lt;#This#&gt;, &lt;#CapStyle#&gt;)</string>
		<string>wxPen:setCap(This, CapStyle) -&gt; ok</string>
		<string>wxPen:setColour</string>
		<string>wxPen:setColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxPen:setColour(This, Colour) -&gt; ok</string>
		<string>wxPen:setColour</string>
		<string>wxPen:setColour(&lt;#This#&gt;, &lt;#Red#&gt;, &lt;#Green#&gt;, &lt;#Blue#&gt;)</string>
		<string>wxPen:setColour(This, Red, Green, Blue) -&gt; ok</string>
		<string>wxPen:setJoin</string>
		<string>wxPen:setJoin(&lt;#This#&gt;, &lt;#JoinStyle#&gt;)</string>
		<string>wxPen:setJoin(This, JoinStyle) -&gt; ok</string>
		<string>wxPen:setStyle</string>
		<string>wxPen:setStyle(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxPen:setStyle(This, Style) -&gt; ok</string>
		<string>wxPen:setWidth</string>
		<string>wxPen:setWidth(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxPen:setWidth(This, Width) -&gt; ok</string>
		<string>wxPen:destroy</string>
		<string>wxPen:destroy(&lt;#This::wxPen()#&gt;)</string>
		<string>wxPen:destroy(This::wxPen()) -&gt; ok</string>
		<string>wxPickerBase:setInternalMargin</string>
		<string>wxPickerBase:setInternalMargin(&lt;#This#&gt;, &lt;#Newmargin#&gt;)</string>
		<string>wxPickerBase:setInternalMargin(This, Newmargin) -&gt; ok</string>
		<string>wxPickerBase:getInternalMargin</string>
		<string>wxPickerBase:getInternalMargin(&lt;#This#&gt;)</string>
		<string>wxPickerBase:getInternalMargin(This) -&gt; integer()</string>
		<string>wxPickerBase:setTextCtrlProportion</string>
		<string>wxPickerBase:setTextCtrlProportion(&lt;#This#&gt;, &lt;#Prop#&gt;)</string>
		<string>wxPickerBase:setTextCtrlProportion(This, Prop) -&gt; ok</string>
		<string>wxPickerBase:setPickerCtrlProportion</string>
		<string>wxPickerBase:setPickerCtrlProportion(&lt;#This#&gt;, &lt;#Prop#&gt;)</string>
		<string>wxPickerBase:setPickerCtrlProportion(This, Prop) -&gt; ok</string>
		<string>wxPickerBase:getTextCtrlProportion</string>
		<string>wxPickerBase:getTextCtrlProportion(&lt;#This#&gt;)</string>
		<string>wxPickerBase:getTextCtrlProportion(This) -&gt; integer()</string>
		<string>wxPickerBase:getPickerCtrlProportion</string>
		<string>wxPickerBase:getPickerCtrlProportion(&lt;#This#&gt;)</string>
		<string>wxPickerBase:getPickerCtrlProportion(This) -&gt; integer()</string>
		<string>wxPickerBase:hasTextCtrl</string>
		<string>wxPickerBase:hasTextCtrl(&lt;#This#&gt;)</string>
		<string>wxPickerBase:hasTextCtrl(This) -&gt; boolean()</string>
		<string>wxPickerBase:getTextCtrl</string>
		<string>wxPickerBase:getTextCtrl(&lt;#This#&gt;)</string>
		<string>wxPickerBase:getTextCtrl(This) -&gt; wxTextCtrl() (see module wxTextCtrl)</string>
		<string>wxPickerBase:isTextCtrlGrowable</string>
		<string>wxPickerBase:isTextCtrlGrowable(&lt;#This#&gt;)</string>
		<string>wxPickerBase:isTextCtrlGrowable(This) -&gt; boolean()</string>
		<string>wxPickerBase:setPickerCtrlGrowable</string>
		<string>wxPickerBase:setPickerCtrlGrowable(&lt;#This#&gt;)</string>
		<string>wxPickerBase:setPickerCtrlGrowable(This) -&gt; ok</string>
		<string>wxPickerBase:setPickerCtrlGrowable</string>
		<string>wxPickerBase:setPickerCtrlGrowable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPickerBase:setPickerCtrlGrowable(This, Option::[Option]) -&gt; ok</string>
		<string>wxPickerBase:setTextCtrlGrowable</string>
		<string>wxPickerBase:setTextCtrlGrowable(&lt;#This#&gt;)</string>
		<string>wxPickerBase:setTextCtrlGrowable(This) -&gt; ok</string>
		<string>wxPickerBase:setTextCtrlGrowable</string>
		<string>wxPickerBase:setTextCtrlGrowable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPickerBase:setTextCtrlGrowable(This, Option::[Option]) -&gt; ok</string>
		<string>wxPickerBase:isPickerCtrlGrowable</string>
		<string>wxPickerBase:isPickerCtrlGrowable(&lt;#This#&gt;)</string>
		<string>wxPickerBase:isPickerCtrlGrowable(This) -&gt; boolean()</string>
		<string>wxPopupTransientWindow:new</string>
		<string>wxPopupTransientWindow:new()</string>
		<string>wxPopupTransientWindow:new() -&gt; wxPopupTransientWindow()</string>
		<string>wxPopupTransientWindow:new</string>
		<string>wxPopupTransientWindow:new(&lt;#Parent#&gt;)</string>
		<string>wxPopupTransientWindow:new(Parent) -&gt; wxPopupTransientWindow()</string>
		<string>wxPopupTransientWindow:new</string>
		<string>wxPopupTransientWindow:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPopupTransientWindow:new(Parent, Option::[Option]) -&gt; wxPopupTransientWindow()</string>
		<string>wxPopupTransientWindow:popup</string>
		<string>wxPopupTransientWindow:popup(&lt;#This#&gt;)</string>
		<string>wxPopupTransientWindow:popup(This) -&gt; ok</string>
		<string>wxPopupTransientWindow:popup</string>
		<string>wxPopupTransientWindow:popup(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPopupTransientWindow:popup(This, Option::[Option]) -&gt; ok</string>
		<string>wxPopupTransientWindow:dismiss</string>
		<string>wxPopupTransientWindow:dismiss(&lt;#This#&gt;)</string>
		<string>wxPopupTransientWindow:dismiss(This) -&gt; ok</string>
		<string>wxPopupTransientWindow:destroy</string>
		<string>wxPopupTransientWindow:destroy(&lt;#This::wxPopupTransientWindow()#&gt;)</string>
		<string>wxPopupTransientWindow:destroy(This::wxPopupTransientWindow()) -&gt; ok</string>
		<string>wxPopupWindow:new</string>
		<string>wxPopupWindow:new()</string>
		<string>wxPopupWindow:new() -&gt; wxPopupWindow()</string>
		<string>wxPopupWindow:new</string>
		<string>wxPopupWindow:new(&lt;#Parent#&gt;)</string>
		<string>wxPopupWindow:new(Parent) -&gt; wxPopupWindow()</string>
		<string>wxPopupWindow:new</string>
		<string>wxPopupWindow:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPopupWindow:new(Parent, Option::[Option]) -&gt; wxPopupWindow()</string>
		<string>wxPopupWindow:create</string>
		<string>wxPopupWindow:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxPopupWindow:create(This, Parent) -&gt; boolean()</string>
		<string>wxPopupWindow:create</string>
		<string>wxPopupWindow:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPopupWindow:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxPopupWindow:position</string>
		<string>wxPopupWindow:position(&lt;#This#&gt;, &lt;#PtOrigin#&gt;, &lt;#Size#&gt;)</string>
		<string>wxPopupWindow:position(This, PtOrigin, Size) -&gt; ok</string>
		<string>wxPopupWindow:destroy</string>
		<string>wxPopupWindow:destroy(&lt;#This::wxPopupWindow()#&gt;)</string>
		<string>wxPopupWindow:destroy(This::wxPopupWindow()) -&gt; ok</string>
		<string>wxPostScriptDC:new</string>
		<string>wxPostScriptDC:new()</string>
		<string>wxPostScriptDC:new() -&gt; wxPostScriptDC()</string>
		<string>wxPostScriptDC:new</string>
		<string>wxPostScriptDC:new(&lt;#PrintData#&gt;)</string>
		<string>wxPostScriptDC:new(PrintData) -&gt; wxPostScriptDC()</string>
		<string>wxPostScriptDC:setResolution</string>
		<string>wxPostScriptDC:setResolution(&lt;#Ppi#&gt;)</string>
		<string>wxPostScriptDC:setResolution(Ppi) -&gt; ok</string>
		<string>wxPostScriptDC:getResolution</string>
		<string>wxPostScriptDC:getResolution()</string>
		<string>wxPostScriptDC:getResolution() -&gt; integer()</string>
		<string>wxPostScriptDC:destroy</string>
		<string>wxPostScriptDC:destroy(&lt;#This::wxPostScriptDC()#&gt;)</string>
		<string>wxPostScriptDC:destroy(This::wxPostScriptDC()) -&gt; ok</string>
		<string>wxPreviewControlBar:new</string>
		<string>wxPreviewControlBar:new(&lt;#Preview#&gt;, &lt;#Buttons#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxPreviewControlBar:new(Preview, Buttons, Parent) -&gt; wxPreviewControlBar()</string>
		<string>wxPreviewControlBar:new</string>
		<string>wxPreviewControlBar:new(&lt;#Preview#&gt;, &lt;#Buttons#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPreviewControlBar:new(Preview, Buttons, Parent, Option::[Option]) -&gt; wxPreviewControlBar()</string>
		<string>wxPreviewControlBar:createButtons</string>
		<string>wxPreviewControlBar:createButtons(&lt;#This#&gt;)</string>
		<string>wxPreviewControlBar:createButtons(This) -&gt; ok</string>
		<string>wxPreviewControlBar:getPrintPreview</string>
		<string>wxPreviewControlBar:getPrintPreview(&lt;#This#&gt;)</string>
		<string>wxPreviewControlBar:getPrintPreview(This) -&gt; wxPrintPreview() (see module wxPrintPreview)</string>
		<string>wxPreviewControlBar:getZoomControl</string>
		<string>wxPreviewControlBar:getZoomControl(&lt;#This#&gt;)</string>
		<string>wxPreviewControlBar:getZoomControl(This) -&gt; integer()</string>
		<string>wxPreviewControlBar:setZoomControl</string>
		<string>wxPreviewControlBar:setZoomControl(&lt;#This#&gt;, &lt;#Zoom#&gt;)</string>
		<string>wxPreviewControlBar:setZoomControl(This, Zoom) -&gt; ok</string>
		<string>wxPreviewControlBar:destroy</string>
		<string>wxPreviewControlBar:destroy(&lt;#This::wxPreviewControlBar()#&gt;)</string>
		<string>wxPreviewControlBar:destroy(This::wxPreviewControlBar()) -&gt; ok</string>
		<string>wxPreviewFrame:new</string>
		<string>wxPreviewFrame:new(&lt;#Preview#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxPreviewFrame:new(Preview, Parent) -&gt; wxPreviewFrame()</string>
		<string>wxPreviewFrame:new</string>
		<string>wxPreviewFrame:new(&lt;#Preview#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPreviewFrame:new(Preview, Parent, Option::[Option]) -&gt; wxPreviewFrame()</string>
		<string>wxPreviewFrame:createControlBar</string>
		<string>wxPreviewFrame:createControlBar(&lt;#This#&gt;)</string>
		<string>wxPreviewFrame:createControlBar(This) -&gt; ok</string>
		<string>wxPreviewFrame:createCanvas</string>
		<string>wxPreviewFrame:createCanvas(&lt;#This#&gt;)</string>
		<string>wxPreviewFrame:createCanvas(This) -&gt; ok</string>
		<string>wxPreviewFrame:initialize</string>
		<string>wxPreviewFrame:initialize(&lt;#This#&gt;)</string>
		<string>wxPreviewFrame:initialize(This) -&gt; ok</string>
		<string>wxPreviewFrame:onCloseWindow</string>
		<string>wxPreviewFrame:onCloseWindow(&lt;#This#&gt;, &lt;#Event#&gt;)</string>
		<string>wxPreviewFrame:onCloseWindow(This, Event) -&gt; ok</string>
		<string>wxPreviewFrame:destroy</string>
		<string>wxPreviewFrame:destroy(&lt;#This::wxPreviewFrame()#&gt;)</string>
		<string>wxPreviewFrame:destroy(This::wxPreviewFrame()) -&gt; ok</string>
		<string>wxPrintData:new</string>
		<string>wxPrintData:new()</string>
		<string>wxPrintData:new() -&gt; wxPrintData()</string>
		<string>wxPrintData:new</string>
		<string>wxPrintData:new(&lt;#PrintData#&gt;)</string>
		<string>wxPrintData:new(PrintData) -&gt; wxPrintData()</string>
		<string>wxPrintData:getCollate</string>
		<string>wxPrintData:getCollate(&lt;#This#&gt;)</string>
		<string>wxPrintData:getCollate(This) -&gt; boolean()</string>
		<string>wxPrintData:getBin</string>
		<string>wxPrintData:getBin(&lt;#This#&gt;)</string>
		<string>wxPrintData:getBin(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxPrintData:getColour</string>
		<string>wxPrintData:getColour(&lt;#This#&gt;)</string>
		<string>wxPrintData:getColour(This) -&gt; boolean()</string>
		<string>wxPrintData:getDuplex</string>
		<string>wxPrintData:getDuplex(&lt;#This#&gt;)</string>
		<string>wxPrintData:getDuplex(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxPrintData:getNoCopies</string>
		<string>wxPrintData:getNoCopies(&lt;#This#&gt;)</string>
		<string>wxPrintData:getNoCopies(This) -&gt; integer()</string>
		<string>wxPrintData:getOrientation</string>
		<string>wxPrintData:getOrientation(&lt;#This#&gt;)</string>
		<string>wxPrintData:getOrientation(This) -&gt; integer()</string>
		<string>wxPrintData:getPaperId</string>
		<string>wxPrintData:getPaperId(&lt;#This#&gt;)</string>
		<string>wxPrintData:getPaperId(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxPrintData:getPrinterName</string>
		<string>wxPrintData:getPrinterName(&lt;#This#&gt;)</string>
		<string>wxPrintData:getPrinterName(This) -&gt; charlist() (see module unicode)</string>
		<string>wxPrintData:getQuality</string>
		<string>wxPrintData:getQuality(&lt;#This#&gt;)</string>
		<string>wxPrintData:getQuality(This) -&gt; integer()</string>
		<string>wxPrintData:isOk</string>
		<string>wxPrintData:isOk(&lt;#This#&gt;)</string>
		<string>wxPrintData:isOk(This) -&gt; boolean()</string>
		<string>wxPrintData:setBin</string>
		<string>wxPrintData:setBin(&lt;#This#&gt;, &lt;#Bin#&gt;)</string>
		<string>wxPrintData:setBin(This, Bin) -&gt; ok</string>
		<string>wxPrintData:setCollate</string>
		<string>wxPrintData:setCollate(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPrintData:setCollate(This, Flag) -&gt; ok</string>
		<string>wxPrintData:setColour</string>
		<string>wxPrintData:setColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxPrintData:setColour(This, Colour) -&gt; ok</string>
		<string>wxPrintData:setDuplex</string>
		<string>wxPrintData:setDuplex(&lt;#This#&gt;, &lt;#Duplex#&gt;)</string>
		<string>wxPrintData:setDuplex(This, Duplex) -&gt; ok</string>
		<string>wxPrintData:setNoCopies</string>
		<string>wxPrintData:setNoCopies(&lt;#This#&gt;, &lt;#V#&gt;)</string>
		<string>wxPrintData:setNoCopies(This, V) -&gt; ok</string>
		<string>wxPrintData:setOrientation</string>
		<string>wxPrintData:setOrientation(&lt;#This#&gt;, &lt;#Orient#&gt;)</string>
		<string>wxPrintData:setOrientation(This, Orient) -&gt; ok</string>
		<string>wxPrintData:setPaperId</string>
		<string>wxPrintData:setPaperId(&lt;#This#&gt;, &lt;#SizeId#&gt;)</string>
		<string>wxPrintData:setPaperId(This, SizeId) -&gt; ok</string>
		<string>wxPrintData:setPrinterName</string>
		<string>wxPrintData:setPrinterName(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxPrintData:setPrinterName(This, Name) -&gt; ok</string>
		<string>wxPrintData:setQuality</string>
		<string>wxPrintData:setQuality(&lt;#This#&gt;, &lt;#Quality#&gt;)</string>
		<string>wxPrintData:setQuality(This, Quality) -&gt; ok</string>
		<string>wxPrintData:destroy</string>
		<string>wxPrintData:destroy(&lt;#This::wxPrintData()#&gt;)</string>
		<string>wxPrintData:destroy(This::wxPrintData()) -&gt; ok</string>
		<string>wxPrintDialog:new</string>
		<string>wxPrintDialog:new(&lt;#Parent#&gt;)</string>
		<string>wxPrintDialog:new(Parent) -&gt; wxPrintDialog()</string>
		<string>wxPrintDialog:new</string>
		<string>wxPrintDialog:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPrintDialog:new(Parent, Option::[Option]) -&gt; wxPrintDialog()</string>
		<string>wxPrintDialog:getPrintDialogData</string>
		<string>wxPrintDialog:getPrintDialogData(&lt;#This#&gt;)</string>
		<string>wxPrintDialog:getPrintDialogData(This) -&gt; wxPrintDialogData() (see module wxPrintDialogData)</string>
		<string>wxPrintDialog:getPrintDC</string>
		<string>wxPrintDialog:getPrintDC(&lt;#This#&gt;)</string>
		<string>wxPrintDialog:getPrintDC(This) -&gt; wxDC() (see module wxDC)</string>
		<string>wxPrintDialog:destroy</string>
		<string>wxPrintDialog:destroy(&lt;#This::wxPrintDialog()#&gt;)</string>
		<string>wxPrintDialog:destroy(This::wxPrintDialog()) -&gt; ok</string>
		<string>wxPrintDialogData:new</string>
		<string>wxPrintDialogData:new()</string>
		<string>wxPrintDialogData:new() -&gt; wxPrintDialogData()</string>
		<string>wxPrintDialogData:new</string>
		<string>wxPrintDialogData:new(&lt;#DialogData#&gt;)</string>
		<string>wxPrintDialogData:new(DialogData) -&gt; wxPrintDialogData()</string>
		<string>wxPrintDialogData:enableHelp</string>
		<string>wxPrintDialogData:enableHelp(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPrintDialogData:enableHelp(This, Flag) -&gt; ok</string>
		<string>wxPrintDialogData:enablePageNumbers</string>
		<string>wxPrintDialogData:enablePageNumbers(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPrintDialogData:enablePageNumbers(This, Flag) -&gt; ok</string>
		<string>wxPrintDialogData:enablePrintToFile</string>
		<string>wxPrintDialogData:enablePrintToFile(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPrintDialogData:enablePrintToFile(This, Flag) -&gt; ok</string>
		<string>wxPrintDialogData:enableSelection</string>
		<string>wxPrintDialogData:enableSelection(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPrintDialogData:enableSelection(This, Flag) -&gt; ok</string>
		<string>wxPrintDialogData:getAllPages</string>
		<string>wxPrintDialogData:getAllPages(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getAllPages(This) -&gt; boolean()</string>
		<string>wxPrintDialogData:getCollate</string>
		<string>wxPrintDialogData:getCollate(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getCollate(This) -&gt; boolean()</string>
		<string>wxPrintDialogData:getFromPage</string>
		<string>wxPrintDialogData:getFromPage(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getFromPage(This) -&gt; integer()</string>
		<string>wxPrintDialogData:getMaxPage</string>
		<string>wxPrintDialogData:getMaxPage(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getMaxPage(This) -&gt; integer()</string>
		<string>wxPrintDialogData:getMinPage</string>
		<string>wxPrintDialogData:getMinPage(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getMinPage(This) -&gt; integer()</string>
		<string>wxPrintDialogData:getNoCopies</string>
		<string>wxPrintDialogData:getNoCopies(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getNoCopies(This) -&gt; integer()</string>
		<string>wxPrintDialogData:getPrintData</string>
		<string>wxPrintDialogData:getPrintData(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getPrintData(This) -&gt; wxPrintData() (see module wxPrintData)</string>
		<string>wxPrintDialogData:getPrintToFile</string>
		<string>wxPrintDialogData:getPrintToFile(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getPrintToFile(This) -&gt; boolean()</string>
		<string>wxPrintDialogData:getSelection</string>
		<string>wxPrintDialogData:getSelection(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getSelection(This) -&gt; boolean()</string>
		<string>wxPrintDialogData:getToPage</string>
		<string>wxPrintDialogData:getToPage(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:getToPage(This) -&gt; integer()</string>
		<string>wxPrintDialogData:isOk</string>
		<string>wxPrintDialogData:isOk(&lt;#This#&gt;)</string>
		<string>wxPrintDialogData:isOk(This) -&gt; boolean()</string>
		<string>wxPrintDialogData:setCollate</string>
		<string>wxPrintDialogData:setCollate(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPrintDialogData:setCollate(This, Flag) -&gt; ok</string>
		<string>wxPrintDialogData:setFromPage</string>
		<string>wxPrintDialogData:setFromPage(&lt;#This#&gt;, &lt;#V#&gt;)</string>
		<string>wxPrintDialogData:setFromPage(This, V) -&gt; ok</string>
		<string>wxPrintDialogData:setMaxPage</string>
		<string>wxPrintDialogData:setMaxPage(&lt;#This#&gt;, &lt;#V#&gt;)</string>
		<string>wxPrintDialogData:setMaxPage(This, V) -&gt; ok</string>
		<string>wxPrintDialogData:setMinPage</string>
		<string>wxPrintDialogData:setMinPage(&lt;#This#&gt;, &lt;#V#&gt;)</string>
		<string>wxPrintDialogData:setMinPage(This, V) -&gt; ok</string>
		<string>wxPrintDialogData:setNoCopies</string>
		<string>wxPrintDialogData:setNoCopies(&lt;#This#&gt;, &lt;#V#&gt;)</string>
		<string>wxPrintDialogData:setNoCopies(This, V) -&gt; ok</string>
		<string>wxPrintDialogData:setPrintData</string>
		<string>wxPrintDialogData:setPrintData(&lt;#This#&gt;, &lt;#PrintData#&gt;)</string>
		<string>wxPrintDialogData:setPrintData(This, PrintData) -&gt; ok</string>
		<string>wxPrintDialogData:setPrintToFile</string>
		<string>wxPrintDialogData:setPrintToFile(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPrintDialogData:setPrintToFile(This, Flag) -&gt; ok</string>
		<string>wxPrintDialogData:setSelection</string>
		<string>wxPrintDialogData:setSelection(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxPrintDialogData:setSelection(This, Flag) -&gt; ok</string>
		<string>wxPrintDialogData:setToPage</string>
		<string>wxPrintDialogData:setToPage(&lt;#This#&gt;, &lt;#V#&gt;)</string>
		<string>wxPrintDialogData:setToPage(This, V) -&gt; ok</string>
		<string>wxPrintDialogData:destroy</string>
		<string>wxPrintDialogData:destroy(&lt;#This::wxPrintDialogData()#&gt;)</string>
		<string>wxPrintDialogData:destroy(This::wxPrintDialogData()) -&gt; ok</string>
		<string>wxPrinter:new</string>
		<string>wxPrinter:new()</string>
		<string>wxPrinter:new() -&gt; wxPrinter()</string>
		<string>wxPrinter:new</string>
		<string>wxPrinter:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxPrinter:new(Option::[Option]) -&gt; wxPrinter()</string>
		<string>wxPrinter:createAbortWindow</string>
		<string>wxPrinter:createAbortWindow(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Printout#&gt;)</string>
		<string>wxPrinter:createAbortWindow(This, Parent, Printout) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxPrinter:getAbort</string>
		<string>wxPrinter:getAbort(&lt;#This#&gt;)</string>
		<string>wxPrinter:getAbort(This) -&gt; boolean()</string>
		<string>wxPrinter:getLastError</string>
		<string>wxPrinter:getLastError()</string>
		<string>wxPrinter:getLastError() -&gt; wx_enum() (see module wx)</string>
		<string>wxPrinter:getPrintDialogData</string>
		<string>wxPrinter:getPrintDialogData(&lt;#This#&gt;)</string>
		<string>wxPrinter:getPrintDialogData(This) -&gt; wxPrintDialogData() (see module wxPrintDialogData)</string>
		<string>wxPrinter:print</string>
		<string>wxPrinter:print(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Printout#&gt;)</string>
		<string>wxPrinter:print(This, Parent, Printout) -&gt; boolean()</string>
		<string>wxPrinter:print</string>
		<string>wxPrinter:print(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Printout#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPrinter:print(This, Parent, Printout, Option::[Option]) -&gt; boolean()</string>
		<string>wxPrinter:printDialog</string>
		<string>wxPrinter:printDialog(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxPrinter:printDialog(This, Parent) -&gt; wxDC() (see module wxDC)</string>
		<string>wxPrinter:reportError</string>
		<string>wxPrinter:reportError(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Printout#&gt;, &lt;#Message#&gt;)</string>
		<string>wxPrinter:reportError(This, Parent, Printout, Message) -&gt; ok</string>
		<string>wxPrinter:setup</string>
		<string>wxPrinter:setup(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxPrinter:setup(This, Parent) -&gt; boolean()</string>
		<string>wxPrinter:destroy</string>
		<string>wxPrinter:destroy(&lt;#This::wxPrinter()#&gt;)</string>
		<string>wxPrinter:destroy(This::wxPrinter()) -&gt; ok</string>
		<string>wxPrintout:new</string>
		<string>wxPrintout:new(&lt;#Title::string()#&gt;, &lt;#OnPrintPage::function()#&gt;)</string>
		<string>wxPrintout:new(Title::string(), OnPrintPage::function()) -&gt; wxPrintout() (see module wxPrintout)</string>
		<string>wxPrintout:new</string>
		<string>wxPrintout:new(&lt;#Title::string()#&gt;, &lt;#OnPrintPage::function()#&gt;, &lt;#Opts::[Option]#&gt;)</string>
		<string>wxPrintout:new(Title::string(), OnPrintPage::function(), Opts::[Option]) -&gt; wxPrintout() (see module wxPrintout)</string>
		<string>wxPrintout:getDC</string>
		<string>wxPrintout:getDC(&lt;#This#&gt;)</string>
		<string>wxPrintout:getDC(This) -&gt; wxDC() (see module wxDC)</string>
		<string>wxPrintout:getPageSizeMM</string>
		<string>wxPrintout:getPageSizeMM(&lt;#This#&gt;)</string>
		<string>wxPrintout:getPageSizeMM(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxPrintout:getPageSizePixels</string>
		<string>wxPrintout:getPageSizePixels(&lt;#This#&gt;)</string>
		<string>wxPrintout:getPageSizePixels(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxPrintout:getPaperRectPixels</string>
		<string>wxPrintout:getPaperRectPixels(&lt;#This#&gt;)</string>
		<string>wxPrintout:getPaperRectPixels(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxPrintout:getPPIPrinter</string>
		<string>wxPrintout:getPPIPrinter(&lt;#This#&gt;)</string>
		<string>wxPrintout:getPPIPrinter(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxPrintout:getPPIScreen</string>
		<string>wxPrintout:getPPIScreen(&lt;#This#&gt;)</string>
		<string>wxPrintout:getPPIScreen(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxPrintout:getTitle</string>
		<string>wxPrintout:getTitle(&lt;#This#&gt;)</string>
		<string>wxPrintout:getTitle(This) -&gt; charlist() (see module unicode)</string>
		<string>wxPrintout:isPreview</string>
		<string>wxPrintout:isPreview(&lt;#This#&gt;)</string>
		<string>wxPrintout:isPreview(This) -&gt; boolean()</string>
		<string>wxPrintout:fitThisSizeToPaper</string>
		<string>wxPrintout:fitThisSizeToPaper(&lt;#This#&gt;, &lt;#ImageSize#&gt;)</string>
		<string>wxPrintout:fitThisSizeToPaper(This, ImageSize) -&gt; ok</string>
		<string>wxPrintout:fitThisSizeToPage</string>
		<string>wxPrintout:fitThisSizeToPage(&lt;#This#&gt;, &lt;#ImageSize#&gt;)</string>
		<string>wxPrintout:fitThisSizeToPage(This, ImageSize) -&gt; ok</string>
		<string>wxPrintout:fitThisSizeToPageMargins</string>
		<string>wxPrintout:fitThisSizeToPageMargins(&lt;#This#&gt;, &lt;#ImageSize#&gt;, &lt;#PageSetupData#&gt;)</string>
		<string>wxPrintout:fitThisSizeToPageMargins(This, ImageSize, PageSetupData) -&gt; ok</string>
		<string>wxPrintout:mapScreenSizeToPaper</string>
		<string>wxPrintout:mapScreenSizeToPaper(&lt;#This#&gt;)</string>
		<string>wxPrintout:mapScreenSizeToPaper(This) -&gt; ok</string>
		<string>wxPrintout:mapScreenSizeToPage</string>
		<string>wxPrintout:mapScreenSizeToPage(&lt;#This#&gt;)</string>
		<string>wxPrintout:mapScreenSizeToPage(This) -&gt; ok</string>
		<string>wxPrintout:mapScreenSizeToPageMargins</string>
		<string>wxPrintout:mapScreenSizeToPageMargins(&lt;#This#&gt;, &lt;#PageSetupData#&gt;)</string>
		<string>wxPrintout:mapScreenSizeToPageMargins(This, PageSetupData) -&gt; ok</string>
		<string>wxPrintout:mapScreenSizeToDevice</string>
		<string>wxPrintout:mapScreenSizeToDevice(&lt;#This#&gt;)</string>
		<string>wxPrintout:mapScreenSizeToDevice(This) -&gt; ok</string>
		<string>wxPrintout:getLogicalPaperRect</string>
		<string>wxPrintout:getLogicalPaperRect(&lt;#This#&gt;)</string>
		<string>wxPrintout:getLogicalPaperRect(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxPrintout:getLogicalPageRect</string>
		<string>wxPrintout:getLogicalPageRect(&lt;#This#&gt;)</string>
		<string>wxPrintout:getLogicalPageRect(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxPrintout:getLogicalPageMarginsRect</string>
		<string>wxPrintout:getLogicalPageMarginsRect(&lt;#This#&gt;, &lt;#PageSetupData#&gt;)</string>
		<string>wxPrintout:getLogicalPageMarginsRect(This, PageSetupData) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxPrintout:setLogicalOrigin</string>
		<string>wxPrintout:setLogicalOrigin(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxPrintout:setLogicalOrigin(This, X, Y) -&gt; ok</string>
		<string>wxPrintout:offsetLogicalOrigin</string>
		<string>wxPrintout:offsetLogicalOrigin(&lt;#This#&gt;, &lt;#Xoff#&gt;, &lt;#Yoff#&gt;)</string>
		<string>wxPrintout:offsetLogicalOrigin(This, Xoff, Yoff) -&gt; ok</string>
		<string>wxPrintout:destroy</string>
		<string>wxPrintout:destroy(&lt;#This::wxPrintout()#&gt;)</string>
		<string>wxPrintout:destroy(This::wxPrintout()) -&gt; ok</string>
		<string>wxPrintPreview:new</string>
		<string>wxPrintPreview:new(&lt;#Printout#&gt;)</string>
		<string>wxPrintPreview:new(Printout) -&gt; wxPrintPreview()</string>
		<string>wxPrintPreview:new</string>
		<string>wxPrintPreview:new(&lt;#Printout#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxPrintPreview:new(Printout, Option::[Option]) -&gt; wxPrintPreview()</string>
		<string>wxPrintPreview:new</string>
		<string>wxPrintPreview:new(&lt;#Printout#&gt;, &lt;#PrintoutForPrinting#&gt;, &lt;#Data#&gt;)</string>
		<string>wxPrintPreview:new(Printout, PrintoutForPrinting, Data) -&gt; wxPrintPreview()</string>
		<string>wxPrintPreview:getCanvas</string>
		<string>wxPrintPreview:getCanvas(&lt;#This#&gt;)</string>
		<string>wxPrintPreview:getCanvas(This) -&gt; wxPreviewCanvas() (see module wxPreviewCanvas)</string>
		<string>wxPrintPreview:getCurrentPage</string>
		<string>wxPrintPreview:getCurrentPage(&lt;#This#&gt;)</string>
		<string>wxPrintPreview:getCurrentPage(This) -&gt; integer()</string>
		<string>wxPrintPreview:getFrame</string>
		<string>wxPrintPreview:getFrame(&lt;#This#&gt;)</string>
		<string>wxPrintPreview:getFrame(This) -&gt; wxFrame() (see module wxFrame)</string>
		<string>wxPrintPreview:getMaxPage</string>
		<string>wxPrintPreview:getMaxPage(&lt;#This#&gt;)</string>
		<string>wxPrintPreview:getMaxPage(This) -&gt; integer()</string>
		<string>wxPrintPreview:getMinPage</string>
		<string>wxPrintPreview:getMinPage(&lt;#This#&gt;)</string>
		<string>wxPrintPreview:getMinPage(This) -&gt; integer()</string>
		<string>wxPrintPreview:getPrintout</string>
		<string>wxPrintPreview:getPrintout(&lt;#This#&gt;)</string>
		<string>wxPrintPreview:getPrintout(This) -&gt; wxPrintout() (see module wxPrintout)</string>
		<string>wxPrintPreview:getPrintoutForPrinting</string>
		<string>wxPrintPreview:getPrintoutForPrinting(&lt;#This#&gt;)</string>
		<string>wxPrintPreview:getPrintoutForPrinting(This) -&gt; wxPrintout() (see module wxPrintout)</string>
		<string>wxPrintPreview:isOk</string>
		<string>wxPrintPreview:isOk(&lt;#This#&gt;)</string>
		<string>wxPrintPreview:isOk(This) -&gt; boolean()</string>
		<string>wxPrintPreview:paintPage</string>
		<string>wxPrintPreview:paintPage(&lt;#This#&gt;, &lt;#Canvas#&gt;, &lt;#Dc#&gt;)</string>
		<string>wxPrintPreview:paintPage(This, Canvas, Dc) -&gt; boolean()</string>
		<string>wxPrintPreview:print</string>
		<string>wxPrintPreview:print(&lt;#This#&gt;, &lt;#Interactive#&gt;)</string>
		<string>wxPrintPreview:print(This, Interactive) -&gt; boolean()</string>
		<string>wxPrintPreview:renderPage</string>
		<string>wxPrintPreview:renderPage(&lt;#This#&gt;, &lt;#PageNum#&gt;)</string>
		<string>wxPrintPreview:renderPage(This, PageNum) -&gt; boolean()</string>
		<string>wxPrintPreview:setCanvas</string>
		<string>wxPrintPreview:setCanvas(&lt;#This#&gt;, &lt;#Canvas#&gt;)</string>
		<string>wxPrintPreview:setCanvas(This, Canvas) -&gt; ok</string>
		<string>wxPrintPreview:setCurrentPage</string>
		<string>wxPrintPreview:setCurrentPage(&lt;#This#&gt;, &lt;#PageNum#&gt;)</string>
		<string>wxPrintPreview:setCurrentPage(This, PageNum) -&gt; boolean()</string>
		<string>wxPrintPreview:setFrame</string>
		<string>wxPrintPreview:setFrame(&lt;#This#&gt;, &lt;#Frame#&gt;)</string>
		<string>wxPrintPreview:setFrame(This, Frame) -&gt; ok</string>
		<string>wxPrintPreview:setPrintout</string>
		<string>wxPrintPreview:setPrintout(&lt;#This#&gt;, &lt;#Printout#&gt;)</string>
		<string>wxPrintPreview:setPrintout(This, Printout) -&gt; ok</string>
		<string>wxPrintPreview:setZoom</string>
		<string>wxPrintPreview:setZoom(&lt;#This#&gt;, &lt;#Percent#&gt;)</string>
		<string>wxPrintPreview:setZoom(This, Percent) -&gt; ok</string>
		<string>wxPrintPreview:destroy</string>
		<string>wxPrintPreview:destroy(&lt;#This::wxPrintPreview()#&gt;)</string>
		<string>wxPrintPreview:destroy(This::wxPrintPreview()) -&gt; ok</string>
		<string>wxProgressDialog:new</string>
		<string>wxProgressDialog:new(&lt;#Title#&gt;, &lt;#Message#&gt;)</string>
		<string>wxProgressDialog:new(Title, Message) -&gt; wxProgressDialog()</string>
		<string>wxProgressDialog:new</string>
		<string>wxProgressDialog:new(&lt;#Title#&gt;, &lt;#Message#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxProgressDialog:new(Title, Message, Option::[Option]) -&gt; wxProgressDialog()</string>
		<string>wxProgressDialog:resume</string>
		<string>wxProgressDialog:resume(&lt;#This#&gt;)</string>
		<string>wxProgressDialog:resume(This) -&gt; ok</string>
		<string>wxProgressDialog:update</string>
		<string>wxProgressDialog:update(&lt;#This#&gt;)</string>
		<string>wxProgressDialog:update(This) -&gt; ok</string>
		<string>wxProgressDialog:update</string>
		<string>wxProgressDialog:update(&lt;#This#&gt;, &lt;#Value#&gt;)</string>
		<string>wxProgressDialog:update(This, Value) -&gt; boolean()</string>
		<string>wxProgressDialog:update</string>
		<string>wxProgressDialog:update(&lt;#This#&gt;, &lt;#Value#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxProgressDialog:update(This, Value, Option::[Option]) -&gt; boolean()</string>
		<string>wxProgressDialog:destroy</string>
		<string>wxProgressDialog:destroy(&lt;#This::wxProgressDialog()#&gt;)</string>
		<string>wxProgressDialog:destroy(This::wxProgressDialog()) -&gt; ok</string>
		<string>wxQueryNewPaletteEvent:setPaletteRealized</string>
		<string>wxQueryNewPaletteEvent:setPaletteRealized(&lt;#This#&gt;, &lt;#Realized#&gt;)</string>
		<string>wxQueryNewPaletteEvent:setPaletteRealized(This, Realized) -&gt; ok</string>
		<string>wxQueryNewPaletteEvent:getPaletteRealized</string>
		<string>wxQueryNewPaletteEvent:getPaletteRealized(&lt;#This#&gt;)</string>
		<string>wxQueryNewPaletteEvent:getPaletteRealized(This) -&gt; boolean()</string>
		<string>wxRadioBox:new</string>
		<string>wxRadioBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;)</string>
		<string>wxRadioBox:new(Parent, Id, Title, Pos, Size, Choices) -&gt; wxRadioBox()</string>
		<string>wxRadioBox:new</string>
		<string>wxRadioBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxRadioBox:new(Parent, Id, Title, Pos, Size, Choices, Option::[Option]) -&gt; wxRadioBox()</string>
		<string>wxRadioBox:create</string>
		<string>wxRadioBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;)</string>
		<string>wxRadioBox:create(This, Parent, Id, Title, Pos, Size, Choices) -&gt; boolean()</string>
		<string>wxRadioBox:create</string>
		<string>wxRadioBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Title#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;, &lt;#Choices#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxRadioBox:create(This, Parent, Id, Title, Pos, Size, Choices, Option::[Option]) -&gt; boolean()</string>
		<string>wxRadioBox:enable</string>
		<string>wxRadioBox:enable(&lt;#This#&gt;)</string>
		<string>wxRadioBox:enable(This) -&gt; boolean()</string>
		<string>wxRadioBox:enable</string>
		<string>wxRadioBox:enable(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxRadioBox:enable(This, N) -&gt; boolean()</string>
		<string>wxRadioBox:enable</string>
		<string>wxRadioBox:enable(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxRadioBox:enable(This, N, Option::[Option]) -&gt; boolean()</string>
		<string>wxRadioBox:getSelection</string>
		<string>wxRadioBox:getSelection(&lt;#This#&gt;)</string>
		<string>wxRadioBox:getSelection(This) -&gt; integer()</string>
		<string>wxRadioBox:getString</string>
		<string>wxRadioBox:getString(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxRadioBox:getString(This, N) -&gt; charlist() (see module unicode)</string>
		<string>wxRadioBox:setSelection</string>
		<string>wxRadioBox:setSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxRadioBox:setSelection(This, N) -&gt; ok</string>
		<string>wxRadioBox:show</string>
		<string>wxRadioBox:show(&lt;#This#&gt;)</string>
		<string>wxRadioBox:show(This) -&gt; boolean()</string>
		<string>wxRadioBox:show</string>
		<string>wxRadioBox:show(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxRadioBox:show(This, N) -&gt; boolean()</string>
		<string>wxRadioBox:show</string>
		<string>wxRadioBox:show(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxRadioBox:show(This, N, Option::[Option]) -&gt; boolean()</string>
		<string>wxRadioBox:getColumnCount</string>
		<string>wxRadioBox:getColumnCount(&lt;#This#&gt;)</string>
		<string>wxRadioBox:getColumnCount(This) -&gt; integer()</string>
		<string>wxRadioBox:getItemHelpText</string>
		<string>wxRadioBox:getItemHelpText(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxRadioBox:getItemHelpText(This, N) -&gt; charlist() (see module unicode)</string>
		<string>wxRadioBox:getItemToolTip</string>
		<string>wxRadioBox:getItemToolTip(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxRadioBox:getItemToolTip(This, Item) -&gt; wxToolTip() (see module wxToolTip)</string>
		<string>wxRadioBox:getItemFromPoint</string>
		<string>wxRadioBox:getItemFromPoint(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxRadioBox:getItemFromPoint(This, Pt) -&gt; integer()</string>
		<string>wxRadioBox:getRowCount</string>
		<string>wxRadioBox:getRowCount(&lt;#This#&gt;)</string>
		<string>wxRadioBox:getRowCount(This) -&gt; integer()</string>
		<string>wxRadioBox:isItemEnabled</string>
		<string>wxRadioBox:isItemEnabled(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxRadioBox:isItemEnabled(This, N) -&gt; boolean()</string>
		<string>wxRadioBox:isItemShown</string>
		<string>wxRadioBox:isItemShown(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxRadioBox:isItemShown(This, N) -&gt; boolean()</string>
		<string>wxRadioBox:setItemHelpText</string>
		<string>wxRadioBox:setItemHelpText(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#HelpText#&gt;)</string>
		<string>wxRadioBox:setItemHelpText(This, N, HelpText) -&gt; ok</string>
		<string>wxRadioBox:setItemToolTip</string>
		<string>wxRadioBox:setItemToolTip(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Text#&gt;)</string>
		<string>wxRadioBox:setItemToolTip(This, Item, Text) -&gt; ok</string>
		<string>wxRadioBox:destroy</string>
		<string>wxRadioBox:destroy(&lt;#This::wxRadioBox()#&gt;)</string>
		<string>wxRadioBox:destroy(This::wxRadioBox()) -&gt; ok</string>
		<string>wxRadioButton:new</string>
		<string>wxRadioButton:new()</string>
		<string>wxRadioButton:new() -&gt; wxRadioButton()</string>
		<string>wxRadioButton:new</string>
		<string>wxRadioButton:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxRadioButton:new(Parent, Id, Label) -&gt; wxRadioButton()</string>
		<string>wxRadioButton:new</string>
		<string>wxRadioButton:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxRadioButton:new(Parent, Id, Label, Option::[Option]) -&gt; wxRadioButton()</string>
		<string>wxRadioButton:create</string>
		<string>wxRadioButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxRadioButton:create(This, Parent, Id, Label) -&gt; boolean()</string>
		<string>wxRadioButton:create</string>
		<string>wxRadioButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxRadioButton:create(This, Parent, Id, Label, Option::[Option]) -&gt; boolean()</string>
		<string>wxRadioButton:getValue</string>
		<string>wxRadioButton:getValue(&lt;#This#&gt;)</string>
		<string>wxRadioButton:getValue(This) -&gt; boolean()</string>
		<string>wxRadioButton:setValue</string>
		<string>wxRadioButton:setValue(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxRadioButton:setValue(This, Val) -&gt; ok</string>
		<string>wxRadioButton:destroy</string>
		<string>wxRadioButton:destroy(&lt;#This::wxRadioButton()#&gt;)</string>
		<string>wxRadioButton:destroy(This::wxRadioButton()) -&gt; ok</string>
		<string>wxRegion:new</string>
		<string>wxRegion:new()</string>
		<string>wxRegion:new() -&gt; wxRegion()</string>
		<string>wxRegion:new</string>
		<string>wxRegion:new(&lt;#Bmp#&gt;)</string>
		<string>wxRegion:new(Bmp) -&gt; wxRegion()</string>
		<string>wxRegion:new</string>
		<string>wxRegion:new(&lt;#TopLeft#&gt;, &lt;#BottomRight#&gt;)</string>
		<string>wxRegion:new(TopLeft, BottomRight) -&gt; wxRegion()</string>
		<string>wxRegion:new</string>
		<string>wxRegion:new(&lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxRegion:new(X, Y, W, H) -&gt; wxRegion()</string>
		<string>wxRegion:clear</string>
		<string>wxRegion:clear(&lt;#This#&gt;)</string>
		<string>wxRegion:clear(This) -&gt; ok</string>
		<string>wxRegion:contains</string>
		<string>wxRegion:contains(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxRegion:contains(This, Pt) -&gt; wx_enum() (see module wx)</string>
		<string>wxRegion:contains</string>
		<string>wxRegion:contains(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxRegion:contains(This, X, Y) -&gt; wx_enum() (see module wx)</string>
		<string>wxRegion:contains</string>
		<string>wxRegion:contains(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxRegion:contains(This, X, Y, W, H) -&gt; wx_enum() (see module wx)</string>
		<string>wxRegion:convertToBitmap</string>
		<string>wxRegion:convertToBitmap(&lt;#This#&gt;)</string>
		<string>wxRegion:convertToBitmap(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxRegion:getBox</string>
		<string>wxRegion:getBox(&lt;#This#&gt;)</string>
		<string>wxRegion:getBox(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxRegion:intersect</string>
		<string>wxRegion:intersect(&lt;#This#&gt;, &lt;#Region#&gt;)</string>
		<string>wxRegion:intersect(This, Region) -&gt; boolean()</string>
		<string>wxRegion:intersect</string>
		<string>wxRegion:intersect(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxRegion:intersect(This, X, Y, W, H) -&gt; boolean()</string>
		<string>wxRegion:isEmpty</string>
		<string>wxRegion:isEmpty(&lt;#This#&gt;)</string>
		<string>wxRegion:isEmpty(This) -&gt; boolean()</string>
		<string>wxRegion:subtract</string>
		<string>wxRegion:subtract(&lt;#This#&gt;, &lt;#Region#&gt;)</string>
		<string>wxRegion:subtract(This, Region) -&gt; boolean()</string>
		<string>wxRegion:subtract</string>
		<string>wxRegion:subtract(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxRegion:subtract(This, X, Y, W, H) -&gt; boolean()</string>
		<string>wxRegion:offset</string>
		<string>wxRegion:offset(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxRegion:offset(This, Pt) -&gt; boolean()</string>
		<string>wxRegion:offset</string>
		<string>wxRegion:offset(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxRegion:offset(This, X, Y) -&gt; boolean()</string>
		<string>wxRegion:union</string>
		<string>wxRegion:union(&lt;#This#&gt;, &lt;#Region#&gt;)</string>
		<string>wxRegion:union(This, Region) -&gt; boolean()</string>
		<string>wxRegion:union</string>
		<string>wxRegion:union(&lt;#This#&gt;, &lt;#Bmp#&gt;, &lt;#Transp#&gt;)</string>
		<string>wxRegion:union(This, Bmp, Transp) -&gt; boolean()</string>
		<string>wxRegion:union</string>
		<string>wxRegion:union(&lt;#This#&gt;, &lt;#Bmp#&gt;, &lt;#Transp#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxRegion:union(This, Bmp, Transp, Option::[Option]) -&gt; boolean()</string>
		<string>wxRegion:union</string>
		<string>wxRegion:union(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxRegion:union(This, X, Y, W, H) -&gt; boolean()</string>
		<string>wxRegion:Xor</string>
		<string>wxRegion:Xor(&lt;#This#&gt;, &lt;#Region#&gt;)</string>
		<string>wxRegion:Xor(This, Region) -&gt; boolean()</string>
		<string>wxRegion:Xor</string>
		<string>wxRegion:Xor(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxRegion:Xor(This, X, Y, W, H) -&gt; boolean()</string>
		<string>wxRegion:destroy</string>
		<string>wxRegion:destroy(&lt;#This::wxRegion()#&gt;)</string>
		<string>wxRegion:destroy(This::wxRegion()) -&gt; ok</string>
		<string>wxSashEvent:getEdge</string>
		<string>wxSashEvent:getEdge(&lt;#This#&gt;)</string>
		<string>wxSashEvent:getEdge(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxSashEvent:getDragRect</string>
		<string>wxSashEvent:getDragRect(&lt;#This#&gt;)</string>
		<string>wxSashEvent:getDragRect(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxSashEvent:getDragStatus</string>
		<string>wxSashEvent:getDragStatus(&lt;#This#&gt;)</string>
		<string>wxSashEvent:getDragStatus(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxSashLayoutWindow:new</string>
		<string>wxSashLayoutWindow:new()</string>
		<string>wxSashLayoutWindow:new() -&gt; wxSashLayoutWindow()</string>
		<string>wxSashLayoutWindow:new</string>
		<string>wxSashLayoutWindow:new(&lt;#Parent#&gt;)</string>
		<string>wxSashLayoutWindow:new(Parent) -&gt; wxSashLayoutWindow()</string>
		<string>wxSashLayoutWindow:new</string>
		<string>wxSashLayoutWindow:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSashLayoutWindow:new(Parent, Option::[Option]) -&gt; wxSashLayoutWindow()</string>
		<string>wxSashLayoutWindow:create</string>
		<string>wxSashLayoutWindow:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxSashLayoutWindow:create(This, Parent) -&gt; boolean()</string>
		<string>wxSashLayoutWindow:create</string>
		<string>wxSashLayoutWindow:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSashLayoutWindow:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxSashLayoutWindow:getAlignment</string>
		<string>wxSashLayoutWindow:getAlignment(&lt;#This#&gt;)</string>
		<string>wxSashLayoutWindow:getAlignment(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxSashLayoutWindow:getOrientation</string>
		<string>wxSashLayoutWindow:getOrientation(&lt;#This#&gt;)</string>
		<string>wxSashLayoutWindow:getOrientation(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxSashLayoutWindow:setAlignment</string>
		<string>wxSashLayoutWindow:setAlignment(&lt;#This#&gt;, &lt;#Align#&gt;)</string>
		<string>wxSashLayoutWindow:setAlignment(This, Align) -&gt; ok</string>
		<string>wxSashLayoutWindow:setDefaultSize</string>
		<string>wxSashLayoutWindow:setDefaultSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSashLayoutWindow:setDefaultSize(This, Size) -&gt; ok</string>
		<string>wxSashLayoutWindow:setOrientation</string>
		<string>wxSashLayoutWindow:setOrientation(&lt;#This#&gt;, &lt;#Orient#&gt;)</string>
		<string>wxSashLayoutWindow:setOrientation(This, Orient) -&gt; ok</string>
		<string>wxSashLayoutWindow:destroy</string>
		<string>wxSashLayoutWindow:destroy(&lt;#This::wxSashLayoutWindow()#&gt;)</string>
		<string>wxSashLayoutWindow:destroy(This::wxSashLayoutWindow()) -&gt; ok</string>
		<string>wxSashWindow:new</string>
		<string>wxSashWindow:new()</string>
		<string>wxSashWindow:new() -&gt; wxSashWindow()</string>
		<string>wxSashWindow:new</string>
		<string>wxSashWindow:new(&lt;#Parent#&gt;)</string>
		<string>wxSashWindow:new(Parent) -&gt; wxSashWindow()</string>
		<string>wxSashWindow:new</string>
		<string>wxSashWindow:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSashWindow:new(Parent, Option::[Option]) -&gt; wxSashWindow()</string>
		<string>wxSashWindow:getSashVisible</string>
		<string>wxSashWindow:getSashVisible(&lt;#This#&gt;, &lt;#Edge#&gt;)</string>
		<string>wxSashWindow:getSashVisible(This, Edge) -&gt; boolean()</string>
		<string>wxSashWindow:getMaximumSizeX</string>
		<string>wxSashWindow:getMaximumSizeX(&lt;#This#&gt;)</string>
		<string>wxSashWindow:getMaximumSizeX(This) -&gt; integer()</string>
		<string>wxSashWindow:getMaximumSizeY</string>
		<string>wxSashWindow:getMaximumSizeY(&lt;#This#&gt;)</string>
		<string>wxSashWindow:getMaximumSizeY(This) -&gt; integer()</string>
		<string>wxSashWindow:getMinimumSizeX</string>
		<string>wxSashWindow:getMinimumSizeX(&lt;#This#&gt;)</string>
		<string>wxSashWindow:getMinimumSizeX(This) -&gt; integer()</string>
		<string>wxSashWindow:getMinimumSizeY</string>
		<string>wxSashWindow:getMinimumSizeY(&lt;#This#&gt;)</string>
		<string>wxSashWindow:getMinimumSizeY(This) -&gt; integer()</string>
		<string>wxSashWindow:setMaximumSizeX</string>
		<string>wxSashWindow:setMaximumSizeX(&lt;#This#&gt;, &lt;#Max#&gt;)</string>
		<string>wxSashWindow:setMaximumSizeX(This, Max) -&gt; ok</string>
		<string>wxSashWindow:setMaximumSizeY</string>
		<string>wxSashWindow:setMaximumSizeY(&lt;#This#&gt;, &lt;#Max#&gt;)</string>
		<string>wxSashWindow:setMaximumSizeY(This, Max) -&gt; ok</string>
		<string>wxSashWindow:setMinimumSizeX</string>
		<string>wxSashWindow:setMinimumSizeX(&lt;#This#&gt;, &lt;#Min#&gt;)</string>
		<string>wxSashWindow:setMinimumSizeX(This, Min) -&gt; ok</string>
		<string>wxSashWindow:setMinimumSizeY</string>
		<string>wxSashWindow:setMinimumSizeY(&lt;#This#&gt;, &lt;#Min#&gt;)</string>
		<string>wxSashWindow:setMinimumSizeY(This, Min) -&gt; ok</string>
		<string>wxSashWindow:setSashVisible</string>
		<string>wxSashWindow:setSashVisible(&lt;#This#&gt;, &lt;#Edge#&gt;, &lt;#Sash#&gt;)</string>
		<string>wxSashWindow:setSashVisible(This, Edge, Sash) -&gt; ok</string>
		<string>wxSashWindow:destroy</string>
		<string>wxSashWindow:destroy(&lt;#This::wxSashWindow()#&gt;)</string>
		<string>wxSashWindow:destroy(This::wxSashWindow()) -&gt; ok</string>
		<string>wxScreenDC:new</string>
		<string>wxScreenDC:new()</string>
		<string>wxScreenDC:new() -&gt; wxScreenDC()</string>
		<string>wxScreenDC:destroy</string>
		<string>wxScreenDC:destroy(&lt;#This::wxScreenDC()#&gt;)</string>
		<string>wxScreenDC:destroy(This::wxScreenDC()) -&gt; ok</string>
		<string>wxScrollBar:new</string>
		<string>wxScrollBar:new()</string>
		<string>wxScrollBar:new() -&gt; wxScrollBar()</string>
		<string>wxScrollBar:new</string>
		<string>wxScrollBar:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxScrollBar:new(Parent, Id) -&gt; wxScrollBar()</string>
		<string>wxScrollBar:new</string>
		<string>wxScrollBar:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxScrollBar:new(Parent, Id, Option::[Option]) -&gt; wxScrollBar()</string>
		<string>wxScrollBar:create</string>
		<string>wxScrollBar:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxScrollBar:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxScrollBar:create</string>
		<string>wxScrollBar:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxScrollBar:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxScrollBar:getRange</string>
		<string>wxScrollBar:getRange(&lt;#This#&gt;)</string>
		<string>wxScrollBar:getRange(This) -&gt; integer()</string>
		<string>wxScrollBar:getPageSize</string>
		<string>wxScrollBar:getPageSize(&lt;#This#&gt;)</string>
		<string>wxScrollBar:getPageSize(This) -&gt; integer()</string>
		<string>wxScrollBar:getThumbPosition</string>
		<string>wxScrollBar:getThumbPosition(&lt;#This#&gt;)</string>
		<string>wxScrollBar:getThumbPosition(This) -&gt; integer()</string>
		<string>wxScrollBar:getThumbSize</string>
		<string>wxScrollBar:getThumbSize(&lt;#This#&gt;)</string>
		<string>wxScrollBar:getThumbSize(This) -&gt; integer()</string>
		<string>wxScrollBar:setThumbPosition</string>
		<string>wxScrollBar:setThumbPosition(&lt;#This#&gt;, &lt;#ViewStart#&gt;)</string>
		<string>wxScrollBar:setThumbPosition(This, ViewStart) -&gt; ok</string>
		<string>wxScrollBar:setScrollbar</string>
		<string>wxScrollBar:setScrollbar(&lt;#This#&gt;, &lt;#Position#&gt;, &lt;#ThumbSize#&gt;, &lt;#Range#&gt;, &lt;#PageSize#&gt;)</string>
		<string>wxScrollBar:setScrollbar(This, Position, ThumbSize, Range, PageSize) -&gt; ok</string>
		<string>wxScrollBar:setScrollbar</string>
		<string>wxScrollBar:setScrollbar(&lt;#This#&gt;, &lt;#Position#&gt;, &lt;#ThumbSize#&gt;, &lt;#Range#&gt;, &lt;#PageSize#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxScrollBar:setScrollbar(This, Position, ThumbSize, Range, PageSize, Option::[Option]) -&gt; ok</string>
		<string>wxScrollBar:destroy</string>
		<string>wxScrollBar:destroy(&lt;#This::wxScrollBar()#&gt;)</string>
		<string>wxScrollBar:destroy(This::wxScrollBar()) -&gt; ok</string>
		<string>wxScrolledWindow:new</string>
		<string>wxScrolledWindow:new()</string>
		<string>wxScrolledWindow:new() -&gt; wxScrolledWindow()</string>
		<string>wxScrolledWindow:new</string>
		<string>wxScrolledWindow:new(&lt;#Parent#&gt;)</string>
		<string>wxScrolledWindow:new(Parent) -&gt; wxScrolledWindow()</string>
		<string>wxScrolledWindow:new</string>
		<string>wxScrolledWindow:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxScrolledWindow:new(Parent, Option::[Option]) -&gt; wxScrolledWindow()</string>
		<string>wxScrolledWindow:calcScrolledPosition</string>
		<string>wxScrolledWindow:calcScrolledPosition(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxScrolledWindow:calcScrolledPosition(This, Pt) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxScrolledWindow:calcScrolledPosition</string>
		<string>wxScrolledWindow:calcScrolledPosition(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxScrolledWindow:calcScrolledPosition(This, X, Y) -&gt; {Xx::integer(), Yy::integer()}</string>
		<string>wxScrolledWindow:calcUnscrolledPosition</string>
		<string>wxScrolledWindow:calcUnscrolledPosition(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxScrolledWindow:calcUnscrolledPosition(This, Pt) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxScrolledWindow:calcUnscrolledPosition</string>
		<string>wxScrolledWindow:calcUnscrolledPosition(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxScrolledWindow:calcUnscrolledPosition(This, X, Y) -&gt; {Xx::integer(), Yy::integer()}</string>
		<string>wxScrolledWindow:enableScrolling</string>
		<string>wxScrolledWindow:enableScrolling(&lt;#This#&gt;, &lt;#X_scrolling#&gt;, &lt;#Y_scrolling#&gt;)</string>
		<string>wxScrolledWindow:enableScrolling(This, X_scrolling, Y_scrolling) -&gt; ok</string>
		<string>wxScrolledWindow:getScrollPixelsPerUnit</string>
		<string>wxScrolledWindow:getScrollPixelsPerUnit(&lt;#This#&gt;)</string>
		<string>wxScrolledWindow:getScrollPixelsPerUnit(This) -&gt; {PixelsPerUnitX::integer(), PixelsPerUnitY::integer()}</string>
		<string>wxScrolledWindow:getViewStart</string>
		<string>wxScrolledWindow:getViewStart(&lt;#This#&gt;)</string>
		<string>wxScrolledWindow:getViewStart(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxScrolledWindow:doPrepareDC</string>
		<string>wxScrolledWindow:doPrepareDC(&lt;#This#&gt;, &lt;#Dc#&gt;)</string>
		<string>wxScrolledWindow:doPrepareDC(This, Dc) -&gt; ok</string>
		<string>wxScrolledWindow:prepareDC</string>
		<string>wxScrolledWindow:prepareDC(&lt;#This#&gt;, &lt;#Dc#&gt;)</string>
		<string>wxScrolledWindow:prepareDC(This, Dc) -&gt; ok</string>
		<string>wxScrolledWindow:scroll</string>
		<string>wxScrolledWindow:scroll(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxScrolledWindow:scroll(This, X, Y) -&gt; ok</string>
		<string>wxScrolledWindow:setScrollbars</string>
		<string>wxScrolledWindow:setScrollbars(&lt;#This#&gt;, &lt;#PixelsPerUnitX#&gt;, &lt;#PixelsPerUnitY#&gt;, &lt;#NoUnitsX#&gt;, &lt;#NoUnitsY#&gt;)</string>
		<string>wxScrolledWindow:setScrollbars(This, PixelsPerUnitX, PixelsPerUnitY, NoUnitsX, NoUnitsY) -&gt; ok</string>
		<string>wxScrolledWindow:setScrollbars</string>
		<string>wxScrolledWindow:setScrollbars(&lt;#This#&gt;, &lt;#PixelsPerUnitX#&gt;, &lt;#PixelsPerUnitY#&gt;, &lt;#NoUnitsX#&gt;, &lt;#NoUnitsY#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxScrolledWindow:setScrollbars(This, PixelsPerUnitX, PixelsPerUnitY, NoUnitsX, NoUnitsY, Option::[Option]) -&gt; ok</string>
		<string>wxScrolledWindow:setScrollRate</string>
		<string>wxScrolledWindow:setScrollRate(&lt;#This#&gt;, &lt;#Xstep#&gt;, &lt;#Ystep#&gt;)</string>
		<string>wxScrolledWindow:setScrollRate(This, Xstep, Ystep) -&gt; ok</string>
		<string>wxScrolledWindow:setTargetWindow</string>
		<string>wxScrolledWindow:setTargetWindow(&lt;#This#&gt;, &lt;#Target#&gt;)</string>
		<string>wxScrolledWindow:setTargetWindow(This, Target) -&gt; ok</string>
		<string>wxScrolledWindow:destroy</string>
		<string>wxScrolledWindow:destroy(&lt;#This::wxScrolledWindow()#&gt;)</string>
		<string>wxScrolledWindow:destroy(This::wxScrolledWindow()) -&gt; ok</string>
		<string>wxScrollEvent:getOrientation</string>
		<string>wxScrollEvent:getOrientation(&lt;#This#&gt;)</string>
		<string>wxScrollEvent:getOrientation(This) -&gt; integer()</string>
		<string>wxScrollEvent:getPosition</string>
		<string>wxScrollEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxScrollEvent:getPosition(This) -&gt; integer()</string>
		<string>wxScrollWinEvent:getOrientation</string>
		<string>wxScrollWinEvent:getOrientation(&lt;#This#&gt;)</string>
		<string>wxScrollWinEvent:getOrientation(This) -&gt; integer()</string>
		<string>wxScrollWinEvent:getPosition</string>
		<string>wxScrollWinEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxScrollWinEvent:getPosition(This) -&gt; integer()</string>
		<string>wxSetCursorEvent:getCursor</string>
		<string>wxSetCursorEvent:getCursor(&lt;#This#&gt;)</string>
		<string>wxSetCursorEvent:getCursor(This) -&gt; wxCursor() (see module wxCursor)</string>
		<string>wxSetCursorEvent:getX</string>
		<string>wxSetCursorEvent:getX(&lt;#This#&gt;)</string>
		<string>wxSetCursorEvent:getX(This) -&gt; integer()</string>
		<string>wxSetCursorEvent:getY</string>
		<string>wxSetCursorEvent:getY(&lt;#This#&gt;)</string>
		<string>wxSetCursorEvent:getY(This) -&gt; integer()</string>
		<string>wxSetCursorEvent:hasCursor</string>
		<string>wxSetCursorEvent:hasCursor(&lt;#This#&gt;)</string>
		<string>wxSetCursorEvent:hasCursor(This) -&gt; boolean()</string>
		<string>wxSetCursorEvent:setCursor</string>
		<string>wxSetCursorEvent:setCursor(&lt;#This#&gt;, &lt;#Cursor#&gt;)</string>
		<string>wxSetCursorEvent:setCursor(This, Cursor) -&gt; ok</string>
		<string>wxShowEvent:setShow</string>
		<string>wxShowEvent:setShow(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxShowEvent:setShow(This, Show) -&gt; ok</string>
		<string>wxShowEvent:getShow</string>
		<string>wxShowEvent:getShow(&lt;#This#&gt;)</string>
		<string>wxShowEvent:getShow(This) -&gt; boolean()</string>
		<string>wxSingleChoiceDialog:new</string>
		<string>wxSingleChoiceDialog:new()</string>
		<string>wxSingleChoiceDialog:new() -&gt; wxSingleChoiceDialog()</string>
		<string>wxSingleChoiceDialog:new</string>
		<string>wxSingleChoiceDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;, &lt;#Caption#&gt;, &lt;#Choices#&gt;)</string>
		<string>wxSingleChoiceDialog:new(Parent, Message, Caption, Choices) -&gt; wxSingleChoiceDialog()</string>
		<string>wxSingleChoiceDialog:new</string>
		<string>wxSingleChoiceDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;, &lt;#Caption#&gt;, &lt;#Choices#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSingleChoiceDialog:new(Parent, Message, Caption, Choices, Option::[Option]) -&gt; wxSingleChoiceDialog()</string>
		<string>wxSingleChoiceDialog:getSelection</string>
		<string>wxSingleChoiceDialog:getSelection(&lt;#This#&gt;)</string>
		<string>wxSingleChoiceDialog:getSelection(This) -&gt; integer()</string>
		<string>wxSingleChoiceDialog:getStringSelection</string>
		<string>wxSingleChoiceDialog:getStringSelection(&lt;#This#&gt;)</string>
		<string>wxSingleChoiceDialog:getStringSelection(This) -&gt; charlist() (see module unicode)</string>
		<string>wxSingleChoiceDialog:setSelection</string>
		<string>wxSingleChoiceDialog:setSelection(&lt;#This#&gt;, &lt;#Sel#&gt;)</string>
		<string>wxSingleChoiceDialog:setSelection(This, Sel) -&gt; ok</string>
		<string>wxSingleChoiceDialog:destroy</string>
		<string>wxSingleChoiceDialog:destroy(&lt;#This::wxSingleChoiceDialog()#&gt;)</string>
		<string>wxSingleChoiceDialog:destroy(This::wxSingleChoiceDialog()) -&gt; ok</string>
		<string>wxSizeEvent:getSize</string>
		<string>wxSizeEvent:getSize(&lt;#This#&gt;)</string>
		<string>wxSizeEvent:getSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizer:add</string>
		<string>wxSizer:add(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSizer:add(This, Window) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:add</string>
		<string>wxSizer:add(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxSizer:add(This, Width, Height) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:add</string>
		<string>wxSizer:add(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:add(This, Width, Height, Option::[Option]) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:addSpacer</string>
		<string>wxSizer:addSpacer(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSizer:addSpacer(This, Size) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:addStretchSpacer</string>
		<string>wxSizer:addStretchSpacer(&lt;#This#&gt;)</string>
		<string>wxSizer:addStretchSpacer(This) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:addStretchSpacer</string>
		<string>wxSizer:addStretchSpacer(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:addStretchSpacer(This, Option::[Option]) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:calcMin</string>
		<string>wxSizer:calcMin(&lt;#This#&gt;)</string>
		<string>wxSizer:calcMin(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizer:clear</string>
		<string>wxSizer:clear(&lt;#This#&gt;)</string>
		<string>wxSizer:clear(This) -&gt; ok</string>
		<string>wxSizer:clear</string>
		<string>wxSizer:clear(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:clear(This, Option::[Option]) -&gt; ok</string>
		<string>wxSizer:detach</string>
		<string>wxSizer:detach(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxSizer:detach(This, Index) -&gt; boolean()</string>
		<string>wxSizer:fit</string>
		<string>wxSizer:fit(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSizer:fit(This, Window) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizer:fitInside</string>
		<string>wxSizer:fitInside(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSizer:fitInside(This, Window) -&gt; ok</string>
		<string>wxSizer:getChildren</string>
		<string>wxSizer:getChildren(&lt;#This#&gt;)</string>
		<string>wxSizer:getChildren(This) -&gt; [wxSizerItem() (see module wxSizerItem)]</string>
		<string>wxSizer:getItem</string>
		<string>wxSizer:getItem(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSizer:getItem(This, Window) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:getItem</string>
		<string>wxSizer:getItem(&lt;#This#&gt;, &lt;#Window#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:getItem(This, Window, Option::[Option]) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:getSize</string>
		<string>wxSizer:getSize(&lt;#This#&gt;)</string>
		<string>wxSizer:getSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizer:getPosition</string>
		<string>wxSizer:getPosition(&lt;#This#&gt;)</string>
		<string>wxSizer:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxSizer:getMinSize</string>
		<string>wxSizer:getMinSize(&lt;#This#&gt;)</string>
		<string>wxSizer:getMinSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizer:hide</string>
		<string>wxSizer:hide(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSizer:hide(This, Window) -&gt; boolean()</string>
		<string>wxSizer:hide</string>
		<string>wxSizer:hide(&lt;#This#&gt;, &lt;#Window#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:hide(This, Window, Option::[Option]) -&gt; boolean()</string>
		<string>wxSizer:insert</string>
		<string>wxSizer:insert(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Item#&gt;)</string>
		<string>wxSizer:insert(This, Index, Item) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:insert</string>
		<string>wxSizer:insert(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxSizer:insert(This, Index, Width, Height) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:insert</string>
		<string>wxSizer:insert(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:insert(This, Index, Width, Height, Option::[Option]) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:insertSpacer</string>
		<string>wxSizer:insertSpacer(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSizer:insertSpacer(This, Index, Size) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:insertStretchSpacer</string>
		<string>wxSizer:insertStretchSpacer(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxSizer:insertStretchSpacer(This, Index) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:insertStretchSpacer</string>
		<string>wxSizer:insertStretchSpacer(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:insertStretchSpacer(This, Index, Option::[Option]) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:isShown</string>
		<string>wxSizer:isShown(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxSizer:isShown(This, Index) -&gt; boolean()</string>
		<string>wxSizer:layout</string>
		<string>wxSizer:layout(&lt;#This#&gt;)</string>
		<string>wxSizer:layout(This) -&gt; ok</string>
		<string>wxSizer:prepend</string>
		<string>wxSizer:prepend(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxSizer:prepend(This, Item) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:prepend</string>
		<string>wxSizer:prepend(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxSizer:prepend(This, Width, Height) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:prepend</string>
		<string>wxSizer:prepend(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:prepend(This, Width, Height, Option::[Option]) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:prependSpacer</string>
		<string>wxSizer:prependSpacer(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSizer:prependSpacer(This, Size) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:prependStretchSpacer</string>
		<string>wxSizer:prependStretchSpacer(&lt;#This#&gt;)</string>
		<string>wxSizer:prependStretchSpacer(This) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:prependStretchSpacer</string>
		<string>wxSizer:prependStretchSpacer(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:prependStretchSpacer(This, Option::[Option]) -&gt; wxSizerItem() (see module wxSizerItem)</string>
		<string>wxSizer:recalcSizes</string>
		<string>wxSizer:recalcSizes(&lt;#This#&gt;)</string>
		<string>wxSizer:recalcSizes(This) -&gt; ok</string>
		<string>wxSizer:remove</string>
		<string>wxSizer:remove(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxSizer:remove(This, Index) -&gt; boolean()</string>
		<string>wxSizer:replace</string>
		<string>wxSizer:replace(&lt;#This#&gt;, &lt;#Oldwin#&gt;, &lt;#Newwin#&gt;)</string>
		<string>wxSizer:replace(This, Oldwin, Newwin) -&gt; boolean()</string>
		<string>wxSizer:replace</string>
		<string>wxSizer:replace(&lt;#This#&gt;, &lt;#Oldwin#&gt;, &lt;#Newwin#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:replace(This, Oldwin, Newwin, Option::[Option]) -&gt; boolean()</string>
		<string>wxSizer:setDimension</string>
		<string>wxSizer:setDimension(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxSizer:setDimension(This, X, Y, Width, Height) -&gt; ok</string>
		<string>wxSizer:setMinSize</string>
		<string>wxSizer:setMinSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSizer:setMinSize(This, Size) -&gt; ok</string>
		<string>wxSizer:setMinSize</string>
		<string>wxSizer:setMinSize(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxSizer:setMinSize(This, Width, Height) -&gt; ok</string>
		<string>wxSizer:setItemMinSize</string>
		<string>wxSizer:setItemMinSize(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSizer:setItemMinSize(This, Index, Size) -&gt; boolean()</string>
		<string>wxSizer:setItemMinSize</string>
		<string>wxSizer:setItemMinSize(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxSizer:setItemMinSize(This, Index, Width, Height) -&gt; boolean()</string>
		<string>wxSizer:setSizeHints</string>
		<string>wxSizer:setSizeHints(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSizer:setSizeHints(This, Window) -&gt; ok</string>
		<string>wxSizer:setVirtualSizeHints</string>
		<string>wxSizer:setVirtualSizeHints(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSizer:setVirtualSizeHints(This, Window) -&gt; ok</string>
		<string>wxSizer:show</string>
		<string>wxSizer:show(&lt;#This#&gt;, &lt;#Index#&gt;)</string>
		<string>wxSizer:show(This, Index) -&gt; boolean()</string>
		<string>wxSizer:show</string>
		<string>wxSizer:show(&lt;#This#&gt;, &lt;#Index#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizer:show(This, Index, Option::[Option]) -&gt; boolean()</string>
		<string>wxSizerFlags:new</string>
		<string>wxSizerFlags:new()</string>
		<string>wxSizerFlags:new() -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:new</string>
		<string>wxSizerFlags:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxSizerFlags:new(Option::[Option]) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:align</string>
		<string>wxSizerFlags:align(&lt;#This#&gt;, &lt;#Alignment#&gt;)</string>
		<string>wxSizerFlags:align(This, Alignment) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:border</string>
		<string>wxSizerFlags:border(&lt;#This#&gt;)</string>
		<string>wxSizerFlags:border(This) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:border</string>
		<string>wxSizerFlags:border(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSizerFlags:border(This, Option::[Option]) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:border</string>
		<string>wxSizerFlags:border(&lt;#This#&gt;, &lt;#Direction#&gt;, &lt;#BorderInPixels#&gt;)</string>
		<string>wxSizerFlags:border(This, Direction, BorderInPixels) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:center</string>
		<string>wxSizerFlags:center(&lt;#This#&gt;)</string>
		<string>wxSizerFlags:center(This) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:centre</string>
		<string>wxSizerFlags:centre(&lt;#This#&gt;)</string>
		<string>wxSizerFlags:centre(This) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:expand</string>
		<string>wxSizerFlags:expand(&lt;#This#&gt;)</string>
		<string>wxSizerFlags:expand(This) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:left</string>
		<string>wxSizerFlags:left(&lt;#This#&gt;)</string>
		<string>wxSizerFlags:left(This) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:proportion</string>
		<string>wxSizerFlags:proportion(&lt;#This#&gt;, &lt;#Proportion#&gt;)</string>
		<string>wxSizerFlags:proportion(This, Proportion) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:right</string>
		<string>wxSizerFlags:right(&lt;#This#&gt;)</string>
		<string>wxSizerFlags:right(This) -&gt; wxSizerFlags()</string>
		<string>wxSizerFlags:destroy</string>
		<string>wxSizerFlags:destroy(&lt;#This::wxSizerFlags()#&gt;)</string>
		<string>wxSizerFlags:destroy(This::wxSizerFlags()) -&gt; ok</string>
		<string>wxSizerItem:new</string>
		<string>wxSizerItem:new()</string>
		<string>wxSizerItem:new() -&gt; wxSizerItem()</string>
		<string>wxSizerItem:new</string>
		<string>wxSizerItem:new(&lt;#Window#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxSizerItem:new(Window, Flags) -&gt; wxSizerItem()</string>
		<string>wxSizerItem:new</string>
		<string>wxSizerItem:new(&lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxSizerItem:new(Width, Height, Flags) -&gt; wxSizerItem()</string>
		<string>wxSizerItem:new</string>
		<string>wxSizerItem:new(&lt;#Window#&gt;, &lt;#Proportion#&gt;, &lt;#Flag#&gt;, &lt;#Border#&gt;, &lt;#UserData#&gt;)</string>
		<string>wxSizerItem:new(Window, Proportion, Flag, Border, UserData) -&gt; wxSizerItem()</string>
		<string>wxSizerItem:new</string>
		<string>wxSizerItem:new(&lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Proportion#&gt;, &lt;#Flag#&gt;, &lt;#Border#&gt;, &lt;#UserData#&gt;)</string>
		<string>wxSizerItem:new(Width, Height, Proportion, Flag, Border, UserData) -&gt; wxSizerItem()</string>
		<string>wxSizerItem:calcMin</string>
		<string>wxSizerItem:calcMin(&lt;#This#&gt;)</string>
		<string>wxSizerItem:calcMin(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizerItem:deleteWindows</string>
		<string>wxSizerItem:deleteWindows(&lt;#This#&gt;)</string>
		<string>wxSizerItem:deleteWindows(This) -&gt; ok</string>
		<string>wxSizerItem:detachSizer</string>
		<string>wxSizerItem:detachSizer(&lt;#This#&gt;)</string>
		<string>wxSizerItem:detachSizer(This) -&gt; ok</string>
		<string>wxSizerItem:getBorder</string>
		<string>wxSizerItem:getBorder(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getBorder(This) -&gt; integer()</string>
		<string>wxSizerItem:getFlag</string>
		<string>wxSizerItem:getFlag(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getFlag(This) -&gt; integer()</string>
		<string>wxSizerItem:getMinSize</string>
		<string>wxSizerItem:getMinSize(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getMinSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizerItem:getPosition</string>
		<string>wxSizerItem:getPosition(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxSizerItem:getProportion</string>
		<string>wxSizerItem:getProportion(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getProportion(This) -&gt; integer()</string>
		<string>wxSizerItem:getRatio</string>
		<string>wxSizerItem:getRatio(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getRatio(This) -&gt; number()</string>
		<string>wxSizerItem:getRect</string>
		<string>wxSizerItem:getRect(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getRect(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxSizerItem:getSize</string>
		<string>wxSizerItem:getSize(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizerItem:getSizer</string>
		<string>wxSizerItem:getSizer(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getSizer(This) -&gt; wxSizer() (see module wxSizer)</string>
		<string>wxSizerItem:getSpacer</string>
		<string>wxSizerItem:getSpacer(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getSpacer(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxSizerItem:getUserData</string>
		<string>wxSizerItem:getUserData(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getUserData(This) -&gt; wx_object() (see module wx)</string>
		<string>wxSizerItem:getWindow</string>
		<string>wxSizerItem:getWindow(&lt;#This#&gt;)</string>
		<string>wxSizerItem:getWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxSizerItem:isSizer</string>
		<string>wxSizerItem:isSizer(&lt;#This#&gt;)</string>
		<string>wxSizerItem:isSizer(This) -&gt; boolean()</string>
		<string>wxSizerItem:isShown</string>
		<string>wxSizerItem:isShown(&lt;#This#&gt;)</string>
		<string>wxSizerItem:isShown(This) -&gt; boolean()</string>
		<string>wxSizerItem:isSpacer</string>
		<string>wxSizerItem:isSpacer(&lt;#This#&gt;)</string>
		<string>wxSizerItem:isSpacer(This) -&gt; boolean()</string>
		<string>wxSizerItem:isWindow</string>
		<string>wxSizerItem:isWindow(&lt;#This#&gt;)</string>
		<string>wxSizerItem:isWindow(This) -&gt; boolean()</string>
		<string>wxSizerItem:setBorder</string>
		<string>wxSizerItem:setBorder(&lt;#This#&gt;, &lt;#Border#&gt;)</string>
		<string>wxSizerItem:setBorder(This, Border) -&gt; ok</string>
		<string>wxSizerItem:setDimension</string>
		<string>wxSizerItem:setDimension(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSizerItem:setDimension(This, Pos, Size) -&gt; ok</string>
		<string>wxSizerItem:setFlag</string>
		<string>wxSizerItem:setFlag(&lt;#This#&gt;, &lt;#Flag#&gt;)</string>
		<string>wxSizerItem:setFlag(This, Flag) -&gt; ok</string>
		<string>wxSizerItem:setInitSize</string>
		<string>wxSizerItem:setInitSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxSizerItem:setInitSize(This, X, Y) -&gt; ok</string>
		<string>wxSizerItem:setMinSize</string>
		<string>wxSizerItem:setMinSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSizerItem:setMinSize(This, Size) -&gt; ok</string>
		<string>wxSizerItem:setMinSize</string>
		<string>wxSizerItem:setMinSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxSizerItem:setMinSize(This, X, Y) -&gt; ok</string>
		<string>wxSizerItem:setProportion</string>
		<string>wxSizerItem:setProportion(&lt;#This#&gt;, &lt;#Proportion#&gt;)</string>
		<string>wxSizerItem:setProportion(This, Proportion) -&gt; ok</string>
		<string>wxSizerItem:setRatio</string>
		<string>wxSizerItem:setRatio(&lt;#This#&gt;, &lt;#Ratio#&gt;)</string>
		<string>wxSizerItem:setRatio(This, Ratio) -&gt; ok</string>
		<string>wxSizerItem:setRatio</string>
		<string>wxSizerItem:setRatio(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxSizerItem:setRatio(This, Width, Height) -&gt; ok</string>
		<string>wxSizerItem:setSizer</string>
		<string>wxSizerItem:setSizer(&lt;#This#&gt;, &lt;#Sizer#&gt;)</string>
		<string>wxSizerItem:setSizer(This, Sizer) -&gt; ok</string>
		<string>wxSizerItem:setSpacer</string>
		<string>wxSizerItem:setSpacer(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxSizerItem:setSpacer(This, Size) -&gt; ok</string>
		<string>wxSizerItem:setSpacer</string>
		<string>wxSizerItem:setSpacer(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxSizerItem:setSpacer(This, Width, Height) -&gt; ok</string>
		<string>wxSizerItem:setWindow</string>
		<string>wxSizerItem:setWindow(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSizerItem:setWindow(This, Window) -&gt; ok</string>
		<string>wxSizerItem:show</string>
		<string>wxSizerItem:show(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxSizerItem:show(This, Show) -&gt; ok</string>
		<string>wxSizerItem:destroy</string>
		<string>wxSizerItem:destroy(&lt;#This::wxSizerItem()#&gt;)</string>
		<string>wxSizerItem:destroy(This::wxSizerItem()) -&gt; ok</string>
		<string>wxSlider:new</string>
		<string>wxSlider:new()</string>
		<string>wxSlider:new() -&gt; wxSlider()</string>
		<string>wxSlider:new</string>
		<string>wxSlider:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Value#&gt;, &lt;#MinValue#&gt;, &lt;#MaxValue#&gt;)</string>
		<string>wxSlider:new(Parent, Id, Value, MinValue, MaxValue) -&gt; wxSlider()</string>
		<string>wxSlider:new</string>
		<string>wxSlider:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Value#&gt;, &lt;#MinValue#&gt;, &lt;#MaxValue#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSlider:new(Parent, Id, Value, MinValue, MaxValue, Option::[Option]) -&gt; wxSlider()</string>
		<string>wxSlider:create</string>
		<string>wxSlider:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Value#&gt;, &lt;#MinValue#&gt;, &lt;#MaxValue#&gt;)</string>
		<string>wxSlider:create(This, Parent, Id, Value, MinValue, MaxValue) -&gt; boolean()</string>
		<string>wxSlider:create</string>
		<string>wxSlider:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Value#&gt;, &lt;#MinValue#&gt;, &lt;#MaxValue#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSlider:create(This, Parent, Id, Value, MinValue, MaxValue, Option::[Option]) -&gt; boolean()</string>
		<string>wxSlider:getLineSize</string>
		<string>wxSlider:getLineSize(&lt;#This#&gt;)</string>
		<string>wxSlider:getLineSize(This) -&gt; integer()</string>
		<string>wxSlider:getMax</string>
		<string>wxSlider:getMax(&lt;#This#&gt;)</string>
		<string>wxSlider:getMax(This) -&gt; integer()</string>
		<string>wxSlider:getMin</string>
		<string>wxSlider:getMin(&lt;#This#&gt;)</string>
		<string>wxSlider:getMin(This) -&gt; integer()</string>
		<string>wxSlider:getPageSize</string>
		<string>wxSlider:getPageSize(&lt;#This#&gt;)</string>
		<string>wxSlider:getPageSize(This) -&gt; integer()</string>
		<string>wxSlider:getThumbLength</string>
		<string>wxSlider:getThumbLength(&lt;#This#&gt;)</string>
		<string>wxSlider:getThumbLength(This) -&gt; integer()</string>
		<string>wxSlider:getValue</string>
		<string>wxSlider:getValue(&lt;#This#&gt;)</string>
		<string>wxSlider:getValue(This) -&gt; integer()</string>
		<string>wxSlider:setLineSize</string>
		<string>wxSlider:setLineSize(&lt;#This#&gt;, &lt;#LineSize#&gt;)</string>
		<string>wxSlider:setLineSize(This, LineSize) -&gt; ok</string>
		<string>wxSlider:setPageSize</string>
		<string>wxSlider:setPageSize(&lt;#This#&gt;, &lt;#PageSize#&gt;)</string>
		<string>wxSlider:setPageSize(This, PageSize) -&gt; ok</string>
		<string>wxSlider:setRange</string>
		<string>wxSlider:setRange(&lt;#This#&gt;, &lt;#MinValue#&gt;, &lt;#MaxValue#&gt;)</string>
		<string>wxSlider:setRange(This, MinValue, MaxValue) -&gt; ok</string>
		<string>wxSlider:setThumbLength</string>
		<string>wxSlider:setThumbLength(&lt;#This#&gt;, &lt;#LenPixels#&gt;)</string>
		<string>wxSlider:setThumbLength(This, LenPixels) -&gt; ok</string>
		<string>wxSlider:setValue</string>
		<string>wxSlider:setValue(&lt;#This#&gt;, &lt;#Value#&gt;)</string>
		<string>wxSlider:setValue(This, Value) -&gt; ok</string>
		<string>wxSlider:destroy</string>
		<string>wxSlider:destroy(&lt;#This::wxSlider()#&gt;)</string>
		<string>wxSlider:destroy(This::wxSlider()) -&gt; ok</string>
		<string>wxSpinButton:new</string>
		<string>wxSpinButton:new()</string>
		<string>wxSpinButton:new() -&gt; wxSpinButton()</string>
		<string>wxSpinButton:new</string>
		<string>wxSpinButton:new(&lt;#Parent#&gt;)</string>
		<string>wxSpinButton:new(Parent) -&gt; wxSpinButton()</string>
		<string>wxSpinButton:new</string>
		<string>wxSpinButton:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSpinButton:new(Parent, Option::[Option]) -&gt; wxSpinButton()</string>
		<string>wxSpinButton:create</string>
		<string>wxSpinButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxSpinButton:create(This, Parent) -&gt; boolean()</string>
		<string>wxSpinButton:create</string>
		<string>wxSpinButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSpinButton:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxSpinButton:getMax</string>
		<string>wxSpinButton:getMax(&lt;#This#&gt;)</string>
		<string>wxSpinButton:getMax(This) -&gt; integer()</string>
		<string>wxSpinButton:getMin</string>
		<string>wxSpinButton:getMin(&lt;#This#&gt;)</string>
		<string>wxSpinButton:getMin(This) -&gt; integer()</string>
		<string>wxSpinButton:getValue</string>
		<string>wxSpinButton:getValue(&lt;#This#&gt;)</string>
		<string>wxSpinButton:getValue(This) -&gt; integer()</string>
		<string>wxSpinButton:setRange</string>
		<string>wxSpinButton:setRange(&lt;#This#&gt;, &lt;#MinVal#&gt;, &lt;#MaxVal#&gt;)</string>
		<string>wxSpinButton:setRange(This, MinVal, MaxVal) -&gt; ok</string>
		<string>wxSpinButton:setValue</string>
		<string>wxSpinButton:setValue(&lt;#This#&gt;, &lt;#Value#&gt;)</string>
		<string>wxSpinButton:setValue(This, Value) -&gt; ok</string>
		<string>wxSpinButton:destroy</string>
		<string>wxSpinButton:destroy(&lt;#This::wxSpinButton()#&gt;)</string>
		<string>wxSpinButton:destroy(This::wxSpinButton()) -&gt; ok</string>
		<string>wxSpinCtrl:new</string>
		<string>wxSpinCtrl:new()</string>
		<string>wxSpinCtrl:new() -&gt; wxSpinCtrl()</string>
		<string>wxSpinCtrl:new</string>
		<string>wxSpinCtrl:new(&lt;#Parent#&gt;)</string>
		<string>wxSpinCtrl:new(Parent) -&gt; wxSpinCtrl()</string>
		<string>wxSpinCtrl:new</string>
		<string>wxSpinCtrl:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSpinCtrl:new(Parent, Option::[Option]) -&gt; wxSpinCtrl()</string>
		<string>wxSpinCtrl:create</string>
		<string>wxSpinCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxSpinCtrl:create(This, Parent) -&gt; boolean()</string>
		<string>wxSpinCtrl:create</string>
		<string>wxSpinCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSpinCtrl:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxSpinCtrl:setValue</string>
		<string>wxSpinCtrl:setValue(&lt;#This#&gt;, &lt;#Value#&gt;)</string>
		<string>wxSpinCtrl:setValue(This, Value) -&gt; ok</string>
		<string>wxSpinCtrl:getValue</string>
		<string>wxSpinCtrl:getValue(&lt;#This#&gt;)</string>
		<string>wxSpinCtrl:getValue(This) -&gt; integer()</string>
		<string>wxSpinCtrl:setRange</string>
		<string>wxSpinCtrl:setRange(&lt;#This#&gt;, &lt;#MinVal#&gt;, &lt;#MaxVal#&gt;)</string>
		<string>wxSpinCtrl:setRange(This, MinVal, MaxVal) -&gt; ok</string>
		<string>wxSpinCtrl:setSelection</string>
		<string>wxSpinCtrl:setSelection(&lt;#This#&gt;, &lt;#From#&gt;, &lt;#To#&gt;)</string>
		<string>wxSpinCtrl:setSelection(This, From, To) -&gt; ok</string>
		<string>wxSpinCtrl:getMin</string>
		<string>wxSpinCtrl:getMin(&lt;#This#&gt;)</string>
		<string>wxSpinCtrl:getMin(This) -&gt; integer()</string>
		<string>wxSpinCtrl:getMax</string>
		<string>wxSpinCtrl:getMax(&lt;#This#&gt;)</string>
		<string>wxSpinCtrl:getMax(This) -&gt; integer()</string>
		<string>wxSpinCtrl:destroy</string>
		<string>wxSpinCtrl:destroy(&lt;#This::wxSpinCtrl()#&gt;)</string>
		<string>wxSpinCtrl:destroy(This::wxSpinCtrl()) -&gt; ok</string>
		<string>wxSpinEvent:getPosition</string>
		<string>wxSpinEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxSpinEvent:getPosition(This) -&gt; integer()</string>
		<string>wxSpinEvent:setPosition</string>
		<string>wxSpinEvent:setPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxSpinEvent:setPosition(This, Pos) -&gt; ok</string>
		<string>wxSplashScreen:new</string>
		<string>wxSplashScreen:new()</string>
		<string>wxSplashScreen:new() -&gt; wxSplashScreen()</string>
		<string>wxSplashScreen:new</string>
		<string>wxSplashScreen:new(&lt;#Bitmap#&gt;, &lt;#SplashStyle#&gt;, &lt;#Milliseconds#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxSplashScreen:new(Bitmap, SplashStyle, Milliseconds, Parent, Id) -&gt; wxSplashScreen()</string>
		<string>wxSplashScreen:new</string>
		<string>wxSplashScreen:new(&lt;#Bitmap#&gt;, &lt;#SplashStyle#&gt;, &lt;#Milliseconds#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSplashScreen:new(Bitmap, SplashStyle, Milliseconds, Parent, Id, Option::[Option]) -&gt; wxSplashScreen()</string>
		<string>wxSplashScreen:getSplashStyle</string>
		<string>wxSplashScreen:getSplashStyle(&lt;#This#&gt;)</string>
		<string>wxSplashScreen:getSplashStyle(This) -&gt; integer()</string>
		<string>wxSplashScreen:getTimeout</string>
		<string>wxSplashScreen:getTimeout(&lt;#This#&gt;)</string>
		<string>wxSplashScreen:getTimeout(This) -&gt; integer()</string>
		<string>wxSplashScreen:destroy</string>
		<string>wxSplashScreen:destroy(&lt;#This::wxSplashScreen()#&gt;)</string>
		<string>wxSplashScreen:destroy(This::wxSplashScreen()) -&gt; ok</string>
		<string>wxSplitterEvent:getSashPosition</string>
		<string>wxSplitterEvent:getSashPosition(&lt;#This#&gt;)</string>
		<string>wxSplitterEvent:getSashPosition(This) -&gt; integer()</string>
		<string>wxSplitterEvent:getX</string>
		<string>wxSplitterEvent:getX(&lt;#This#&gt;)</string>
		<string>wxSplitterEvent:getX(This) -&gt; integer()</string>
		<string>wxSplitterEvent:getY</string>
		<string>wxSplitterEvent:getY(&lt;#This#&gt;)</string>
		<string>wxSplitterEvent:getY(This) -&gt; integer()</string>
		<string>wxSplitterEvent:getWindowBeingRemoved</string>
		<string>wxSplitterEvent:getWindowBeingRemoved(&lt;#This#&gt;)</string>
		<string>wxSplitterEvent:getWindowBeingRemoved(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxSplitterEvent:setSashPosition</string>
		<string>wxSplitterEvent:setSashPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxSplitterEvent:setSashPosition(This, Pos) -&gt; ok</string>
		<string>wxSplitterWindow:new</string>
		<string>wxSplitterWindow:new()</string>
		<string>wxSplitterWindow:new() -&gt; wxSplitterWindow()</string>
		<string>wxSplitterWindow:new</string>
		<string>wxSplitterWindow:new(&lt;#Parent#&gt;)</string>
		<string>wxSplitterWindow:new(Parent) -&gt; wxSplitterWindow()</string>
		<string>wxSplitterWindow:new</string>
		<string>wxSplitterWindow:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSplitterWindow:new(Parent, Option::[Option]) -&gt; wxSplitterWindow()</string>
		<string>wxSplitterWindow:create</string>
		<string>wxSplitterWindow:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxSplitterWindow:create(This, Parent) -&gt; boolean()</string>
		<string>wxSplitterWindow:create</string>
		<string>wxSplitterWindow:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSplitterWindow:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxSplitterWindow:getMinimumPaneSize</string>
		<string>wxSplitterWindow:getMinimumPaneSize(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:getMinimumPaneSize(This) -&gt; integer()</string>
		<string>wxSplitterWindow:getSashGravity</string>
		<string>wxSplitterWindow:getSashGravity(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:getSashGravity(This) -&gt; number()</string>
		<string>wxSplitterWindow:getSashPosition</string>
		<string>wxSplitterWindow:getSashPosition(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:getSashPosition(This) -&gt; integer()</string>
		<string>wxSplitterWindow:getSplitMode</string>
		<string>wxSplitterWindow:getSplitMode(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:getSplitMode(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxSplitterWindow:getWindow1</string>
		<string>wxSplitterWindow:getWindow1(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:getWindow1(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxSplitterWindow:getWindow2</string>
		<string>wxSplitterWindow:getWindow2(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:getWindow2(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxSplitterWindow:initialize</string>
		<string>wxSplitterWindow:initialize(&lt;#This#&gt;, &lt;#Window#&gt;)</string>
		<string>wxSplitterWindow:initialize(This, Window) -&gt; ok</string>
		<string>wxSplitterWindow:isSplit</string>
		<string>wxSplitterWindow:isSplit(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:isSplit(This) -&gt; boolean()</string>
		<string>wxSplitterWindow:replaceWindow</string>
		<string>wxSplitterWindow:replaceWindow(&lt;#This#&gt;, &lt;#WinOld#&gt;, &lt;#WinNew#&gt;)</string>
		<string>wxSplitterWindow:replaceWindow(This, WinOld, WinNew) -&gt; boolean()</string>
		<string>wxSplitterWindow:setSashGravity</string>
		<string>wxSplitterWindow:setSashGravity(&lt;#This#&gt;, &lt;#Gravity#&gt;)</string>
		<string>wxSplitterWindow:setSashGravity(This, Gravity) -&gt; ok</string>
		<string>wxSplitterWindow:setSashPosition</string>
		<string>wxSplitterWindow:setSashPosition(&lt;#This#&gt;, &lt;#Position#&gt;)</string>
		<string>wxSplitterWindow:setSashPosition(This, Position) -&gt; ok</string>
		<string>wxSplitterWindow:setSashPosition</string>
		<string>wxSplitterWindow:setSashPosition(&lt;#This#&gt;, &lt;#Position#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSplitterWindow:setSashPosition(This, Position, Option::[Option]) -&gt; ok</string>
		<string>wxSplitterWindow:setSashSize</string>
		<string>wxSplitterWindow:setSashSize(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxSplitterWindow:setSashSize(This, Width) -&gt; ok</string>
		<string>wxSplitterWindow:setMinimumPaneSize</string>
		<string>wxSplitterWindow:setMinimumPaneSize(&lt;#This#&gt;, &lt;#Min#&gt;)</string>
		<string>wxSplitterWindow:setMinimumPaneSize(This, Min) -&gt; ok</string>
		<string>wxSplitterWindow:setSplitMode</string>
		<string>wxSplitterWindow:setSplitMode(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxSplitterWindow:setSplitMode(This, Mode) -&gt; ok</string>
		<string>wxSplitterWindow:splitHorizontally</string>
		<string>wxSplitterWindow:splitHorizontally(&lt;#This#&gt;, &lt;#Window1#&gt;, &lt;#Window2#&gt;)</string>
		<string>wxSplitterWindow:splitHorizontally(This, Window1, Window2) -&gt; boolean()</string>
		<string>wxSplitterWindow:splitHorizontally</string>
		<string>wxSplitterWindow:splitHorizontally(&lt;#This#&gt;, &lt;#Window1#&gt;, &lt;#Window2#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSplitterWindow:splitHorizontally(This, Window1, Window2, Option::[Option]) -&gt; boolean()</string>
		<string>wxSplitterWindow:splitVertically</string>
		<string>wxSplitterWindow:splitVertically(&lt;#This#&gt;, &lt;#Window1#&gt;, &lt;#Window2#&gt;)</string>
		<string>wxSplitterWindow:splitVertically(This, Window1, Window2) -&gt; boolean()</string>
		<string>wxSplitterWindow:splitVertically</string>
		<string>wxSplitterWindow:splitVertically(&lt;#This#&gt;, &lt;#Window1#&gt;, &lt;#Window2#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSplitterWindow:splitVertically(This, Window1, Window2, Option::[Option]) -&gt; boolean()</string>
		<string>wxSplitterWindow:unsplit</string>
		<string>wxSplitterWindow:unsplit(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:unsplit(This) -&gt; boolean()</string>
		<string>wxSplitterWindow:unsplit</string>
		<string>wxSplitterWindow:unsplit(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSplitterWindow:unsplit(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxSplitterWindow:updateSize</string>
		<string>wxSplitterWindow:updateSize(&lt;#This#&gt;)</string>
		<string>wxSplitterWindow:updateSize(This) -&gt; ok</string>
		<string>wxSplitterWindow:destroy</string>
		<string>wxSplitterWindow:destroy(&lt;#This::wxSplitterWindow()#&gt;)</string>
		<string>wxSplitterWindow:destroy(This::wxSplitterWindow()) -&gt; ok</string>
		<string>wxStaticBitmap:new</string>
		<string>wxStaticBitmap:new()</string>
		<string>wxStaticBitmap:new() -&gt; wxStaticBitmap()</string>
		<string>wxStaticBitmap:new</string>
		<string>wxStaticBitmap:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxStaticBitmap:new(Parent, Id, Label) -&gt; wxStaticBitmap()</string>
		<string>wxStaticBitmap:new</string>
		<string>wxStaticBitmap:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticBitmap:new(Parent, Id, Label, Option::[Option]) -&gt; wxStaticBitmap()</string>
		<string>wxStaticBitmap:create</string>
		<string>wxStaticBitmap:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxStaticBitmap:create(This, Parent, Id, Label) -&gt; boolean()</string>
		<string>wxStaticBitmap:create</string>
		<string>wxStaticBitmap:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticBitmap:create(This, Parent, Id, Label, Option::[Option]) -&gt; boolean()</string>
		<string>wxStaticBitmap:getBitmap</string>
		<string>wxStaticBitmap:getBitmap(&lt;#This#&gt;)</string>
		<string>wxStaticBitmap:getBitmap(This) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxStaticBitmap:setBitmap</string>
		<string>wxStaticBitmap:setBitmap(&lt;#This#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxStaticBitmap:setBitmap(This, Bitmap) -&gt; ok</string>
		<string>wxStaticBitmap:destroy</string>
		<string>wxStaticBitmap:destroy(&lt;#This::wxStaticBitmap()#&gt;)</string>
		<string>wxStaticBitmap:destroy(This::wxStaticBitmap()) -&gt; ok</string>
		<string>wxStaticBox:new</string>
		<string>wxStaticBox:new()</string>
		<string>wxStaticBox:new() -&gt; wxStaticBox()</string>
		<string>wxStaticBox:new</string>
		<string>wxStaticBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxStaticBox:new(Parent, Id, Label) -&gt; wxStaticBox()</string>
		<string>wxStaticBox:new</string>
		<string>wxStaticBox:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticBox:new(Parent, Id, Label, Option::[Option]) -&gt; wxStaticBox()</string>
		<string>wxStaticBox:create</string>
		<string>wxStaticBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxStaticBox:create(This, Parent, Id, Label) -&gt; boolean()</string>
		<string>wxStaticBox:create</string>
		<string>wxStaticBox:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticBox:create(This, Parent, Id, Label, Option::[Option]) -&gt; boolean()</string>
		<string>wxStaticBox:destroy</string>
		<string>wxStaticBox:destroy(&lt;#This::wxStaticBox()#&gt;)</string>
		<string>wxStaticBox:destroy(This::wxStaticBox()) -&gt; ok</string>
		<string>wxStaticBoxSizer:new</string>
		<string>wxStaticBoxSizer:new(&lt;#Orient#&gt;, &lt;#Win#&gt;)</string>
		<string>wxStaticBoxSizer:new(Orient, Win) -&gt; wxStaticBoxSizer()</string>
		<string>wxStaticBoxSizer:new</string>
		<string>wxStaticBoxSizer:new(&lt;#Orient#&gt;, &lt;#Win#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticBoxSizer:new(Orient, Win, Option::[Option]) -&gt; wxStaticBoxSizer()</string>
		<string>wxStaticBoxSizer:getStaticBox</string>
		<string>wxStaticBoxSizer:getStaticBox(&lt;#This#&gt;)</string>
		<string>wxStaticBoxSizer:getStaticBox(This) -&gt; wxStaticBox() (see module wxStaticBox)</string>
		<string>wxStaticBoxSizer:destroy</string>
		<string>wxStaticBoxSizer:destroy(&lt;#This::wxStaticBoxSizer()#&gt;)</string>
		<string>wxStaticBoxSizer:destroy(This::wxStaticBoxSizer()) -&gt; ok</string>
		<string>wxStaticLine:new</string>
		<string>wxStaticLine:new()</string>
		<string>wxStaticLine:new() -&gt; wxStaticLine()</string>
		<string>wxStaticLine:new</string>
		<string>wxStaticLine:new(&lt;#Parent#&gt;)</string>
		<string>wxStaticLine:new(Parent) -&gt; wxStaticLine()</string>
		<string>wxStaticLine:new</string>
		<string>wxStaticLine:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticLine:new(Parent, Option::[Option]) -&gt; wxStaticLine()</string>
		<string>wxStaticLine:create</string>
		<string>wxStaticLine:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxStaticLine:create(This, Parent) -&gt; boolean()</string>
		<string>wxStaticLine:create</string>
		<string>wxStaticLine:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticLine:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxStaticLine:isVertical</string>
		<string>wxStaticLine:isVertical(&lt;#This#&gt;)</string>
		<string>wxStaticLine:isVertical(This) -&gt; boolean()</string>
		<string>wxStaticLine:getDefaultSize</string>
		<string>wxStaticLine:getDefaultSize()</string>
		<string>wxStaticLine:getDefaultSize() -&gt; integer()</string>
		<string>wxStaticLine:destroy</string>
		<string>wxStaticLine:destroy(&lt;#This::wxStaticLine()#&gt;)</string>
		<string>wxStaticLine:destroy(This::wxStaticLine()) -&gt; ok</string>
		<string>wxStaticText:new</string>
		<string>wxStaticText:new()</string>
		<string>wxStaticText:new() -&gt; wxStaticText()</string>
		<string>wxStaticText:new</string>
		<string>wxStaticText:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxStaticText:new(Parent, Id, Label) -&gt; wxStaticText()</string>
		<string>wxStaticText:new</string>
		<string>wxStaticText:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticText:new(Parent, Id, Label, Option::[Option]) -&gt; wxStaticText()</string>
		<string>wxStaticText:create</string>
		<string>wxStaticText:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxStaticText:create(This, Parent, Id, Label) -&gt; boolean()</string>
		<string>wxStaticText:create</string>
		<string>wxStaticText:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStaticText:create(This, Parent, Id, Label, Option::[Option]) -&gt; boolean()</string>
		<string>wxStaticText:getLabel</string>
		<string>wxStaticText:getLabel(&lt;#This#&gt;)</string>
		<string>wxStaticText:getLabel(This) -&gt; charlist() (see module unicode)</string>
		<string>wxStaticText:setLabel</string>
		<string>wxStaticText:setLabel(&lt;#This#&gt;, &lt;#Label#&gt;)</string>
		<string>wxStaticText:setLabel(This, Label) -&gt; ok</string>
		<string>wxStaticText:wrap</string>
		<string>wxStaticText:wrap(&lt;#This#&gt;, &lt;#Width#&gt;)</string>
		<string>wxStaticText:wrap(This, Width) -&gt; ok</string>
		<string>wxStaticText:destroy</string>
		<string>wxStaticText:destroy(&lt;#This::wxStaticText()#&gt;)</string>
		<string>wxStaticText:destroy(This::wxStaticText()) -&gt; ok</string>
		<string>wxStatusBar:new</string>
		<string>wxStatusBar:new()</string>
		<string>wxStatusBar:new() -&gt; wxStatusBar()</string>
		<string>wxStatusBar:new</string>
		<string>wxStatusBar:new(&lt;#Parent#&gt;)</string>
		<string>wxStatusBar:new(Parent) -&gt; wxStatusBar()</string>
		<string>wxStatusBar:new</string>
		<string>wxStatusBar:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStatusBar:new(Parent, Option::[Option]) -&gt; wxStatusBar()</string>
		<string>wxStatusBar:create</string>
		<string>wxStatusBar:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxStatusBar:create(This, Parent) -&gt; boolean()</string>
		<string>wxStatusBar:create</string>
		<string>wxStatusBar:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStatusBar:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxStatusBar:getFieldRect</string>
		<string>wxStatusBar:getFieldRect(&lt;#This#&gt;, &lt;#I#&gt;)</string>
		<string>wxStatusBar:getFieldRect(This, I) -&gt; Result</string>
		<string>wxStatusBar:getFieldsCount</string>
		<string>wxStatusBar:getFieldsCount(&lt;#This#&gt;)</string>
		<string>wxStatusBar:getFieldsCount(This) -&gt; integer()</string>
		<string>wxStatusBar:getStatusText</string>
		<string>wxStatusBar:getStatusText(&lt;#This#&gt;)</string>
		<string>wxStatusBar:getStatusText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxStatusBar:getStatusText</string>
		<string>wxStatusBar:getStatusText(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStatusBar:getStatusText(This, Option::[Option]) -&gt; charlist() (see module unicode)</string>
		<string>wxStatusBar:popStatusText</string>
		<string>wxStatusBar:popStatusText(&lt;#This#&gt;)</string>
		<string>wxStatusBar:popStatusText(This) -&gt; ok</string>
		<string>wxStatusBar:popStatusText</string>
		<string>wxStatusBar:popStatusText(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStatusBar:popStatusText(This, Option::[Option]) -&gt; ok</string>
		<string>wxStatusBar:pushStatusText</string>
		<string>wxStatusBar:pushStatusText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStatusBar:pushStatusText(This, Text) -&gt; ok</string>
		<string>wxStatusBar:pushStatusText</string>
		<string>wxStatusBar:pushStatusText(&lt;#This#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStatusBar:pushStatusText(This, Text, Option::[Option]) -&gt; ok</string>
		<string>wxStatusBar:setFieldsCount</string>
		<string>wxStatusBar:setFieldsCount(&lt;#This#&gt;, &lt;#Number#&gt;)</string>
		<string>wxStatusBar:setFieldsCount(This, Number) -&gt; ok</string>
		<string>wxStatusBar:setFieldsCount</string>
		<string>wxStatusBar:setFieldsCount(&lt;#This#&gt;, &lt;#Number#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStatusBar:setFieldsCount(This, Number, Option::[Option]) -&gt; ok</string>
		<string>wxStatusBar:setMinHeight</string>
		<string>wxStatusBar:setMinHeight(&lt;#This#&gt;, &lt;#Height#&gt;)</string>
		<string>wxStatusBar:setMinHeight(This, Height) -&gt; ok</string>
		<string>wxStatusBar:setStatusText</string>
		<string>wxStatusBar:setStatusText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStatusBar:setStatusText(This, Text) -&gt; ok</string>
		<string>wxStatusBar:setStatusText</string>
		<string>wxStatusBar:setStatusText(&lt;#This#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStatusBar:setStatusText(This, Text, Option::[Option]) -&gt; ok</string>
		<string>wxStatusBar:setStatusWidths</string>
		<string>wxStatusBar:setStatusWidths(&lt;#This#&gt;, &lt;#Widths_field#&gt;)</string>
		<string>wxStatusBar:setStatusWidths(This, Widths_field) -&gt; ok</string>
		<string>wxStatusBar:setStatusStyles</string>
		<string>wxStatusBar:setStatusStyles(&lt;#This#&gt;, &lt;#Styles#&gt;)</string>
		<string>wxStatusBar:setStatusStyles(This, Styles) -&gt; ok</string>
		<string>wxStatusBar:destroy</string>
		<string>wxStatusBar:destroy(&lt;#This::wxStatusBar()#&gt;)</string>
		<string>wxStatusBar:destroy(This::wxStatusBar()) -&gt; ok</string>
		<string>wxStdDialogButtonSizer:new</string>
		<string>wxStdDialogButtonSizer:new()</string>
		<string>wxStdDialogButtonSizer:new() -&gt; wxStdDialogButtonSizer()</string>
		<string>wxStdDialogButtonSizer:addButton</string>
		<string>wxStdDialogButtonSizer:addButton(&lt;#This#&gt;, &lt;#Button#&gt;)</string>
		<string>wxStdDialogButtonSizer:addButton(This, Button) -&gt; ok</string>
		<string>wxStdDialogButtonSizer:realize</string>
		<string>wxStdDialogButtonSizer:realize(&lt;#This#&gt;)</string>
		<string>wxStdDialogButtonSizer:realize(This) -&gt; ok</string>
		<string>wxStdDialogButtonSizer:setAffirmativeButton</string>
		<string>wxStdDialogButtonSizer:setAffirmativeButton(&lt;#This#&gt;, &lt;#Button#&gt;)</string>
		<string>wxStdDialogButtonSizer:setAffirmativeButton(This, Button) -&gt; ok</string>
		<string>wxStdDialogButtonSizer:setCancelButton</string>
		<string>wxStdDialogButtonSizer:setCancelButton(&lt;#This#&gt;, &lt;#Button#&gt;)</string>
		<string>wxStdDialogButtonSizer:setCancelButton(This, Button) -&gt; ok</string>
		<string>wxStdDialogButtonSizer:setNegativeButton</string>
		<string>wxStdDialogButtonSizer:setNegativeButton(&lt;#This#&gt;, &lt;#Button#&gt;)</string>
		<string>wxStdDialogButtonSizer:setNegativeButton(This, Button) -&gt; ok</string>
		<string>wxStdDialogButtonSizer:destroy</string>
		<string>wxStdDialogButtonSizer:destroy(&lt;#This::wxStdDialogButtonSizer()#&gt;)</string>
		<string>wxStdDialogButtonSizer:destroy(This::wxStdDialogButtonSizer()) -&gt; ok</string>
		<string>wxStyledTextCtrl:new</string>
		<string>wxStyledTextCtrl:new()</string>
		<string>wxStyledTextCtrl:new() -&gt; wxStyledTextCtrl()</string>
		<string>wxStyledTextCtrl:new</string>
		<string>wxStyledTextCtrl:new(&lt;#Parent#&gt;)</string>
		<string>wxStyledTextCtrl:new(Parent) -&gt; wxStyledTextCtrl()</string>
		<string>wxStyledTextCtrl:new</string>
		<string>wxStyledTextCtrl:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStyledTextCtrl:new(Parent, Option::[Option]) -&gt; wxStyledTextCtrl()</string>
		<string>wxStyledTextCtrl:create</string>
		<string>wxStyledTextCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxStyledTextCtrl:create(This, Parent) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:create</string>
		<string>wxStyledTextCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStyledTextCtrl:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:addText</string>
		<string>wxStyledTextCtrl:addText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:addText(This, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:addStyledText</string>
		<string>wxStyledTextCtrl:addStyledText(&lt;#This#&gt;, &lt;#Data#&gt;)</string>
		<string>wxStyledTextCtrl:addStyledText(This, Data) -&gt; ok</string>
		<string>wxStyledTextCtrl:insertText</string>
		<string>wxStyledTextCtrl:insertText(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:insertText(This, Pos, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:clearAll</string>
		<string>wxStyledTextCtrl:clearAll(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:clearAll(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:clearDocumentStyle</string>
		<string>wxStyledTextCtrl:clearDocumentStyle(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:clearDocumentStyle(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:getLength</string>
		<string>wxStyledTextCtrl:getLength(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getLength(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getCharAt</string>
		<string>wxStyledTextCtrl:getCharAt(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:getCharAt(This, Pos) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getCurrentPos</string>
		<string>wxStyledTextCtrl:getCurrentPos(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCurrentPos(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getAnchor</string>
		<string>wxStyledTextCtrl:getAnchor(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getAnchor(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getStyleAt</string>
		<string>wxStyledTextCtrl:getStyleAt(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:getStyleAt(This, Pos) -&gt; integer()</string>
		<string>wxStyledTextCtrl:redo</string>
		<string>wxStyledTextCtrl:redo(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:redo(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setUndoCollection</string>
		<string>wxStyledTextCtrl:setUndoCollection(&lt;#This#&gt;, &lt;#CollectUndo#&gt;)</string>
		<string>wxStyledTextCtrl:setUndoCollection(This, CollectUndo) -&gt; ok</string>
		<string>wxStyledTextCtrl:selectAll</string>
		<string>wxStyledTextCtrl:selectAll(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:selectAll(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setSavePoint</string>
		<string>wxStyledTextCtrl:setSavePoint(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:setSavePoint(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:getStyledText</string>
		<string>wxStyledTextCtrl:getStyledText(&lt;#This#&gt;, &lt;#StartPos#&gt;, &lt;#EndPos#&gt;)</string>
		<string>wxStyledTextCtrl:getStyledText(This, StartPos, EndPos) -&gt; wx_object() (see module wx)</string>
		<string>wxStyledTextCtrl:canRedo</string>
		<string>wxStyledTextCtrl:canRedo(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:canRedo(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:markerLineFromHandle</string>
		<string>wxStyledTextCtrl:markerLineFromHandle(&lt;#This#&gt;, &lt;#Handle#&gt;)</string>
		<string>wxStyledTextCtrl:markerLineFromHandle(This, Handle) -&gt; integer()</string>
		<string>wxStyledTextCtrl:markerDeleteHandle</string>
		<string>wxStyledTextCtrl:markerDeleteHandle(&lt;#This#&gt;, &lt;#Handle#&gt;)</string>
		<string>wxStyledTextCtrl:markerDeleteHandle(This, Handle) -&gt; ok</string>
		<string>wxStyledTextCtrl:getUndoCollection</string>
		<string>wxStyledTextCtrl:getUndoCollection(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getUndoCollection(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:getViewWhiteSpace</string>
		<string>wxStyledTextCtrl:getViewWhiteSpace(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getViewWhiteSpace(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setViewWhiteSpace</string>
		<string>wxStyledTextCtrl:setViewWhiteSpace(&lt;#This#&gt;, &lt;#ViewWS#&gt;)</string>
		<string>wxStyledTextCtrl:setViewWhiteSpace(This, ViewWS) -&gt; ok</string>
		<string>wxStyledTextCtrl:positionFromPoint</string>
		<string>wxStyledTextCtrl:positionFromPoint(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxStyledTextCtrl:positionFromPoint(This, Pt) -&gt; integer()</string>
		<string>wxStyledTextCtrl:positionFromPointClose</string>
		<string>wxStyledTextCtrl:positionFromPointClose(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxStyledTextCtrl:positionFromPointClose(This, X, Y) -&gt; integer()</string>
		<string>wxStyledTextCtrl:gotoLine</string>
		<string>wxStyledTextCtrl:gotoLine(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:gotoLine(This, Line) -&gt; ok</string>
		<string>wxStyledTextCtrl:gotoPos</string>
		<string>wxStyledTextCtrl:gotoPos(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:gotoPos(This, Pos) -&gt; ok</string>
		<string>wxStyledTextCtrl:setAnchor</string>
		<string>wxStyledTextCtrl:setAnchor(&lt;#This#&gt;, &lt;#PosAnchor#&gt;)</string>
		<string>wxStyledTextCtrl:setAnchor(This, PosAnchor) -&gt; ok</string>
		<string>wxStyledTextCtrl:getCurLine</string>
		<string>wxStyledTextCtrl:getCurLine(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCurLine(This) -&gt; Result</string>
		<string>wxStyledTextCtrl:getEndStyled</string>
		<string>wxStyledTextCtrl:getEndStyled(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getEndStyled(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:convertEOLs</string>
		<string>wxStyledTextCtrl:convertEOLs(&lt;#This#&gt;, &lt;#EolMode#&gt;)</string>
		<string>wxStyledTextCtrl:convertEOLs(This, EolMode) -&gt; ok</string>
		<string>wxStyledTextCtrl:getEOLMode</string>
		<string>wxStyledTextCtrl:getEOLMode(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getEOLMode(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setEOLMode</string>
		<string>wxStyledTextCtrl:setEOLMode(&lt;#This#&gt;, &lt;#EolMode#&gt;)</string>
		<string>wxStyledTextCtrl:setEOLMode(This, EolMode) -&gt; ok</string>
		<string>wxStyledTextCtrl:startStyling</string>
		<string>wxStyledTextCtrl:startStyling(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Mask#&gt;)</string>
		<string>wxStyledTextCtrl:startStyling(This, Pos, Mask) -&gt; ok</string>
		<string>wxStyledTextCtrl:setStyling</string>
		<string>wxStyledTextCtrl:setStyling(&lt;#This#&gt;, &lt;#Length#&gt;, &lt;#Style#&gt;)</string>
		<string>wxStyledTextCtrl:setStyling(This, Length, Style) -&gt; ok</string>
		<string>wxStyledTextCtrl:getBufferedDraw</string>
		<string>wxStyledTextCtrl:getBufferedDraw(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getBufferedDraw(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setBufferedDraw</string>
		<string>wxStyledTextCtrl:setBufferedDraw(&lt;#This#&gt;, &lt;#Buffered#&gt;)</string>
		<string>wxStyledTextCtrl:setBufferedDraw(This, Buffered) -&gt; ok</string>
		<string>wxStyledTextCtrl:setTabWidth</string>
		<string>wxStyledTextCtrl:setTabWidth(&lt;#This#&gt;, &lt;#TabWidth#&gt;)</string>
		<string>wxStyledTextCtrl:setTabWidth(This, TabWidth) -&gt; ok</string>
		<string>wxStyledTextCtrl:getTabWidth</string>
		<string>wxStyledTextCtrl:getTabWidth(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getTabWidth(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setCodePage</string>
		<string>wxStyledTextCtrl:setCodePage(&lt;#This#&gt;, &lt;#CodePage#&gt;)</string>
		<string>wxStyledTextCtrl:setCodePage(This, CodePage) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerDefine</string>
		<string>wxStyledTextCtrl:markerDefine(&lt;#This#&gt;, &lt;#MarkerNumber#&gt;, &lt;#MarkerSymbol#&gt;)</string>
		<string>wxStyledTextCtrl:markerDefine(This, MarkerNumber, MarkerSymbol) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerDefine</string>
		<string>wxStyledTextCtrl:markerDefine(&lt;#This#&gt;, &lt;#MarkerNumber#&gt;, &lt;#MarkerSymbol#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStyledTextCtrl:markerDefine(This, MarkerNumber, MarkerSymbol, Option::[Option]) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerSetForeground</string>
		<string>wxStyledTextCtrl:markerSetForeground(&lt;#This#&gt;, &lt;#MarkerNumber#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:markerSetForeground(This, MarkerNumber, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerSetBackground</string>
		<string>wxStyledTextCtrl:markerSetBackground(&lt;#This#&gt;, &lt;#MarkerNumber#&gt;, &lt;#Back#&gt;)</string>
		<string>wxStyledTextCtrl:markerSetBackground(This, MarkerNumber, Back) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerAdd</string>
		<string>wxStyledTextCtrl:markerAdd(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#MarkerNumber#&gt;)</string>
		<string>wxStyledTextCtrl:markerAdd(This, Line, MarkerNumber) -&gt; integer()</string>
		<string>wxStyledTextCtrl:markerDelete</string>
		<string>wxStyledTextCtrl:markerDelete(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#MarkerNumber#&gt;)</string>
		<string>wxStyledTextCtrl:markerDelete(This, Line, MarkerNumber) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerDeleteAll</string>
		<string>wxStyledTextCtrl:markerDeleteAll(&lt;#This#&gt;, &lt;#MarkerNumber#&gt;)</string>
		<string>wxStyledTextCtrl:markerDeleteAll(This, MarkerNumber) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerGet</string>
		<string>wxStyledTextCtrl:markerGet(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:markerGet(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:markerNext</string>
		<string>wxStyledTextCtrl:markerNext(&lt;#This#&gt;, &lt;#LineStart#&gt;, &lt;#MarkerMask#&gt;)</string>
		<string>wxStyledTextCtrl:markerNext(This, LineStart, MarkerMask) -&gt; integer()</string>
		<string>wxStyledTextCtrl:markerPrevious</string>
		<string>wxStyledTextCtrl:markerPrevious(&lt;#This#&gt;, &lt;#LineStart#&gt;, &lt;#MarkerMask#&gt;)</string>
		<string>wxStyledTextCtrl:markerPrevious(This, LineStart, MarkerMask) -&gt; integer()</string>
		<string>wxStyledTextCtrl:markerDefineBitmap</string>
		<string>wxStyledTextCtrl:markerDefineBitmap(&lt;#This#&gt;, &lt;#MarkerNumber#&gt;, &lt;#Bmp#&gt;)</string>
		<string>wxStyledTextCtrl:markerDefineBitmap(This, MarkerNumber, Bmp) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerAddSet</string>
		<string>wxStyledTextCtrl:markerAddSet(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#Set#&gt;)</string>
		<string>wxStyledTextCtrl:markerAddSet(This, Line, Set) -&gt; ok</string>
		<string>wxStyledTextCtrl:markerSetAlpha</string>
		<string>wxStyledTextCtrl:markerSetAlpha(&lt;#This#&gt;, &lt;#MarkerNumber#&gt;, &lt;#Alpha#&gt;)</string>
		<string>wxStyledTextCtrl:markerSetAlpha(This, MarkerNumber, Alpha) -&gt; ok</string>
		<string>wxStyledTextCtrl:setMarginType</string>
		<string>wxStyledTextCtrl:setMarginType(&lt;#This#&gt;, &lt;#Margin#&gt;, &lt;#MarginType#&gt;)</string>
		<string>wxStyledTextCtrl:setMarginType(This, Margin, MarginType) -&gt; ok</string>
		<string>wxStyledTextCtrl:getMarginType</string>
		<string>wxStyledTextCtrl:getMarginType(&lt;#This#&gt;, &lt;#Margin#&gt;)</string>
		<string>wxStyledTextCtrl:getMarginType(This, Margin) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setMarginWidth</string>
		<string>wxStyledTextCtrl:setMarginWidth(&lt;#This#&gt;, &lt;#Margin#&gt;, &lt;#PixelWidth#&gt;)</string>
		<string>wxStyledTextCtrl:setMarginWidth(This, Margin, PixelWidth) -&gt; ok</string>
		<string>wxStyledTextCtrl:getMarginWidth</string>
		<string>wxStyledTextCtrl:getMarginWidth(&lt;#This#&gt;, &lt;#Margin#&gt;)</string>
		<string>wxStyledTextCtrl:getMarginWidth(This, Margin) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setMarginMask</string>
		<string>wxStyledTextCtrl:setMarginMask(&lt;#This#&gt;, &lt;#Margin#&gt;, &lt;#Mask#&gt;)</string>
		<string>wxStyledTextCtrl:setMarginMask(This, Margin, Mask) -&gt; ok</string>
		<string>wxStyledTextCtrl:getMarginMask</string>
		<string>wxStyledTextCtrl:getMarginMask(&lt;#This#&gt;, &lt;#Margin#&gt;)</string>
		<string>wxStyledTextCtrl:getMarginMask(This, Margin) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setMarginSensitive</string>
		<string>wxStyledTextCtrl:setMarginSensitive(&lt;#This#&gt;, &lt;#Margin#&gt;, &lt;#Sensitive#&gt;)</string>
		<string>wxStyledTextCtrl:setMarginSensitive(This, Margin, Sensitive) -&gt; ok</string>
		<string>wxStyledTextCtrl:getMarginSensitive</string>
		<string>wxStyledTextCtrl:getMarginSensitive(&lt;#This#&gt;, &lt;#Margin#&gt;)</string>
		<string>wxStyledTextCtrl:getMarginSensitive(This, Margin) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:styleClearAll</string>
		<string>wxStyledTextCtrl:styleClearAll(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:styleClearAll(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetForeground</string>
		<string>wxStyledTextCtrl:styleSetForeground(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetForeground(This, Style, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetBackground</string>
		<string>wxStyledTextCtrl:styleSetBackground(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Back#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetBackground(This, Style, Back) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetBold</string>
		<string>wxStyledTextCtrl:styleSetBold(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Bold#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetBold(This, Style, Bold) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetItalic</string>
		<string>wxStyledTextCtrl:styleSetItalic(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Italic#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetItalic(This, Style, Italic) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetSize</string>
		<string>wxStyledTextCtrl:styleSetSize(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#SizePoints#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetSize(This, Style, SizePoints) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetFaceName</string>
		<string>wxStyledTextCtrl:styleSetFaceName(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#FontName#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetFaceName(This, Style, FontName) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetEOLFilled</string>
		<string>wxStyledTextCtrl:styleSetEOLFilled(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Filled#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetEOLFilled(This, Style, Filled) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleResetDefault</string>
		<string>wxStyledTextCtrl:styleResetDefault(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:styleResetDefault(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetUnderline</string>
		<string>wxStyledTextCtrl:styleSetUnderline(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Underline#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetUnderline(This, Style, Underline) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetCase</string>
		<string>wxStyledTextCtrl:styleSetCase(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#CaseForce#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetCase(This, Style, CaseForce) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetHotSpot</string>
		<string>wxStyledTextCtrl:styleSetHotSpot(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Hotspot#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetHotSpot(This, Style, Hotspot) -&gt; ok</string>
		<string>wxStyledTextCtrl:setSelForeground</string>
		<string>wxStyledTextCtrl:setSelForeground(&lt;#This#&gt;, &lt;#UseSetting#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:setSelForeground(This, UseSetting, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:setSelBackground</string>
		<string>wxStyledTextCtrl:setSelBackground(&lt;#This#&gt;, &lt;#UseSetting#&gt;, &lt;#Back#&gt;)</string>
		<string>wxStyledTextCtrl:setSelBackground(This, UseSetting, Back) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSelAlpha</string>
		<string>wxStyledTextCtrl:getSelAlpha(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSelAlpha(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setSelAlpha</string>
		<string>wxStyledTextCtrl:setSelAlpha(&lt;#This#&gt;, &lt;#Alpha#&gt;)</string>
		<string>wxStyledTextCtrl:setSelAlpha(This, Alpha) -&gt; ok</string>
		<string>wxStyledTextCtrl:setCaretForeground</string>
		<string>wxStyledTextCtrl:setCaretForeground(&lt;#This#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:setCaretForeground(This, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:cmdKeyAssign</string>
		<string>wxStyledTextCtrl:cmdKeyAssign(&lt;#This#&gt;, &lt;#Key#&gt;, &lt;#Modifiers#&gt;, &lt;#Cmd#&gt;)</string>
		<string>wxStyledTextCtrl:cmdKeyAssign(This, Key, Modifiers, Cmd) -&gt; ok</string>
		<string>wxStyledTextCtrl:cmdKeyClear</string>
		<string>wxStyledTextCtrl:cmdKeyClear(&lt;#This#&gt;, &lt;#Key#&gt;, &lt;#Modifiers#&gt;)</string>
		<string>wxStyledTextCtrl:cmdKeyClear(This, Key, Modifiers) -&gt; ok</string>
		<string>wxStyledTextCtrl:cmdKeyClearAll</string>
		<string>wxStyledTextCtrl:cmdKeyClearAll(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:cmdKeyClearAll(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setStyleBytes</string>
		<string>wxStyledTextCtrl:setStyleBytes(&lt;#This#&gt;, &lt;#Length#&gt;)</string>
		<string>wxStyledTextCtrl:setStyleBytes(This, Length) -&gt; integer()</string>
		<string>wxStyledTextCtrl:styleSetVisible</string>
		<string>wxStyledTextCtrl:styleSetVisible(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Visible#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetVisible(This, Style, Visible) -&gt; ok</string>
		<string>wxStyledTextCtrl:getCaretPeriod</string>
		<string>wxStyledTextCtrl:getCaretPeriod(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCaretPeriod(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setCaretPeriod</string>
		<string>wxStyledTextCtrl:setCaretPeriod(&lt;#This#&gt;, &lt;#PeriodMilliseconds#&gt;)</string>
		<string>wxStyledTextCtrl:setCaretPeriod(This, PeriodMilliseconds) -&gt; ok</string>
		<string>wxStyledTextCtrl:setWordChars</string>
		<string>wxStyledTextCtrl:setWordChars(&lt;#This#&gt;, &lt;#Characters#&gt;)</string>
		<string>wxStyledTextCtrl:setWordChars(This, Characters) -&gt; ok</string>
		<string>wxStyledTextCtrl:beginUndoAction</string>
		<string>wxStyledTextCtrl:beginUndoAction(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:beginUndoAction(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:endUndoAction</string>
		<string>wxStyledTextCtrl:endUndoAction(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:endUndoAction(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:indicatorSetStyle</string>
		<string>wxStyledTextCtrl:indicatorSetStyle(&lt;#This#&gt;, &lt;#Indic#&gt;, &lt;#Style#&gt;)</string>
		<string>wxStyledTextCtrl:indicatorSetStyle(This, Indic, Style) -&gt; ok</string>
		<string>wxStyledTextCtrl:indicatorGetStyle</string>
		<string>wxStyledTextCtrl:indicatorGetStyle(&lt;#This#&gt;, &lt;#Indic#&gt;)</string>
		<string>wxStyledTextCtrl:indicatorGetStyle(This, Indic) -&gt; integer()</string>
		<string>wxStyledTextCtrl:indicatorSetForeground</string>
		<string>wxStyledTextCtrl:indicatorSetForeground(&lt;#This#&gt;, &lt;#Indic#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:indicatorSetForeground(This, Indic, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:indicatorGetForeground</string>
		<string>wxStyledTextCtrl:indicatorGetForeground(&lt;#This#&gt;, &lt;#Indic#&gt;)</string>
		<string>wxStyledTextCtrl:indicatorGetForeground(This, Indic) -&gt; wx_colour4() (see module wx)</string>
		<string>wxStyledTextCtrl:setWhitespaceForeground</string>
		<string>wxStyledTextCtrl:setWhitespaceForeground(&lt;#This#&gt;, &lt;#UseSetting#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:setWhitespaceForeground(This, UseSetting, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:setWhitespaceBackground</string>
		<string>wxStyledTextCtrl:setWhitespaceBackground(&lt;#This#&gt;, &lt;#UseSetting#&gt;, &lt;#Back#&gt;)</string>
		<string>wxStyledTextCtrl:setWhitespaceBackground(This, UseSetting, Back) -&gt; ok</string>
		<string>wxStyledTextCtrl:getStyleBits</string>
		<string>wxStyledTextCtrl:getStyleBits(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getStyleBits(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setLineState</string>
		<string>wxStyledTextCtrl:setLineState(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#State#&gt;)</string>
		<string>wxStyledTextCtrl:setLineState(This, Line, State) -&gt; ok</string>
		<string>wxStyledTextCtrl:getLineState</string>
		<string>wxStyledTextCtrl:getLineState(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getLineState(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getMaxLineState</string>
		<string>wxStyledTextCtrl:getMaxLineState(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getMaxLineState(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getCaretLineVisible</string>
		<string>wxStyledTextCtrl:getCaretLineVisible(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCaretLineVisible(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setCaretLineVisible</string>
		<string>wxStyledTextCtrl:setCaretLineVisible(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxStyledTextCtrl:setCaretLineVisible(This, Show) -&gt; ok</string>
		<string>wxStyledTextCtrl:getCaretLineBackground</string>
		<string>wxStyledTextCtrl:getCaretLineBackground(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCaretLineBackground(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxStyledTextCtrl:setCaretLineBackground</string>
		<string>wxStyledTextCtrl:setCaretLineBackground(&lt;#This#&gt;, &lt;#Back#&gt;)</string>
		<string>wxStyledTextCtrl:setCaretLineBackground(This, Back) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompShow</string>
		<string>wxStyledTextCtrl:autoCompShow(&lt;#This#&gt;, &lt;#LenEntered#&gt;, &lt;#ItemList#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompShow(This, LenEntered, ItemList) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompCancel</string>
		<string>wxStyledTextCtrl:autoCompCancel(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompCancel(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompActive</string>
		<string>wxStyledTextCtrl:autoCompActive(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompActive(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:autoCompPosStart</string>
		<string>wxStyledTextCtrl:autoCompPosStart(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompPosStart(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:autoCompComplete</string>
		<string>wxStyledTextCtrl:autoCompComplete(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompComplete(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompStops</string>
		<string>wxStyledTextCtrl:autoCompStops(&lt;#This#&gt;, &lt;#CharacterSet#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompStops(This, CharacterSet) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompSetSeparator</string>
		<string>wxStyledTextCtrl:autoCompSetSeparator(&lt;#This#&gt;, &lt;#SeparatorCharacter#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetSeparator(This, SeparatorCharacter) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetSeparator</string>
		<string>wxStyledTextCtrl:autoCompGetSeparator(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetSeparator(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:autoCompSelect</string>
		<string>wxStyledTextCtrl:autoCompSelect(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSelect(This, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompSetCancelAtStart</string>
		<string>wxStyledTextCtrl:autoCompSetCancelAtStart(&lt;#This#&gt;, &lt;#Cancel#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetCancelAtStart(This, Cancel) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetCancelAtStart</string>
		<string>wxStyledTextCtrl:autoCompGetCancelAtStart(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetCancelAtStart(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:autoCompSetFillUps</string>
		<string>wxStyledTextCtrl:autoCompSetFillUps(&lt;#This#&gt;, &lt;#CharacterSet#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetFillUps(This, CharacterSet) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompSetChooseSingle</string>
		<string>wxStyledTextCtrl:autoCompSetChooseSingle(&lt;#This#&gt;, &lt;#ChooseSingle#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetChooseSingle(This, ChooseSingle) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetChooseSingle</string>
		<string>wxStyledTextCtrl:autoCompGetChooseSingle(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetChooseSingle(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:autoCompSetIgnoreCase</string>
		<string>wxStyledTextCtrl:autoCompSetIgnoreCase(&lt;#This#&gt;, &lt;#IgnoreCase#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetIgnoreCase(This, IgnoreCase) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetIgnoreCase</string>
		<string>wxStyledTextCtrl:autoCompGetIgnoreCase(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetIgnoreCase(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:userListShow</string>
		<string>wxStyledTextCtrl:userListShow(&lt;#This#&gt;, &lt;#ListType#&gt;, &lt;#ItemList#&gt;)</string>
		<string>wxStyledTextCtrl:userListShow(This, ListType, ItemList) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompSetAutoHide</string>
		<string>wxStyledTextCtrl:autoCompSetAutoHide(&lt;#This#&gt;, &lt;#AutoHide#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetAutoHide(This, AutoHide) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetAutoHide</string>
		<string>wxStyledTextCtrl:autoCompGetAutoHide(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetAutoHide(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:autoCompSetDropRestOfWord</string>
		<string>wxStyledTextCtrl:autoCompSetDropRestOfWord(&lt;#This#&gt;, &lt;#DropRestOfWord#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetDropRestOfWord(This, DropRestOfWord) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetDropRestOfWord</string>
		<string>wxStyledTextCtrl:autoCompGetDropRestOfWord(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetDropRestOfWord(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:registerImage</string>
		<string>wxStyledTextCtrl:registerImage(&lt;#This#&gt;, &lt;#Type#&gt;, &lt;#Bmp#&gt;)</string>
		<string>wxStyledTextCtrl:registerImage(This, Type, Bmp) -&gt; ok</string>
		<string>wxStyledTextCtrl:clearRegisteredImages</string>
		<string>wxStyledTextCtrl:clearRegisteredImages(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:clearRegisteredImages(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetTypeSeparator</string>
		<string>wxStyledTextCtrl:autoCompGetTypeSeparator(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetTypeSeparator(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:autoCompSetTypeSeparator</string>
		<string>wxStyledTextCtrl:autoCompSetTypeSeparator(&lt;#This#&gt;, &lt;#SeparatorCharacter#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetTypeSeparator(This, SeparatorCharacter) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompSetMaxWidth</string>
		<string>wxStyledTextCtrl:autoCompSetMaxWidth(&lt;#This#&gt;, &lt;#CharacterCount#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetMaxWidth(This, CharacterCount) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetMaxWidth</string>
		<string>wxStyledTextCtrl:autoCompGetMaxWidth(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetMaxWidth(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:autoCompSetMaxHeight</string>
		<string>wxStyledTextCtrl:autoCompSetMaxHeight(&lt;#This#&gt;, &lt;#RowCount#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompSetMaxHeight(This, RowCount) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetMaxHeight</string>
		<string>wxStyledTextCtrl:autoCompGetMaxHeight(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetMaxHeight(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setIndent</string>
		<string>wxStyledTextCtrl:setIndent(&lt;#This#&gt;, &lt;#IndentSize#&gt;)</string>
		<string>wxStyledTextCtrl:setIndent(This, IndentSize) -&gt; ok</string>
		<string>wxStyledTextCtrl:getIndent</string>
		<string>wxStyledTextCtrl:getIndent(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getIndent(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setUseTabs</string>
		<string>wxStyledTextCtrl:setUseTabs(&lt;#This#&gt;, &lt;#UseTabs#&gt;)</string>
		<string>wxStyledTextCtrl:setUseTabs(This, UseTabs) -&gt; ok</string>
		<string>wxStyledTextCtrl:getUseTabs</string>
		<string>wxStyledTextCtrl:getUseTabs(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getUseTabs(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setLineIndentation</string>
		<string>wxStyledTextCtrl:setLineIndentation(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#IndentSize#&gt;)</string>
		<string>wxStyledTextCtrl:setLineIndentation(This, Line, IndentSize) -&gt; ok</string>
		<string>wxStyledTextCtrl:getLineIndentation</string>
		<string>wxStyledTextCtrl:getLineIndentation(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getLineIndentation(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getLineIndentPosition</string>
		<string>wxStyledTextCtrl:getLineIndentPosition(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getLineIndentPosition(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getColumn</string>
		<string>wxStyledTextCtrl:getColumn(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:getColumn(This, Pos) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setUseHorizontalScrollBar</string>
		<string>wxStyledTextCtrl:setUseHorizontalScrollBar(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxStyledTextCtrl:setUseHorizontalScrollBar(This, Show) -&gt; ok</string>
		<string>wxStyledTextCtrl:getUseHorizontalScrollBar</string>
		<string>wxStyledTextCtrl:getUseHorizontalScrollBar(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getUseHorizontalScrollBar(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setIndentationGuides</string>
		<string>wxStyledTextCtrl:setIndentationGuides(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxStyledTextCtrl:setIndentationGuides(This, Show) -&gt; ok</string>
		<string>wxStyledTextCtrl:getIndentationGuides</string>
		<string>wxStyledTextCtrl:getIndentationGuides(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getIndentationGuides(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setHighlightGuide</string>
		<string>wxStyledTextCtrl:setHighlightGuide(&lt;#This#&gt;, &lt;#Column#&gt;)</string>
		<string>wxStyledTextCtrl:setHighlightGuide(This, Column) -&gt; ok</string>
		<string>wxStyledTextCtrl:getHighlightGuide</string>
		<string>wxStyledTextCtrl:getHighlightGuide(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getHighlightGuide(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getLineEndPosition</string>
		<string>wxStyledTextCtrl:getLineEndPosition(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getLineEndPosition(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getCodePage</string>
		<string>wxStyledTextCtrl:getCodePage(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCodePage(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getCaretForeground</string>
		<string>wxStyledTextCtrl:getCaretForeground(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCaretForeground(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxStyledTextCtrl:getReadOnly</string>
		<string>wxStyledTextCtrl:getReadOnly(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getReadOnly(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setCurrentPos</string>
		<string>wxStyledTextCtrl:setCurrentPos(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:setCurrentPos(This, Pos) -&gt; ok</string>
		<string>wxStyledTextCtrl:setSelectionStart</string>
		<string>wxStyledTextCtrl:setSelectionStart(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:setSelectionStart(This, Pos) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSelectionStart</string>
		<string>wxStyledTextCtrl:getSelectionStart(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSelectionStart(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setSelectionEnd</string>
		<string>wxStyledTextCtrl:setSelectionEnd(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:setSelectionEnd(This, Pos) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSelectionEnd</string>
		<string>wxStyledTextCtrl:getSelectionEnd(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSelectionEnd(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setPrintMagnification</string>
		<string>wxStyledTextCtrl:setPrintMagnification(&lt;#This#&gt;, &lt;#Magnification#&gt;)</string>
		<string>wxStyledTextCtrl:setPrintMagnification(This, Magnification) -&gt; ok</string>
		<string>wxStyledTextCtrl:getPrintMagnification</string>
		<string>wxStyledTextCtrl:getPrintMagnification(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getPrintMagnification(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setPrintColourMode</string>
		<string>wxStyledTextCtrl:setPrintColourMode(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxStyledTextCtrl:setPrintColourMode(This, Mode) -&gt; ok</string>
		<string>wxStyledTextCtrl:getPrintColourMode</string>
		<string>wxStyledTextCtrl:getPrintColourMode(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getPrintColourMode(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:findText</string>
		<string>wxStyledTextCtrl:findText(&lt;#This#&gt;, &lt;#MinPos#&gt;, &lt;#MaxPos#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:findText(This, MinPos, MaxPos, Text) -&gt; integer()</string>
		<string>wxStyledTextCtrl:findText</string>
		<string>wxStyledTextCtrl:findText(&lt;#This#&gt;, &lt;#MinPos#&gt;, &lt;#MaxPos#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStyledTextCtrl:findText(This, MinPos, MaxPos, Text, Option::[Option]) -&gt; integer()</string>
		<string>wxStyledTextCtrl:formatRange</string>
		<string>wxStyledTextCtrl:formatRange(&lt;#This#&gt;, &lt;#DoDraw#&gt;, &lt;#StartPos#&gt;, &lt;#EndPos#&gt;, &lt;#Draw#&gt;, &lt;#Target#&gt;, &lt;#RenderRect#&gt;, &lt;#PageRect#&gt;)</string>
		<string>wxStyledTextCtrl:formatRange(This, DoDraw, StartPos, EndPos, Draw, Target, RenderRect, PageRect) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getFirstVisibleLine</string>
		<string>wxStyledTextCtrl:getFirstVisibleLine(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getFirstVisibleLine(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getLine</string>
		<string>wxStyledTextCtrl:getLine(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getLine(This, Line) -&gt; charlist() (see module unicode)</string>
		<string>wxStyledTextCtrl:getLineCount</string>
		<string>wxStyledTextCtrl:getLineCount(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getLineCount(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setMarginLeft</string>
		<string>wxStyledTextCtrl:setMarginLeft(&lt;#This#&gt;, &lt;#PixelWidth#&gt;)</string>
		<string>wxStyledTextCtrl:setMarginLeft(This, PixelWidth) -&gt; ok</string>
		<string>wxStyledTextCtrl:getMarginLeft</string>
		<string>wxStyledTextCtrl:getMarginLeft(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getMarginLeft(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setMarginRight</string>
		<string>wxStyledTextCtrl:setMarginRight(&lt;#This#&gt;, &lt;#PixelWidth#&gt;)</string>
		<string>wxStyledTextCtrl:setMarginRight(This, PixelWidth) -&gt; ok</string>
		<string>wxStyledTextCtrl:getMarginRight</string>
		<string>wxStyledTextCtrl:getMarginRight(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getMarginRight(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getModify</string>
		<string>wxStyledTextCtrl:getModify(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getModify(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setSelection</string>
		<string>wxStyledTextCtrl:setSelection(&lt;#This#&gt;, &lt;#Start#&gt;, &lt;#End#&gt;)</string>
		<string>wxStyledTextCtrl:setSelection(This, Start, End) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSelectedText</string>
		<string>wxStyledTextCtrl:getSelectedText(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSelectedText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxStyledTextCtrl:getTextRange</string>
		<string>wxStyledTextCtrl:getTextRange(&lt;#This#&gt;, &lt;#StartPos#&gt;, &lt;#EndPos#&gt;)</string>
		<string>wxStyledTextCtrl:getTextRange(This, StartPos, EndPos) -&gt; charlist() (see module unicode)</string>
		<string>wxStyledTextCtrl:hideSelection</string>
		<string>wxStyledTextCtrl:hideSelection(&lt;#This#&gt;, &lt;#Normal#&gt;)</string>
		<string>wxStyledTextCtrl:hideSelection(This, Normal) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineFromPosition</string>
		<string>wxStyledTextCtrl:lineFromPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:lineFromPosition(This, Pos) -&gt; integer()</string>
		<string>wxStyledTextCtrl:positionFromLine</string>
		<string>wxStyledTextCtrl:positionFromLine(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:positionFromLine(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:lineScroll</string>
		<string>wxStyledTextCtrl:lineScroll(&lt;#This#&gt;, &lt;#Columns#&gt;, &lt;#Lines#&gt;)</string>
		<string>wxStyledTextCtrl:lineScroll(This, Columns, Lines) -&gt; ok</string>
		<string>wxStyledTextCtrl:ensureCaretVisible</string>
		<string>wxStyledTextCtrl:ensureCaretVisible(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:ensureCaretVisible(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:replaceSelection</string>
		<string>wxStyledTextCtrl:replaceSelection(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:replaceSelection(This, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:setReadOnly</string>
		<string>wxStyledTextCtrl:setReadOnly(&lt;#This#&gt;, &lt;#ReadOnly#&gt;)</string>
		<string>wxStyledTextCtrl:setReadOnly(This, ReadOnly) -&gt; ok</string>
		<string>wxStyledTextCtrl:canPaste</string>
		<string>wxStyledTextCtrl:canPaste(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:canPaste(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:canUndo</string>
		<string>wxStyledTextCtrl:canUndo(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:canUndo(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:emptyUndoBuffer</string>
		<string>wxStyledTextCtrl:emptyUndoBuffer(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:emptyUndoBuffer(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:undo</string>
		<string>wxStyledTextCtrl:undo(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:undo(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:cut</string>
		<string>wxStyledTextCtrl:cut(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:cut(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:copy</string>
		<string>wxStyledTextCtrl:copy(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:copy(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:paste</string>
		<string>wxStyledTextCtrl:paste(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:paste(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:clear</string>
		<string>wxStyledTextCtrl:clear(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:clear(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setText</string>
		<string>wxStyledTextCtrl:setText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:setText(This, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:getText</string>
		<string>wxStyledTextCtrl:getText(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxStyledTextCtrl:getTextLength</string>
		<string>wxStyledTextCtrl:getTextLength(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getTextLength(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getOvertype</string>
		<string>wxStyledTextCtrl:getOvertype(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getOvertype(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setCaretWidth</string>
		<string>wxStyledTextCtrl:setCaretWidth(&lt;#This#&gt;, &lt;#PixelWidth#&gt;)</string>
		<string>wxStyledTextCtrl:setCaretWidth(This, PixelWidth) -&gt; ok</string>
		<string>wxStyledTextCtrl:getCaretWidth</string>
		<string>wxStyledTextCtrl:getCaretWidth(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCaretWidth(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setTargetStart</string>
		<string>wxStyledTextCtrl:setTargetStart(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:setTargetStart(This, Pos) -&gt; ok</string>
		<string>wxStyledTextCtrl:getTargetStart</string>
		<string>wxStyledTextCtrl:getTargetStart(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getTargetStart(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setTargetEnd</string>
		<string>wxStyledTextCtrl:setTargetEnd(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:setTargetEnd(This, Pos) -&gt; ok</string>
		<string>wxStyledTextCtrl:getTargetEnd</string>
		<string>wxStyledTextCtrl:getTargetEnd(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getTargetEnd(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:replaceTarget</string>
		<string>wxStyledTextCtrl:replaceTarget(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:replaceTarget(This, Text) -&gt; integer()</string>
		<string>wxStyledTextCtrl:searchInTarget</string>
		<string>wxStyledTextCtrl:searchInTarget(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:searchInTarget(This, Text) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setSearchFlags</string>
		<string>wxStyledTextCtrl:setSearchFlags(&lt;#This#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxStyledTextCtrl:setSearchFlags(This, Flags) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSearchFlags</string>
		<string>wxStyledTextCtrl:getSearchFlags(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSearchFlags(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:callTipShow</string>
		<string>wxStyledTextCtrl:callTipShow(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Definition#&gt;)</string>
		<string>wxStyledTextCtrl:callTipShow(This, Pos, Definition) -&gt; ok</string>
		<string>wxStyledTextCtrl:callTipCancel</string>
		<string>wxStyledTextCtrl:callTipCancel(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:callTipCancel(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:callTipActive</string>
		<string>wxStyledTextCtrl:callTipActive(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:callTipActive(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:callTipPosAtStart</string>
		<string>wxStyledTextCtrl:callTipPosAtStart(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:callTipPosAtStart(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:callTipSetHighlight</string>
		<string>wxStyledTextCtrl:callTipSetHighlight(&lt;#This#&gt;, &lt;#Start#&gt;, &lt;#End#&gt;)</string>
		<string>wxStyledTextCtrl:callTipSetHighlight(This, Start, End) -&gt; ok</string>
		<string>wxStyledTextCtrl:callTipSetBackground</string>
		<string>wxStyledTextCtrl:callTipSetBackground(&lt;#This#&gt;, &lt;#Back#&gt;)</string>
		<string>wxStyledTextCtrl:callTipSetBackground(This, Back) -&gt; ok</string>
		<string>wxStyledTextCtrl:callTipSetForeground</string>
		<string>wxStyledTextCtrl:callTipSetForeground(&lt;#This#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:callTipSetForeground(This, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:callTipSetForegroundHighlight</string>
		<string>wxStyledTextCtrl:callTipSetForegroundHighlight(&lt;#This#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:callTipSetForegroundHighlight(This, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:callTipUseStyle</string>
		<string>wxStyledTextCtrl:callTipUseStyle(&lt;#This#&gt;, &lt;#TabSize#&gt;)</string>
		<string>wxStyledTextCtrl:callTipUseStyle(This, TabSize) -&gt; ok</string>
		<string>wxStyledTextCtrl:visibleFromDocLine</string>
		<string>wxStyledTextCtrl:visibleFromDocLine(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:visibleFromDocLine(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:docLineFromVisible</string>
		<string>wxStyledTextCtrl:docLineFromVisible(&lt;#This#&gt;, &lt;#LineDisplay#&gt;)</string>
		<string>wxStyledTextCtrl:docLineFromVisible(This, LineDisplay) -&gt; integer()</string>
		<string>wxStyledTextCtrl:wrapCount</string>
		<string>wxStyledTextCtrl:wrapCount(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:wrapCount(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setFoldLevel</string>
		<string>wxStyledTextCtrl:setFoldLevel(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#Level#&gt;)</string>
		<string>wxStyledTextCtrl:setFoldLevel(This, Line, Level) -&gt; ok</string>
		<string>wxStyledTextCtrl:getFoldLevel</string>
		<string>wxStyledTextCtrl:getFoldLevel(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getFoldLevel(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getLastChild</string>
		<string>wxStyledTextCtrl:getLastChild(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#Level#&gt;)</string>
		<string>wxStyledTextCtrl:getLastChild(This, Line, Level) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getFoldParent</string>
		<string>wxStyledTextCtrl:getFoldParent(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getFoldParent(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:showLines</string>
		<string>wxStyledTextCtrl:showLines(&lt;#This#&gt;, &lt;#LineStart#&gt;, &lt;#LineEnd#&gt;)</string>
		<string>wxStyledTextCtrl:showLines(This, LineStart, LineEnd) -&gt; ok</string>
		<string>wxStyledTextCtrl:hideLines</string>
		<string>wxStyledTextCtrl:hideLines(&lt;#This#&gt;, &lt;#LineStart#&gt;, &lt;#LineEnd#&gt;)</string>
		<string>wxStyledTextCtrl:hideLines(This, LineStart, LineEnd) -&gt; ok</string>
		<string>wxStyledTextCtrl:getLineVisible</string>
		<string>wxStyledTextCtrl:getLineVisible(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getLineVisible(This, Line) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setFoldExpanded</string>
		<string>wxStyledTextCtrl:setFoldExpanded(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#Expanded#&gt;)</string>
		<string>wxStyledTextCtrl:setFoldExpanded(This, Line, Expanded) -&gt; ok</string>
		<string>wxStyledTextCtrl:getFoldExpanded</string>
		<string>wxStyledTextCtrl:getFoldExpanded(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getFoldExpanded(This, Line) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:toggleFold</string>
		<string>wxStyledTextCtrl:toggleFold(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:toggleFold(This, Line) -&gt; ok</string>
		<string>wxStyledTextCtrl:ensureVisible</string>
		<string>wxStyledTextCtrl:ensureVisible(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:ensureVisible(This, Line) -&gt; ok</string>
		<string>wxStyledTextCtrl:setFoldFlags</string>
		<string>wxStyledTextCtrl:setFoldFlags(&lt;#This#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxStyledTextCtrl:setFoldFlags(This, Flags) -&gt; ok</string>
		<string>wxStyledTextCtrl:ensureVisibleEnforcePolicy</string>
		<string>wxStyledTextCtrl:ensureVisibleEnforcePolicy(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:ensureVisibleEnforcePolicy(This, Line) -&gt; ok</string>
		<string>wxStyledTextCtrl:setTabIndents</string>
		<string>wxStyledTextCtrl:setTabIndents(&lt;#This#&gt;, &lt;#TabIndents#&gt;)</string>
		<string>wxStyledTextCtrl:setTabIndents(This, TabIndents) -&gt; ok</string>
		<string>wxStyledTextCtrl:getTabIndents</string>
		<string>wxStyledTextCtrl:getTabIndents(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getTabIndents(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setBackSpaceUnIndents</string>
		<string>wxStyledTextCtrl:setBackSpaceUnIndents(&lt;#This#&gt;, &lt;#BsUnIndents#&gt;)</string>
		<string>wxStyledTextCtrl:setBackSpaceUnIndents(This, BsUnIndents) -&gt; ok</string>
		<string>wxStyledTextCtrl:getBackSpaceUnIndents</string>
		<string>wxStyledTextCtrl:getBackSpaceUnIndents(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getBackSpaceUnIndents(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setMouseDwellTime</string>
		<string>wxStyledTextCtrl:setMouseDwellTime(&lt;#This#&gt;, &lt;#PeriodMilliseconds#&gt;)</string>
		<string>wxStyledTextCtrl:setMouseDwellTime(This, PeriodMilliseconds) -&gt; ok</string>
		<string>wxStyledTextCtrl:getMouseDwellTime</string>
		<string>wxStyledTextCtrl:getMouseDwellTime(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getMouseDwellTime(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:wordStartPosition</string>
		<string>wxStyledTextCtrl:wordStartPosition(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#OnlyWordCharacters#&gt;)</string>
		<string>wxStyledTextCtrl:wordStartPosition(This, Pos, OnlyWordCharacters) -&gt; integer()</string>
		<string>wxStyledTextCtrl:wordEndPosition</string>
		<string>wxStyledTextCtrl:wordEndPosition(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#OnlyWordCharacters#&gt;)</string>
		<string>wxStyledTextCtrl:wordEndPosition(This, Pos, OnlyWordCharacters) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setWrapMode</string>
		<string>wxStyledTextCtrl:setWrapMode(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxStyledTextCtrl:setWrapMode(This, Mode) -&gt; ok</string>
		<string>wxStyledTextCtrl:getWrapMode</string>
		<string>wxStyledTextCtrl:getWrapMode(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getWrapMode(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setWrapVisualFlags</string>
		<string>wxStyledTextCtrl:setWrapVisualFlags(&lt;#This#&gt;, &lt;#WrapVisualFlags#&gt;)</string>
		<string>wxStyledTextCtrl:setWrapVisualFlags(This, WrapVisualFlags) -&gt; ok</string>
		<string>wxStyledTextCtrl:getWrapVisualFlags</string>
		<string>wxStyledTextCtrl:getWrapVisualFlags(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getWrapVisualFlags(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setWrapVisualFlagsLocation</string>
		<string>wxStyledTextCtrl:setWrapVisualFlagsLocation(&lt;#This#&gt;, &lt;#WrapVisualFlagsLocation#&gt;)</string>
		<string>wxStyledTextCtrl:setWrapVisualFlagsLocation(This, WrapVisualFlagsLocation) -&gt; ok</string>
		<string>wxStyledTextCtrl:getWrapVisualFlagsLocation</string>
		<string>wxStyledTextCtrl:getWrapVisualFlagsLocation(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getWrapVisualFlagsLocation(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setWrapStartIndent</string>
		<string>wxStyledTextCtrl:setWrapStartIndent(&lt;#This#&gt;, &lt;#Indent#&gt;)</string>
		<string>wxStyledTextCtrl:setWrapStartIndent(This, Indent) -&gt; ok</string>
		<string>wxStyledTextCtrl:getWrapStartIndent</string>
		<string>wxStyledTextCtrl:getWrapStartIndent(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getWrapStartIndent(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setLayoutCache</string>
		<string>wxStyledTextCtrl:setLayoutCache(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxStyledTextCtrl:setLayoutCache(This, Mode) -&gt; ok</string>
		<string>wxStyledTextCtrl:getLayoutCache</string>
		<string>wxStyledTextCtrl:getLayoutCache(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getLayoutCache(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setScrollWidth</string>
		<string>wxStyledTextCtrl:setScrollWidth(&lt;#This#&gt;, &lt;#PixelWidth#&gt;)</string>
		<string>wxStyledTextCtrl:setScrollWidth(This, PixelWidth) -&gt; ok</string>
		<string>wxStyledTextCtrl:getScrollWidth</string>
		<string>wxStyledTextCtrl:getScrollWidth(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getScrollWidth(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:textWidth</string>
		<string>wxStyledTextCtrl:textWidth(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:textWidth(This, Style, Text) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getEndAtLastLine</string>
		<string>wxStyledTextCtrl:getEndAtLastLine(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getEndAtLastLine(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:textHeight</string>
		<string>wxStyledTextCtrl:textHeight(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:textHeight(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setUseVerticalScrollBar</string>
		<string>wxStyledTextCtrl:setUseVerticalScrollBar(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxStyledTextCtrl:setUseVerticalScrollBar(This, Show) -&gt; ok</string>
		<string>wxStyledTextCtrl:getUseVerticalScrollBar</string>
		<string>wxStyledTextCtrl:getUseVerticalScrollBar(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getUseVerticalScrollBar(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:appendText</string>
		<string>wxStyledTextCtrl:appendText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:appendText(This, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:getTwoPhaseDraw</string>
		<string>wxStyledTextCtrl:getTwoPhaseDraw(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getTwoPhaseDraw(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setTwoPhaseDraw</string>
		<string>wxStyledTextCtrl:setTwoPhaseDraw(&lt;#This#&gt;, &lt;#TwoPhase#&gt;)</string>
		<string>wxStyledTextCtrl:setTwoPhaseDraw(This, TwoPhase) -&gt; ok</string>
		<string>wxStyledTextCtrl:targetFromSelection</string>
		<string>wxStyledTextCtrl:targetFromSelection(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:targetFromSelection(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:linesJoin</string>
		<string>wxStyledTextCtrl:linesJoin(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:linesJoin(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:linesSplit</string>
		<string>wxStyledTextCtrl:linesSplit(&lt;#This#&gt;, &lt;#PixelWidth#&gt;)</string>
		<string>wxStyledTextCtrl:linesSplit(This, PixelWidth) -&gt; ok</string>
		<string>wxStyledTextCtrl:setFoldMarginColour</string>
		<string>wxStyledTextCtrl:setFoldMarginColour(&lt;#This#&gt;, &lt;#UseSetting#&gt;, &lt;#Back#&gt;)</string>
		<string>wxStyledTextCtrl:setFoldMarginColour(This, UseSetting, Back) -&gt; ok</string>
		<string>wxStyledTextCtrl:setFoldMarginHiColour</string>
		<string>wxStyledTextCtrl:setFoldMarginHiColour(&lt;#This#&gt;, &lt;#UseSetting#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:setFoldMarginHiColour(This, UseSetting, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineDown</string>
		<string>wxStyledTextCtrl:lineDown(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineDown(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineDownExtend</string>
		<string>wxStyledTextCtrl:lineDownExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineDownExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineUp</string>
		<string>wxStyledTextCtrl:lineUp(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineUp(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineUpExtend</string>
		<string>wxStyledTextCtrl:lineUpExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineUpExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:charLeft</string>
		<string>wxStyledTextCtrl:charLeft(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:charLeft(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:charLeftExtend</string>
		<string>wxStyledTextCtrl:charLeftExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:charLeftExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:charRight</string>
		<string>wxStyledTextCtrl:charRight(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:charRight(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:charRightExtend</string>
		<string>wxStyledTextCtrl:charRightExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:charRightExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordLeft</string>
		<string>wxStyledTextCtrl:wordLeft(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordLeft(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordLeftExtend</string>
		<string>wxStyledTextCtrl:wordLeftExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordLeftExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordRight</string>
		<string>wxStyledTextCtrl:wordRight(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordRight(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordRightExtend</string>
		<string>wxStyledTextCtrl:wordRightExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordRightExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:home</string>
		<string>wxStyledTextCtrl:home(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:home(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:homeExtend</string>
		<string>wxStyledTextCtrl:homeExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:homeExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineEnd</string>
		<string>wxStyledTextCtrl:lineEnd(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineEnd(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineEndExtend</string>
		<string>wxStyledTextCtrl:lineEndExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineEndExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:documentStart</string>
		<string>wxStyledTextCtrl:documentStart(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:documentStart(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:documentStartExtend</string>
		<string>wxStyledTextCtrl:documentStartExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:documentStartExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:documentEnd</string>
		<string>wxStyledTextCtrl:documentEnd(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:documentEnd(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:documentEndExtend</string>
		<string>wxStyledTextCtrl:documentEndExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:documentEndExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:pageUp</string>
		<string>wxStyledTextCtrl:pageUp(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:pageUp(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:pageUpExtend</string>
		<string>wxStyledTextCtrl:pageUpExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:pageUpExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:pageDown</string>
		<string>wxStyledTextCtrl:pageDown(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:pageDown(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:pageDownExtend</string>
		<string>wxStyledTextCtrl:pageDownExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:pageDownExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:editToggleOvertype</string>
		<string>wxStyledTextCtrl:editToggleOvertype(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:editToggleOvertype(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:cancel</string>
		<string>wxStyledTextCtrl:cancel(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:cancel(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:deleteBack</string>
		<string>wxStyledTextCtrl:deleteBack(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:deleteBack(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:tab</string>
		<string>wxStyledTextCtrl:tab(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:tab(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:backTab</string>
		<string>wxStyledTextCtrl:backTab(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:backTab(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:newLine</string>
		<string>wxStyledTextCtrl:newLine(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:newLine(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:formFeed</string>
		<string>wxStyledTextCtrl:formFeed(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:formFeed(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:vCHome</string>
		<string>wxStyledTextCtrl:vCHome(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:vCHome(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:vCHomeExtend</string>
		<string>wxStyledTextCtrl:vCHomeExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:vCHomeExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:zoomIn</string>
		<string>wxStyledTextCtrl:zoomIn(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:zoomIn(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:zoomOut</string>
		<string>wxStyledTextCtrl:zoomOut(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:zoomOut(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:delWordLeft</string>
		<string>wxStyledTextCtrl:delWordLeft(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:delWordLeft(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:delWordRight</string>
		<string>wxStyledTextCtrl:delWordRight(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:delWordRight(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineCut</string>
		<string>wxStyledTextCtrl:lineCut(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineCut(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineDelete</string>
		<string>wxStyledTextCtrl:lineDelete(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineDelete(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineTranspose</string>
		<string>wxStyledTextCtrl:lineTranspose(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineTranspose(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineDuplicate</string>
		<string>wxStyledTextCtrl:lineDuplicate(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineDuplicate(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lowerCase</string>
		<string>wxStyledTextCtrl:lowerCase(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lowerCase(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:upperCase</string>
		<string>wxStyledTextCtrl:upperCase(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:upperCase(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineScrollDown</string>
		<string>wxStyledTextCtrl:lineScrollDown(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineScrollDown(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineScrollUp</string>
		<string>wxStyledTextCtrl:lineScrollUp(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineScrollUp(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:deleteBackNotLine</string>
		<string>wxStyledTextCtrl:deleteBackNotLine(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:deleteBackNotLine(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:homeDisplay</string>
		<string>wxStyledTextCtrl:homeDisplay(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:homeDisplay(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:homeDisplayExtend</string>
		<string>wxStyledTextCtrl:homeDisplayExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:homeDisplayExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineEndDisplay</string>
		<string>wxStyledTextCtrl:lineEndDisplay(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineEndDisplay(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineEndDisplayExtend</string>
		<string>wxStyledTextCtrl:lineEndDisplayExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineEndDisplayExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:homeWrapExtend</string>
		<string>wxStyledTextCtrl:homeWrapExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:homeWrapExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineEndWrap</string>
		<string>wxStyledTextCtrl:lineEndWrap(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineEndWrap(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineEndWrapExtend</string>
		<string>wxStyledTextCtrl:lineEndWrapExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineEndWrapExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:vCHomeWrap</string>
		<string>wxStyledTextCtrl:vCHomeWrap(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:vCHomeWrap(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:vCHomeWrapExtend</string>
		<string>wxStyledTextCtrl:vCHomeWrapExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:vCHomeWrapExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineCopy</string>
		<string>wxStyledTextCtrl:lineCopy(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineCopy(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:moveCaretInsideView</string>
		<string>wxStyledTextCtrl:moveCaretInsideView(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:moveCaretInsideView(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineLength</string>
		<string>wxStyledTextCtrl:lineLength(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:lineLength(This, Line) -&gt; integer()</string>
		<string>wxStyledTextCtrl:braceHighlight</string>
		<string>wxStyledTextCtrl:braceHighlight(&lt;#This#&gt;, &lt;#Pos1#&gt;, &lt;#Pos2#&gt;)</string>
		<string>wxStyledTextCtrl:braceHighlight(This, Pos1, Pos2) -&gt; ok</string>
		<string>wxStyledTextCtrl:braceBadLight</string>
		<string>wxStyledTextCtrl:braceBadLight(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:braceBadLight(This, Pos) -&gt; ok</string>
		<string>wxStyledTextCtrl:braceMatch</string>
		<string>wxStyledTextCtrl:braceMatch(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:braceMatch(This, Pos) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getViewEOL</string>
		<string>wxStyledTextCtrl:getViewEOL(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getViewEOL(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setViewEOL</string>
		<string>wxStyledTextCtrl:setViewEOL(&lt;#This#&gt;, &lt;#Visible#&gt;)</string>
		<string>wxStyledTextCtrl:setViewEOL(This, Visible) -&gt; ok</string>
		<string>wxStyledTextCtrl:setModEventMask</string>
		<string>wxStyledTextCtrl:setModEventMask(&lt;#This#&gt;, &lt;#Mask#&gt;)</string>
		<string>wxStyledTextCtrl:setModEventMask(This, Mask) -&gt; ok</string>
		<string>wxStyledTextCtrl:getEdgeColumn</string>
		<string>wxStyledTextCtrl:getEdgeColumn(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getEdgeColumn(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setEdgeColumn</string>
		<string>wxStyledTextCtrl:setEdgeColumn(&lt;#This#&gt;, &lt;#Column#&gt;)</string>
		<string>wxStyledTextCtrl:setEdgeColumn(This, Column) -&gt; ok</string>
		<string>wxStyledTextCtrl:setEdgeMode</string>
		<string>wxStyledTextCtrl:setEdgeMode(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxStyledTextCtrl:setEdgeMode(This, Mode) -&gt; ok</string>
		<string>wxStyledTextCtrl:getEdgeMode</string>
		<string>wxStyledTextCtrl:getEdgeMode(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getEdgeMode(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getEdgeColour</string>
		<string>wxStyledTextCtrl:getEdgeColour(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getEdgeColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxStyledTextCtrl:setEdgeColour</string>
		<string>wxStyledTextCtrl:setEdgeColour(&lt;#This#&gt;, &lt;#EdgeColour#&gt;)</string>
		<string>wxStyledTextCtrl:setEdgeColour(This, EdgeColour) -&gt; ok</string>
		<string>wxStyledTextCtrl:searchAnchor</string>
		<string>wxStyledTextCtrl:searchAnchor(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:searchAnchor(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:searchNext</string>
		<string>wxStyledTextCtrl:searchNext(&lt;#This#&gt;, &lt;#Flags#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:searchNext(This, Flags, Text) -&gt; integer()</string>
		<string>wxStyledTextCtrl:searchPrev</string>
		<string>wxStyledTextCtrl:searchPrev(&lt;#This#&gt;, &lt;#Flags#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:searchPrev(This, Flags, Text) -&gt; integer()</string>
		<string>wxStyledTextCtrl:linesOnScreen</string>
		<string>wxStyledTextCtrl:linesOnScreen(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:linesOnScreen(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:usePopUp</string>
		<string>wxStyledTextCtrl:usePopUp(&lt;#This#&gt;, &lt;#AllowPopUp#&gt;)</string>
		<string>wxStyledTextCtrl:usePopUp(This, AllowPopUp) -&gt; ok</string>
		<string>wxStyledTextCtrl:selectionIsRectangle</string>
		<string>wxStyledTextCtrl:selectionIsRectangle(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:selectionIsRectangle(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setZoom</string>
		<string>wxStyledTextCtrl:setZoom(&lt;#This#&gt;, &lt;#Zoom#&gt;)</string>
		<string>wxStyledTextCtrl:setZoom(This, Zoom) -&gt; ok</string>
		<string>wxStyledTextCtrl:getZoom</string>
		<string>wxStyledTextCtrl:getZoom(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getZoom(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getModEventMask</string>
		<string>wxStyledTextCtrl:getModEventMask(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getModEventMask(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setSTCFocus</string>
		<string>wxStyledTextCtrl:setSTCFocus(&lt;#This#&gt;, &lt;#Focus#&gt;)</string>
		<string>wxStyledTextCtrl:setSTCFocus(This, Focus) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSTCFocus</string>
		<string>wxStyledTextCtrl:getSTCFocus(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSTCFocus(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setStatus</string>
		<string>wxStyledTextCtrl:setStatus(&lt;#This#&gt;, &lt;#StatusCode#&gt;)</string>
		<string>wxStyledTextCtrl:setStatus(This, StatusCode) -&gt; ok</string>
		<string>wxStyledTextCtrl:getStatus</string>
		<string>wxStyledTextCtrl:getStatus(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getStatus(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setMouseDownCaptures</string>
		<string>wxStyledTextCtrl:setMouseDownCaptures(&lt;#This#&gt;, &lt;#Captures#&gt;)</string>
		<string>wxStyledTextCtrl:setMouseDownCaptures(This, Captures) -&gt; ok</string>
		<string>wxStyledTextCtrl:getMouseDownCaptures</string>
		<string>wxStyledTextCtrl:getMouseDownCaptures(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getMouseDownCaptures(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setSTCCursor</string>
		<string>wxStyledTextCtrl:setSTCCursor(&lt;#This#&gt;, &lt;#CursorType#&gt;)</string>
		<string>wxStyledTextCtrl:setSTCCursor(This, CursorType) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSTCCursor</string>
		<string>wxStyledTextCtrl:getSTCCursor(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSTCCursor(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setControlCharSymbol</string>
		<string>wxStyledTextCtrl:setControlCharSymbol(&lt;#This#&gt;, &lt;#Symbol#&gt;)</string>
		<string>wxStyledTextCtrl:setControlCharSymbol(This, Symbol) -&gt; ok</string>
		<string>wxStyledTextCtrl:getControlCharSymbol</string>
		<string>wxStyledTextCtrl:getControlCharSymbol(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getControlCharSymbol(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:wordPartLeft</string>
		<string>wxStyledTextCtrl:wordPartLeft(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordPartLeft(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordPartLeftExtend</string>
		<string>wxStyledTextCtrl:wordPartLeftExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordPartLeftExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordPartRight</string>
		<string>wxStyledTextCtrl:wordPartRight(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordPartRight(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordPartRightExtend</string>
		<string>wxStyledTextCtrl:wordPartRightExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordPartRightExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setVisiblePolicy</string>
		<string>wxStyledTextCtrl:setVisiblePolicy(&lt;#This#&gt;, &lt;#VisiblePolicy#&gt;, &lt;#VisibleSlop#&gt;)</string>
		<string>wxStyledTextCtrl:setVisiblePolicy(This, VisiblePolicy, VisibleSlop) -&gt; ok</string>
		<string>wxStyledTextCtrl:delLineLeft</string>
		<string>wxStyledTextCtrl:delLineLeft(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:delLineLeft(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:delLineRight</string>
		<string>wxStyledTextCtrl:delLineRight(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:delLineRight(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:getXOffset</string>
		<string>wxStyledTextCtrl:getXOffset(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getXOffset(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:chooseCaretX</string>
		<string>wxStyledTextCtrl:chooseCaretX(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:chooseCaretX(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setXCaretPolicy</string>
		<string>wxStyledTextCtrl:setXCaretPolicy(&lt;#This#&gt;, &lt;#CaretPolicy#&gt;, &lt;#CaretSlop#&gt;)</string>
		<string>wxStyledTextCtrl:setXCaretPolicy(This, CaretPolicy, CaretSlop) -&gt; ok</string>
		<string>wxStyledTextCtrl:setYCaretPolicy</string>
		<string>wxStyledTextCtrl:setYCaretPolicy(&lt;#This#&gt;, &lt;#CaretPolicy#&gt;, &lt;#CaretSlop#&gt;)</string>
		<string>wxStyledTextCtrl:setYCaretPolicy(This, CaretPolicy, CaretSlop) -&gt; ok</string>
		<string>wxStyledTextCtrl:getPrintWrapMode</string>
		<string>wxStyledTextCtrl:getPrintWrapMode(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getPrintWrapMode(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:setHotspotActiveForeground</string>
		<string>wxStyledTextCtrl:setHotspotActiveForeground(&lt;#This#&gt;, &lt;#UseSetting#&gt;, &lt;#Fore#&gt;)</string>
		<string>wxStyledTextCtrl:setHotspotActiveForeground(This, UseSetting, Fore) -&gt; ok</string>
		<string>wxStyledTextCtrl:setHotspotActiveBackground</string>
		<string>wxStyledTextCtrl:setHotspotActiveBackground(&lt;#This#&gt;, &lt;#UseSetting#&gt;, &lt;#Back#&gt;)</string>
		<string>wxStyledTextCtrl:setHotspotActiveBackground(This, UseSetting, Back) -&gt; ok</string>
		<string>wxStyledTextCtrl:setHotspotActiveUnderline</string>
		<string>wxStyledTextCtrl:setHotspotActiveUnderline(&lt;#This#&gt;, &lt;#Underline#&gt;)</string>
		<string>wxStyledTextCtrl:setHotspotActiveUnderline(This, Underline) -&gt; ok</string>
		<string>wxStyledTextCtrl:setHotspotSingleLine</string>
		<string>wxStyledTextCtrl:setHotspotSingleLine(&lt;#This#&gt;, &lt;#SingleLine#&gt;)</string>
		<string>wxStyledTextCtrl:setHotspotSingleLine(This, SingleLine) -&gt; ok</string>
		<string>wxStyledTextCtrl:paraDownExtend</string>
		<string>wxStyledTextCtrl:paraDownExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:paraDownExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:paraUp</string>
		<string>wxStyledTextCtrl:paraUp(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:paraUp(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:paraUpExtend</string>
		<string>wxStyledTextCtrl:paraUpExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:paraUpExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:positionBefore</string>
		<string>wxStyledTextCtrl:positionBefore(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:positionBefore(This, Pos) -&gt; integer()</string>
		<string>wxStyledTextCtrl:positionAfter</string>
		<string>wxStyledTextCtrl:positionAfter(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:positionAfter(This, Pos) -&gt; integer()</string>
		<string>wxStyledTextCtrl:copyRange</string>
		<string>wxStyledTextCtrl:copyRange(&lt;#This#&gt;, &lt;#Start#&gt;, &lt;#End#&gt;)</string>
		<string>wxStyledTextCtrl:copyRange(This, Start, End) -&gt; ok</string>
		<string>wxStyledTextCtrl:copyText</string>
		<string>wxStyledTextCtrl:copyText(&lt;#This#&gt;, &lt;#Length#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:copyText(This, Length, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:setSelectionMode</string>
		<string>wxStyledTextCtrl:setSelectionMode(&lt;#This#&gt;, &lt;#Mode#&gt;)</string>
		<string>wxStyledTextCtrl:setSelectionMode(This, Mode) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSelectionMode</string>
		<string>wxStyledTextCtrl:getSelectionMode(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSelectionMode(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:lineDownRectExtend</string>
		<string>wxStyledTextCtrl:lineDownRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineDownRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineUpRectExtend</string>
		<string>wxStyledTextCtrl:lineUpRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineUpRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:charLeftRectExtend</string>
		<string>wxStyledTextCtrl:charLeftRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:charLeftRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:charRightRectExtend</string>
		<string>wxStyledTextCtrl:charRightRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:charRightRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:homeRectExtend</string>
		<string>wxStyledTextCtrl:homeRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:homeRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:vCHomeRectExtend</string>
		<string>wxStyledTextCtrl:vCHomeRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:vCHomeRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:lineEndRectExtend</string>
		<string>wxStyledTextCtrl:lineEndRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:lineEndRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:pageUpRectExtend</string>
		<string>wxStyledTextCtrl:pageUpRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:pageUpRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:pageDownRectExtend</string>
		<string>wxStyledTextCtrl:pageDownRectExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:pageDownRectExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:stutteredPageUp</string>
		<string>wxStyledTextCtrl:stutteredPageUp(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:stutteredPageUp(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:stutteredPageUpExtend</string>
		<string>wxStyledTextCtrl:stutteredPageUpExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:stutteredPageUpExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:stutteredPageDown</string>
		<string>wxStyledTextCtrl:stutteredPageDown(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:stutteredPageDown(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:stutteredPageDownExtend</string>
		<string>wxStyledTextCtrl:stutteredPageDownExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:stutteredPageDownExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordLeftEnd</string>
		<string>wxStyledTextCtrl:wordLeftEnd(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordLeftEnd(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordLeftEndExtend</string>
		<string>wxStyledTextCtrl:wordLeftEndExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordLeftEndExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordRightEnd</string>
		<string>wxStyledTextCtrl:wordRightEnd(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordRightEnd(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:wordRightEndExtend</string>
		<string>wxStyledTextCtrl:wordRightEndExtend(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:wordRightEndExtend(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setWhitespaceChars</string>
		<string>wxStyledTextCtrl:setWhitespaceChars(&lt;#This#&gt;, &lt;#Characters#&gt;)</string>
		<string>wxStyledTextCtrl:setWhitespaceChars(This, Characters) -&gt; ok</string>
		<string>wxStyledTextCtrl:setCharsDefault</string>
		<string>wxStyledTextCtrl:setCharsDefault(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:setCharsDefault(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:autoCompGetCurrent</string>
		<string>wxStyledTextCtrl:autoCompGetCurrent(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:autoCompGetCurrent(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:allocate</string>
		<string>wxStyledTextCtrl:allocate(&lt;#This#&gt;, &lt;#Bytes#&gt;)</string>
		<string>wxStyledTextCtrl:allocate(This, Bytes) -&gt; ok</string>
		<string>wxStyledTextCtrl:findColumn</string>
		<string>wxStyledTextCtrl:findColumn(&lt;#This#&gt;, &lt;#Line#&gt;, &lt;#Column#&gt;)</string>
		<string>wxStyledTextCtrl:findColumn(This, Line, Column) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getCaretSticky</string>
		<string>wxStyledTextCtrl:getCaretSticky(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCaretSticky(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setCaretSticky</string>
		<string>wxStyledTextCtrl:setCaretSticky(&lt;#This#&gt;, &lt;#UseCaretStickyBehaviour#&gt;)</string>
		<string>wxStyledTextCtrl:setCaretSticky(This, UseCaretStickyBehaviour) -&gt; ok</string>
		<string>wxStyledTextCtrl:toggleCaretSticky</string>
		<string>wxStyledTextCtrl:toggleCaretSticky(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:toggleCaretSticky(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setPasteConvertEndings</string>
		<string>wxStyledTextCtrl:setPasteConvertEndings(&lt;#This#&gt;, &lt;#Convert#&gt;)</string>
		<string>wxStyledTextCtrl:setPasteConvertEndings(This, Convert) -&gt; ok</string>
		<string>wxStyledTextCtrl:getPasteConvertEndings</string>
		<string>wxStyledTextCtrl:getPasteConvertEndings(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getPasteConvertEndings(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:selectionDuplicate</string>
		<string>wxStyledTextCtrl:selectionDuplicate(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:selectionDuplicate(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setCaretLineBackAlpha</string>
		<string>wxStyledTextCtrl:setCaretLineBackAlpha(&lt;#This#&gt;, &lt;#Alpha#&gt;)</string>
		<string>wxStyledTextCtrl:setCaretLineBackAlpha(This, Alpha) -&gt; ok</string>
		<string>wxStyledTextCtrl:getCaretLineBackAlpha</string>
		<string>wxStyledTextCtrl:getCaretLineBackAlpha(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCaretLineBackAlpha(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:startRecord</string>
		<string>wxStyledTextCtrl:startRecord(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:startRecord(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:stopRecord</string>
		<string>wxStyledTextCtrl:stopRecord(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:stopRecord(This) -&gt; ok</string>
		<string>wxStyledTextCtrl:setLexer</string>
		<string>wxStyledTextCtrl:setLexer(&lt;#This#&gt;, &lt;#Lexer#&gt;)</string>
		<string>wxStyledTextCtrl:setLexer(This, Lexer) -&gt; ok</string>
		<string>wxStyledTextCtrl:getLexer</string>
		<string>wxStyledTextCtrl:getLexer(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getLexer(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:colourise</string>
		<string>wxStyledTextCtrl:colourise(&lt;#This#&gt;, &lt;#Start#&gt;, &lt;#End#&gt;)</string>
		<string>wxStyledTextCtrl:colourise(This, Start, End) -&gt; ok</string>
		<string>wxStyledTextCtrl:setProperty</string>
		<string>wxStyledTextCtrl:setProperty(&lt;#This#&gt;, &lt;#Key#&gt;, &lt;#Value#&gt;)</string>
		<string>wxStyledTextCtrl:setProperty(This, Key, Value) -&gt; ok</string>
		<string>wxStyledTextCtrl:setKeyWords</string>
		<string>wxStyledTextCtrl:setKeyWords(&lt;#This#&gt;, &lt;#KeywordSet#&gt;, &lt;#KeyWords#&gt;)</string>
		<string>wxStyledTextCtrl:setKeyWords(This, KeywordSet, KeyWords) -&gt; ok</string>
		<string>wxStyledTextCtrl:setLexerLanguage</string>
		<string>wxStyledTextCtrl:setLexerLanguage(&lt;#This#&gt;, &lt;#Language#&gt;)</string>
		<string>wxStyledTextCtrl:setLexerLanguage(This, Language) -&gt; ok</string>
		<string>wxStyledTextCtrl:getProperty</string>
		<string>wxStyledTextCtrl:getProperty(&lt;#This#&gt;, &lt;#Key#&gt;)</string>
		<string>wxStyledTextCtrl:getProperty(This, Key) -&gt; charlist() (see module unicode)</string>
		<string>wxStyledTextCtrl:getStyleBitsNeeded</string>
		<string>wxStyledTextCtrl:getStyleBitsNeeded(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getStyleBitsNeeded(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:getCurrentLine</string>
		<string>wxStyledTextCtrl:getCurrentLine(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCurrentLine(This) -&gt; integer()</string>
		<string>wxStyledTextCtrl:styleSetSpec</string>
		<string>wxStyledTextCtrl:styleSetSpec(&lt;#This#&gt;, &lt;#StyleNum#&gt;, &lt;#Spec#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetSpec(This, StyleNum, Spec) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetFont</string>
		<string>wxStyledTextCtrl:styleSetFont(&lt;#This#&gt;, &lt;#StyleNum#&gt;, &lt;#Font#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetFont(This, StyleNum, Font) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetFontAttr</string>
		<string>wxStyledTextCtrl:styleSetFontAttr(&lt;#This#&gt;, &lt;#StyleNum#&gt;, &lt;#Size#&gt;, &lt;#FaceName#&gt;, &lt;#Bold#&gt;, &lt;#Italic#&gt;, &lt;#Underline#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetFontAttr(This, StyleNum, Size, FaceName, Bold, Italic, Underline) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetFontAttr</string>
		<string>wxStyledTextCtrl:styleSetFontAttr(&lt;#This#&gt;, &lt;#StyleNum#&gt;, &lt;#Size#&gt;, &lt;#FaceName#&gt;, &lt;#Bold#&gt;, &lt;#Italic#&gt;, &lt;#Underline#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetFontAttr(This, StyleNum, Size, FaceName, Bold, Italic, Underline, Option::[Option]) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetCharacterSet</string>
		<string>wxStyledTextCtrl:styleSetCharacterSet(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#CharacterSet#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetCharacterSet(This, Style, CharacterSet) -&gt; ok</string>
		<string>wxStyledTextCtrl:styleSetFontEncoding</string>
		<string>wxStyledTextCtrl:styleSetFontEncoding(&lt;#This#&gt;, &lt;#Style#&gt;, &lt;#Encoding#&gt;)</string>
		<string>wxStyledTextCtrl:styleSetFontEncoding(This, Style, Encoding) -&gt; ok</string>
		<string>wxStyledTextCtrl:cmdKeyExecute</string>
		<string>wxStyledTextCtrl:cmdKeyExecute(&lt;#This#&gt;, &lt;#Cmd#&gt;)</string>
		<string>wxStyledTextCtrl:cmdKeyExecute(This, Cmd) -&gt; ok</string>
		<string>wxStyledTextCtrl:setMargins</string>
		<string>wxStyledTextCtrl:setMargins(&lt;#This#&gt;, &lt;#Left#&gt;, &lt;#Right#&gt;)</string>
		<string>wxStyledTextCtrl:setMargins(This, Left, Right) -&gt; ok</string>
		<string>wxStyledTextCtrl:getSelection</string>
		<string>wxStyledTextCtrl:getSelection(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSelection(This) -&gt; {StartPos::integer(), EndPos::integer()}</string>
		<string>wxStyledTextCtrl:pointFromPosition</string>
		<string>wxStyledTextCtrl:pointFromPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxStyledTextCtrl:pointFromPosition(This, Pos) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxStyledTextCtrl:scrollToLine</string>
		<string>wxStyledTextCtrl:scrollToLine(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:scrollToLine(This, Line) -&gt; ok</string>
		<string>wxStyledTextCtrl:scrollToColumn</string>
		<string>wxStyledTextCtrl:scrollToColumn(&lt;#This#&gt;, &lt;#Column#&gt;)</string>
		<string>wxStyledTextCtrl:scrollToColumn(This, Column) -&gt; ok</string>
		<string>wxStyledTextCtrl:setVScrollBar</string>
		<string>wxStyledTextCtrl:setVScrollBar(&lt;#This#&gt;, &lt;#Bar#&gt;)</string>
		<string>wxStyledTextCtrl:setVScrollBar(This, Bar) -&gt; ok</string>
		<string>wxStyledTextCtrl:setHScrollBar</string>
		<string>wxStyledTextCtrl:setHScrollBar(&lt;#This#&gt;, &lt;#Bar#&gt;)</string>
		<string>wxStyledTextCtrl:setHScrollBar(This, Bar) -&gt; ok</string>
		<string>wxStyledTextCtrl:getLastKeydownProcessed</string>
		<string>wxStyledTextCtrl:getLastKeydownProcessed(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getLastKeydownProcessed(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:setLastKeydownProcessed</string>
		<string>wxStyledTextCtrl:setLastKeydownProcessed(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxStyledTextCtrl:setLastKeydownProcessed(This, Val) -&gt; ok</string>
		<string>wxStyledTextCtrl:saveFile</string>
		<string>wxStyledTextCtrl:saveFile(&lt;#This#&gt;, &lt;#Filename#&gt;)</string>
		<string>wxStyledTextCtrl:saveFile(This, Filename) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:loadFile</string>
		<string>wxStyledTextCtrl:loadFile(&lt;#This#&gt;, &lt;#Filename#&gt;)</string>
		<string>wxStyledTextCtrl:loadFile(This, Filename) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:doDragOver</string>
		<string>wxStyledTextCtrl:doDragOver(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Def#&gt;)</string>
		<string>wxStyledTextCtrl:doDragOver(This, X, Y, Def) -&gt; wx_enum() (see module wx)</string>
		<string>wxStyledTextCtrl:doDropText</string>
		<string>wxStyledTextCtrl:doDropText(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Data#&gt;)</string>
		<string>wxStyledTextCtrl:doDropText(This, X, Y, Data) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:getUseAntiAliasing</string>
		<string>wxStyledTextCtrl:getUseAntiAliasing(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getUseAntiAliasing(This) -&gt; boolean()</string>
		<string>wxStyledTextCtrl:addTextRaw</string>
		<string>wxStyledTextCtrl:addTextRaw(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:addTextRaw(This, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:insertTextRaw</string>
		<string>wxStyledTextCtrl:insertTextRaw(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:insertTextRaw(This, Pos, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:getCurLineRaw</string>
		<string>wxStyledTextCtrl:getCurLineRaw(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getCurLineRaw(This) -&gt; Result</string>
		<string>wxStyledTextCtrl:getLineRaw</string>
		<string>wxStyledTextCtrl:getLineRaw(&lt;#This#&gt;, &lt;#Line#&gt;)</string>
		<string>wxStyledTextCtrl:getLineRaw(This, Line) -&gt; binary()</string>
		<string>wxStyledTextCtrl:getSelectedTextRaw</string>
		<string>wxStyledTextCtrl:getSelectedTextRaw(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getSelectedTextRaw(This) -&gt; binary()</string>
		<string>wxStyledTextCtrl:getTextRangeRaw</string>
		<string>wxStyledTextCtrl:getTextRangeRaw(&lt;#This#&gt;, &lt;#StartPos#&gt;, &lt;#EndPos#&gt;)</string>
		<string>wxStyledTextCtrl:getTextRangeRaw(This, StartPos, EndPos) -&gt; binary()</string>
		<string>wxStyledTextCtrl:setTextRaw</string>
		<string>wxStyledTextCtrl:setTextRaw(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:setTextRaw(This, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:getTextRaw</string>
		<string>wxStyledTextCtrl:getTextRaw(&lt;#This#&gt;)</string>
		<string>wxStyledTextCtrl:getTextRaw(This) -&gt; binary()</string>
		<string>wxStyledTextCtrl:appendTextRaw</string>
		<string>wxStyledTextCtrl:appendTextRaw(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxStyledTextCtrl:appendTextRaw(This, Text) -&gt; ok</string>
		<string>wxStyledTextCtrl:destroy</string>
		<string>wxStyledTextCtrl:destroy(&lt;#This::wxStyledTextCtrl()#&gt;)</string>
		<string>wxStyledTextCtrl:destroy(This::wxStyledTextCtrl()) -&gt; ok</string>
		<string>wxStyledTextEvent:getPosition</string>
		<string>wxStyledTextEvent:getPosition(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getPosition(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getKey</string>
		<string>wxStyledTextEvent:getKey(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getKey(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getModifiers</string>
		<string>wxStyledTextEvent:getModifiers(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getModifiers(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getModificationType</string>
		<string>wxStyledTextEvent:getModificationType(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getModificationType(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getText</string>
		<string>wxStyledTextEvent:getText(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxStyledTextEvent:getLength</string>
		<string>wxStyledTextEvent:getLength(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getLength(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getLinesAdded</string>
		<string>wxStyledTextEvent:getLinesAdded(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getLinesAdded(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getLine</string>
		<string>wxStyledTextEvent:getLine(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getLine(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getFoldLevelNow</string>
		<string>wxStyledTextEvent:getFoldLevelNow(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getFoldLevelNow(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getFoldLevelPrev</string>
		<string>wxStyledTextEvent:getFoldLevelPrev(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getFoldLevelPrev(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getMargin</string>
		<string>wxStyledTextEvent:getMargin(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getMargin(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getMessage</string>
		<string>wxStyledTextEvent:getMessage(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getMessage(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getWParam</string>
		<string>wxStyledTextEvent:getWParam(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getWParam(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getLParam</string>
		<string>wxStyledTextEvent:getLParam(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getLParam(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getListType</string>
		<string>wxStyledTextEvent:getListType(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getListType(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getX</string>
		<string>wxStyledTextEvent:getX(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getX(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getY</string>
		<string>wxStyledTextEvent:getY(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getY(This) -&gt; integer()</string>
		<string>wxStyledTextEvent:getDragText</string>
		<string>wxStyledTextEvent:getDragText(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getDragText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxStyledTextEvent:getDragAllowMove</string>
		<string>wxStyledTextEvent:getDragAllowMove(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getDragAllowMove(This) -&gt; boolean()</string>
		<string>wxStyledTextEvent:getDragResult</string>
		<string>wxStyledTextEvent:getDragResult(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getDragResult(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxStyledTextEvent:getShift</string>
		<string>wxStyledTextEvent:getShift(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getShift(This) -&gt; boolean()</string>
		<string>wxStyledTextEvent:getControl</string>
		<string>wxStyledTextEvent:getControl(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getControl(This) -&gt; boolean()</string>
		<string>wxStyledTextEvent:getAlt</string>
		<string>wxStyledTextEvent:getAlt(&lt;#This#&gt;)</string>
		<string>wxStyledTextEvent:getAlt(This) -&gt; boolean()</string>
		<string>wxSystemOptions:getOption</string>
		<string>wxSystemOptions:getOption(&lt;#Name#&gt;)</string>
		<string>wxSystemOptions:getOption(Name) -&gt; charlist() (see module unicode)</string>
		<string>wxSystemOptions:getOptionInt</string>
		<string>wxSystemOptions:getOptionInt(&lt;#Name#&gt;)</string>
		<string>wxSystemOptions:getOptionInt(Name) -&gt; integer()</string>
		<string>wxSystemOptions:hasOption</string>
		<string>wxSystemOptions:hasOption(&lt;#Name#&gt;)</string>
		<string>wxSystemOptions:hasOption(Name) -&gt; boolean()</string>
		<string>wxSystemOptions:isFalse</string>
		<string>wxSystemOptions:isFalse(&lt;#Name#&gt;)</string>
		<string>wxSystemOptions:isFalse(Name) -&gt; boolean()</string>
		<string>wxSystemOptions:setOption</string>
		<string>wxSystemOptions:setOption(&lt;#Name#&gt;, &lt;#Value#&gt;)</string>
		<string>wxSystemOptions:setOption(Name, Value) -&gt; ok</string>
		<string>wxSystemSettings:getColour</string>
		<string>wxSystemSettings:getColour(&lt;#Index#&gt;)</string>
		<string>wxSystemSettings:getColour(Index) -&gt; wx_colour4() (see module wx)</string>
		<string>wxSystemSettings:getFont</string>
		<string>wxSystemSettings:getFont(&lt;#Index#&gt;)</string>
		<string>wxSystemSettings:getFont(Index) -&gt; wxFont() (see module wxFont)</string>
		<string>wxSystemSettings:getMetric</string>
		<string>wxSystemSettings:getMetric(&lt;#Index#&gt;)</string>
		<string>wxSystemSettings:getMetric(Index) -&gt; integer()</string>
		<string>wxSystemSettings:getMetric</string>
		<string>wxSystemSettings:getMetric(&lt;#Index#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxSystemSettings:getMetric(Index, Option::[Option]) -&gt; integer()</string>
		<string>wxSystemSettings:getScreenType</string>
		<string>wxSystemSettings:getScreenType()</string>
		<string>wxSystemSettings:getScreenType() -&gt; wx_enum() (see module wx)</string>
		<string>wxTaskBarIcon:new</string>
		<string>wxTaskBarIcon:new()</string>
		<string>wxTaskBarIcon:new() -&gt; wxTaskBarIcon()</string>
		<string>wxTaskBarIcon:popupMenu</string>
		<string>wxTaskBarIcon:popupMenu(&lt;#This#&gt;, &lt;#Menu#&gt;)</string>
		<string>wxTaskBarIcon:popupMenu(This, Menu) -&gt; boolean()</string>
		<string>wxTaskBarIcon:removeIcon</string>
		<string>wxTaskBarIcon:removeIcon(&lt;#This#&gt;)</string>
		<string>wxTaskBarIcon:removeIcon(This) -&gt; boolean()</string>
		<string>wxTaskBarIcon:setIcon</string>
		<string>wxTaskBarIcon:setIcon(&lt;#This#&gt;, &lt;#Icon#&gt;)</string>
		<string>wxTaskBarIcon:setIcon(This, Icon) -&gt; boolean()</string>
		<string>wxTaskBarIcon:setIcon</string>
		<string>wxTaskBarIcon:setIcon(&lt;#This#&gt;, &lt;#Icon#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTaskBarIcon:setIcon(This, Icon, Option::[Option]) -&gt; boolean()</string>
		<string>wxTaskBarIcon:destroy</string>
		<string>wxTaskBarIcon:destroy(&lt;#This::wxTaskBarIcon()#&gt;)</string>
		<string>wxTaskBarIcon:destroy(This::wxTaskBarIcon()) -&gt; ok</string>
		<string>wxTextAttr:new</string>
		<string>wxTextAttr:new()</string>
		<string>wxTextAttr:new() -&gt; wxTextAttr()</string>
		<string>wxTextAttr:new</string>
		<string>wxTextAttr:new(&lt;#ColText#&gt;)</string>
		<string>wxTextAttr:new(ColText) -&gt; wxTextAttr()</string>
		<string>wxTextAttr:new</string>
		<string>wxTextAttr:new(&lt;#ColText#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTextAttr:new(ColText, Option::[Option]) -&gt; wxTextAttr()</string>
		<string>wxTextAttr:getAlignment</string>
		<string>wxTextAttr:getAlignment(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getAlignment(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxTextAttr:getBackgroundColour</string>
		<string>wxTextAttr:getBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxTextAttr:getFont</string>
		<string>wxTextAttr:getFont(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxTextAttr:getLeftIndent</string>
		<string>wxTextAttr:getLeftIndent(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getLeftIndent(This) -&gt; integer()</string>
		<string>wxTextAttr:getLeftSubIndent</string>
		<string>wxTextAttr:getLeftSubIndent(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getLeftSubIndent(This) -&gt; integer()</string>
		<string>wxTextAttr:getRightIndent</string>
		<string>wxTextAttr:getRightIndent(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getRightIndent(This) -&gt; integer()</string>
		<string>wxTextAttr:getTabs</string>
		<string>wxTextAttr:getTabs(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getTabs(This) -&gt; [integer()]</string>
		<string>wxTextAttr:getTextColour</string>
		<string>wxTextAttr:getTextColour(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getTextColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxTextAttr:hasBackgroundColour</string>
		<string>wxTextAttr:hasBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxTextAttr:hasBackgroundColour(This) -&gt; boolean()</string>
		<string>wxTextAttr:hasFont</string>
		<string>wxTextAttr:hasFont(&lt;#This#&gt;)</string>
		<string>wxTextAttr:hasFont(This) -&gt; boolean()</string>
		<string>wxTextAttr:hasTextColour</string>
		<string>wxTextAttr:hasTextColour(&lt;#This#&gt;)</string>
		<string>wxTextAttr:hasTextColour(This) -&gt; boolean()</string>
		<string>wxTextAttr:getFlags</string>
		<string>wxTextAttr:getFlags(&lt;#This#&gt;)</string>
		<string>wxTextAttr:getFlags(This) -&gt; integer()</string>
		<string>wxTextAttr:isDefault</string>
		<string>wxTextAttr:isDefault(&lt;#This#&gt;)</string>
		<string>wxTextAttr:isDefault(This) -&gt; boolean()</string>
		<string>wxTextAttr:setAlignment</string>
		<string>wxTextAttr:setAlignment(&lt;#This#&gt;, &lt;#Alignment#&gt;)</string>
		<string>wxTextAttr:setAlignment(This, Alignment) -&gt; ok</string>
		<string>wxTextAttr:setBackgroundColour</string>
		<string>wxTextAttr:setBackgroundColour(&lt;#This#&gt;, &lt;#ColBack#&gt;)</string>
		<string>wxTextAttr:setBackgroundColour(This, ColBack) -&gt; ok</string>
		<string>wxTextAttr:setFlags</string>
		<string>wxTextAttr:setFlags(&lt;#This#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxTextAttr:setFlags(This, Flags) -&gt; ok</string>
		<string>wxTextAttr:setFont</string>
		<string>wxTextAttr:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxTextAttr:setFont(This, Font) -&gt; ok</string>
		<string>wxTextAttr:setFont</string>
		<string>wxTextAttr:setFont(&lt;#This#&gt;, &lt;#Font#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTextAttr:setFont(This, Font, Option::[Option]) -&gt; ok</string>
		<string>wxTextAttr:setLeftIndent</string>
		<string>wxTextAttr:setLeftIndent(&lt;#This#&gt;, &lt;#Indent#&gt;)</string>
		<string>wxTextAttr:setLeftIndent(This, Indent) -&gt; ok</string>
		<string>wxTextAttr:setLeftIndent</string>
		<string>wxTextAttr:setLeftIndent(&lt;#This#&gt;, &lt;#Indent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTextAttr:setLeftIndent(This, Indent, Option::[Option]) -&gt; ok</string>
		<string>wxTextAttr:setRightIndent</string>
		<string>wxTextAttr:setRightIndent(&lt;#This#&gt;, &lt;#Indent#&gt;)</string>
		<string>wxTextAttr:setRightIndent(This, Indent) -&gt; ok</string>
		<string>wxTextAttr:setTabs</string>
		<string>wxTextAttr:setTabs(&lt;#This#&gt;, &lt;#Tabs#&gt;)</string>
		<string>wxTextAttr:setTabs(This, Tabs) -&gt; ok</string>
		<string>wxTextAttr:setTextColour</string>
		<string>wxTextAttr:setTextColour(&lt;#This#&gt;, &lt;#ColText#&gt;)</string>
		<string>wxTextAttr:setTextColour(This, ColText) -&gt; ok</string>
		<string>wxTextAttr:destroy</string>
		<string>wxTextAttr:destroy(&lt;#This::wxTextAttr()#&gt;)</string>
		<string>wxTextAttr:destroy(This::wxTextAttr()) -&gt; ok</string>
		<string>wxTextCtrl:new</string>
		<string>wxTextCtrl:new()</string>
		<string>wxTextCtrl:new() -&gt; wxTextCtrl()</string>
		<string>wxTextCtrl:new</string>
		<string>wxTextCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxTextCtrl:new(Parent, Id) -&gt; wxTextCtrl()</string>
		<string>wxTextCtrl:new</string>
		<string>wxTextCtrl:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTextCtrl:new(Parent, Id, Option::[Option]) -&gt; wxTextCtrl()</string>
		<string>wxTextCtrl:appendText</string>
		<string>wxTextCtrl:appendText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTextCtrl:appendText(This, Text) -&gt; ok</string>
		<string>wxTextCtrl:canCopy</string>
		<string>wxTextCtrl:canCopy(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:canCopy(This) -&gt; boolean()</string>
		<string>wxTextCtrl:canCut</string>
		<string>wxTextCtrl:canCut(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:canCut(This) -&gt; boolean()</string>
		<string>wxTextCtrl:canPaste</string>
		<string>wxTextCtrl:canPaste(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:canPaste(This) -&gt; boolean()</string>
		<string>wxTextCtrl:canRedo</string>
		<string>wxTextCtrl:canRedo(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:canRedo(This) -&gt; boolean()</string>
		<string>wxTextCtrl:canUndo</string>
		<string>wxTextCtrl:canUndo(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:canUndo(This) -&gt; boolean()</string>
		<string>wxTextCtrl:clear</string>
		<string>wxTextCtrl:clear(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:clear(This) -&gt; ok</string>
		<string>wxTextCtrl:copy</string>
		<string>wxTextCtrl:copy(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:copy(This) -&gt; ok</string>
		<string>wxTextCtrl:create</string>
		<string>wxTextCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxTextCtrl:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxTextCtrl:create</string>
		<string>wxTextCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTextCtrl:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxTextCtrl:cut</string>
		<string>wxTextCtrl:cut(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:cut(This) -&gt; ok</string>
		<string>wxTextCtrl:discardEdits</string>
		<string>wxTextCtrl:discardEdits(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:discardEdits(This) -&gt; ok</string>
		<string>wxTextCtrl:changeValue</string>
		<string>wxTextCtrl:changeValue(&lt;#This#&gt;, &lt;#Value#&gt;)</string>
		<string>wxTextCtrl:changeValue(This, Value) -&gt; ok</string>
		<string>wxTextCtrl:emulateKeyPress</string>
		<string>wxTextCtrl:emulateKeyPress(&lt;#This#&gt;, &lt;#Event#&gt;)</string>
		<string>wxTextCtrl:emulateKeyPress(This, Event) -&gt; boolean()</string>
		<string>wxTextCtrl:getDefaultStyle</string>
		<string>wxTextCtrl:getDefaultStyle(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:getDefaultStyle(This) -&gt; wxTextAttr() (see module wxTextAttr)</string>
		<string>wxTextCtrl:getInsertionPoint</string>
		<string>wxTextCtrl:getInsertionPoint(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:getInsertionPoint(This) -&gt; integer()</string>
		<string>wxTextCtrl:getLastPosition</string>
		<string>wxTextCtrl:getLastPosition(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:getLastPosition(This) -&gt; integer()</string>
		<string>wxTextCtrl:getLineLength</string>
		<string>wxTextCtrl:getLineLength(&lt;#This#&gt;, &lt;#LineNo#&gt;)</string>
		<string>wxTextCtrl:getLineLength(This, LineNo) -&gt; integer()</string>
		<string>wxTextCtrl:getLineText</string>
		<string>wxTextCtrl:getLineText(&lt;#This#&gt;, &lt;#LineNo#&gt;)</string>
		<string>wxTextCtrl:getLineText(This, LineNo) -&gt; charlist() (see module unicode)</string>
		<string>wxTextCtrl:getNumberOfLines</string>
		<string>wxTextCtrl:getNumberOfLines(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:getNumberOfLines(This) -&gt; integer()</string>
		<string>wxTextCtrl:getRange</string>
		<string>wxTextCtrl:getRange(&lt;#This#&gt;, &lt;#From#&gt;, &lt;#To#&gt;)</string>
		<string>wxTextCtrl:getRange(This, From, To) -&gt; charlist() (see module unicode)</string>
		<string>wxTextCtrl:getSelection</string>
		<string>wxTextCtrl:getSelection(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:getSelection(This) -&gt; {From::integer(), To::integer()}</string>
		<string>wxTextCtrl:getStringSelection</string>
		<string>wxTextCtrl:getStringSelection(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:getStringSelection(This) -&gt; charlist() (see module unicode)</string>
		<string>wxTextCtrl:getStyle</string>
		<string>wxTextCtrl:getStyle(&lt;#This#&gt;, &lt;#Position#&gt;, &lt;#Style#&gt;)</string>
		<string>wxTextCtrl:getStyle(This, Position, Style) -&gt; boolean()</string>
		<string>wxTextCtrl:getValue</string>
		<string>wxTextCtrl:getValue(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:getValue(This) -&gt; charlist() (see module unicode)</string>
		<string>wxTextCtrl:isEditable</string>
		<string>wxTextCtrl:isEditable(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:isEditable(This) -&gt; boolean()</string>
		<string>wxTextCtrl:isModified</string>
		<string>wxTextCtrl:isModified(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:isModified(This) -&gt; boolean()</string>
		<string>wxTextCtrl:isMultiLine</string>
		<string>wxTextCtrl:isMultiLine(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:isMultiLine(This) -&gt; boolean()</string>
		<string>wxTextCtrl:isSingleLine</string>
		<string>wxTextCtrl:isSingleLine(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:isSingleLine(This) -&gt; boolean()</string>
		<string>wxTextCtrl:loadFile</string>
		<string>wxTextCtrl:loadFile(&lt;#This#&gt;, &lt;#File#&gt;)</string>
		<string>wxTextCtrl:loadFile(This, File) -&gt; boolean()</string>
		<string>wxTextCtrl:loadFile</string>
		<string>wxTextCtrl:loadFile(&lt;#This#&gt;, &lt;#File#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTextCtrl:loadFile(This, File, Option::[Option]) -&gt; boolean()</string>
		<string>wxTextCtrl:markDirty</string>
		<string>wxTextCtrl:markDirty(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:markDirty(This) -&gt; ok</string>
		<string>wxTextCtrl:paste</string>
		<string>wxTextCtrl:paste(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:paste(This) -&gt; ok</string>
		<string>wxTextCtrl:positionToXY</string>
		<string>wxTextCtrl:positionToXY(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxTextCtrl:positionToXY(This, Pos) -&gt; Result</string>
		<string>wxTextCtrl:redo</string>
		<string>wxTextCtrl:redo(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:redo(This) -&gt; ok</string>
		<string>wxTextCtrl:remove</string>
		<string>wxTextCtrl:remove(&lt;#This#&gt;, &lt;#From#&gt;, &lt;#To#&gt;)</string>
		<string>wxTextCtrl:remove(This, From, To) -&gt; ok</string>
		<string>wxTextCtrl:replace</string>
		<string>wxTextCtrl:replace(&lt;#This#&gt;, &lt;#From#&gt;, &lt;#To#&gt;, &lt;#Value#&gt;)</string>
		<string>wxTextCtrl:replace(This, From, To, Value) -&gt; ok</string>
		<string>wxTextCtrl:saveFile</string>
		<string>wxTextCtrl:saveFile(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:saveFile(This) -&gt; boolean()</string>
		<string>wxTextCtrl:saveFile</string>
		<string>wxTextCtrl:saveFile(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTextCtrl:saveFile(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxTextCtrl:setDefaultStyle</string>
		<string>wxTextCtrl:setDefaultStyle(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxTextCtrl:setDefaultStyle(This, Style) -&gt; boolean()</string>
		<string>wxTextCtrl:setEditable</string>
		<string>wxTextCtrl:setEditable(&lt;#This#&gt;, &lt;#Editable#&gt;)</string>
		<string>wxTextCtrl:setEditable(This, Editable) -&gt; ok</string>
		<string>wxTextCtrl:setInsertionPoint</string>
		<string>wxTextCtrl:setInsertionPoint(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxTextCtrl:setInsertionPoint(This, Pos) -&gt; ok</string>
		<string>wxTextCtrl:setInsertionPointEnd</string>
		<string>wxTextCtrl:setInsertionPointEnd(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:setInsertionPointEnd(This) -&gt; ok</string>
		<string>wxTextCtrl:setMaxLength</string>
		<string>wxTextCtrl:setMaxLength(&lt;#This#&gt;, &lt;#Len#&gt;)</string>
		<string>wxTextCtrl:setMaxLength(This, Len) -&gt; ok</string>
		<string>wxTextCtrl:setSelection</string>
		<string>wxTextCtrl:setSelection(&lt;#This#&gt;, &lt;#From#&gt;, &lt;#To#&gt;)</string>
		<string>wxTextCtrl:setSelection(This, From, To) -&gt; ok</string>
		<string>wxTextCtrl:setStyle</string>
		<string>wxTextCtrl:setStyle(&lt;#This#&gt;, &lt;#Start#&gt;, &lt;#End#&gt;, &lt;#Style#&gt;)</string>
		<string>wxTextCtrl:setStyle(This, Start, End, Style) -&gt; boolean()</string>
		<string>wxTextCtrl:setValue</string>
		<string>wxTextCtrl:setValue(&lt;#This#&gt;, &lt;#Value#&gt;)</string>
		<string>wxTextCtrl:setValue(This, Value) -&gt; ok</string>
		<string>wxTextCtrl:showPosition</string>
		<string>wxTextCtrl:showPosition(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxTextCtrl:showPosition(This, Pos) -&gt; ok</string>
		<string>wxTextCtrl:undo</string>
		<string>wxTextCtrl:undo(&lt;#This#&gt;)</string>
		<string>wxTextCtrl:undo(This) -&gt; ok</string>
		<string>wxTextCtrl:writeText</string>
		<string>wxTextCtrl:writeText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTextCtrl:writeText(This, Text) -&gt; ok</string>
		<string>wxTextCtrl:xYToPosition</string>
		<string>wxTextCtrl:xYToPosition(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxTextCtrl:xYToPosition(This, X, Y) -&gt; integer()</string>
		<string>wxTextCtrl:destroy</string>
		<string>wxTextCtrl:destroy(&lt;#This::wxTextCtrl()#&gt;)</string>
		<string>wxTextCtrl:destroy(This::wxTextCtrl()) -&gt; ok</string>
		<string>wxTextDataObject:new</string>
		<string>wxTextDataObject:new()</string>
		<string>wxTextDataObject:new() -&gt; wxTextDataObject()</string>
		<string>wxTextDataObject:new</string>
		<string>wxTextDataObject:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxTextDataObject:new(Option::[Option]) -&gt; wxTextDataObject()</string>
		<string>wxTextDataObject:getTextLength</string>
		<string>wxTextDataObject:getTextLength(&lt;#This#&gt;)</string>
		<string>wxTextDataObject:getTextLength(This) -&gt; integer()</string>
		<string>wxTextDataObject:getText</string>
		<string>wxTextDataObject:getText(&lt;#This#&gt;)</string>
		<string>wxTextDataObject:getText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxTextDataObject:setText</string>
		<string>wxTextDataObject:setText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTextDataObject:setText(This, Text) -&gt; ok</string>
		<string>wxTextDataObject:destroy</string>
		<string>wxTextDataObject:destroy(&lt;#This::wxTextDataObject()#&gt;)</string>
		<string>wxTextDataObject:destroy(This::wxTextDataObject()) -&gt; ok</string>
		<string>wxTextEntryDialog:new</string>
		<string>wxTextEntryDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;)</string>
		<string>wxTextEntryDialog:new(Parent, Message) -&gt; wxTextEntryDialog()</string>
		<string>wxTextEntryDialog:new</string>
		<string>wxTextEntryDialog:new(&lt;#Parent#&gt;, &lt;#Message#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTextEntryDialog:new(Parent, Message, Option::[Option]) -&gt; wxTextEntryDialog()</string>
		<string>wxTextEntryDialog:getValue</string>
		<string>wxTextEntryDialog:getValue(&lt;#This#&gt;)</string>
		<string>wxTextEntryDialog:getValue(This) -&gt; charlist() (see module unicode)</string>
		<string>wxTextEntryDialog:setValue</string>
		<string>wxTextEntryDialog:setValue(&lt;#This#&gt;, &lt;#Val#&gt;)</string>
		<string>wxTextEntryDialog:setValue(This, Val) -&gt; ok</string>
		<string>wxTextEntryDialog:destroy</string>
		<string>wxTextEntryDialog:destroy(&lt;#This::wxTextEntryDialog()#&gt;)</string>
		<string>wxTextEntryDialog:destroy(This::wxTextEntryDialog()) -&gt; ok</string>
		<string>wxToggleButton:new</string>
		<string>wxToggleButton:new()</string>
		<string>wxToggleButton:new() -&gt; wxToggleButton()</string>
		<string>wxToggleButton:new</string>
		<string>wxToggleButton:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxToggleButton:new(Parent, Id, Label) -&gt; wxToggleButton()</string>
		<string>wxToggleButton:new</string>
		<string>wxToggleButton:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToggleButton:new(Parent, Id, Label, Option::[Option]) -&gt; wxToggleButton()</string>
		<string>wxToggleButton:create</string>
		<string>wxToggleButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;)</string>
		<string>wxToggleButton:create(This, Parent, Id, Label) -&gt; boolean()</string>
		<string>wxToggleButton:create</string>
		<string>wxToggleButton:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToggleButton:create(This, Parent, Id, Label, Option::[Option]) -&gt; boolean()</string>
		<string>wxToggleButton:getValue</string>
		<string>wxToggleButton:getValue(&lt;#This#&gt;)</string>
		<string>wxToggleButton:getValue(This) -&gt; boolean()</string>
		<string>wxToggleButton:setValue</string>
		<string>wxToggleButton:setValue(&lt;#This#&gt;, &lt;#State#&gt;)</string>
		<string>wxToggleButton:setValue(This, State) -&gt; ok</string>
		<string>wxToggleButton:destroy</string>
		<string>wxToggleButton:destroy(&lt;#This::wxToggleButton()#&gt;)</string>
		<string>wxToggleButton:destroy(This::wxToggleButton()) -&gt; ok</string>
		<string>wxToolBar:addControl</string>
		<string>wxToolBar:addControl(&lt;#This#&gt;, &lt;#Control#&gt;)</string>
		<string>wxToolBar:addControl(This, Control) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addSeparator</string>
		<string>wxToolBar:addSeparator(&lt;#This#&gt;)</string>
		<string>wxToolBar:addSeparator(This) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addTool</string>
		<string>wxToolBar:addTool(&lt;#This#&gt;, &lt;#Tool#&gt;)</string>
		<string>wxToolBar:addTool(This, Tool) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addTool</string>
		<string>wxToolBar:addTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxToolBar:addTool(This, Toolid, Bitmap) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addTool</string>
		<string>wxToolBar:addTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Label#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxToolBar:addTool(This, Toolid, Label, Bitmap) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addTool</string>
		<string>wxToolBar:addTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Label#&gt;, &lt;#Bitmap#&gt;, &lt;#BmpDisabled#&gt;)</string>
		<string>wxToolBar:addTool(This, Toolid, Label, Bitmap, BmpDisabled) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addTool</string>
		<string>wxToolBar:addTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Bitmap#&gt;, &lt;#BmpDisabled#&gt;, &lt;#Toggle#&gt;, &lt;#XPos#&gt;)</string>
		<string>wxToolBar:addTool(This, Toolid, Bitmap, BmpDisabled, Toggle, XPos) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addTool</string>
		<string>wxToolBar:addTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Bitmap#&gt;, &lt;#BmpDisabled#&gt;, &lt;#Toggle#&gt;, &lt;#XPos#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolBar:addTool(This, Toolid, Bitmap, BmpDisabled, Toggle, XPos, Option::[Option]) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addCheckTool</string>
		<string>wxToolBar:addCheckTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Label#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxToolBar:addCheckTool(This, Toolid, Label, Bitmap) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addCheckTool</string>
		<string>wxToolBar:addCheckTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Label#&gt;, &lt;#Bitmap#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolBar:addCheckTool(This, Toolid, Label, Bitmap, Option::[Option]) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addRadioTool</string>
		<string>wxToolBar:addRadioTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Label#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxToolBar:addRadioTool(This, Toolid, Label, Bitmap) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:addRadioTool</string>
		<string>wxToolBar:addRadioTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Label#&gt;, &lt;#Bitmap#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolBar:addRadioTool(This, Toolid, Label, Bitmap, Option::[Option]) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:deleteTool</string>
		<string>wxToolBar:deleteTool(&lt;#This#&gt;, &lt;#Toolid#&gt;)</string>
		<string>wxToolBar:deleteTool(This, Toolid) -&gt; boolean()</string>
		<string>wxToolBar:deleteToolByPos</string>
		<string>wxToolBar:deleteToolByPos(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxToolBar:deleteToolByPos(This, Pos) -&gt; boolean()</string>
		<string>wxToolBar:enableTool</string>
		<string>wxToolBar:enableTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Enable#&gt;)</string>
		<string>wxToolBar:enableTool(This, Toolid, Enable) -&gt; ok</string>
		<string>wxToolBar:findById</string>
		<string>wxToolBar:findById(&lt;#This#&gt;, &lt;#Toolid#&gt;)</string>
		<string>wxToolBar:findById(This, Toolid) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:findControl</string>
		<string>wxToolBar:findControl(&lt;#This#&gt;, &lt;#Toolid#&gt;)</string>
		<string>wxToolBar:findControl(This, Toolid) -&gt; wxControl() (see module wxControl)</string>
		<string>wxToolBar:findToolForPosition</string>
		<string>wxToolBar:findToolForPosition(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxToolBar:findToolForPosition(This, X, Y) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:getToolSize</string>
		<string>wxToolBar:getToolSize(&lt;#This#&gt;)</string>
		<string>wxToolBar:getToolSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxToolBar:getToolBitmapSize</string>
		<string>wxToolBar:getToolBitmapSize(&lt;#This#&gt;)</string>
		<string>wxToolBar:getToolBitmapSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxToolBar:getMargins</string>
		<string>wxToolBar:getMargins(&lt;#This#&gt;)</string>
		<string>wxToolBar:getMargins(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxToolBar:getToolEnabled</string>
		<string>wxToolBar:getToolEnabled(&lt;#This#&gt;, &lt;#Toolid#&gt;)</string>
		<string>wxToolBar:getToolEnabled(This, Toolid) -&gt; boolean()</string>
		<string>wxToolBar:getToolLongHelp</string>
		<string>wxToolBar:getToolLongHelp(&lt;#This#&gt;, &lt;#Toolid#&gt;)</string>
		<string>wxToolBar:getToolLongHelp(This, Toolid) -&gt; charlist() (see module unicode)</string>
		<string>wxToolBar:getToolPacking</string>
		<string>wxToolBar:getToolPacking(&lt;#This#&gt;)</string>
		<string>wxToolBar:getToolPacking(This) -&gt; integer()</string>
		<string>wxToolBar:getToolPos</string>
		<string>wxToolBar:getToolPos(&lt;#This#&gt;, &lt;#Id#&gt;)</string>
		<string>wxToolBar:getToolPos(This, Id) -&gt; integer()</string>
		<string>wxToolBar:getToolSeparation</string>
		<string>wxToolBar:getToolSeparation(&lt;#This#&gt;)</string>
		<string>wxToolBar:getToolSeparation(This) -&gt; integer()</string>
		<string>wxToolBar:getToolShortHelp</string>
		<string>wxToolBar:getToolShortHelp(&lt;#This#&gt;, &lt;#Toolid#&gt;)</string>
		<string>wxToolBar:getToolShortHelp(This, Toolid) -&gt; charlist() (see module unicode)</string>
		<string>wxToolBar:getToolState</string>
		<string>wxToolBar:getToolState(&lt;#This#&gt;, &lt;#Toolid#&gt;)</string>
		<string>wxToolBar:getToolState(This, Toolid) -&gt; boolean()</string>
		<string>wxToolBar:insertControl</string>
		<string>wxToolBar:insertControl(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Control#&gt;)</string>
		<string>wxToolBar:insertControl(This, Pos, Control) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:insertSeparator</string>
		<string>wxToolBar:insertSeparator(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxToolBar:insertSeparator(This, Pos) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:insertTool</string>
		<string>wxToolBar:insertTool(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Tool#&gt;)</string>
		<string>wxToolBar:insertTool(This, Pos, Tool) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:insertTool</string>
		<string>wxToolBar:insertTool(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Toolid#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxToolBar:insertTool(This, Pos, Toolid, Bitmap) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:insertTool</string>
		<string>wxToolBar:insertTool(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Toolid#&gt;, &lt;#Label#&gt;, &lt;#Bitmap#&gt;)</string>
		<string>wxToolBar:insertTool(This, Pos, Toolid, Label, Bitmap) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:insertTool</string>
		<string>wxToolBar:insertTool(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Toolid#&gt;, &lt;#Label#&gt;, &lt;#Bitmap#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolBar:insertTool(This, Pos, Toolid, Label, Bitmap, Option::[Option]) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:realize</string>
		<string>wxToolBar:realize(&lt;#This#&gt;)</string>
		<string>wxToolBar:realize(This) -&gt; boolean()</string>
		<string>wxToolBar:removeTool</string>
		<string>wxToolBar:removeTool(&lt;#This#&gt;, &lt;#Toolid#&gt;)</string>
		<string>wxToolBar:removeTool(This, Toolid) -&gt; wx_object() (see module wx)</string>
		<string>wxToolBar:setMargins</string>
		<string>wxToolBar:setMargins(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxToolBar:setMargins(This, X, Y) -&gt; ok</string>
		<string>wxToolBar:setToolBitmapSize</string>
		<string>wxToolBar:setToolBitmapSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxToolBar:setToolBitmapSize(This, Size) -&gt; ok</string>
		<string>wxToolBar:setToolLongHelp</string>
		<string>wxToolBar:setToolLongHelp(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#HelpString#&gt;)</string>
		<string>wxToolBar:setToolLongHelp(This, Toolid, HelpString) -&gt; ok</string>
		<string>wxToolBar:setToolPacking</string>
		<string>wxToolBar:setToolPacking(&lt;#This#&gt;, &lt;#Packing#&gt;)</string>
		<string>wxToolBar:setToolPacking(This, Packing) -&gt; ok</string>
		<string>wxToolBar:setToolShortHelp</string>
		<string>wxToolBar:setToolShortHelp(&lt;#This#&gt;, &lt;#Id#&gt;, &lt;#HelpString#&gt;)</string>
		<string>wxToolBar:setToolShortHelp(This, Id, HelpString) -&gt; ok</string>
		<string>wxToolBar:setToolSeparation</string>
		<string>wxToolBar:setToolSeparation(&lt;#This#&gt;, &lt;#Separation#&gt;)</string>
		<string>wxToolBar:setToolSeparation(This, Separation) -&gt; ok</string>
		<string>wxToolBar:toggleTool</string>
		<string>wxToolBar:toggleTool(&lt;#This#&gt;, &lt;#Toolid#&gt;, &lt;#Toggle#&gt;)</string>
		<string>wxToolBar:toggleTool(This, Toolid, Toggle) -&gt; ok</string>
		<string>wxToolbook:new</string>
		<string>wxToolbook:new()</string>
		<string>wxToolbook:new() -&gt; wxToolbook()</string>
		<string>wxToolbook:new</string>
		<string>wxToolbook:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxToolbook:new(Parent, Id) -&gt; wxToolbook()</string>
		<string>wxToolbook:new</string>
		<string>wxToolbook:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolbook:new(Parent, Id, Option::[Option]) -&gt; wxToolbook()</string>
		<string>wxToolbook:addPage</string>
		<string>wxToolbook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxToolbook:addPage(This, Page, Text) -&gt; boolean()</string>
		<string>wxToolbook:addPage</string>
		<string>wxToolbook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolbook:addPage(This, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxToolbook:advanceSelection</string>
		<string>wxToolbook:advanceSelection(&lt;#This#&gt;)</string>
		<string>wxToolbook:advanceSelection(This) -&gt; ok</string>
		<string>wxToolbook:advanceSelection</string>
		<string>wxToolbook:advanceSelection(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolbook:advanceSelection(This, Option::[Option]) -&gt; ok</string>
		<string>wxToolbook:assignImageList</string>
		<string>wxToolbook:assignImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxToolbook:assignImageList(This, ImageList) -&gt; ok</string>
		<string>wxToolbook:create</string>
		<string>wxToolbook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxToolbook:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxToolbook:create</string>
		<string>wxToolbook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolbook:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxToolbook:deleteAllPages</string>
		<string>wxToolbook:deleteAllPages(&lt;#This#&gt;)</string>
		<string>wxToolbook:deleteAllPages(This) -&gt; boolean()</string>
		<string>wxToolbook:deletePage</string>
		<string>wxToolbook:deletePage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxToolbook:deletePage(This, N) -&gt; boolean()</string>
		<string>wxToolbook:removePage</string>
		<string>wxToolbook:removePage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxToolbook:removePage(This, N) -&gt; boolean()</string>
		<string>wxToolbook:getCurrentPage</string>
		<string>wxToolbook:getCurrentPage(&lt;#This#&gt;)</string>
		<string>wxToolbook:getCurrentPage(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxToolbook:getImageList</string>
		<string>wxToolbook:getImageList(&lt;#This#&gt;)</string>
		<string>wxToolbook:getImageList(This) -&gt; wxImageList() (see module wxImageList)</string>
		<string>wxToolbook:getPage</string>
		<string>wxToolbook:getPage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxToolbook:getPage(This, N) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxToolbook:getPageCount</string>
		<string>wxToolbook:getPageCount(&lt;#This#&gt;)</string>
		<string>wxToolbook:getPageCount(This) -&gt; integer()</string>
		<string>wxToolbook:getPageImage</string>
		<string>wxToolbook:getPageImage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxToolbook:getPageImage(This, N) -&gt; integer()</string>
		<string>wxToolbook:getPageText</string>
		<string>wxToolbook:getPageText(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxToolbook:getPageText(This, N) -&gt; charlist() (see module unicode)</string>
		<string>wxToolbook:getSelection</string>
		<string>wxToolbook:getSelection(&lt;#This#&gt;)</string>
		<string>wxToolbook:getSelection(This) -&gt; integer()</string>
		<string>wxToolbook:hitTest</string>
		<string>wxToolbook:hitTest(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxToolbook:hitTest(This, Pt) -&gt; Result</string>
		<string>wxToolbook:insertPage</string>
		<string>wxToolbook:insertPage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxToolbook:insertPage(This, N, Page, Text) -&gt; boolean()</string>
		<string>wxToolbook:insertPage</string>
		<string>wxToolbook:insertPage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxToolbook:insertPage(This, N, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxToolbook:setImageList</string>
		<string>wxToolbook:setImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxToolbook:setImageList(This, ImageList) -&gt; ok</string>
		<string>wxToolbook:setPageSize</string>
		<string>wxToolbook:setPageSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxToolbook:setPageSize(This, Size) -&gt; ok</string>
		<string>wxToolbook:setPageImage</string>
		<string>wxToolbook:setPageImage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#ImageId#&gt;)</string>
		<string>wxToolbook:setPageImage(This, N, ImageId) -&gt; boolean()</string>
		<string>wxToolbook:setPageText</string>
		<string>wxToolbook:setPageText(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#StrText#&gt;)</string>
		<string>wxToolbook:setPageText(This, N, StrText) -&gt; boolean()</string>
		<string>wxToolbook:setSelection</string>
		<string>wxToolbook:setSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxToolbook:setSelection(This, N) -&gt; integer()</string>
		<string>wxToolbook:changeSelection</string>
		<string>wxToolbook:changeSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxToolbook:changeSelection(This, N) -&gt; integer()</string>
		<string>wxToolbook:destroy</string>
		<string>wxToolbook:destroy(&lt;#This::wxToolbook()#&gt;)</string>
		<string>wxToolbook:destroy(This::wxToolbook()) -&gt; ok</string>
		<string>wxToolTip:enable</string>
		<string>wxToolTip:enable(&lt;#Flag#&gt;)</string>
		<string>wxToolTip:enable(Flag) -&gt; ok</string>
		<string>wxToolTip:setDelay</string>
		<string>wxToolTip:setDelay(&lt;#Msecs#&gt;)</string>
		<string>wxToolTip:setDelay(Msecs) -&gt; ok</string>
		<string>wxToolTip:new</string>
		<string>wxToolTip:new(&lt;#Tip#&gt;)</string>
		<string>wxToolTip:new(Tip) -&gt; wxToolTip()</string>
		<string>wxToolTip:setTip</string>
		<string>wxToolTip:setTip(&lt;#This#&gt;, &lt;#Tip#&gt;)</string>
		<string>wxToolTip:setTip(This, Tip) -&gt; ok</string>
		<string>wxToolTip:getTip</string>
		<string>wxToolTip:getTip(&lt;#This#&gt;)</string>
		<string>wxToolTip:getTip(This) -&gt; charlist() (see module unicode)</string>
		<string>wxToolTip:getWindow</string>
		<string>wxToolTip:getWindow(&lt;#This#&gt;)</string>
		<string>wxToolTip:getWindow(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxToolTip:destroy</string>
		<string>wxToolTip:destroy(&lt;#This::wxToolTip()#&gt;)</string>
		<string>wxToolTip:destroy(This::wxToolTip()) -&gt; ok</string>
		<string>wxTopLevelWindow:getIcon</string>
		<string>wxTopLevelWindow:getIcon(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:getIcon(This) -&gt; wxIcon() (see module wxIcon)</string>
		<string>wxTopLevelWindow:getIcons</string>
		<string>wxTopLevelWindow:getIcons(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:getIcons(This) -&gt; wxIconBundle() (see module wxIconBundle)</string>
		<string>wxTopLevelWindow:getTitle</string>
		<string>wxTopLevelWindow:getTitle(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:getTitle(This) -&gt; charlist() (see module unicode)</string>
		<string>wxTopLevelWindow:isActive</string>
		<string>wxTopLevelWindow:isActive(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:isActive(This) -&gt; boolean()</string>
		<string>wxTopLevelWindow:iconize</string>
		<string>wxTopLevelWindow:iconize(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:iconize(This) -&gt; ok</string>
		<string>wxTopLevelWindow:iconize</string>
		<string>wxTopLevelWindow:iconize(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTopLevelWindow:iconize(This, Option::[Option]) -&gt; ok</string>
		<string>wxTopLevelWindow:isFullScreen</string>
		<string>wxTopLevelWindow:isFullScreen(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:isFullScreen(This) -&gt; boolean()</string>
		<string>wxTopLevelWindow:isIconized</string>
		<string>wxTopLevelWindow:isIconized(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:isIconized(This) -&gt; boolean()</string>
		<string>wxTopLevelWindow:isMaximized</string>
		<string>wxTopLevelWindow:isMaximized(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:isMaximized(This) -&gt; boolean()</string>
		<string>wxTopLevelWindow:maximize</string>
		<string>wxTopLevelWindow:maximize(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:maximize(This) -&gt; ok</string>
		<string>wxTopLevelWindow:maximize</string>
		<string>wxTopLevelWindow:maximize(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTopLevelWindow:maximize(This, Option::[Option]) -&gt; ok</string>
		<string>wxTopLevelWindow:requestUserAttention</string>
		<string>wxTopLevelWindow:requestUserAttention(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:requestUserAttention(This) -&gt; ok</string>
		<string>wxTopLevelWindow:requestUserAttention</string>
		<string>wxTopLevelWindow:requestUserAttention(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTopLevelWindow:requestUserAttention(This, Option::[Option]) -&gt; ok</string>
		<string>wxTopLevelWindow:setIcon</string>
		<string>wxTopLevelWindow:setIcon(&lt;#This#&gt;, &lt;#Icon#&gt;)</string>
		<string>wxTopLevelWindow:setIcon(This, Icon) -&gt; ok</string>
		<string>wxTopLevelWindow:setIcons</string>
		<string>wxTopLevelWindow:setIcons(&lt;#This#&gt;, &lt;#Icons#&gt;)</string>
		<string>wxTopLevelWindow:setIcons(This, Icons) -&gt; ok</string>
		<string>wxTopLevelWindow:centerOnScreen</string>
		<string>wxTopLevelWindow:centerOnScreen(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:centerOnScreen(This) -&gt; ok</string>
		<string>wxTopLevelWindow:centerOnScreen</string>
		<string>wxTopLevelWindow:centerOnScreen(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTopLevelWindow:centerOnScreen(This, Option::[Option]) -&gt; ok</string>
		<string>wxTopLevelWindow:centreOnScreen</string>
		<string>wxTopLevelWindow:centreOnScreen(&lt;#This#&gt;)</string>
		<string>wxTopLevelWindow:centreOnScreen(This) -&gt; ok</string>
		<string>wxTopLevelWindow:centreOnScreen</string>
		<string>wxTopLevelWindow:centreOnScreen(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTopLevelWindow:centreOnScreen(This, Option::[Option]) -&gt; ok</string>
		<string>wxTopLevelWindow:setShape</string>
		<string>wxTopLevelWindow:setShape(&lt;#This#&gt;, &lt;#Region#&gt;)</string>
		<string>wxTopLevelWindow:setShape(This, Region) -&gt; boolean()</string>
		<string>wxTopLevelWindow:setTitle</string>
		<string>wxTopLevelWindow:setTitle(&lt;#This#&gt;, &lt;#Title#&gt;)</string>
		<string>wxTopLevelWindow:setTitle(This, Title) -&gt; ok</string>
		<string>wxTopLevelWindow:showFullScreen</string>
		<string>wxTopLevelWindow:showFullScreen(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxTopLevelWindow:showFullScreen(This, Show) -&gt; boolean()</string>
		<string>wxTopLevelWindow:showFullScreen</string>
		<string>wxTopLevelWindow:showFullScreen(&lt;#This#&gt;, &lt;#Show#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTopLevelWindow:showFullScreen(This, Show, Option::[Option]) -&gt; boolean()</string>
		<string>wxTreebook:new</string>
		<string>wxTreebook:new()</string>
		<string>wxTreebook:new() -&gt; wxTreebook()</string>
		<string>wxTreebook:new</string>
		<string>wxTreebook:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxTreebook:new(Parent, Id) -&gt; wxTreebook()</string>
		<string>wxTreebook:new</string>
		<string>wxTreebook:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreebook:new(Parent, Id, Option::[Option]) -&gt; wxTreebook()</string>
		<string>wxTreebook:addPage</string>
		<string>wxTreebook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTreebook:addPage(This, Page, Text) -&gt; boolean()</string>
		<string>wxTreebook:addPage</string>
		<string>wxTreebook:addPage(&lt;#This#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreebook:addPage(This, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxTreebook:advanceSelection</string>
		<string>wxTreebook:advanceSelection(&lt;#This#&gt;)</string>
		<string>wxTreebook:advanceSelection(This) -&gt; ok</string>
		<string>wxTreebook:advanceSelection</string>
		<string>wxTreebook:advanceSelection(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreebook:advanceSelection(This, Option::[Option]) -&gt; ok</string>
		<string>wxTreebook:assignImageList</string>
		<string>wxTreebook:assignImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxTreebook:assignImageList(This, ImageList) -&gt; ok</string>
		<string>wxTreebook:create</string>
		<string>wxTreebook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxTreebook:create(This, Parent, Id) -&gt; boolean()</string>
		<string>wxTreebook:create</string>
		<string>wxTreebook:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreebook:create(This, Parent, Id, Option::[Option]) -&gt; boolean()</string>
		<string>wxTreebook:deleteAllPages</string>
		<string>wxTreebook:deleteAllPages(&lt;#This#&gt;)</string>
		<string>wxTreebook:deleteAllPages(This) -&gt; boolean()</string>
		<string>wxTreebook:deletePage</string>
		<string>wxTreebook:deletePage(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxTreebook:deletePage(This, Pos) -&gt; boolean()</string>
		<string>wxTreebook:removePage</string>
		<string>wxTreebook:removePage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxTreebook:removePage(This, N) -&gt; boolean()</string>
		<string>wxTreebook:getCurrentPage</string>
		<string>wxTreebook:getCurrentPage(&lt;#This#&gt;)</string>
		<string>wxTreebook:getCurrentPage(This) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxTreebook:getImageList</string>
		<string>wxTreebook:getImageList(&lt;#This#&gt;)</string>
		<string>wxTreebook:getImageList(This) -&gt; wxImageList() (see module wxImageList)</string>
		<string>wxTreebook:getPage</string>
		<string>wxTreebook:getPage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxTreebook:getPage(This, N) -&gt; wxWindow() (see module wxWindow)</string>
		<string>wxTreebook:getPageCount</string>
		<string>wxTreebook:getPageCount(&lt;#This#&gt;)</string>
		<string>wxTreebook:getPageCount(This) -&gt; integer()</string>
		<string>wxTreebook:getPageImage</string>
		<string>wxTreebook:getPageImage(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxTreebook:getPageImage(This, N) -&gt; integer()</string>
		<string>wxTreebook:getPageText</string>
		<string>wxTreebook:getPageText(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxTreebook:getPageText(This, N) -&gt; charlist() (see module unicode)</string>
		<string>wxTreebook:getSelection</string>
		<string>wxTreebook:getSelection(&lt;#This#&gt;)</string>
		<string>wxTreebook:getSelection(This) -&gt; integer()</string>
		<string>wxTreebook:expandNode</string>
		<string>wxTreebook:expandNode(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxTreebook:expandNode(This, Pos) -&gt; boolean()</string>
		<string>wxTreebook:expandNode</string>
		<string>wxTreebook:expandNode(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreebook:expandNode(This, Pos, Option::[Option]) -&gt; boolean()</string>
		<string>wxTreebook:isNodeExpanded</string>
		<string>wxTreebook:isNodeExpanded(&lt;#This#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxTreebook:isNodeExpanded(This, Pos) -&gt; boolean()</string>
		<string>wxTreebook:hitTest</string>
		<string>wxTreebook:hitTest(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxTreebook:hitTest(This, Pt) -&gt; Result</string>
		<string>wxTreebook:insertPage</string>
		<string>wxTreebook:insertPage(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTreebook:insertPage(This, Pos, Page, Text) -&gt; boolean()</string>
		<string>wxTreebook:insertPage</string>
		<string>wxTreebook:insertPage(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreebook:insertPage(This, Pos, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxTreebook:insertSubPage</string>
		<string>wxTreebook:insertSubPage(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTreebook:insertSubPage(This, Pos, Page, Text) -&gt; boolean()</string>
		<string>wxTreebook:insertSubPage</string>
		<string>wxTreebook:insertSubPage(&lt;#This#&gt;, &lt;#Pos#&gt;, &lt;#Page#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreebook:insertSubPage(This, Pos, Page, Text, Option::[Option]) -&gt; boolean()</string>
		<string>wxTreebook:setImageList</string>
		<string>wxTreebook:setImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxTreebook:setImageList(This, ImageList) -&gt; ok</string>
		<string>wxTreebook:setPageSize</string>
		<string>wxTreebook:setPageSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxTreebook:setPageSize(This, Size) -&gt; ok</string>
		<string>wxTreebook:setPageImage</string>
		<string>wxTreebook:setPageImage(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#ImageId#&gt;)</string>
		<string>wxTreebook:setPageImage(This, N, ImageId) -&gt; boolean()</string>
		<string>wxTreebook:setPageText</string>
		<string>wxTreebook:setPageText(&lt;#This#&gt;, &lt;#N#&gt;, &lt;#StrText#&gt;)</string>
		<string>wxTreebook:setPageText(This, N, StrText) -&gt; boolean()</string>
		<string>wxTreebook:setSelection</string>
		<string>wxTreebook:setSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxTreebook:setSelection(This, N) -&gt; integer()</string>
		<string>wxTreebook:changeSelection</string>
		<string>wxTreebook:changeSelection(&lt;#This#&gt;, &lt;#N#&gt;)</string>
		<string>wxTreebook:changeSelection(This, N) -&gt; integer()</string>
		<string>wxTreebook:destroy</string>
		<string>wxTreebook:destroy(&lt;#This::wxTreebook()#&gt;)</string>
		<string>wxTreebook:destroy(This::wxTreebook()) -&gt; ok</string>
		<string>wxTreeCtrl:new</string>
		<string>wxTreeCtrl:new()</string>
		<string>wxTreeCtrl:new() -&gt; wxTreeCtrl()</string>
		<string>wxTreeCtrl:new</string>
		<string>wxTreeCtrl:new(&lt;#Parent#&gt;)</string>
		<string>wxTreeCtrl:new(Parent) -&gt; wxTreeCtrl()</string>
		<string>wxTreeCtrl:new</string>
		<string>wxTreeCtrl:new(&lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:new(Parent, Option::[Option]) -&gt; wxTreeCtrl()</string>
		<string>wxTreeCtrl:addRoot</string>
		<string>wxTreeCtrl:addRoot(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTreeCtrl:addRoot(This, Text) -&gt; integer()</string>
		<string>wxTreeCtrl:addRoot</string>
		<string>wxTreeCtrl:addRoot(&lt;#This#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:addRoot(This, Text, Option::[Option]) -&gt; integer()</string>
		<string>wxTreeCtrl:appendItem</string>
		<string>wxTreeCtrl:appendItem(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTreeCtrl:appendItem(This, Parent, Text) -&gt; integer()</string>
		<string>wxTreeCtrl:appendItem</string>
		<string>wxTreeCtrl:appendItem(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:appendItem(This, Parent, Text, Option::[Option]) -&gt; integer()</string>
		<string>wxTreeCtrl:assignImageList</string>
		<string>wxTreeCtrl:assignImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxTreeCtrl:assignImageList(This, ImageList) -&gt; ok</string>
		<string>wxTreeCtrl:assignStateImageList</string>
		<string>wxTreeCtrl:assignStateImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxTreeCtrl:assignStateImageList(This, ImageList) -&gt; ok</string>
		<string>wxTreeCtrl:collapse</string>
		<string>wxTreeCtrl:collapse(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:collapse(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:collapseAndReset</string>
		<string>wxTreeCtrl:collapseAndReset(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:collapseAndReset(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:create</string>
		<string>wxTreeCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;)</string>
		<string>wxTreeCtrl:create(This, Parent) -&gt; boolean()</string>
		<string>wxTreeCtrl:create</string>
		<string>wxTreeCtrl:create(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:create(This, Parent, Option::[Option]) -&gt; boolean()</string>
		<string>wxTreeCtrl:delete</string>
		<string>wxTreeCtrl:delete(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:delete(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:deleteAllItems</string>
		<string>wxTreeCtrl:deleteAllItems(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:deleteAllItems(This) -&gt; ok</string>
		<string>wxTreeCtrl:deleteChildren</string>
		<string>wxTreeCtrl:deleteChildren(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:deleteChildren(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:editLabel</string>
		<string>wxTreeCtrl:editLabel(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:editLabel(This, Item) -&gt; wxTextCtrl() (see module wxTextCtrl)</string>
		<string>wxTreeCtrl:ensureVisible</string>
		<string>wxTreeCtrl:ensureVisible(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:ensureVisible(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:expand</string>
		<string>wxTreeCtrl:expand(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:expand(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:getBoundingRect</string>
		<string>wxTreeCtrl:getBoundingRect(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getBoundingRect(This, Item) -&gt; Result</string>
		<string>wxTreeCtrl:getBoundingRect</string>
		<string>wxTreeCtrl:getBoundingRect(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:getBoundingRect(This, Item, Option::[Option]) -&gt; Result</string>
		<string>wxTreeCtrl:getChildrenCount</string>
		<string>wxTreeCtrl:getChildrenCount(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getChildrenCount(This, Item) -&gt; integer()</string>
		<string>wxTreeCtrl:getChildrenCount</string>
		<string>wxTreeCtrl:getChildrenCount(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:getChildrenCount(This, Item, Option::[Option]) -&gt; integer()</string>
		<string>wxTreeCtrl:getCount</string>
		<string>wxTreeCtrl:getCount(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getCount(This) -&gt; integer()</string>
		<string>wxTreeCtrl:getEditControl</string>
		<string>wxTreeCtrl:getEditControl(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getEditControl(This) -&gt; wxTextCtrl() (see module wxTextCtrl)</string>
		<string>wxTreeCtrl:getFirstChild</string>
		<string>wxTreeCtrl:getFirstChild(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getFirstChild(This, Item) -&gt; Result</string>
		<string>wxTreeCtrl:getNextChild</string>
		<string>wxTreeCtrl:getNextChild(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Cookie#&gt;)</string>
		<string>wxTreeCtrl:getNextChild(This, Item, Cookie) -&gt; Result</string>
		<string>wxTreeCtrl:getFirstVisibleItem</string>
		<string>wxTreeCtrl:getFirstVisibleItem(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getFirstVisibleItem(This) -&gt; integer()</string>
		<string>wxTreeCtrl:getImageList</string>
		<string>wxTreeCtrl:getImageList(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getImageList(This) -&gt; wxImageList() (see module wxImageList)</string>
		<string>wxTreeCtrl:getIndent</string>
		<string>wxTreeCtrl:getIndent(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getIndent(This) -&gt; integer()</string>
		<string>wxTreeCtrl:getItemBackgroundColour</string>
		<string>wxTreeCtrl:getItemBackgroundColour(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getItemBackgroundColour(This, Item) -&gt; wx_colour4() (see module wx)</string>
		<string>wxTreeCtrl:getItemData</string>
		<string>wxTreeCtrl:getItemData(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getItemData(This, Item) -&gt; term()</string>
		<string>wxTreeCtrl:getItemFont</string>
		<string>wxTreeCtrl:getItemFont(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getItemFont(This, Item) -&gt; wxFont() (see module wxFont)</string>
		<string>wxTreeCtrl:getItemImage</string>
		<string>wxTreeCtrl:getItemImage(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getItemImage(This, Item) -&gt; integer()</string>
		<string>wxTreeCtrl:getItemImage</string>
		<string>wxTreeCtrl:getItemImage(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:getItemImage(This, Item, Option::[Option]) -&gt; integer()</string>
		<string>wxTreeCtrl:getItemText</string>
		<string>wxTreeCtrl:getItemText(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getItemText(This, Item) -&gt; charlist() (see module unicode)</string>
		<string>wxTreeCtrl:getItemTextColour</string>
		<string>wxTreeCtrl:getItemTextColour(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getItemTextColour(This, Item) -&gt; wx_colour4() (see module wx)</string>
		<string>wxTreeCtrl:getLastChild</string>
		<string>wxTreeCtrl:getLastChild(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getLastChild(This, Item) -&gt; integer()</string>
		<string>wxTreeCtrl:getNextSibling</string>
		<string>wxTreeCtrl:getNextSibling(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getNextSibling(This, Item) -&gt; integer()</string>
		<string>wxTreeCtrl:getNextVisible</string>
		<string>wxTreeCtrl:getNextVisible(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getNextVisible(This, Item) -&gt; integer()</string>
		<string>wxTreeCtrl:getItemParent</string>
		<string>wxTreeCtrl:getItemParent(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getItemParent(This, Item) -&gt; integer()</string>
		<string>wxTreeCtrl:getPrevSibling</string>
		<string>wxTreeCtrl:getPrevSibling(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getPrevSibling(This, Item) -&gt; integer()</string>
		<string>wxTreeCtrl:getPrevVisible</string>
		<string>wxTreeCtrl:getPrevVisible(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:getPrevVisible(This, Item) -&gt; integer()</string>
		<string>wxTreeCtrl:getRootItem</string>
		<string>wxTreeCtrl:getRootItem(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getRootItem(This) -&gt; integer()</string>
		<string>wxTreeCtrl:getSelection</string>
		<string>wxTreeCtrl:getSelection(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getSelection(This) -&gt; integer()</string>
		<string>wxTreeCtrl:getSelections</string>
		<string>wxTreeCtrl:getSelections(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getSelections(This) -&gt; Result</string>
		<string>wxTreeCtrl:getStateImageList</string>
		<string>wxTreeCtrl:getStateImageList(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:getStateImageList(This) -&gt; wxImageList() (see module wxImageList)</string>
		<string>wxTreeCtrl:hitTest</string>
		<string>wxTreeCtrl:hitTest(&lt;#This#&gt;, &lt;#Point#&gt;)</string>
		<string>wxTreeCtrl:hitTest(This, Point) -&gt; Result</string>
		<string>wxTreeCtrl:insertItem</string>
		<string>wxTreeCtrl:insertItem(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Pos#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTreeCtrl:insertItem(This, Parent, Pos, Text) -&gt; integer()</string>
		<string>wxTreeCtrl:insertItem</string>
		<string>wxTreeCtrl:insertItem(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Pos#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:insertItem(This, Parent, Pos, Text, Option::[Option]) -&gt; integer()</string>
		<string>wxTreeCtrl:isBold</string>
		<string>wxTreeCtrl:isBold(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:isBold(This, Item) -&gt; boolean()</string>
		<string>wxTreeCtrl:isExpanded</string>
		<string>wxTreeCtrl:isExpanded(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:isExpanded(This, Item) -&gt; boolean()</string>
		<string>wxTreeCtrl:isSelected</string>
		<string>wxTreeCtrl:isSelected(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:isSelected(This, Item) -&gt; boolean()</string>
		<string>wxTreeCtrl:isVisible</string>
		<string>wxTreeCtrl:isVisible(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:isVisible(This, Item) -&gt; boolean()</string>
		<string>wxTreeCtrl:itemHasChildren</string>
		<string>wxTreeCtrl:itemHasChildren(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:itemHasChildren(This, Item) -&gt; boolean()</string>
		<string>wxTreeCtrl:isTreeItemIdOk</string>
		<string>wxTreeCtrl:isTreeItemIdOk(&lt;#Id#&gt;)</string>
		<string>wxTreeCtrl:isTreeItemIdOk(Id) -&gt; boolean()</string>
		<string>wxTreeCtrl:prependItem</string>
		<string>wxTreeCtrl:prependItem(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTreeCtrl:prependItem(This, Parent, Text) -&gt; integer()</string>
		<string>wxTreeCtrl:prependItem</string>
		<string>wxTreeCtrl:prependItem(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Text#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:prependItem(This, Parent, Text, Option::[Option]) -&gt; integer()</string>
		<string>wxTreeCtrl:scrollTo</string>
		<string>wxTreeCtrl:scrollTo(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:scrollTo(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:selectItem</string>
		<string>wxTreeCtrl:selectItem(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:selectItem(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:selectItem</string>
		<string>wxTreeCtrl:selectItem(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:selectItem(This, Item, Option::[Option]) -&gt; ok</string>
		<string>wxTreeCtrl:setIndent</string>
		<string>wxTreeCtrl:setIndent(&lt;#This#&gt;, &lt;#Indent#&gt;)</string>
		<string>wxTreeCtrl:setIndent(This, Indent) -&gt; ok</string>
		<string>wxTreeCtrl:setImageList</string>
		<string>wxTreeCtrl:setImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxTreeCtrl:setImageList(This, ImageList) -&gt; ok</string>
		<string>wxTreeCtrl:setItemBackgroundColour</string>
		<string>wxTreeCtrl:setItemBackgroundColour(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Col#&gt;)</string>
		<string>wxTreeCtrl:setItemBackgroundColour(This, Item, Col) -&gt; ok</string>
		<string>wxTreeCtrl:setItemBold</string>
		<string>wxTreeCtrl:setItemBold(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:setItemBold(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:setItemBold</string>
		<string>wxTreeCtrl:setItemBold(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:setItemBold(This, Item, Option::[Option]) -&gt; ok</string>
		<string>wxTreeCtrl:setItemData</string>
		<string>wxTreeCtrl:setItemData(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Data#&gt;)</string>
		<string>wxTreeCtrl:setItemData(This, Item, Data) -&gt; ok</string>
		<string>wxTreeCtrl:setItemDropHighlight</string>
		<string>wxTreeCtrl:setItemDropHighlight(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:setItemDropHighlight(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:setItemDropHighlight</string>
		<string>wxTreeCtrl:setItemDropHighlight(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:setItemDropHighlight(This, Item, Option::[Option]) -&gt; ok</string>
		<string>wxTreeCtrl:setItemFont</string>
		<string>wxTreeCtrl:setItemFont(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Font#&gt;)</string>
		<string>wxTreeCtrl:setItemFont(This, Item, Font) -&gt; ok</string>
		<string>wxTreeCtrl:setItemHasChildren</string>
		<string>wxTreeCtrl:setItemHasChildren(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:setItemHasChildren(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:setItemHasChildren</string>
		<string>wxTreeCtrl:setItemHasChildren(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:setItemHasChildren(This, Item, Option::[Option]) -&gt; ok</string>
		<string>wxTreeCtrl:setItemImage</string>
		<string>wxTreeCtrl:setItemImage(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Image#&gt;)</string>
		<string>wxTreeCtrl:setItemImage(This, Item, Image) -&gt; ok</string>
		<string>wxTreeCtrl:setItemImage</string>
		<string>wxTreeCtrl:setItemImage(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Image#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxTreeCtrl:setItemImage(This, Item, Image, Option::[Option]) -&gt; ok</string>
		<string>wxTreeCtrl:setItemText</string>
		<string>wxTreeCtrl:setItemText(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Text#&gt;)</string>
		<string>wxTreeCtrl:setItemText(This, Item, Text) -&gt; ok</string>
		<string>wxTreeCtrl:setItemTextColour</string>
		<string>wxTreeCtrl:setItemTextColour(&lt;#This#&gt;, &lt;#Item#&gt;, &lt;#Col#&gt;)</string>
		<string>wxTreeCtrl:setItemTextColour(This, Item, Col) -&gt; ok</string>
		<string>wxTreeCtrl:setStateImageList</string>
		<string>wxTreeCtrl:setStateImageList(&lt;#This#&gt;, &lt;#ImageList#&gt;)</string>
		<string>wxTreeCtrl:setStateImageList(This, ImageList) -&gt; ok</string>
		<string>wxTreeCtrl:setWindowStyle</string>
		<string>wxTreeCtrl:setWindowStyle(&lt;#This#&gt;, &lt;#Styles#&gt;)</string>
		<string>wxTreeCtrl:setWindowStyle(This, Styles) -&gt; ok</string>
		<string>wxTreeCtrl:sortChildren</string>
		<string>wxTreeCtrl:sortChildren(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:sortChildren(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:toggle</string>
		<string>wxTreeCtrl:toggle(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:toggle(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:toggleItemSelection</string>
		<string>wxTreeCtrl:toggleItemSelection(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:toggleItemSelection(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:unselect</string>
		<string>wxTreeCtrl:unselect(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:unselect(This) -&gt; ok</string>
		<string>wxTreeCtrl:unselectAll</string>
		<string>wxTreeCtrl:unselectAll(&lt;#This#&gt;)</string>
		<string>wxTreeCtrl:unselectAll(This) -&gt; ok</string>
		<string>wxTreeCtrl:unselectItem</string>
		<string>wxTreeCtrl:unselectItem(&lt;#This#&gt;, &lt;#Item#&gt;)</string>
		<string>wxTreeCtrl:unselectItem(This, Item) -&gt; ok</string>
		<string>wxTreeCtrl:destroy</string>
		<string>wxTreeCtrl:destroy(&lt;#This::wxTreeCtrl()#&gt;)</string>
		<string>wxTreeCtrl:destroy(This::wxTreeCtrl()) -&gt; ok</string>
		<string>wxTreeEvent:getKeyCode</string>
		<string>wxTreeEvent:getKeyCode(&lt;#This#&gt;)</string>
		<string>wxTreeEvent:getKeyCode(This) -&gt; integer()</string>
		<string>wxTreeEvent:getItem</string>
		<string>wxTreeEvent:getItem(&lt;#This#&gt;)</string>
		<string>wxTreeEvent:getItem(This) -&gt; integer()</string>
		<string>wxTreeEvent:getKeyEvent</string>
		<string>wxTreeEvent:getKeyEvent(&lt;#This#&gt;)</string>
		<string>wxTreeEvent:getKeyEvent(This) -&gt; wxKeyEvent() (see module wxKeyEvent)</string>
		<string>wxTreeEvent:getLabel</string>
		<string>wxTreeEvent:getLabel(&lt;#This#&gt;)</string>
		<string>wxTreeEvent:getLabel(This) -&gt; charlist() (see module unicode)</string>
		<string>wxTreeEvent:getOldItem</string>
		<string>wxTreeEvent:getOldItem(&lt;#This#&gt;)</string>
		<string>wxTreeEvent:getOldItem(This) -&gt; integer()</string>
		<string>wxTreeEvent:getPoint</string>
		<string>wxTreeEvent:getPoint(&lt;#This#&gt;)</string>
		<string>wxTreeEvent:getPoint(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxTreeEvent:isEditCancelled</string>
		<string>wxTreeEvent:isEditCancelled(&lt;#This#&gt;)</string>
		<string>wxTreeEvent:isEditCancelled(This) -&gt; boolean()</string>
		<string>wxTreeEvent:setToolTip</string>
		<string>wxTreeEvent:setToolTip(&lt;#This#&gt;, &lt;#ToolTip#&gt;)</string>
		<string>wxTreeEvent:setToolTip(This, ToolTip) -&gt; ok</string>
		<string>wxUpdateUIEvent:canUpdate</string>
		<string>wxUpdateUIEvent:canUpdate(&lt;#Win#&gt;)</string>
		<string>wxUpdateUIEvent:canUpdate(Win) -&gt; boolean()</string>
		<string>wxUpdateUIEvent:check</string>
		<string>wxUpdateUIEvent:check(&lt;#This#&gt;, &lt;#Check#&gt;)</string>
		<string>wxUpdateUIEvent:check(This, Check) -&gt; ok</string>
		<string>wxUpdateUIEvent:enable</string>
		<string>wxUpdateUIEvent:enable(&lt;#This#&gt;, &lt;#Enable#&gt;)</string>
		<string>wxUpdateUIEvent:enable(This, Enable) -&gt; ok</string>
		<string>wxUpdateUIEvent:show</string>
		<string>wxUpdateUIEvent:show(&lt;#This#&gt;, &lt;#Show#&gt;)</string>
		<string>wxUpdateUIEvent:show(This, Show) -&gt; ok</string>
		<string>wxUpdateUIEvent:getChecked</string>
		<string>wxUpdateUIEvent:getChecked(&lt;#This#&gt;)</string>
		<string>wxUpdateUIEvent:getChecked(This) -&gt; boolean()</string>
		<string>wxUpdateUIEvent:getEnabled</string>
		<string>wxUpdateUIEvent:getEnabled(&lt;#This#&gt;)</string>
		<string>wxUpdateUIEvent:getEnabled(This) -&gt; boolean()</string>
		<string>wxUpdateUIEvent:getShown</string>
		<string>wxUpdateUIEvent:getShown(&lt;#This#&gt;)</string>
		<string>wxUpdateUIEvent:getShown(This) -&gt; boolean()</string>
		<string>wxUpdateUIEvent:getSetChecked</string>
		<string>wxUpdateUIEvent:getSetChecked(&lt;#This#&gt;)</string>
		<string>wxUpdateUIEvent:getSetChecked(This) -&gt; boolean()</string>
		<string>wxUpdateUIEvent:getSetEnabled</string>
		<string>wxUpdateUIEvent:getSetEnabled(&lt;#This#&gt;)</string>
		<string>wxUpdateUIEvent:getSetEnabled(This) -&gt; boolean()</string>
		<string>wxUpdateUIEvent:getSetShown</string>
		<string>wxUpdateUIEvent:getSetShown(&lt;#This#&gt;)</string>
		<string>wxUpdateUIEvent:getSetShown(This) -&gt; boolean()</string>
		<string>wxUpdateUIEvent:getSetText</string>
		<string>wxUpdateUIEvent:getSetText(&lt;#This#&gt;)</string>
		<string>wxUpdateUIEvent:getSetText(This) -&gt; boolean()</string>
		<string>wxUpdateUIEvent:getText</string>
		<string>wxUpdateUIEvent:getText(&lt;#This#&gt;)</string>
		<string>wxUpdateUIEvent:getText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxUpdateUIEvent:getMode</string>
		<string>wxUpdateUIEvent:getMode()</string>
		<string>wxUpdateUIEvent:getMode() -&gt; wx_enum() (see module wx)</string>
		<string>wxUpdateUIEvent:getUpdateInterval</string>
		<string>wxUpdateUIEvent:getUpdateInterval()</string>
		<string>wxUpdateUIEvent:getUpdateInterval() -&gt; integer()</string>
		<string>wxUpdateUIEvent:resetUpdateTime</string>
		<string>wxUpdateUIEvent:resetUpdateTime()</string>
		<string>wxUpdateUIEvent:resetUpdateTime() -&gt; ok</string>
		<string>wxUpdateUIEvent:setMode</string>
		<string>wxUpdateUIEvent:setMode(&lt;#Mode#&gt;)</string>
		<string>wxUpdateUIEvent:setMode(Mode) -&gt; ok</string>
		<string>wxUpdateUIEvent:setText</string>
		<string>wxUpdateUIEvent:setText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxUpdateUIEvent:setText(This, Text) -&gt; ok</string>
		<string>wxUpdateUIEvent:setUpdateInterval</string>
		<string>wxUpdateUIEvent:setUpdateInterval(&lt;#UpdateInterval#&gt;)</string>
		<string>wxUpdateUIEvent:setUpdateInterval(UpdateInterval) -&gt; ok</string>
		<string>wxWindow:new</string>
		<string>wxWindow:new()</string>
		<string>wxWindow:new() -&gt; wxWindow()</string>
		<string>wxWindow:new</string>
		<string>wxWindow:new(&lt;#Parent#&gt;, &lt;#Id#&gt;)</string>
		<string>wxWindow:new(Parent, Id) -&gt; wxWindow()</string>
		<string>wxWindow:new</string>
		<string>wxWindow:new(&lt;#Parent#&gt;, &lt;#Id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:new(Parent, Id, Option::[Option]) -&gt; wxWindow()</string>
		<string>wxWindow:cacheBestSize</string>
		<string>wxWindow:cacheBestSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxWindow:cacheBestSize(This, Size) -&gt; ok</string>
		<string>wxWindow:captureMouse</string>
		<string>wxWindow:captureMouse(&lt;#This#&gt;)</string>
		<string>wxWindow:captureMouse(This) -&gt; ok</string>
		<string>wxWindow:center</string>
		<string>wxWindow:center(&lt;#This#&gt;)</string>
		<string>wxWindow:center(This) -&gt; ok</string>
		<string>wxWindow:center</string>
		<string>wxWindow:center(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:center(This, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:centerOnParent</string>
		<string>wxWindow:centerOnParent(&lt;#This#&gt;)</string>
		<string>wxWindow:centerOnParent(This) -&gt; ok</string>
		<string>wxWindow:centerOnParent</string>
		<string>wxWindow:centerOnParent(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:centerOnParent(This, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:centre</string>
		<string>wxWindow:centre(&lt;#This#&gt;)</string>
		<string>wxWindow:centre(This) -&gt; ok</string>
		<string>wxWindow:centre</string>
		<string>wxWindow:centre(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:centre(This, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:centreOnParent</string>
		<string>wxWindow:centreOnParent(&lt;#This#&gt;)</string>
		<string>wxWindow:centreOnParent(This) -&gt; ok</string>
		<string>wxWindow:centreOnParent</string>
		<string>wxWindow:centreOnParent(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:centreOnParent(This, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:clearBackground</string>
		<string>wxWindow:clearBackground(&lt;#This#&gt;)</string>
		<string>wxWindow:clearBackground(This) -&gt; ok</string>
		<string>wxWindow:clientToScreen</string>
		<string>wxWindow:clientToScreen(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxWindow:clientToScreen(This, Pt) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxWindow:clientToScreen</string>
		<string>wxWindow:clientToScreen(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxWindow:clientToScreen(This, X, Y) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxWindow:close</string>
		<string>wxWindow:close(&lt;#This#&gt;)</string>
		<string>wxWindow:close(This) -&gt; boolean()</string>
		<string>wxWindow:close</string>
		<string>wxWindow:close(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:close(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxWindow:convertDialogToPixels</string>
		<string>wxWindow:convertDialogToPixels(&lt;#This#&gt;, &lt;#Sz#&gt;)</string>
		<string>wxWindow:convertDialogToPixels(This, Sz) -&gt; {W::integer(), H::integer()}</string>
		<string>wxWindow:convertPixelsToDialog</string>
		<string>wxWindow:convertPixelsToDialog(&lt;#This#&gt;, &lt;#Sz#&gt;)</string>
		<string>wxWindow:convertPixelsToDialog(This, Sz) -&gt; {W::integer(), H::integer()}</string>
		<string>wxWindow:Destroy</string>
		<string>wxWindow:Destroy(&lt;#This#&gt;)</string>
		<string>wxWindow:Destroy(This) -&gt; boolean()</string>
		<string>wxWindow:destroyChildren</string>
		<string>wxWindow:destroyChildren(&lt;#This#&gt;)</string>
		<string>wxWindow:destroyChildren(This) -&gt; boolean()</string>
		<string>wxWindow:disable</string>
		<string>wxWindow:disable(&lt;#This#&gt;)</string>
		<string>wxWindow:disable(This) -&gt; boolean()</string>
		<string>wxWindow:enable</string>
		<string>wxWindow:enable(&lt;#This#&gt;)</string>
		<string>wxWindow:enable(This) -&gt; boolean()</string>
		<string>wxWindow:enable</string>
		<string>wxWindow:enable(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:enable(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxWindow:findFocus</string>
		<string>wxWindow:findFocus()</string>
		<string>wxWindow:findFocus() -&gt; wxWindow()</string>
		<string>wxWindow:findWindow</string>
		<string>wxWindow:findWindow(&lt;#This#&gt;, &lt;#Winid#&gt;)</string>
		<string>wxWindow:findWindow(This, Winid) -&gt; wxWindow()</string>
		<string>wxWindow:findWindowById</string>
		<string>wxWindow:findWindowById(&lt;#Winid#&gt;)</string>
		<string>wxWindow:findWindowById(Winid) -&gt; wxWindow()</string>
		<string>wxWindow:findWindowById</string>
		<string>wxWindow:findWindowById(&lt;#Winid#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:findWindowById(Winid, Option::[Option]) -&gt; wxWindow()</string>
		<string>wxWindow:findWindowByName</string>
		<string>wxWindow:findWindowByName(&lt;#Name#&gt;)</string>
		<string>wxWindow:findWindowByName(Name) -&gt; wxWindow()</string>
		<string>wxWindow:findWindowByName</string>
		<string>wxWindow:findWindowByName(&lt;#Name#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:findWindowByName(Name, Option::[Option]) -&gt; wxWindow()</string>
		<string>wxWindow:findWindowByLabel</string>
		<string>wxWindow:findWindowByLabel(&lt;#Label#&gt;)</string>
		<string>wxWindow:findWindowByLabel(Label) -&gt; wxWindow()</string>
		<string>wxWindow:findWindowByLabel</string>
		<string>wxWindow:findWindowByLabel(&lt;#Label#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:findWindowByLabel(Label, Option::[Option]) -&gt; wxWindow()</string>
		<string>wxWindow:fit</string>
		<string>wxWindow:fit(&lt;#This#&gt;)</string>
		<string>wxWindow:fit(This) -&gt; ok</string>
		<string>wxWindow:fitInside</string>
		<string>wxWindow:fitInside(&lt;#This#&gt;)</string>
		<string>wxWindow:fitInside(This) -&gt; ok</string>
		<string>wxWindow:freeze</string>
		<string>wxWindow:freeze(&lt;#This#&gt;)</string>
		<string>wxWindow:freeze(This) -&gt; ok</string>
		<string>wxWindow:getAcceleratorTable</string>
		<string>wxWindow:getAcceleratorTable(&lt;#This#&gt;)</string>
		<string>wxWindow:getAcceleratorTable(This) -&gt; wxAcceleratorTable() (see module wxAcceleratorTable)</string>
		<string>wxWindow:getBackgroundColour</string>
		<string>wxWindow:getBackgroundColour(&lt;#This#&gt;)</string>
		<string>wxWindow:getBackgroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxWindow:getBackgroundStyle</string>
		<string>wxWindow:getBackgroundStyle(&lt;#This#&gt;)</string>
		<string>wxWindow:getBackgroundStyle(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxWindow:getBestSize</string>
		<string>wxWindow:getBestSize(&lt;#This#&gt;)</string>
		<string>wxWindow:getBestSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxWindow:getCaret</string>
		<string>wxWindow:getCaret(&lt;#This#&gt;)</string>
		<string>wxWindow:getCaret(This) -&gt; wxCaret() (see module wxCaret)</string>
		<string>wxWindow:getCapture</string>
		<string>wxWindow:getCapture()</string>
		<string>wxWindow:getCapture() -&gt; wxWindow()</string>
		<string>wxWindow:getCharHeight</string>
		<string>wxWindow:getCharHeight(&lt;#This#&gt;)</string>
		<string>wxWindow:getCharHeight(This) -&gt; integer()</string>
		<string>wxWindow:getCharWidth</string>
		<string>wxWindow:getCharWidth(&lt;#This#&gt;)</string>
		<string>wxWindow:getCharWidth(This) -&gt; integer()</string>
		<string>wxWindow:getChildren</string>
		<string>wxWindow:getChildren(&lt;#This#&gt;)</string>
		<string>wxWindow:getChildren(This) -&gt; [wxWindow()]</string>
		<string>wxWindow:getClientSize</string>
		<string>wxWindow:getClientSize(&lt;#This#&gt;)</string>
		<string>wxWindow:getClientSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxWindow:getContainingSizer</string>
		<string>wxWindow:getContainingSizer(&lt;#This#&gt;)</string>
		<string>wxWindow:getContainingSizer(This) -&gt; wxSizer() (see module wxSizer)</string>
		<string>wxWindow:getCursor</string>
		<string>wxWindow:getCursor(&lt;#This#&gt;)</string>
		<string>wxWindow:getCursor(This) -&gt; wxCursor() (see module wxCursor)</string>
		<string>wxWindow:getDropTarget</string>
		<string>wxWindow:getDropTarget(&lt;#This#&gt;)</string>
		<string>wxWindow:getDropTarget(This) -&gt; wx_object() (see module wx)</string>
		<string>wxWindow:getEventHandler</string>
		<string>wxWindow:getEventHandler(&lt;#This#&gt;)</string>
		<string>wxWindow:getEventHandler(This) -&gt; wxEvtHandler() (see module wxEvtHandler)</string>
		<string>wxWindow:getExtraStyle</string>
		<string>wxWindow:getExtraStyle(&lt;#This#&gt;)</string>
		<string>wxWindow:getExtraStyle(This) -&gt; integer()</string>
		<string>wxWindow:getFont</string>
		<string>wxWindow:getFont(&lt;#This#&gt;)</string>
		<string>wxWindow:getFont(This) -&gt; wxFont() (see module wxFont)</string>
		<string>wxWindow:getForegroundColour</string>
		<string>wxWindow:getForegroundColour(&lt;#This#&gt;)</string>
		<string>wxWindow:getForegroundColour(This) -&gt; wx_colour4() (see module wx)</string>
		<string>wxWindow:getGrandParent</string>
		<string>wxWindow:getGrandParent(&lt;#This#&gt;)</string>
		<string>wxWindow:getGrandParent(This) -&gt; wxWindow()</string>
		<string>wxWindow:getHandle</string>
		<string>wxWindow:getHandle(&lt;#This#&gt;)</string>
		<string>wxWindow:getHandle(This) -&gt; integer()</string>
		<string>wxWindow:getHelpText</string>
		<string>wxWindow:getHelpText(&lt;#This#&gt;)</string>
		<string>wxWindow:getHelpText(This) -&gt; charlist() (see module unicode)</string>
		<string>wxWindow:getId</string>
		<string>wxWindow:getId(&lt;#This#&gt;)</string>
		<string>wxWindow:getId(This) -&gt; integer()</string>
		<string>wxWindow:getLabel</string>
		<string>wxWindow:getLabel(&lt;#This#&gt;)</string>
		<string>wxWindow:getLabel(This) -&gt; charlist() (see module unicode)</string>
		<string>wxWindow:getMaxSize</string>
		<string>wxWindow:getMaxSize(&lt;#This#&gt;)</string>
		<string>wxWindow:getMaxSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxWindow:getMinSize</string>
		<string>wxWindow:getMinSize(&lt;#This#&gt;)</string>
		<string>wxWindow:getMinSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxWindow:getName</string>
		<string>wxWindow:getName(&lt;#This#&gt;)</string>
		<string>wxWindow:getName(This) -&gt; charlist() (see module unicode)</string>
		<string>wxWindow:getParent</string>
		<string>wxWindow:getParent(&lt;#This#&gt;)</string>
		<string>wxWindow:getParent(This) -&gt; wxWindow()</string>
		<string>wxWindow:getPosition</string>
		<string>wxWindow:getPosition(&lt;#This#&gt;)</string>
		<string>wxWindow:getPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxWindow:getRect</string>
		<string>wxWindow:getRect(&lt;#This#&gt;)</string>
		<string>wxWindow:getRect(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxWindow:getScreenPosition</string>
		<string>wxWindow:getScreenPosition(&lt;#This#&gt;)</string>
		<string>wxWindow:getScreenPosition(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxWindow:getScreenRect</string>
		<string>wxWindow:getScreenRect(&lt;#This#&gt;)</string>
		<string>wxWindow:getScreenRect(This) -&gt; {X::integer(), Y::integer(), W::integer(), H::integer()}</string>
		<string>wxWindow:getScrollPos</string>
		<string>wxWindow:getScrollPos(&lt;#This#&gt;, &lt;#Orient#&gt;)</string>
		<string>wxWindow:getScrollPos(This, Orient) -&gt; integer()</string>
		<string>wxWindow:getScrollRange</string>
		<string>wxWindow:getScrollRange(&lt;#This#&gt;, &lt;#Orient#&gt;)</string>
		<string>wxWindow:getScrollRange(This, Orient) -&gt; integer()</string>
		<string>wxWindow:getScrollThumb</string>
		<string>wxWindow:getScrollThumb(&lt;#This#&gt;, &lt;#Orient#&gt;)</string>
		<string>wxWindow:getScrollThumb(This, Orient) -&gt; integer()</string>
		<string>wxWindow:getSize</string>
		<string>wxWindow:getSize(&lt;#This#&gt;)</string>
		<string>wxWindow:getSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxWindow:getSizer</string>
		<string>wxWindow:getSizer(&lt;#This#&gt;)</string>
		<string>wxWindow:getSizer(This) -&gt; wxSizer() (see module wxSizer)</string>
		<string>wxWindow:getTextExtent</string>
		<string>wxWindow:getTextExtent(&lt;#This#&gt;, &lt;#String#&gt;)</string>
		<string>wxWindow:getTextExtent(This, String) -&gt; Result</string>
		<string>wxWindow:getTextExtent</string>
		<string>wxWindow:getTextExtent(&lt;#This#&gt;, &lt;#String#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:getTextExtent(This, String, Option::[Option]) -&gt; Result</string>
		<string>wxWindow:getToolTip</string>
		<string>wxWindow:getToolTip(&lt;#This#&gt;)</string>
		<string>wxWindow:getToolTip(This) -&gt; wxToolTip() (see module wxToolTip)</string>
		<string>wxWindow:getUpdateRegion</string>
		<string>wxWindow:getUpdateRegion(&lt;#This#&gt;)</string>
		<string>wxWindow:getUpdateRegion(This) -&gt; wxRegion() (see module wxRegion)</string>
		<string>wxWindow:getVirtualSize</string>
		<string>wxWindow:getVirtualSize(&lt;#This#&gt;)</string>
		<string>wxWindow:getVirtualSize(This) -&gt; {W::integer(), H::integer()}</string>
		<string>wxWindow:getWindowStyleFlag</string>
		<string>wxWindow:getWindowStyleFlag(&lt;#This#&gt;)</string>
		<string>wxWindow:getWindowStyleFlag(This) -&gt; integer()</string>
		<string>wxWindow:getWindowVariant</string>
		<string>wxWindow:getWindowVariant(&lt;#This#&gt;)</string>
		<string>wxWindow:getWindowVariant(This) -&gt; wx_enum() (see module wx)</string>
		<string>wxWindow:hasCapture</string>
		<string>wxWindow:hasCapture(&lt;#This#&gt;)</string>
		<string>wxWindow:hasCapture(This) -&gt; boolean()</string>
		<string>wxWindow:hasScrollbar</string>
		<string>wxWindow:hasScrollbar(&lt;#This#&gt;, &lt;#Orient#&gt;)</string>
		<string>wxWindow:hasScrollbar(This, Orient) -&gt; boolean()</string>
		<string>wxWindow:hasTransparentBackground</string>
		<string>wxWindow:hasTransparentBackground(&lt;#This#&gt;)</string>
		<string>wxWindow:hasTransparentBackground(This) -&gt; boolean()</string>
		<string>wxWindow:hide</string>
		<string>wxWindow:hide(&lt;#This#&gt;)</string>
		<string>wxWindow:hide(This) -&gt; boolean()</string>
		<string>wxWindow:inheritAttributes</string>
		<string>wxWindow:inheritAttributes(&lt;#This#&gt;)</string>
		<string>wxWindow:inheritAttributes(This) -&gt; ok</string>
		<string>wxWindow:initDialog</string>
		<string>wxWindow:initDialog(&lt;#This#&gt;)</string>
		<string>wxWindow:initDialog(This) -&gt; ok</string>
		<string>wxWindow:invalidateBestSize</string>
		<string>wxWindow:invalidateBestSize(&lt;#This#&gt;)</string>
		<string>wxWindow:invalidateBestSize(This) -&gt; ok</string>
		<string>wxWindow:isEnabled</string>
		<string>wxWindow:isEnabled(&lt;#This#&gt;)</string>
		<string>wxWindow:isEnabled(This) -&gt; boolean()</string>
		<string>wxWindow:isExposed</string>
		<string>wxWindow:isExposed(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxWindow:isExposed(This, Pt) -&gt; boolean()</string>
		<string>wxWindow:isExposed</string>
		<string>wxWindow:isExposed(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxWindow:isExposed(This, X, Y) -&gt; boolean()</string>
		<string>wxWindow:isExposed</string>
		<string>wxWindow:isExposed(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#W#&gt;, &lt;#H#&gt;)</string>
		<string>wxWindow:isExposed(This, X, Y, W, H) -&gt; boolean()</string>
		<string>wxWindow:isRetained</string>
		<string>wxWindow:isRetained(&lt;#This#&gt;)</string>
		<string>wxWindow:isRetained(This) -&gt; boolean()</string>
		<string>wxWindow:isShown</string>
		<string>wxWindow:isShown(&lt;#This#&gt;)</string>
		<string>wxWindow:isShown(This) -&gt; boolean()</string>
		<string>wxWindow:isTopLevel</string>
		<string>wxWindow:isTopLevel(&lt;#This#&gt;)</string>
		<string>wxWindow:isTopLevel(This) -&gt; boolean()</string>
		<string>wxWindow:layout</string>
		<string>wxWindow:layout(&lt;#This#&gt;)</string>
		<string>wxWindow:layout(This) -&gt; boolean()</string>
		<string>wxWindow:lineDown</string>
		<string>wxWindow:lineDown(&lt;#This#&gt;)</string>
		<string>wxWindow:lineDown(This) -&gt; boolean()</string>
		<string>wxWindow:lineUp</string>
		<string>wxWindow:lineUp(&lt;#This#&gt;)</string>
		<string>wxWindow:lineUp(This) -&gt; boolean()</string>
		<string>wxWindow:lower</string>
		<string>wxWindow:lower(&lt;#This#&gt;)</string>
		<string>wxWindow:lower(This) -&gt; ok</string>
		<string>wxWindow:makeModal</string>
		<string>wxWindow:makeModal(&lt;#This#&gt;)</string>
		<string>wxWindow:makeModal(This) -&gt; ok</string>
		<string>wxWindow:makeModal</string>
		<string>wxWindow:makeModal(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:makeModal(This, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:move</string>
		<string>wxWindow:move(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxWindow:move(This, Pt) -&gt; ok</string>
		<string>wxWindow:move</string>
		<string>wxWindow:move(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxWindow:move(This, X, Y) -&gt; ok</string>
		<string>wxWindow:move</string>
		<string>wxWindow:move(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:move(This, X, Y, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:moveAfterInTabOrder</string>
		<string>wxWindow:moveAfterInTabOrder(&lt;#This#&gt;, &lt;#Win#&gt;)</string>
		<string>wxWindow:moveAfterInTabOrder(This, Win) -&gt; ok</string>
		<string>wxWindow:moveBeforeInTabOrder</string>
		<string>wxWindow:moveBeforeInTabOrder(&lt;#This#&gt;, &lt;#Win#&gt;)</string>
		<string>wxWindow:moveBeforeInTabOrder(This, Win) -&gt; ok</string>
		<string>wxWindow:navigate</string>
		<string>wxWindow:navigate(&lt;#This#&gt;)</string>
		<string>wxWindow:navigate(This) -&gt; boolean()</string>
		<string>wxWindow:navigate</string>
		<string>wxWindow:navigate(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:navigate(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxWindow:pageDown</string>
		<string>wxWindow:pageDown(&lt;#This#&gt;)</string>
		<string>wxWindow:pageDown(This) -&gt; boolean()</string>
		<string>wxWindow:pageUp</string>
		<string>wxWindow:pageUp(&lt;#This#&gt;)</string>
		<string>wxWindow:pageUp(This) -&gt; boolean()</string>
		<string>wxWindow:popEventHandler</string>
		<string>wxWindow:popEventHandler(&lt;#This#&gt;)</string>
		<string>wxWindow:popEventHandler(This) -&gt; wxEvtHandler() (see module wxEvtHandler)</string>
		<string>wxWindow:popEventHandler</string>
		<string>wxWindow:popEventHandler(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:popEventHandler(This, Option::[Option]) -&gt; wxEvtHandler() (see module wxEvtHandler)</string>
		<string>wxWindow:popupMenu</string>
		<string>wxWindow:popupMenu(&lt;#This#&gt;, &lt;#Menu#&gt;)</string>
		<string>wxWindow:popupMenu(This, Menu) -&gt; boolean()</string>
		<string>wxWindow:popupMenu</string>
		<string>wxWindow:popupMenu(&lt;#This#&gt;, &lt;#Menu#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:popupMenu(This, Menu, Option::[Option]) -&gt; boolean()</string>
		<string>wxWindow:popupMenu</string>
		<string>wxWindow:popupMenu(&lt;#This#&gt;, &lt;#Menu#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxWindow:popupMenu(This, Menu, X, Y) -&gt; boolean()</string>
		<string>wxWindow:raise</string>
		<string>wxWindow:raise(&lt;#This#&gt;)</string>
		<string>wxWindow:raise(This) -&gt; ok</string>
		<string>wxWindow:refresh</string>
		<string>wxWindow:refresh(&lt;#This#&gt;)</string>
		<string>wxWindow:refresh(This) -&gt; ok</string>
		<string>wxWindow:refresh</string>
		<string>wxWindow:refresh(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:refresh(This, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:refreshRect</string>
		<string>wxWindow:refreshRect(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxWindow:refreshRect(This, Rect) -&gt; ok</string>
		<string>wxWindow:refreshRect</string>
		<string>wxWindow:refreshRect(&lt;#This#&gt;, &lt;#Rect#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:refreshRect(This, Rect, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:releaseMouse</string>
		<string>wxWindow:releaseMouse(&lt;#This#&gt;)</string>
		<string>wxWindow:releaseMouse(This) -&gt; ok</string>
		<string>wxWindow:removeChild</string>
		<string>wxWindow:removeChild(&lt;#This#&gt;, &lt;#Child#&gt;)</string>
		<string>wxWindow:removeChild(This, Child) -&gt; ok</string>
		<string>wxWindow:reparent</string>
		<string>wxWindow:reparent(&lt;#This#&gt;, &lt;#NewParent#&gt;)</string>
		<string>wxWindow:reparent(This, NewParent) -&gt; boolean()</string>
		<string>wxWindow:screenToClient</string>
		<string>wxWindow:screenToClient(&lt;#This#&gt;)</string>
		<string>wxWindow:screenToClient(This) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxWindow:screenToClient</string>
		<string>wxWindow:screenToClient(&lt;#This#&gt;, &lt;#Pt#&gt;)</string>
		<string>wxWindow:screenToClient(This, Pt) -&gt; {X::integer(), Y::integer()}</string>
		<string>wxWindow:scrollLines</string>
		<string>wxWindow:scrollLines(&lt;#This#&gt;, &lt;#Lines#&gt;)</string>
		<string>wxWindow:scrollLines(This, Lines) -&gt; boolean()</string>
		<string>wxWindow:scrollPages</string>
		<string>wxWindow:scrollPages(&lt;#This#&gt;, &lt;#Pages#&gt;)</string>
		<string>wxWindow:scrollPages(This, Pages) -&gt; boolean()</string>
		<string>wxWindow:scrollWindow</string>
		<string>wxWindow:scrollWindow(&lt;#This#&gt;, &lt;#Dx#&gt;, &lt;#Dy#&gt;)</string>
		<string>wxWindow:scrollWindow(This, Dx, Dy) -&gt; ok</string>
		<string>wxWindow:scrollWindow</string>
		<string>wxWindow:scrollWindow(&lt;#This#&gt;, &lt;#Dx#&gt;, &lt;#Dy#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:scrollWindow(This, Dx, Dy, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:setAcceleratorTable</string>
		<string>wxWindow:setAcceleratorTable(&lt;#This#&gt;, &lt;#Accel#&gt;)</string>
		<string>wxWindow:setAcceleratorTable(This, Accel) -&gt; ok</string>
		<string>wxWindow:setAutoLayout</string>
		<string>wxWindow:setAutoLayout(&lt;#This#&gt;, &lt;#AutoLayout#&gt;)</string>
		<string>wxWindow:setAutoLayout(This, AutoLayout) -&gt; ok</string>
		<string>wxWindow:setBackgroundColour</string>
		<string>wxWindow:setBackgroundColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxWindow:setBackgroundColour(This, Colour) -&gt; boolean()</string>
		<string>wxWindow:setBackgroundStyle</string>
		<string>wxWindow:setBackgroundStyle(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxWindow:setBackgroundStyle(This, Style) -&gt; boolean()</string>
		<string>wxWindow:setCaret</string>
		<string>wxWindow:setCaret(&lt;#This#&gt;, &lt;#Caret#&gt;)</string>
		<string>wxWindow:setCaret(This, Caret) -&gt; ok</string>
		<string>wxWindow:setClientSize</string>
		<string>wxWindow:setClientSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxWindow:setClientSize(This, Size) -&gt; ok</string>
		<string>wxWindow:setClientSize</string>
		<string>wxWindow:setClientSize(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxWindow:setClientSize(This, Width, Height) -&gt; ok</string>
		<string>wxWindow:setContainingSizer</string>
		<string>wxWindow:setContainingSizer(&lt;#This#&gt;, &lt;#Sizer#&gt;)</string>
		<string>wxWindow:setContainingSizer(This, Sizer) -&gt; ok</string>
		<string>wxWindow:setCursor</string>
		<string>wxWindow:setCursor(&lt;#This#&gt;, &lt;#Cursor#&gt;)</string>
		<string>wxWindow:setCursor(This, Cursor) -&gt; boolean()</string>
		<string>wxWindow:setMaxSize</string>
		<string>wxWindow:setMaxSize(&lt;#This#&gt;, &lt;#MaxSize#&gt;)</string>
		<string>wxWindow:setMaxSize(This, MaxSize) -&gt; ok</string>
		<string>wxWindow:setMinSize</string>
		<string>wxWindow:setMinSize(&lt;#This#&gt;, &lt;#MinSize#&gt;)</string>
		<string>wxWindow:setMinSize(This, MinSize) -&gt; ok</string>
		<string>wxWindow:setOwnBackgroundColour</string>
		<string>wxWindow:setOwnBackgroundColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxWindow:setOwnBackgroundColour(This, Colour) -&gt; ok</string>
		<string>wxWindow:setOwnFont</string>
		<string>wxWindow:setOwnFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxWindow:setOwnFont(This, Font) -&gt; ok</string>
		<string>wxWindow:setOwnForegroundColour</string>
		<string>wxWindow:setOwnForegroundColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxWindow:setOwnForegroundColour(This, Colour) -&gt; ok</string>
		<string>wxWindow:setDropTarget</string>
		<string>wxWindow:setDropTarget(&lt;#This#&gt;, &lt;#DropTarget#&gt;)</string>
		<string>wxWindow:setDropTarget(This, DropTarget) -&gt; ok</string>
		<string>wxWindow:setExtraStyle</string>
		<string>wxWindow:setExtraStyle(&lt;#This#&gt;, &lt;#ExStyle#&gt;)</string>
		<string>wxWindow:setExtraStyle(This, ExStyle) -&gt; ok</string>
		<string>wxWindow:setFocus</string>
		<string>wxWindow:setFocus(&lt;#This#&gt;)</string>
		<string>wxWindow:setFocus(This) -&gt; ok</string>
		<string>wxWindow:setFocusFromKbd</string>
		<string>wxWindow:setFocusFromKbd(&lt;#This#&gt;)</string>
		<string>wxWindow:setFocusFromKbd(This) -&gt; ok</string>
		<string>wxWindow:setFont</string>
		<string>wxWindow:setFont(&lt;#This#&gt;, &lt;#Font#&gt;)</string>
		<string>wxWindow:setFont(This, Font) -&gt; boolean()</string>
		<string>wxWindow:setForegroundColour</string>
		<string>wxWindow:setForegroundColour(&lt;#This#&gt;, &lt;#Colour#&gt;)</string>
		<string>wxWindow:setForegroundColour(This, Colour) -&gt; boolean()</string>
		<string>wxWindow:setHelpText</string>
		<string>wxWindow:setHelpText(&lt;#This#&gt;, &lt;#Text#&gt;)</string>
		<string>wxWindow:setHelpText(This, Text) -&gt; ok</string>
		<string>wxWindow:setId</string>
		<string>wxWindow:setId(&lt;#This#&gt;, &lt;#Winid#&gt;)</string>
		<string>wxWindow:setId(This, Winid) -&gt; ok</string>
		<string>wxWindow:setLabel</string>
		<string>wxWindow:setLabel(&lt;#This#&gt;, &lt;#Label#&gt;)</string>
		<string>wxWindow:setLabel(This, Label) -&gt; ok</string>
		<string>wxWindow:setName</string>
		<string>wxWindow:setName(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxWindow:setName(This, Name) -&gt; ok</string>
		<string>wxWindow:setPalette</string>
		<string>wxWindow:setPalette(&lt;#This#&gt;, &lt;#Pal#&gt;)</string>
		<string>wxWindow:setPalette(This, Pal) -&gt; ok</string>
		<string>wxWindow:setScrollbar</string>
		<string>wxWindow:setScrollbar(&lt;#This#&gt;, &lt;#Orient#&gt;, &lt;#Pos#&gt;, &lt;#ThumbVisible#&gt;, &lt;#Range#&gt;)</string>
		<string>wxWindow:setScrollbar(This, Orient, Pos, ThumbVisible, Range) -&gt; ok</string>
		<string>wxWindow:setScrollbar</string>
		<string>wxWindow:setScrollbar(&lt;#This#&gt;, &lt;#Orient#&gt;, &lt;#Pos#&gt;, &lt;#ThumbVisible#&gt;, &lt;#Range#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:setScrollbar(This, Orient, Pos, ThumbVisible, Range, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:setScrollPos</string>
		<string>wxWindow:setScrollPos(&lt;#This#&gt;, &lt;#Orient#&gt;, &lt;#Pos#&gt;)</string>
		<string>wxWindow:setScrollPos(This, Orient, Pos) -&gt; ok</string>
		<string>wxWindow:setScrollPos</string>
		<string>wxWindow:setScrollPos(&lt;#This#&gt;, &lt;#Orient#&gt;, &lt;#Pos#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:setScrollPos(This, Orient, Pos, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:setSize</string>
		<string>wxWindow:setSize(&lt;#This#&gt;, &lt;#Rect#&gt;)</string>
		<string>wxWindow:setSize(This, Rect) -&gt; ok</string>
		<string>wxWindow:setSize</string>
		<string>wxWindow:setSize(&lt;#This#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxWindow:setSize(This, Width, Height) -&gt; ok</string>
		<string>wxWindow:setSize</string>
		<string>wxWindow:setSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;)</string>
		<string>wxWindow:setSize(This, X, Y, Width, Height) -&gt; ok</string>
		<string>wxWindow:setSize</string>
		<string>wxWindow:setSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;, &lt;#Width#&gt;, &lt;#Height#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:setSize(This, X, Y, Width, Height, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:setSizeHints</string>
		<string>wxWindow:setSizeHints(&lt;#This#&gt;, &lt;#MinSize#&gt;)</string>
		<string>wxWindow:setSizeHints(This, MinSize) -&gt; ok</string>
		<string>wxWindow:setSizeHints</string>
		<string>wxWindow:setSizeHints(&lt;#This#&gt;, &lt;#MinW#&gt;, &lt;#MinH#&gt;)</string>
		<string>wxWindow:setSizeHints(This, MinW, MinH) -&gt; ok</string>
		<string>wxWindow:setSizeHints</string>
		<string>wxWindow:setSizeHints(&lt;#This#&gt;, &lt;#MinW#&gt;, &lt;#MinH#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:setSizeHints(This, MinW, MinH, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:setSizer</string>
		<string>wxWindow:setSizer(&lt;#This#&gt;, &lt;#Sizer#&gt;)</string>
		<string>wxWindow:setSizer(This, Sizer) -&gt; ok</string>
		<string>wxWindow:setSizer</string>
		<string>wxWindow:setSizer(&lt;#This#&gt;, &lt;#Sizer#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:setSizer(This, Sizer, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:setSizerAndFit</string>
		<string>wxWindow:setSizerAndFit(&lt;#This#&gt;, &lt;#Sizer#&gt;)</string>
		<string>wxWindow:setSizerAndFit(This, Sizer) -&gt; ok</string>
		<string>wxWindow:setSizerAndFit</string>
		<string>wxWindow:setSizerAndFit(&lt;#This#&gt;, &lt;#Sizer#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:setSizerAndFit(This, Sizer, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:setThemeEnabled</string>
		<string>wxWindow:setThemeEnabled(&lt;#This#&gt;, &lt;#EnableTheme#&gt;)</string>
		<string>wxWindow:setThemeEnabled(This, EnableTheme) -&gt; ok</string>
		<string>wxWindow:setToolTip</string>
		<string>wxWindow:setToolTip(&lt;#This#&gt;, &lt;#Tip#&gt;)</string>
		<string>wxWindow:setToolTip(This, Tip) -&gt; ok</string>
		<string>wxWindow:setVirtualSize</string>
		<string>wxWindow:setVirtualSize(&lt;#This#&gt;, &lt;#Size#&gt;)</string>
		<string>wxWindow:setVirtualSize(This, Size) -&gt; ok</string>
		<string>wxWindow:setVirtualSize</string>
		<string>wxWindow:setVirtualSize(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxWindow:setVirtualSize(This, X, Y) -&gt; ok</string>
		<string>wxWindow:setVirtualSizeHints</string>
		<string>wxWindow:setVirtualSizeHints(&lt;#This#&gt;, &lt;#MinSize#&gt;)</string>
		<string>wxWindow:setVirtualSizeHints(This, MinSize) -&gt; ok</string>
		<string>wxWindow:setVirtualSizeHints</string>
		<string>wxWindow:setVirtualSizeHints(&lt;#This#&gt;, &lt;#MinW#&gt;, &lt;#MinH#&gt;)</string>
		<string>wxWindow:setVirtualSizeHints(This, MinW, MinH) -&gt; ok</string>
		<string>wxWindow:setVirtualSizeHints</string>
		<string>wxWindow:setVirtualSizeHints(&lt;#This#&gt;, &lt;#MinW#&gt;, &lt;#MinH#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:setVirtualSizeHints(This, MinW, MinH, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:setWindowStyle</string>
		<string>wxWindow:setWindowStyle(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxWindow:setWindowStyle(This, Style) -&gt; ok</string>
		<string>wxWindow:setWindowStyleFlag</string>
		<string>wxWindow:setWindowStyleFlag(&lt;#This#&gt;, &lt;#Style#&gt;)</string>
		<string>wxWindow:setWindowStyleFlag(This, Style) -&gt; ok</string>
		<string>wxWindow:setWindowVariant</string>
		<string>wxWindow:setWindowVariant(&lt;#This#&gt;, &lt;#Variant#&gt;)</string>
		<string>wxWindow:setWindowVariant(This, Variant) -&gt; ok</string>
		<string>wxWindow:shouldInheritColours</string>
		<string>wxWindow:shouldInheritColours(&lt;#This#&gt;)</string>
		<string>wxWindow:shouldInheritColours(This) -&gt; boolean()</string>
		<string>wxWindow:show</string>
		<string>wxWindow:show(&lt;#This#&gt;)</string>
		<string>wxWindow:show(This) -&gt; boolean()</string>
		<string>wxWindow:show</string>
		<string>wxWindow:show(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:show(This, Option::[Option]) -&gt; boolean()</string>
		<string>wxWindow:thaw</string>
		<string>wxWindow:thaw(&lt;#This#&gt;)</string>
		<string>wxWindow:thaw(This) -&gt; ok</string>
		<string>wxWindow:transferDataFromWindow</string>
		<string>wxWindow:transferDataFromWindow(&lt;#This#&gt;)</string>
		<string>wxWindow:transferDataFromWindow(This) -&gt; boolean()</string>
		<string>wxWindow:transferDataToWindow</string>
		<string>wxWindow:transferDataToWindow(&lt;#This#&gt;)</string>
		<string>wxWindow:transferDataToWindow(This) -&gt; boolean()</string>
		<string>wxWindow:update</string>
		<string>wxWindow:update(&lt;#This#&gt;)</string>
		<string>wxWindow:update(This) -&gt; ok</string>
		<string>wxWindow:updateWindowUI</string>
		<string>wxWindow:updateWindowUI(&lt;#This#&gt;)</string>
		<string>wxWindow:updateWindowUI(This) -&gt; ok</string>
		<string>wxWindow:updateWindowUI</string>
		<string>wxWindow:updateWindowUI(&lt;#This#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxWindow:updateWindowUI(This, Option::[Option]) -&gt; ok</string>
		<string>wxWindow:validate</string>
		<string>wxWindow:validate(&lt;#This#&gt;)</string>
		<string>wxWindow:validate(This) -&gt; boolean()</string>
		<string>wxWindow:warpPointer</string>
		<string>wxWindow:warpPointer(&lt;#This#&gt;, &lt;#X#&gt;, &lt;#Y#&gt;)</string>
		<string>wxWindow:warpPointer(This, X, Y) -&gt; ok</string>
		<string>wxWindow:destroy</string>
		<string>wxWindow:destroy(&lt;#This::wxWindow()#&gt;)</string>
		<string>wxWindow:destroy(This::wxWindow()) -&gt; ok</string>
		<string>wxWindowDC:new</string>
		<string>wxWindowDC:new()</string>
		<string>wxWindowDC:new() -&gt; wxWindowDC()</string>
		<string>wxWindowDC:new</string>
		<string>wxWindowDC:new(&lt;#Win#&gt;)</string>
		<string>wxWindowDC:new(Win) -&gt; wxWindowDC()</string>
		<string>wxWindowDC:destroy</string>
		<string>wxWindowDC:destroy(&lt;#This::wxWindowDC()#&gt;)</string>
		<string>wxWindowDC:destroy(This::wxWindowDC()) -&gt; ok</string>
		<string>wxXmlResource:new</string>
		<string>wxXmlResource:new()</string>
		<string>wxXmlResource:new() -&gt; wxXmlResource()</string>
		<string>wxXmlResource:new</string>
		<string>wxXmlResource:new(&lt;#Option::[Option]#&gt;)</string>
		<string>wxXmlResource:new(Option::[Option]) -&gt; wxXmlResource()</string>
		<string>wxXmlResource:new</string>
		<string>wxXmlResource:new(&lt;#Filemask#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxXmlResource:new(Filemask, Option::[Option]) -&gt; wxXmlResource()</string>
		<string>wxXmlResource:attachUnknownControl</string>
		<string>wxXmlResource:attachUnknownControl(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Control#&gt;)</string>
		<string>wxXmlResource:attachUnknownControl(This, Name, Control) -&gt; boolean()</string>
		<string>wxXmlResource:attachUnknownControl</string>
		<string>wxXmlResource:attachUnknownControl(&lt;#This#&gt;, &lt;#Name#&gt;, &lt;#Control#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxXmlResource:attachUnknownControl(This, Name, Control, Option::[Option]) -&gt; boolean()</string>
		<string>wxXmlResource:clearHandlers</string>
		<string>wxXmlResource:clearHandlers(&lt;#This#&gt;)</string>
		<string>wxXmlResource:clearHandlers(This) -&gt; ok</string>
		<string>wxXmlResource:compareVersion</string>
		<string>wxXmlResource:compareVersion(&lt;#This#&gt;, &lt;#Major#&gt;, &lt;#Minor#&gt;, &lt;#Release#&gt;, &lt;#Revision#&gt;)</string>
		<string>wxXmlResource:compareVersion(This, Major, Minor, Release, Revision) -&gt; integer()</string>
		<string>wxXmlResource:get</string>
		<string>wxXmlResource:get()</string>
		<string>wxXmlResource:get() -&gt; wxXmlResource()</string>
		<string>wxXmlResource:getFlags</string>
		<string>wxXmlResource:getFlags(&lt;#This#&gt;)</string>
		<string>wxXmlResource:getFlags(This) -&gt; integer()</string>
		<string>wxXmlResource:getVersion</string>
		<string>wxXmlResource:getVersion(&lt;#This#&gt;)</string>
		<string>wxXmlResource:getVersion(This) -&gt; integer()</string>
		<string>wxXmlResource:getXRCID</string>
		<string>wxXmlResource:getXRCID(&lt;#Str_id#&gt;)</string>
		<string>wxXmlResource:getXRCID(Str_id) -&gt; integer()</string>
		<string>wxXmlResource:getXRCID</string>
		<string>wxXmlResource:getXRCID(&lt;#Str_id#&gt;, &lt;#Option::[Option]#&gt;)</string>
		<string>wxXmlResource:getXRCID(Str_id, Option::[Option]) -&gt; integer()</string>
		<string>wxXmlResource:initAllHandlers</string>
		<string>wxXmlResource:initAllHandlers(&lt;#This#&gt;)</string>
		<string>wxXmlResource:initAllHandlers(This) -&gt; ok</string>
		<string>wxXmlResource:load</string>
		<string>wxXmlResource:load(&lt;#This#&gt;, &lt;#Filemask#&gt;)</string>
		<string>wxXmlResource:load(This, Filemask) -&gt; boolean()</string>
		<string>wxXmlResource:loadBitmap</string>
		<string>wxXmlResource:loadBitmap(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadBitmap(This, Name) -&gt; wxBitmap() (see module wxBitmap)</string>
		<string>wxXmlResource:loadDialog</string>
		<string>wxXmlResource:loadDialog(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadDialog(This, Parent, Name) -&gt; wxDialog() (see module wxDialog)</string>
		<string>wxXmlResource:loadDialog</string>
		<string>wxXmlResource:loadDialog(&lt;#This#&gt;, &lt;#Dlg#&gt;, &lt;#Parent#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadDialog(This, Dlg, Parent, Name) -&gt; boolean()</string>
		<string>wxXmlResource:loadFrame</string>
		<string>wxXmlResource:loadFrame(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadFrame(This, Parent, Name) -&gt; wxFrame() (see module wxFrame)</string>
		<string>wxXmlResource:loadFrame</string>
		<string>wxXmlResource:loadFrame(&lt;#This#&gt;, &lt;#Frame#&gt;, &lt;#Parent#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadFrame(This, Frame, Parent, Name) -&gt; boolean()</string>
		<string>wxXmlResource:loadIcon</string>
		<string>wxXmlResource:loadIcon(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadIcon(This, Name) -&gt; wxIcon() (see module wxIcon)</string>
		<string>wxXmlResource:loadMenu</string>
		<string>wxXmlResource:loadMenu(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadMenu(This, Name) -&gt; wxMenu() (see module wxMenu)</string>
		<string>wxXmlResource:loadMenuBar</string>
		<string>wxXmlResource:loadMenuBar(&lt;#This#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadMenuBar(This, Name) -&gt; wxMenuBar() (see module wxMenuBar)</string>
		<string>wxXmlResource:loadMenuBar</string>
		<string>wxXmlResource:loadMenuBar(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadMenuBar(This, Parent, Name) -&gt; wxMenuBar() (see module wxMenuBar)</string>
		<string>wxXmlResource:loadPanel</string>
		<string>wxXmlResource:loadPanel(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadPanel(This, Parent, Name) -&gt; wxPanel() (see module wxPanel)</string>
		<string>wxXmlResource:loadPanel</string>
		<string>wxXmlResource:loadPanel(&lt;#This#&gt;, &lt;#Panel#&gt;, &lt;#Parent#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadPanel(This, Panel, Parent, Name) -&gt; boolean()</string>
		<string>wxXmlResource:loadToolBar</string>
		<string>wxXmlResource:loadToolBar(&lt;#This#&gt;, &lt;#Parent#&gt;, &lt;#Name#&gt;)</string>
		<string>wxXmlResource:loadToolBar(This, Parent, Name) -&gt; wxToolBar() (see module wxToolBar)</string>
		<string>wxXmlResource:set</string>
		<string>wxXmlResource:set(&lt;#Res#&gt;)</string>
		<string>wxXmlResource:set(Res) -&gt; wxXmlResource()</string>
		<string>wxXmlResource:setFlags</string>
		<string>wxXmlResource:setFlags(&lt;#This#&gt;, &lt;#Flags#&gt;)</string>
		<string>wxXmlResource:setFlags(This, Flags) -&gt; ok</string>
		<string>wxXmlResource:unload</string>
		<string>wxXmlResource:unload(&lt;#This#&gt;, &lt;#Filename#&gt;)</string>
		<string>wxXmlResource:unload(This, Filename) -&gt; boolean()</string>
		<string>wxXmlResource:xrcctrl</string>
		<string>wxXmlResource:xrcctrl(&lt;#Window::wxWindow() (see module wxWindow)#&gt;, &lt;#Name::string()#&gt;, &lt;#Type::atom()#&gt;)</string>
		<string>wxXmlResource:xrcctrl(Window::wxWindow() (see module wxWindow), Name::string(), Type::atom()) -&gt; wxObject() (see module wx)</string>
		<string>wxXmlResource:destroy</string>
		<string>wxXmlResource:destroy(&lt;#This::wxXmlResource()#&gt;)</string>
		<string>wxXmlResource:destroy(This::wxXmlResource()) -&gt; ok</string>
		<string>xmerl:callbacks</string>
		<string>xmerl:callbacks(&lt;#Module#&gt;)</string>
		<string>xmerl:callbacks(Module) -&gt; Result</string>
		<string>xmerl:export</string>
		<string>xmerl:export(&lt;#Content#&gt;, &lt;#Callback#&gt;)</string>
		<string>xmerl:export(Content, Callback) -&gt; ExportedFormat</string>
		<string>xmerl:export</string>
		<string>xmerl:export(&lt;#Content#&gt;, &lt;#Callback#&gt;, &lt;#RootAttributes#&gt;)</string>
		<string>xmerl:export(Content, Callback, RootAttributes) -&gt; ExportedFormat</string>
		<string>xmerl:export_content</string>
		<string>xmerl:export_content(&lt;#Es::Content#&gt;, &lt;#Callbacks#&gt;)</string>
		<string>xmerl:export_content(Es::Content, Callbacks) -&gt; term()</string>
		<string>xmerl:export_element</string>
		<string>xmerl:export_element(&lt;#E#&gt;, &lt;#CB#&gt;)</string>
		<string>xmerl:export_element(E, CB) -&gt; term()</string>
		<string>xmerl:export_element</string>
		<string>xmerl:export_element(&lt;#E#&gt;, &lt;#CallbackModule#&gt;, &lt;#CallbackState#&gt;)</string>
		<string>xmerl:export_element(E, CallbackModule, CallbackState) -&gt; ExportedFormat</string>
		<string>xmerl:export_simple</string>
		<string>xmerl:export_simple(&lt;#Content#&gt;, &lt;#Callback#&gt;)</string>
		<string>xmerl:export_simple(Content, Callback) -&gt; ExportedFormat</string>
		<string>xmerl:export_simple</string>
		<string>xmerl:export_simple(&lt;#Content#&gt;, &lt;#Callback#&gt;, &lt;#RootAttrs::RootAttributes#&gt;)</string>
		<string>xmerl:export_simple(Content, Callback, RootAttrs::RootAttributes) -&gt; ExportedFormat</string>
		<string>xmerl:export_simple_content</string>
		<string>xmerl:export_simple_content(&lt;#Content#&gt;, &lt;#Callback#&gt;)</string>
		<string>xmerl:export_simple_content(Content, Callback) -&gt; term()</string>
		<string>xmerl:export_simple_element</string>
		<string>xmerl:export_simple_element(&lt;#Content#&gt;, &lt;#Callback#&gt;)</string>
		<string>xmerl:export_simple_element(Content, Callback) -&gt; term()</string>
		<string>xmerl_eventp:file_sax</string>
		<string>xmerl_eventp:file_sax(&lt;#Fname::string()#&gt;, &lt;#CallBackModule::atom()#&gt;, &lt;#UserState#&gt;, &lt;#Options::option_list()#&gt;)</string>
		<string>xmerl_eventp:file_sax(Fname::string(), CallBackModule::atom(), UserState, Options::option_list()) -&gt; NewUserState</string>
		<string>xmerl_eventp:stream</string>
		<string>xmerl_eventp:stream(&lt;#Fname::string()#&gt;, &lt;#Options::option_list()#&gt;)</string>
		<string>xmerl_eventp:stream(Fname::string(), Options::option_list()) -&gt; xmlElement()</string>
		<string>xmerl_eventp:stream_sax</string>
		<string>xmerl_eventp:stream_sax(&lt;#Fname#&gt;, &lt;#CallBack::CallBackModule#&gt;, &lt;#UserState#&gt;, &lt;#Options#&gt;)</string>
		<string>xmerl_eventp:stream_sax(Fname, CallBack::CallBackModule, UserState, Options) -&gt; xmlElement()</string>
		<string>xmerl_eventp:string_sax</string>
		<string>xmerl_eventp:string_sax(&lt;#String::list()#&gt;, &lt;#CallBackModule::atom()#&gt;, &lt;#UserState#&gt;, &lt;#Options::option_list()#&gt;)</string>
		<string>xmerl_eventp:string_sax(String::list(), CallBackModule::atom(), UserState, Options::option_list()) -&gt; xmlElement()</string>
		<string>xmerl_sax_parser:file</string>
		<string>xmerl_sax_parser:file(&lt;#Filename#&gt;, &lt;#Options#&gt;)</string>
		<string>xmerl_sax_parser:file(Filename, Options) -&gt; Result</string>
		<string>xmerl_sax_parser:stream</string>
		<string>xmerl_sax_parser:stream(&lt;#Xml#&gt;, &lt;#Options#&gt;)</string>
		<string>xmerl_sax_parser:stream(Xml, Options) -&gt; Result</string>
		<string>xmerl_scan:accumulate_whitespace</string>
		<string>xmerl_scan:accumulate_whitespace(&lt;#T::string()#&gt;, &lt;#S::global_state()#&gt;, &lt;#X3::atom()#&gt;, &lt;#Acc::string()#&gt;)</string>
		<string>xmerl_scan:accumulate_whitespace(T::string(), S::global_state(), X3::atom(), Acc::string()) -&gt; {Acc, T1, S1}</string>
		<string>xmerl_scan:cont_state</string>
		<string>xmerl_scan:cont_state(&lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:cont_state(S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:cont_state</string>
		<string>xmerl_scan:cont_state(&lt;#X::ContinuationState#&gt;, &lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:cont_state(X::ContinuationState, S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:event_state</string>
		<string>xmerl_scan:event_state(&lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:event_state(S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:event_state</string>
		<string>xmerl_scan:event_state(&lt;#X::EventState#&gt;, &lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:event_state(X::EventState, S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:fetch_state</string>
		<string>xmerl_scan:fetch_state(&lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:fetch_state(S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:fetch_state</string>
		<string>xmerl_scan:fetch_state(&lt;#X::FetchState#&gt;, &lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:fetch_state(X::FetchState, S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:file</string>
		<string>xmerl_scan:file(&lt;#Filename::string()#&gt;)</string>
		<string>xmerl_scan:file(Filename::string()) -&gt; {xmlElement(), Rest}</string>
		<string>xmerl_scan:file</string>
		<string>xmerl_scan:file(&lt;#Filename::string()#&gt;, &lt;#Options::option_list()#&gt;)</string>
		<string>xmerl_scan:file(Filename::string(), Options::option_list()) -&gt; {document(), Rest}</string>
		<string>xmerl_scan:hook_state</string>
		<string>xmerl_scan:hook_state(&lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:hook_state(S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:hook_state</string>
		<string>xmerl_scan:hook_state(&lt;#X::HookState#&gt;, &lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:hook_state(X::HookState, S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:rules_state</string>
		<string>xmerl_scan:rules_state(&lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:rules_state(S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:rules_state</string>
		<string>xmerl_scan:rules_state(&lt;#X::RulesState#&gt;, &lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:rules_state(X::RulesState, S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:string</string>
		<string>xmerl_scan:string(&lt;#Text::list()#&gt;)</string>
		<string>xmerl_scan:string(Text::list()) -&gt; {xmlElement(), Rest}</string>
		<string>xmerl_scan:string</string>
		<string>xmerl_scan:string(&lt;#Text::list()#&gt;, &lt;#Options::option_list()#&gt;)</string>
		<string>xmerl_scan:string(Text::list(), Options::option_list()) -&gt; {document(), Rest}</string>
		<string>xmerl_scan:user_state</string>
		<string>xmerl_scan:user_state(&lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:user_state(S::global_state()) -&gt; global_state()</string>
		<string>xmerl_scan:user_state</string>
		<string>xmerl_scan:user_state(&lt;#X::UserState#&gt;, &lt;#S::global_state()#&gt;)</string>
		<string>xmerl_scan:user_state(X::UserState, S::global_state()) -&gt; global_state()</string>
		<string>xmerl_xpath:string</string>
		<string>xmerl_xpath:string(&lt;#Str#&gt;, &lt;#Doc#&gt;)</string>
		<string>xmerl_xpath:string(Str, Doc) -&gt; [docEntity()] | Scalar</string>
		<string>xmerl_xpath:string</string>
		<string>xmerl_xpath:string(&lt;#Str#&gt;, &lt;#Doc#&gt;, &lt;#Options#&gt;)</string>
		<string>xmerl_xpath:string(Str, Doc, Options) -&gt; [docEntity()] | Scalar</string>
		<string>xmerl_xpath:string</string>
		<string>xmerl_xpath:string(&lt;#Str#&gt;, &lt;#Node#&gt;, &lt;#Parents#&gt;, &lt;#Doc#&gt;, &lt;#Options#&gt;)</string>
		<string>xmerl_xpath:string(Str, Node, Parents, Doc, Options) -&gt; [docEntity()] | Scalar</string>
		<string>xmerl_xs:built_in_rules</string>
		<string>xmerl_xs:built_in_rules(&lt;#Fun#&gt;, &lt;#E#&gt;)</string>
		<string>xmerl_xs:built_in_rules(Fun, E) -&gt; List</string>
		<string>xmerl_xs:select</string>
		<string>xmerl_xs:select(&lt;#String::string()#&gt;, &lt;#E#&gt;)</string>
		<string>xmerl_xs:select(String::string(), E) -&gt; E</string>
		<string>xmerl_xs:value_of</string>
		<string>xmerl_xs:value_of(&lt;#E#&gt;)</string>
		<string>xmerl_xs:value_of(E) -&gt; List</string>
		<string>xmerl_xs:xslapply</string>
		<string>xmerl_xs:xslapply(&lt;#Fun::Function#&gt;, &lt;#EList::list()#&gt;)</string>
		<string>xmerl_xs:xslapply(Fun::Function, EList::list()) -&gt; List</string>
		<string>xmerl_xsd:file2state</string>
		<string>xmerl_xsd:file2state(&lt;#FileName#&gt;)</string>
		<string>xmerl_xsd:file2state(FileName) -&gt; {ok, State} | {error, Reason}</string>
		<string>xmerl_xsd:format_error</string>
		<string>xmerl_xsd:format_error(&lt;#L::Errors#&gt;)</string>
		<string>xmerl_xsd:format_error(L::Errors) -&gt; Result</string>
		<string>xmerl_xsd:process_schema</string>
		<string>xmerl_xsd:process_schema(&lt;#Schema#&gt;)</string>
		<string>xmerl_xsd:process_schema(Schema) -&gt; Result</string>
		<string>xmerl_xsd:process_schema</string>
		<string>xmerl_xsd:process_schema(&lt;#Schema#&gt;, &lt;#Options#&gt;)</string>
		<string>xmerl_xsd:process_schema(Schema, Options) -&gt; Result</string>
		<string>xmerl_xsd:process_schemas</string>
		<string>xmerl_xsd:process_schemas(&lt;#Schemas#&gt;)</string>
		<string>xmerl_xsd:process_schemas(Schemas) -&gt; Result</string>
		<string>xmerl_xsd:process_schemas</string>
		<string>xmerl_xsd:process_schemas(&lt;#Schemas#&gt;, &lt;#Options#&gt;)</string>
		<string>xmerl_xsd:process_schemas(Schemas, Options) -&gt; Result</string>
		<string>xmerl_xsd:process_validate</string>
		<string>xmerl_xsd:process_validate(&lt;#Schema#&gt;, &lt;#Xml::Element#&gt;)</string>
		<string>xmerl_xsd:process_validate(Schema, Xml::Element) -&gt; Result</string>
		<string>xmerl_xsd:process_validate</string>
		<string>xmerl_xsd:process_validate(&lt;#Schema#&gt;, &lt;#Xml::Element#&gt;, &lt;#Opts::Options#&gt;)</string>
		<string>xmerl_xsd:process_validate(Schema, Xml::Element, Opts::Options) -&gt; Result</string>
		<string>xmerl_xsd:state2file</string>
		<string>xmerl_xsd:state2file(&lt;#S::State#&gt;)</string>
		<string>xmerl_xsd:state2file(S::State) -&gt; ok | {error, Reason}</string>
		<string>xmerl_xsd:state2file</string>
		<string>xmerl_xsd:state2file(&lt;#S::State#&gt;, &lt;#FileName#&gt;)</string>
		<string>xmerl_xsd:state2file(S::State, FileName) -&gt; ok | {error, Reason}</string>
		<string>xmerl_xsd:validate</string>
		<string>xmerl_xsd:validate(&lt;#Xml::Element#&gt;, &lt;#State#&gt;)</string>
		<string>xmerl_xsd:validate(Xml::Element, State) -&gt; Result</string>
		<string>xmerl_xsd:validate</string>
		<string>xmerl_xsd:validate(&lt;#Xml::Element#&gt;, &lt;#State#&gt;, &lt;#Opts::Options#&gt;)</string>
		<string>xmerl_xsd:validate(Xml::Element, State, Opts::Options) -&gt; Result</string>
		<string>xref:add_application</string>
		<string>xref:add_application(&lt;#Xref#&gt;, &lt;#Directory [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:add_application(Xref, Directory [, Options]) -&gt; {ok, application()} | Error</string>
		<string>xref:add_directory</string>
		<string>xref:add_directory(&lt;#Xref#&gt;, &lt;#Directory [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:add_directory(Xref, Directory [, Options]) -&gt; {ok, Modules} | Error</string>
		<string>xref:add_module</string>
		<string>xref:add_module(&lt;#Xref#&gt;, &lt;#File [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:add_module(Xref, File [, Options]) -&gt; {ok, module()} | Error</string>
		<string>xref:add_release</string>
		<string>xref:add_release(&lt;#Xref#&gt;, &lt;#Directory [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:add_release(Xref, Directory [, Options]) -&gt; {ok, release()} | Error</string>
		<string>xref:analyze</string>
		<string>xref:analyze(&lt;#Xref#&gt;, &lt;#Analysis [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:analyze(Xref, Analysis [, Options]) -&gt; {ok, Answer} | Error</string>
		<string>xref:d</string>
		<string>xref:d(&lt;#Directory#&gt;)</string>
		<string>xref:d(Directory) -&gt; [DebugInfoResult] | [NoDebugInfoResult] | Error</string>
		<string>xref:forget</string>
		<string>xref:forget(&lt;#Xref#&gt;)</string>
		<string>xref:forget(Xref) -&gt; ok</string>
		<string>xref:forget</string>
		<string>xref:forget(&lt;#Xref#&gt;, &lt;#Variables#&gt;)</string>
		<string>xref:forget(Xref, Variables) -&gt; ok | Error</string>
		<string>xref:format_error</string>
		<string>xref:format_error(&lt;#Error#&gt;)</string>
		<string>xref:format_error(Error) -&gt; Chars</string>
		<string>xref:get_default</string>
		<string>xref:get_default(&lt;#Xref#&gt;)</string>
		<string>xref:get_default(Xref) -&gt; [{Option, Value}]</string>
		<string>xref:get_default</string>
		<string>xref:get_default(&lt;#Xref#&gt;, &lt;#Option#&gt;)</string>
		<string>xref:get_default(Xref, Option) -&gt; {ok, Value} | Error</string>
		<string>xref:get_library_path</string>
		<string>xref:get_library_path(&lt;#Xref#&gt;)</string>
		<string>xref:get_library_path(Xref) -&gt; {ok, LibraryPath}</string>
		<string>xref:info</string>
		<string>xref:info(&lt;#Xref#&gt;)</string>
		<string>xref:info(Xref) -&gt; [Info]</string>
		<string>xref:info</string>
		<string>xref:info(&lt;#Xref#&gt;, &lt;#Category#&gt;)</string>
		<string>xref:info(Xref, Category) -&gt; [{Item, [Info]}]</string>
		<string>xref:info</string>
		<string>xref:info(&lt;#Xref#&gt;, &lt;#Category#&gt;, &lt;#Items#&gt;)</string>
		<string>xref:info(Xref, Category, Items) -&gt; [{Item, [Info]}]</string>
		<string>xref:m</string>
		<string>xref:m(&lt;#Module#&gt;)</string>
		<string>xref:m(Module) -&gt; [DebugInfoResult] | [NoDebugInfoResult] | Error</string>
		<string>xref:m</string>
		<string>xref:m(&lt;#File#&gt;)</string>
		<string>xref:m(File) -&gt; [DebugInfoResult] | [NoDebugInfoResult] | Error</string>
		<string>xref:q</string>
		<string>xref:q(&lt;#Xref#&gt;, &lt;#Query [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:q(Xref, Query [, Options]) -&gt; {ok, Answer} | Error</string>
		<string>xref:remove_application</string>
		<string>xref:remove_application(&lt;#Xref#&gt;, &lt;#Applications#&gt;)</string>
		<string>xref:remove_application(Xref, Applications) -&gt; ok | Error</string>
		<string>xref:remove_module</string>
		<string>xref:remove_module(&lt;#Xref#&gt;, &lt;#Modules#&gt;)</string>
		<string>xref:remove_module(Xref, Modules) -&gt; ok | Error</string>
		<string>xref:remove_release</string>
		<string>xref:remove_release(&lt;#Xref#&gt;, &lt;#Releases#&gt;)</string>
		<string>xref:remove_release(Xref, Releases) -&gt; ok | Error</string>
		<string>xref:replace_application</string>
		<string>xref:replace_application(&lt;#Xref#&gt;, &lt;#Application#&gt;, &lt;#Directory [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:replace_application(Xref, Application, Directory [, Options]) -&gt; {ok, application()} | Error</string>
		<string>xref:replace_module</string>
		<string>xref:replace_module(&lt;#Xref#&gt;, &lt;#Module#&gt;, &lt;#File [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:replace_module(Xref, Module, File [, Options]) -&gt; {ok, module()} | Error</string>
		<string>xref:set_default</string>
		<string>xref:set_default(&lt;#Xref#&gt;, &lt;#Option#&gt;, &lt;#Value#&gt;)</string>
		<string>xref:set_default(Xref, Option, Value) -&gt; {ok, OldValue} | Error</string>
		<string>xref:set_default</string>
		<string>xref:set_default(&lt;#Xref#&gt;, &lt;#OptionValues#&gt;)</string>
		<string>xref:set_default(Xref, OptionValues) -&gt; ok | Error</string>
		<string>xref:set_library_path</string>
		<string>xref:set_library_path(&lt;#Xref#&gt;, &lt;#LibraryPath [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:set_library_path(Xref, LibraryPath [, Options]) -&gt; ok | Error</string>
		<string>xref:start</string>
		<string>xref:start(&lt;#NameOrOptions#&gt;)</string>
		<string>xref:start(NameOrOptions) -&gt; Return</string>
		<string>xref:start</string>
		<string>xref:start(&lt;#Name#&gt;, &lt;#Options#&gt;)</string>
		<string>xref:start(Name, Options) -&gt; Return</string>
		<string>xref:stop</string>
		<string>xref:stop(&lt;#Xref#&gt;)</string>
		<string>xref:stop(Xref)</string>
		<string>xref:update</string>
		<string>xref:update(&lt;#Xref [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:update(Xref [, Options]) -&gt; {ok, Modules} | Error</string>
		<string>xref:variables</string>
		<string>xref:variables(&lt;#Xref [#&gt;, &lt;#Options]#&gt;)</string>
		<string>xref:variables(Xref [, Options]) -&gt; {ok, [VariableInfo]}</string>
		<string>yecc:file</string>
		<string>yecc:file(&lt;#Grammarfile [#&gt;, &lt;#Options]#&gt;)</string>
		<string>yecc:file(Grammarfile [, Options]) -&gt; YeccRet</string>
		<string>yecc:format_error</string>
		<string>yecc:format_error(&lt;#Reason#&gt;)</string>
		<string>yecc:format_error(Reason) -&gt; Chars</string>
		<string>zip:create</string>
		<string>zip:create(&lt;#Name#&gt;, &lt;#FileList#&gt;)</string>
		<string>zip:create(Name, FileList) -&gt; RetValue</string>
		<string>zip:create</string>
		<string>zip:create(&lt;#Name#&gt;, &lt;#FileList#&gt;, &lt;#Options#&gt;)</string>
		<string>zip:create(Name, FileList, Options) -&gt; RetValue</string>
		<string>zip:extract</string>
		<string>zip:extract(&lt;#Archive#&gt;)</string>
		<string>zip:extract(Archive) -&gt; RetValue</string>
		<string>zip:extract</string>
		<string>zip:extract(&lt;#Archive#&gt;, &lt;#Options#&gt;)</string>
		<string>zip:extract(Archive, Options) -&gt; RetValue</string>
		<string>zip:foldl</string>
		<string>zip:foldl(&lt;#Fun#&gt;, &lt;#Acc0#&gt;, &lt;#Archive#&gt;)</string>
		<string>zip:foldl(Fun, Acc0, Archive) -&gt; {ok, Acc1} | {error, Reason}</string>
		<string>zip:list_dir</string>
		<string>zip:list_dir(&lt;#Archive#&gt;)</string>
		<string>zip:list_dir(Archive) -&gt; RetValue</string>
		<string>zip:list_dir</string>
		<string>zip:list_dir(&lt;#Archive#&gt;, &lt;#Options#&gt;)</string>
		<string>zip:list_dir(Archive, Options) -&gt; RetValue</string>
		<string>zip:t</string>
		<string>zip:t(&lt;#Archive#&gt;)</string>
		<string>zip:t(Archive) -&gt; ok</string>
		<string>zip:table</string>
		<string>zip:table(&lt;#Archive#&gt;)</string>
		<string>zip:table(Archive) -&gt; RetValue</string>
		<string>zip:table</string>
		<string>zip:table(&lt;#Archive#&gt;, &lt;#Options#&gt;)</string>
		<string>zip:table(Archive, Options) -&gt; RetValue</string>
		<string>zip:tt</string>
		<string>zip:tt(&lt;#Archive#&gt;)</string>
		<string>zip:tt(Archive) -&gt; ok</string>
		<string>zip:unzip</string>
		<string>zip:unzip(&lt;#Archive#&gt;)</string>
		<string>zip:unzip(Archive) -&gt; RetValue</string>
		<string>zip:unzip</string>
		<string>zip:unzip(&lt;#Archive#&gt;, &lt;#Options#&gt;)</string>
		<string>zip:unzip(Archive, Options) -&gt; RetValue</string>
		<string>zip:zip</string>
		<string>zip:zip(&lt;#Name#&gt;, &lt;#FileList#&gt;)</string>
		<string>zip:zip(Name, FileList) -&gt; RetValue</string>
		<string>zip:zip</string>
		<string>zip:zip(&lt;#Name#&gt;, &lt;#FileList#&gt;, &lt;#Options#&gt;)</string>
		<string>zip:zip(Name, FileList, Options) -&gt; RetValue</string>
		<string>zip:zip_close</string>
		<string>zip:zip_close(&lt;#ZipHandle#&gt;)</string>
		<string>zip:zip_close(ZipHandle) -&gt; ok | {error, einval}</string>
		<string>zip:zip_get</string>
		<string>zip:zip_get(&lt;#ZipHandle#&gt;)</string>
		<string>zip:zip_get(ZipHandle) -&gt; {ok, [Result]} | {error, Reason}</string>
		<string>zip:zip_get</string>
		<string>zip:zip_get(&lt;#FileName#&gt;, &lt;#ZipHandle#&gt;)</string>
		<string>zip:zip_get(FileName, ZipHandle) -&gt; {ok, Result} | {error, Reason}</string>
		<string>zip:zip_list_dir</string>
		<string>zip:zip_list_dir(&lt;#ZipHandle#&gt;)</string>
		<string>zip:zip_list_dir(ZipHandle) -&gt; {ok, Result} | {error, Reason}</string>
		<string>zip:zip_open</string>
		<string>zip:zip_open(&lt;#Archive#&gt;)</string>
		<string>zip:zip_open(Archive) -&gt; {ok, ZipHandle} | {error, Reason}</string>
		<string>zip:zip_open</string>
		<string>zip:zip_open(&lt;#Archive#&gt;, &lt;#Options#&gt;)</string>
		<string>zip:zip_open(Archive, Options) -&gt; {ok, ZipHandle} | {error, Reason}</string>
		<string>zlib:adler32</string>
		<string>zlib:adler32(&lt;#Z#&gt;, &lt;#Data#&gt;)</string>
		<string>zlib:adler32(Z, Data) -&gt; CheckSum</string>
		<string>zlib:adler32</string>
		<string>zlib:adler32(&lt;#Z#&gt;, &lt;#PrevAdler#&gt;, &lt;#Data#&gt;)</string>
		<string>zlib:adler32(Z, PrevAdler, Data) -&gt; CheckSum</string>
		<string>zlib:adler32_combine</string>
		<string>zlib:adler32_combine(&lt;#Z#&gt;, &lt;#Adler1#&gt;, &lt;#Adler2#&gt;, &lt;#Size2#&gt;)</string>
		<string>zlib:adler32_combine(Z, Adler1, Adler2, Size2) -&gt; Adler</string>
		<string>zlib:close</string>
		<string>zlib:close(&lt;#Z#&gt;)</string>
		<string>zlib:close(Z) -&gt; ok</string>
		<string>zlib:compress</string>
		<string>zlib:compress(&lt;#Data#&gt;)</string>
		<string>zlib:compress(Data) -&gt; Compressed</string>
		<string>zlib:crc32</string>
		<string>zlib:crc32(&lt;#Z#&gt;)</string>
		<string>zlib:crc32(Z) -&gt; CRC</string>
		<string>zlib:crc32</string>
		<string>zlib:crc32(&lt;#Z#&gt;, &lt;#Data#&gt;)</string>
		<string>zlib:crc32(Z, Data) -&gt; CRC</string>
		<string>zlib:crc32</string>
		<string>zlib:crc32(&lt;#Z#&gt;, &lt;#PrevCRC#&gt;, &lt;#Data#&gt;)</string>
		<string>zlib:crc32(Z, PrevCRC, Data) -&gt; CRC</string>
		<string>zlib:crc32_combine</string>
		<string>zlib:crc32_combine(&lt;#Z#&gt;, &lt;#CRC1#&gt;, &lt;#CRC2#&gt;, &lt;#Size2#&gt;)</string>
		<string>zlib:crc32_combine(Z, CRC1, CRC2, Size2) -&gt; CRC</string>
		<string>zlib:deflate</string>
		<string>zlib:deflate(&lt;#Z#&gt;, &lt;#Data#&gt;)</string>
		<string>zlib:deflate(Z, Data) -&gt; Compressed</string>
		<string>zlib:deflate</string>
		<string>zlib:deflate(&lt;#Z#&gt;, &lt;#Data#&gt;, &lt;#Flush#&gt;)</string>
		<string>zlib:deflate(Z, Data, Flush) -&gt; Compressed</string>
		<string>zlib:deflateEnd</string>
		<string>zlib:deflateEnd(&lt;#Z#&gt;)</string>
		<string>zlib:deflateEnd(Z) -&gt; ok</string>
		<string>zlib:deflateInit</string>
		<string>zlib:deflateInit(&lt;#Z#&gt;)</string>
		<string>zlib:deflateInit(Z) -&gt; ok</string>
		<string>zlib:deflateInit</string>
		<string>zlib:deflateInit(&lt;#Z#&gt;, &lt;#Level#&gt;)</string>
		<string>zlib:deflateInit(Z, Level) -&gt; ok</string>
		<string>zlib:deflateInit</string>
		<string>zlib:deflateInit(&lt;#Z#&gt;, &lt;#Level#&gt;, &lt;#Method#&gt;, &lt;#WindowBits#&gt;, &lt;#MemLevel#&gt;, &lt;#Strategy#&gt;)</string>
		<string>zlib:deflateInit(Z, Level, Method, WindowBits, MemLevel, Strategy) -&gt; ok</string>
		<string>zlib:deflateParams</string>
		<string>zlib:deflateParams(&lt;#Z#&gt;, &lt;#Level#&gt;, &lt;#Strategy#&gt;)</string>
		<string>zlib:deflateParams(Z, Level, Strategy) -&gt; ok</string>
		<string>zlib:deflateReset</string>
		<string>zlib:deflateReset(&lt;#Z#&gt;)</string>
		<string>zlib:deflateReset(Z) -&gt; ok</string>
		<string>zlib:deflateSetDictionary</string>
		<string>zlib:deflateSetDictionary(&lt;#Z#&gt;, &lt;#Dictionary#&gt;)</string>
		<string>zlib:deflateSetDictionary(Z, Dictionary) -&gt; Adler32</string>
		<string>zlib:getBufSize</string>
		<string>zlib:getBufSize(&lt;#Z#&gt;)</string>
		<string>zlib:getBufSize(Z) -&gt; Size</string>
		<string>zlib:getQSize</string>
		<string>zlib:getQSize(&lt;#Z :: zstream()#&gt;)</string>
		<string>zlib:getQSize(Z :: zstream()) -&gt; integer() &gt;= 0</string>
		<string>zlib:gunzip</string>
		<string>zlib:gunzip(&lt;#Data#&gt;)</string>
		<string>zlib:gunzip(Data) -&gt; Decompressed</string>
		<string>zlib:gzip</string>
		<string>zlib:gzip(&lt;#Data#&gt;)</string>
		<string>zlib:gzip(Data) -&gt; Compressed</string>
		<string>zlib:inflate</string>
		<string>zlib:inflate(&lt;#Z#&gt;, &lt;#Data#&gt;)</string>
		<string>zlib:inflate(Z, Data) -&gt; Decompressed</string>
		<string>zlib:inflateEnd</string>
		<string>zlib:inflateEnd(&lt;#Z#&gt;)</string>
		<string>zlib:inflateEnd(Z) -&gt; ok</string>
		<string>zlib:inflateInit</string>
		<string>zlib:inflateInit(&lt;#Z#&gt;)</string>
		<string>zlib:inflateInit(Z) -&gt; ok</string>
		<string>zlib:inflateInit</string>
		<string>zlib:inflateInit(&lt;#Z#&gt;, &lt;#WindowBits#&gt;)</string>
		<string>zlib:inflateInit(Z, WindowBits) -&gt; ok</string>
		<string>zlib:inflateReset</string>
		<string>zlib:inflateReset(&lt;#Z#&gt;)</string>
		<string>zlib:inflateReset(Z) -&gt; ok</string>
		<string>zlib:inflateSetDictionary</string>
		<string>zlib:inflateSetDictionary(&lt;#Z#&gt;, &lt;#Dictionary#&gt;)</string>
		<string>zlib:inflateSetDictionary(Z, Dictionary) -&gt; ok</string>
		<string>zlib:inflateSync</string>
		<string>zlib:inflateSync(&lt;#Z :: zstream()#&gt;)</string>
		<string>zlib:inflateSync(Z :: zstream()) -&gt; ok</string>
		<string>zlib:open</string>
		<string>zlib:open()</string>
		<string>zlib:open() -&gt; zstream()</string>
		<string>zlib:setBufSize</string>
		<string>zlib:setBufSize(&lt;#Z#&gt;, &lt;#Size#&gt;)</string>
		<string>zlib:setBufSize(Z, Size) -&gt; ok</string>
		<string>zlib:uncompress</string>
		<string>zlib:uncompress(&lt;#Data#&gt;)</string>
		<string>zlib:uncompress(Data) -&gt; Decompressed</string>
		<string>zlib:unzip</string>
		<string>zlib:unzip(&lt;#Data#&gt;)</string>
		<string>zlib:unzip(Data) -&gt; Decompressed</string>
		<string>zlib:zip</string>
		<string>zlib:zip(&lt;#Data#&gt;)</string>
		<string>zlib:zip(Data) -&gt; Compressed</string>
	</array>
	<key>ErlangTypesForCompletion</key>
	<array>
	    <!-- built-in types -->
		<string>any()</string>
		<string>any()</string>
		<string>any()</string>
		<string>atom()</string>
		<string>atom()</string>
		<string>atom()</string>
		<string>binary()</string>
		<string>binary()</string>
		<string>binary()</string>
		<string>boolean()</string>
		<string>boolean()</string>
		<string>boolean()</string>
		<string>byte()</string>
		<string>byte()</string>
		<string>byte()</string>
		<string>char()</string>
		<string>char()</string>
		<string>char()</string>
		<string>float()</string>
		<string>float()</string>
		<string>float()</string>
		<string>fun</string>
		<string>fun((any()) -&gt; any())</string>
		<string>fun(&lt;#Args#&gt;) -&gt; &lt;#Result#&gt;</string>
		<string>fun()</string>
		<string>fun()</string>
		<string>fun()</string>
		<string>improper_list()</string>
		<string>improper_list(Type1, Type2)</string>
		<string>improper_list(&lt;#Type1, Type2#&gt;)</string>
		<string>integer()</string>
		<string>integer()</string>
		<string>integer()</string>
		<string>iodata()</string>
		<string>iodata()</string>
		<string>iodata()</string>
		<string>iolist()</string>
		<string>iolist()</string>
		<string>iolist()</string>
		<string>list()</string>
		<string>list()</string>
		<string>list()</string>
		<string>list</string>
		<string>list(Type)</string>
		<string>list(&lt;#Type#&gt;)</string>
		<string>maybe_improper_list()</string>
		<string>maybe_improper_list()</string>
		<string>maybe_improper_list()</string>
		<string>maybe_improper_list</string>
		<string>maybe_improper_list(Type)</string>
		<string>maybe_improper_list(&lt;#Type#&gt;)</string>
		<string>maybe_improper_list</string>
		<string>maybe_improper_list(Type1, Type2)</string>
		<string>maybe_improper_list(&lt;#Type1, Type2#&gt;)</string>
		<!-- Map types, both map() and #{ ... }, are considered experimental during OTP 17.
		No type information of maps pairs, only the containing map types, are used by Dialyzer in OTP 17.
		-->
		<string>map()</string>
		<string>map()</string>
		<string>map()</string>
		<string>mfa()</string>
		<string>mfa()</string>
		<string>mfa()</string>
		<string>module()</string>
		<string>module()</string>
		<string>module()</string>
		<string>neg_integer()</string>
		<string>neg_integer()</string>
		<string>neg_integer()</string>
		<string>no_return()</string>
		<string>no_return()</string>
		<string>no_return()</string>
		<string>node()</string>
		<string>node()</string>
		<string>node()</string>
		<string>non_neg_integer()</string>
		<string>non_neg_integer()</string>
		<string>non_neg_integer()</string>
		<string>none()</string>
		<string>none()</string>
		<string>none()</string>
		<string>nonempty_improper_list()</string>
		<string>nonempty_improper_list(Type1, Type2)</string>
		<string>nonempty_improper_list(&lt;#Type1, Type2#&gt;)</string>
		<string>nonempty_maybe_improper_list()</string>
		<string>nonempty_maybe_improper_list()</string>
		<string>nonempty_maybe_improper_list()</string>
		<string>nonempty_maybe_improper_list</string>
		<string>nonempty_maybe_improper_list(Type)</string>
		<string>nonempty_maybe_improper_list(&lt;#Type#&gt;)</string>
		<string>nonempty_maybe_improper_list()</string>
		<string>nonempty_maybe_improper_list(Type1, Type2)</string>
		<string>nonempty_maybe_improper_list(&lt;#Type1, Type2#&gt;)</string>
		<string>nonempty_string()</string>
		<string>nonempty_string()</string>
		<string>nonempty_string()</string>
		<string>number()</string>
		<string>number()</string>
		<string>number()</string>
		<string>pid()</string>
		<string>pid()</string>
		<string>pid()</string>
		<string>port()</string>
		<string>port()</string>
		<string>port()</string>
		<string>pos_integer()</string>
		<string>pos_integer()</string>
		<string>pos_integer()</string>
		<string>reference()</string>
		<string>reference()</string>
		<string>reference()</string>
		<string>string()</string>
		<string>string()</string>
		<string>string()</string>
		<string>term()</string>
		<string>term()</string>
		<string>term()</string>
		<string>tid()</string>
		<string>tid()</string>
		<string>tid()</string>
		<string>timeout()</string>
		<string>timeout()</string>
		<string>timeout()</string>
		<string>tuple()</string>
		<string>tuple()</string>
		<string>tuple()</string>
        <!-- exported and documented types -->
		<string>application:application_opt()</string>
		<string>application:application_opt()</string>
		<string>application:application_opt()</string>
		<string>application:application_spec()</string>
		<string>application:application_spec()</string>
		<string>application:application_spec()</string>
		<string>application:restart_type()</string>
		<string>application:restart_type()</string>
		<string>application:restart_type()</string>
		<string>application:start_type()</string>
		<string>application:start_type()</string>
		<string>application:start_type()</string>
		<string>application:tuple_of()</string>
		<string>application:tuple_of(&lt;#_T#&gt;)</string>
		<string>application:tuple_of(_T)</string>
		<string>array:array()</string>
		<string>array:array()</string>
		<string>array:array()</string>
		<string>array:array()</string>
		<string>array:array(&lt;#Type#&gt;)</string>
		<string>array:array(Type)</string>
		<string>array:array_indx()</string>
		<string>array:array_indx()</string>
		<string>array:array_indx()</string>
		<string>array:array_opt()</string>
		<string>array:array_opt()</string>
		<string>array:array_opt()</string>
		<string>array:array_opts()</string>
		<string>array:array_opts()</string>
		<string>array:array_opts()</string>
		<string>array:indx_pair()</string>
		<string>array:indx_pair(&lt;#Type#&gt;)</string>
		<string>array:indx_pair(Type)</string>
		<string>array:indx_pairs()</string>
		<string>array:indx_pairs(&lt;#Type#&gt;)</string>
		<string>array:indx_pairs(Type)</string>
		<string>auth:calls()</string>
		<string>auth:calls()</string>
		<string>auth:calls()</string>
		<string>auth:cookie()</string>
		<string>auth:cookie()</string>
		<string>auth:cookie()</string>
		<string>auth:state()</string>
		<string>auth:state()</string>
		<string>auth:state()</string>
		<string>base64:ascii_binary()</string>
		<string>base64:ascii_binary()</string>
		<string>base64:ascii_binary()</string>
		<string>base64:ascii_string()</string>
		<string>base64:ascii_string()</string>
		<string>base64:ascii_string()</string>
		<string>beam_lib:abst_code()</string>
		<string>beam_lib:abst_code()</string>
		<string>beam_lib:abst_code()</string>
		<string>beam_lib:attrib_entry()</string>
		<string>beam_lib:attrib_entry()</string>
		<string>beam_lib:attrib_entry()</string>
		<string>beam_lib:beam()</string>
		<string>beam_lib:beam()</string>
		<string>beam_lib:beam()</string>
		<string>beam_lib:calls()</string>
		<string>beam_lib:calls()</string>
		<string>beam_lib:calls()</string>
		<string>beam_lib:chnk_rsn()</string>
		<string>beam_lib:chnk_rsn()</string>
		<string>beam_lib:chnk_rsn()</string>
		<string>beam_lib:chunkdata()</string>
		<string>beam_lib:chunkdata()</string>
		<string>beam_lib:chunkdata()</string>
		<string>beam_lib:chunkid()</string>
		<string>beam_lib:chunkid()</string>
		<string>beam_lib:chunkid()</string>
		<string>beam_lib:chunkname()</string>
		<string>beam_lib:chunkname()</string>
		<string>beam_lib:chunkname()</string>
		<string>beam_lib:chunkref()</string>
		<string>beam_lib:chunkref()</string>
		<string>beam_lib:chunkref()</string>
		<string>beam_lib:cmp_rsn()</string>
		<string>beam_lib:cmp_rsn()</string>
		<string>beam_lib:cmp_rsn()</string>
		<string>beam_lib:compinfo_entry()</string>
		<string>beam_lib:compinfo_entry()</string>
		<string>beam_lib:compinfo_entry()</string>
		<string>beam_lib:crypto_fun()</string>
		<string>beam_lib:crypto_fun()</string>
		<string>beam_lib:crypto_fun()</string>
		<string>beam_lib:crypto_fun_arg()</string>
		<string>beam_lib:crypto_fun_arg()</string>
		<string>beam_lib:crypto_fun_arg()</string>
		<string>beam_lib:dataB()</string>
		<string>beam_lib:dataB()</string>
		<string>beam_lib:dataB()</string>
		<string>beam_lib:forms()</string>
		<string>beam_lib:forms()</string>
		<string>beam_lib:forms()</string>
		<string>beam_lib:index()</string>
		<string>beam_lib:index()</string>
		<string>beam_lib:index()</string>
		<string>beam_lib:info_rsn()</string>
		<string>beam_lib:info_rsn()</string>
		<string>beam_lib:info_rsn()</string>
		<string>beam_lib:label()</string>
		<string>beam_lib:label()</string>
		<string>beam_lib:label()</string>
		<string>beam_lib:labeled_entry()</string>
		<string>beam_lib:labeled_entry()</string>
		<string>beam_lib:labeled_entry()</string>
		<string>beam_lib:mode()</string>
		<string>beam_lib:mode()</string>
		<string>beam_lib:mode()</string>
		<string>binary:cp()</string>
		<string>binary:cp()</string>
		<string>binary:cp()</string>
		<string>binary:part()</string>
		<string>binary:part()</string>
		<string>binary:part()</string>
		<string>calendar:date()</string>
		<string>calendar:date()</string>
		<string>calendar:date()</string>
		<string>calendar:datetime()</string>
		<string>calendar:datetime()</string>
		<string>calendar:datetime()</string>
		<string>calendar:datetime1970()</string>
		<string>calendar:datetime1970()</string>
		<string>calendar:datetime1970()</string>
		<string>calendar:day()</string>
		<string>calendar:day()</string>
		<string>calendar:day()</string>
		<string>calendar:daynum()</string>
		<string>calendar:daynum()</string>
		<string>calendar:daynum()</string>
		<string>calendar:hour()</string>
		<string>calendar:hour()</string>
		<string>calendar:hour()</string>
		<string>calendar:ldom()</string>
		<string>calendar:ldom()</string>
		<string>calendar:ldom()</string>
		<string>calendar:minute()</string>
		<string>calendar:minute()</string>
		<string>calendar:minute()</string>
		<string>calendar:month()</string>
		<string>calendar:month()</string>
		<string>calendar:month()</string>
		<string>calendar:second()</string>
		<string>calendar:second()</string>
		<string>calendar:second()</string>
		<string>calendar:secs_per_day()</string>
		<string>calendar:secs_per_day()</string>
		<string>calendar:secs_per_day()</string>
		<string>calendar:time()</string>
		<string>calendar:time()</string>
		<string>calendar:time()</string>
		<string>calendar:weeknum()</string>
		<string>calendar:weeknum()</string>
		<string>calendar:weeknum()</string>
		<string>calendar:year()</string>
		<string>calendar:year()</string>
		<string>calendar:year()</string>
		<string>calendar:year1970()</string>
		<string>calendar:year1970()</string>
		<string>calendar:year1970()</string>
		<string>calendar:yearweeknum()</string>
		<string>calendar:yearweeknum()</string>
		<string>calendar:yearweeknum()</string>
		<string>code:add_path_ret()</string>
		<string>code:add_path_ret()</string>
		<string>code:add_path_ret()</string>
		<string>code:load_error_rsn()</string>
		<string>code:load_error_rsn()</string>
		<string>code:load_error_rsn()</string>
		<string>code:load_ret()</string>
		<string>code:load_ret()</string>
		<string>code:load_ret()</string>
		<string>code:loaded_filename()</string>
		<string>code:loaded_filename()</string>
		<string>code:loaded_filename()</string>
		<string>code:loaded_ret_atoms()</string>
		<string>code:loaded_ret_atoms()</string>
		<string>code:loaded_ret_atoms()</string>
		<string>dets:access()</string>
		<string>dets:access()</string>
		<string>dets:access()</string>
		<string>dets:auto_save()</string>
		<string>dets:auto_save()</string>
		<string>dets:auto_save()</string>
		<string>dets:bindings_cont()</string>
		<string>dets:bindings_cont()</string>
		<string>dets:bindings_cont()</string>
		<string>dets:cont()</string>
		<string>dets:cont()</string>
		<string>dets:cont()</string>
		<string>dets:keypos()</string>
		<string>dets:keypos()</string>
		<string>dets:keypos()</string>
		<string>dets:match_spec()</string>
		<string>dets:match_spec()</string>
		<string>dets:match_spec()</string>
		<string>dets:no_slots()</string>
		<string>dets:no_slots()</string>
		<string>dets:no_slots()</string>
		<string>dets:object()</string>
		<string>dets:object()</string>
		<string>dets:object()</string>
		<string>dets:object_cont()</string>
		<string>dets:object_cont()</string>
		<string>dets:object_cont()</string>
		<string>dets:pattern()</string>
		<string>dets:pattern()</string>
		<string>dets:pattern()</string>
		<string>dets:select_cont()</string>
		<string>dets:select_cont()</string>
		<string>dets:select_cont()</string>
		<string>dets:tab_name()</string>
		<string>dets:tab_name()</string>
		<string>dets:tab_name()</string>
		<string>dets:type()</string>
		<string>dets:type()</string>
		<string>dets:type()</string>
		<string>dets:version()</string>
		<string>dets:version()</string>
		<string>dets:version()</string>
		<string>dict:dict()</string>
		<string>dict:dict()</string>
		<string>dict:dict()</string>
		<string>dict:dict()</string>
		<string>dict:dict(&lt;#Key#&gt;, &lt;#Value#&gt;)</string>
		<string>dict:dict(Key, Value)</string>
		<string>digraph:add_edge_err_rsn()</string>
		<string>digraph:add_edge_err_rsn()</string>
		<string>digraph:add_edge_err_rsn()</string>
		<string>digraph:d_cyclicity()</string>
		<string>digraph:d_cyclicity()</string>
		<string>digraph:d_cyclicity()</string>
		<string>digraph:d_protection()</string>
		<string>digraph:d_protection()</string>
		<string>digraph:d_protection()</string>
		<string>digraph:d_type()</string>
		<string>digraph:d_type()</string>
		<string>digraph:d_type()</string>
		<string>digraph:edge()</string>
		<string>digraph:edge()</string>
		<string>digraph:edge()</string>
		<string>digraph:graph()</string>
		<string>digraph:graph()</string>
		<string>digraph:graph()</string>
		<string>digraph:label()</string>
		<string>digraph:label()</string>
		<string>digraph:label()</string>
		<string>digraph:vertex()</string>
		<string>digraph:vertex()</string>
		<string>digraph:vertex()</string>
		<string>disk_log:bchunk_ret()</string>
		<string>disk_log:bchunk_ret()</string>
		<string>disk_log:bchunk_ret()</string>
		<string>disk_log:block_error_rsn()</string>
		<string>disk_log:block_error_rsn()</string>
		<string>disk_log:block_error_rsn()</string>
		<string>disk_log:bytes()</string>
		<string>disk_log:bytes()</string>
		<string>disk_log:bytes()</string>
		<string>disk_log:chunk_error_rsn()</string>
		<string>disk_log:chunk_error_rsn()</string>
		<string>disk_log:chunk_error_rsn()</string>
		<string>disk_log:chunk_ret()</string>
		<string>disk_log:chunk_ret()</string>
		<string>disk_log:chunk_ret()</string>
		<string>disk_log:close_error_rsn()</string>
		<string>disk_log:close_error_rsn()</string>
		<string>disk_log:close_error_rsn()</string>
		<string>disk_log:continuation()</string>
		<string>disk_log:continuation()</string>
		<string>disk_log:continuation()</string>
		<string>disk_log:dist_error_rsn()</string>
		<string>disk_log:dist_error_rsn()</string>
		<string>disk_log:dist_error_rsn()</string>
		<string>disk_log:dist_open_ret()</string>
		<string>disk_log:dist_open_ret()</string>
		<string>disk_log:dist_open_ret()</string>
		<string>disk_log:dlog_byte()</string>
		<string>disk_log:dlog_byte()</string>
		<string>disk_log:dlog_byte()</string>
		<string>disk_log:dlog_format()</string>
		<string>disk_log:dlog_format()</string>
		<string>disk_log:dlog_format()</string>
		<string>disk_log:dlog_format_type()</string>
		<string>disk_log:dlog_format_type()</string>
		<string>disk_log:dlog_format_type()</string>
		<string>disk_log:dlog_head_opt()</string>
		<string>disk_log:dlog_head_opt()</string>
		<string>disk_log:dlog_head_opt()</string>
		<string>disk_log:dlog_info()</string>
		<string>disk_log:dlog_info()</string>
		<string>disk_log:dlog_info()</string>
		<string>disk_log:dlog_mode()</string>
		<string>disk_log:dlog_mode()</string>
		<string>disk_log:dlog_mode()</string>
		<string>disk_log:dlog_name()</string>
		<string>disk_log:dlog_name()</string>
		<string>disk_log:dlog_name()</string>
		<string>disk_log:dlog_optattr()</string>
		<string>disk_log:dlog_optattr()</string>
		<string>disk_log:dlog_optattr()</string>
		<string>disk_log:dlog_option()</string>
		<string>disk_log:dlog_option()</string>
		<string>disk_log:dlog_option()</string>
		<string>disk_log:dlog_options()</string>
		<string>disk_log:dlog_options()</string>
		<string>disk_log:dlog_options()</string>
		<string>disk_log:dlog_size()</string>
		<string>disk_log:dlog_size()</string>
		<string>disk_log:dlog_size()</string>
		<string>disk_log:dlog_state_error()</string>
		<string>disk_log:dlog_state_error()</string>
		<string>disk_log:dlog_state_error()</string>
		<string>disk_log:dlog_status()</string>
		<string>disk_log:dlog_status()</string>
		<string>disk_log:dlog_status()</string>
		<string>disk_log:dlog_type()</string>
		<string>disk_log:dlog_type()</string>
		<string>disk_log:dlog_type()</string>
		<string>disk_log:file_error()</string>
		<string>disk_log:file_error()</string>
		<string>disk_log:file_error()</string>
		<string>disk_log:inc_wrap_error_rsn()</string>
		<string>disk_log:inc_wrap_error_rsn()</string>
		<string>disk_log:inc_wrap_error_rsn()</string>
		<string>disk_log:invalid_header()</string>
		<string>disk_log:invalid_header()</string>
		<string>disk_log:invalid_header()</string>
		<string>disk_log:lclose_error_rsn()</string>
		<string>disk_log:lclose_error_rsn()</string>
		<string>disk_log:lclose_error_rsn()</string>
		<string>disk_log:log()</string>
		<string>disk_log:log()</string>
		<string>disk_log:log()</string>
		<string>disk_log:log_error_rsn()</string>
		<string>disk_log:log_error_rsn()</string>
		<string>disk_log:log_error_rsn()</string>
		<string>disk_log:notify_ret()</string>
		<string>disk_log:notify_ret()</string>
		<string>disk_log:notify_ret()</string>
		<string>disk_log:open_error_rsn()</string>
		<string>disk_log:open_error_rsn()</string>
		<string>disk_log:open_error_rsn()</string>
		<string>disk_log:open_ret()</string>
		<string>disk_log:open_ret()</string>
		<string>disk_log:open_ret()</string>
		<string>disk_log:reopen_error_rsn()</string>
		<string>disk_log:reopen_error_rsn()</string>
		<string>disk_log:reopen_error_rsn()</string>
		<string>disk_log:ret()</string>
		<string>disk_log:ret()</string>
		<string>disk_log:ret()</string>
		<string>disk_log:sync_error_rsn()</string>
		<string>disk_log:sync_error_rsn()</string>
		<string>disk_log:sync_error_rsn()</string>
		<string>disk_log:trunc_error_rsn()</string>
		<string>disk_log:trunc_error_rsn()</string>
		<string>disk_log:trunc_error_rsn()</string>
		<string>disk_log:unblock_error_rsn()</string>
		<string>disk_log:unblock_error_rsn()</string>
		<string>disk_log:unblock_error_rsn()</string>
		<string>dyntrace:integer_maybe()</string>
		<string>dyntrace:integer_maybe()</string>
		<string>dyntrace:integer_maybe()</string>
		<string>dyntrace:iolist_maybe()</string>
		<string>dyntrace:iolist_maybe()</string>
		<string>dyntrace:iolist_maybe()</string>
		<string>dyntrace:n_probe_label()</string>
		<string>dyntrace:n_probe_label()</string>
		<string>dyntrace:n_probe_label()</string>
		<string>dyntrace:probe_arg()</string>
		<string>dyntrace:probe_arg()</string>
		<string>dyntrace:probe_arg()</string>
		<string>epp:epp_handle()</string>
		<string>epp:epp_handle()</string>
		<string>epp:epp_handle()</string>
		<string>epp:macros()</string>
		<string>epp:macros()</string>
		<string>epp:macros()</string>
		<string>epp:source_encoding()</string>
		<string>epp:source_encoding()</string>
		<string>epp:source_encoding()</string>
		<string>erl_boot_server:ip4_address()</string>
		<string>erl_boot_server:ip4_address()</string>
		<string>erl_boot_server:ip4_address()</string>
		<string>erl_boot_server:state()</string>
		<string>erl_boot_server:state()</string>
		<string>erl_boot_server:state()</string>
		<string>erl_ddll:driver()</string>
		<string>erl_ddll:driver()</string>
		<string>erl_ddll:driver()</string>
		<string>erl_ddll:path()</string>
		<string>erl_ddll:path()</string>
		<string>erl_ddll:path()</string>
		<string>erl_eval:binding_struct()</string>
		<string>erl_eval:binding_struct()</string>
		<string>erl_eval:binding_struct()</string>
		<string>erl_eval:bindings()</string>
		<string>erl_eval:bindings()</string>
		<string>erl_eval:bindings()</string>
		<string>erl_eval:clauses()</string>
		<string>erl_eval:clauses()</string>
		<string>erl_eval:clauses()</string>
		<string>erl_eval:expression()</string>
		<string>erl_eval:expression()</string>
		<string>erl_eval:expression()</string>
		<string>erl_eval:expression_list()</string>
		<string>erl_eval:expression_list()</string>
		<string>erl_eval:expression_list()</string>
		<string>erl_eval:expressions()</string>
		<string>erl_eval:expressions()</string>
		<string>erl_eval:expressions()</string>
		<string>erl_eval:func_spec()</string>
		<string>erl_eval:func_spec()</string>
		<string>erl_eval:func_spec()</string>
		<string>erl_eval:lfun_eval_handler()</string>
		<string>erl_eval:lfun_eval_handler()</string>
		<string>erl_eval:lfun_eval_handler()</string>
		<string>erl_eval:lfun_value_handler()</string>
		<string>erl_eval:lfun_value_handler()</string>
		<string>erl_eval:lfun_value_handler()</string>
		<string>erl_eval:local_function_handler()</string>
		<string>erl_eval:local_function_handler()</string>
		<string>erl_eval:local_function_handler()</string>
		<string>erl_eval:name()</string>
		<string>erl_eval:name()</string>
		<string>erl_eval:name()</string>
		<string>erl_eval:nlfun_handler()</string>
		<string>erl_eval:nlfun_handler()</string>
		<string>erl_eval:nlfun_handler()</string>
		<string>erl_eval:non_local_function_handler()</string>
		<string>erl_eval:non_local_function_handler()</string>
		<string>erl_eval:non_local_function_handler()</string>
		<string>erl_eval:value()</string>
		<string>erl_eval:value()</string>
		<string>erl_eval:value()</string>
		<string>erl_lint:error_description()</string>
		<string>erl_lint:error_description()</string>
		<string>erl_lint:error_description()</string>
		<string>erl_lint:error_info()</string>
		<string>erl_lint:error_info()</string>
		<string>erl_lint:error_info()</string>
		<string>erl_parse:abstract_clause()</string>
		<string>erl_parse:abstract_clause()</string>
		<string>erl_parse:abstract_clause()</string>
		<string>erl_parse:abstract_expr()</string>
		<string>erl_parse:abstract_expr()</string>
		<string>erl_parse:abstract_expr()</string>
		<string>erl_parse:abstract_form()</string>
		<string>erl_parse:abstract_form()</string>
		<string>erl_parse:abstract_form()</string>
		<string>erl_parse:encoding_func()</string>
		<string>erl_parse:encoding_func()</string>
		<string>erl_parse:encoding_func()</string>
		<string>erl_parse:error_description()</string>
		<string>erl_parse:error_description()</string>
		<string>erl_parse:error_description()</string>
		<string>erl_parse:error_info()</string>
		<string>erl_parse:error_info()</string>
		<string>erl_parse:error_info()</string>
		<string>erl_parse:pre_op()</string>
		<string>erl_parse:pre_op()</string>
		<string>erl_parse:pre_op()</string>
		<string>erl_parse:token()</string>
		<string>erl_parse:token()</string>
		<string>erl_parse:token()</string>
		<string>erl_parse:yecc_ret()</string>
		<string>erl_parse:yecc_ret()</string>
		<string>erl_parse:yecc_ret()</string>
		<string>erl_pp:hook_function()</string>
		<string>erl_pp:hook_function()</string>
		<string>erl_pp:hook_function()</string>
		<string>erl_pp:option()</string>
		<string>erl_pp:option()</string>
		<string>erl_pp:option()</string>
		<string>erl_pp:options()</string>
		<string>erl_pp:options()</string>
		<string>erl_pp:options()</string>
		<string>erl_prim_loader:host()</string>
		<string>erl_prim_loader:host()</string>
		<string>erl_prim_loader:host()</string>
		<string>erl_prim_loader:prim_state()</string>
		<string>erl_prim_loader:prim_state()</string>
		<string>erl_prim_loader:prim_state()</string>
		<string>erl_scan:attribute_info()</string>
		<string>erl_scan:attribute_info()</string>
		<string>erl_scan:attribute_info()</string>
		<string>erl_scan:attribute_item()</string>
		<string>erl_scan:attribute_item()</string>
		<string>erl_scan:attribute_item()</string>
		<string>erl_scan:attributes()</string>
		<string>erl_scan:attributes()</string>
		<string>erl_scan:attributes()</string>
		<string>erl_scan:attributes_data()</string>
		<string>erl_scan:attributes_data()</string>
		<string>erl_scan:attributes_data()</string>
		<string>erl_scan:category()</string>
		<string>erl_scan:category()</string>
		<string>erl_scan:category()</string>
		<string>erl_scan:char_spec()</string>
		<string>erl_scan:char_spec()</string>
		<string>erl_scan:char_spec()</string>
		<string>erl_scan:column()</string>
		<string>erl_scan:column()</string>
		<string>erl_scan:column()</string>
		<string>erl_scan:error_description()</string>
		<string>erl_scan:error_description()</string>
		<string>erl_scan:error_description()</string>
		<string>erl_scan:error_info()</string>
		<string>erl_scan:error_info()</string>
		<string>erl_scan:error_info()</string>
		<string>erl_scan:info_line()</string>
		<string>erl_scan:info_line()</string>
		<string>erl_scan:info_line()</string>
		<string>erl_scan:info_location()</string>
		<string>erl_scan:info_location()</string>
		<string>erl_scan:info_location()</string>
		<string>erl_scan:line()</string>
		<string>erl_scan:line()</string>
		<string>erl_scan:line()</string>
		<string>erl_scan:location()</string>
		<string>erl_scan:location()</string>
		<string>erl_scan:location()</string>
		<string>erl_scan:option()</string>
		<string>erl_scan:option()</string>
		<string>erl_scan:option()</string>
		<string>erl_scan:options()</string>
		<string>erl_scan:options()</string>
		<string>erl_scan:options()</string>
		<string>erl_scan:resword_fun()</string>
		<string>erl_scan:resword_fun()</string>
		<string>erl_scan:resword_fun()</string>
		<string>erl_scan:return_cont()</string>
		<string>erl_scan:return_cont()</string>
		<string>erl_scan:return_cont()</string>
		<string>erl_scan:symbol()</string>
		<string>erl_scan:symbol()</string>
		<string>erl_scan:symbol()</string>
		<string>erl_scan:token()</string>
		<string>erl_scan:token()</string>
		<string>erl_scan:token()</string>
		<string>erl_scan:token_info()</string>
		<string>erl_scan:token_info()</string>
		<string>erl_scan:token_info()</string>
		<string>erl_scan:token_item()</string>
		<string>erl_scan:token_item()</string>
		<string>erl_scan:token_item()</string>
		<string>erl_scan:tokens()</string>
		<string>erl_scan:tokens()</string>
		<string>erl_scan:tokens()</string>
		<string>erl_scan:tokens_result()</string>
		<string>erl_scan:tokens_result()</string>
		<string>erl_scan:tokens_result()</string>
		<string>bitstring_list()</string>
		<string>bitstring_list()</string>
		<string>bitstring_list()</string>
		<string>cpu_topology()</string>
		<string>cpu_topology()</string>
		<string>cpu_topology()</string>
		<string>dst()</string>
		<string>dst()</string>
		<string>dst()</string>
		<string>ext_binary()</string>
		<string>ext_binary()</string>
		<string>ext_binary()</string>
		<string>fun_info_item()</string>
		<string>fun_info_item()</string>
		<string>fun_info_item()</string>
		<string>info_list()</string>
		<string>info_list()</string>
		<string>info_list()</string>
		<string>level_entry()</string>
		<string>level_entry()</string>
		<string>level_entry()</string>
		<string>level_tag()</string>
		<string>level_tag()</string>
		<string>level_tag()</string>
		<string>memory_type()</string>
		<string>memory_type()</string>
		<string>memory_type()</string>
		<string>priority_level()</string>
		<string>priority_level()</string>
		<string>priority_level()</string>
		<string>process_info_item()</string>
		<string>process_info_item()</string>
		<string>process_info_item()</string>
		<string>process_info_result_item()</string>
		<string>process_info_result_item()</string>
		<string>process_info_result_item()</string>
		<string>raise_stacktrace()</string>
		<string>raise_stacktrace()</string>
		<string>raise_stacktrace()</string>
		<string>scheduler_bind_type()</string>
		<string>scheduler_bind_type()</string>
		<string>scheduler_bind_type()</string>
		<string>seq_trace_info()</string>
		<string>seq_trace_info()</string>
		<string>seq_trace_info()</string>
		<string>seq_trace_info_returns()</string>
		<string>seq_trace_info_returns()</string>
		<string>seq_trace_info_returns()</string>
		<string>stack_item()</string>
		<string>stack_item()</string>
		<string>stack_item()</string>
		<string>sub_level()</string>
		<string>sub_level()</string>
		<string>sub_level()</string>
		<string>system_monitor_option()</string>
		<string>system_monitor_option()</string>
		<string>system_monitor_option()</string>
		<string>system_profile_option()</string>
		<string>system_profile_option()</string>
		<string>system_profile_option()</string>
		<string>timestamp()</string>
		<string>timestamp()</string>
		<string>timestamp()</string>
		<string>trace_flag()</string>
		<string>trace_flag()</string>
		<string>trace_flag()</string>
		<string>trace_info_flag()</string>
		<string>trace_info_flag()</string>
		<string>trace_info_flag()</string>
		<string>trace_info_item_result()</string>
		<string>trace_info_item_result()</string>
		<string>trace_info_item_result()</string>
		<string>trace_info_return()</string>
		<string>trace_info_return()</string>
		<string>trace_info_return()</string>
		<string>trace_match_spec()</string>
		<string>trace_match_spec()</string>
		<string>trace_match_spec()</string>
		<string>trace_pattern_flag()</string>
		<string>trace_pattern_flag()</string>
		<string>trace_pattern_flag()</string>
		<string>trace_pattern_mfa()</string>
		<string>trace_pattern_mfa()</string>
		<string>trace_pattern_mfa()</string>
		<string>error_logger:open_error()</string>
		<string>error_logger:open_error()</string>
		<string>error_logger:open_error()</string>
		<string>error_logger:report()</string>
		<string>error_logger:report()</string>
		<string>error_logger:report()</string>
		<string>error_logger:state()</string>
		<string>error_logger:state()</string>
		<string>error_logger:state()</string>
		<string>error_logger:swap_handler_type()</string>
		<string>error_logger:swap_handler_type()</string>
		<string>error_logger:swap_handler_type()</string>
		<string>ets:access()</string>
		<string>ets:access()</string>
		<string>ets:access()</string>
		<string>ets:comp_match_spec()</string>
		<string>ets:comp_match_spec()</string>
		<string>ets:comp_match_spec()</string>
		<string>ets:continuation()</string>
		<string>ets:continuation()</string>
		<string>ets:continuation()</string>
		<string>ets:match_pattern()</string>
		<string>ets:match_pattern()</string>
		<string>ets:match_pattern()</string>
		<string>ets:match_spec()</string>
		<string>ets:match_spec()</string>
		<string>ets:match_spec()</string>
		<string>ets:tab()</string>
		<string>ets:tab()</string>
		<string>ets:tab()</string>
		<string>ets:tid()</string>
		<string>ets:tid()</string>
		<string>ets:tid()</string>
		<string>ets:type()</string>
		<string>ets:type()</string>
		<string>ets:type()</string>
		<string>file:date_time()</string>
		<string>file:date_time()</string>
		<string>file:date_time()</string>
		<string>file:deep_list()</string>
		<string>file:deep_list()</string>
		<string>file:deep_list()</string>
		<string>file:fd()</string>
		<string>file:fd()</string>
		<string>file:fd()</string>
		<string>file:file_info()</string>
		<string>file:file_info()</string>
		<string>file:file_info()</string>
		<string>file:file_info_option()</string>
		<string>file:file_info_option()</string>
		<string>file:file_info_option()</string>
		<string>file:filename()</string>
		<string>file:filename()</string>
		<string>file:filename()</string>
		<string>file:filename_all()</string>
		<string>file:filename_all()</string>
		<string>file:filename_all()</string>
		<string>file:io_device()</string>
		<string>file:io_device()</string>
		<string>file:io_device()</string>
		<string>file:location()</string>
		<string>file:location()</string>
		<string>file:location()</string>
		<string>file:mode()</string>
		<string>file:mode()</string>
		<string>file:mode()</string>
		<string>file:name()</string>
		<string>file:name()</string>
		<string>file:name()</string>
		<string>file:name_all()</string>
		<string>file:name_all()</string>
		<string>file:name_all()</string>
		<string>file:posix()</string>
		<string>file:posix()</string>
		<string>file:posix()</string>
		<string>file:posix_file_advise()</string>
		<string>file:posix_file_advise()</string>
		<string>file:posix_file_advise()</string>
		<string>file:sendfile_option()</string>
		<string>file:sendfile_option()</string>
		<string>file:sendfile_option()</string>
		<string>file_sorter:file_name()</string>
		<string>file_sorter:file_name()</string>
		<string>file_sorter:file_name()</string>
		<string>file_sorter:file_names()</string>
		<string>file_sorter:file_names()</string>
		<string>file_sorter:file_names()</string>
		<string>file_sorter:format()</string>
		<string>file_sorter:format()</string>
		<string>file_sorter:format()</string>
		<string>file_sorter:format_fun()</string>
		<string>file_sorter:format_fun()</string>
		<string>file_sorter:format_fun()</string>
		<string>file_sorter:header_length()</string>
		<string>file_sorter:header_length()</string>
		<string>file_sorter:header_length()</string>
		<string>file_sorter:i_command()</string>
		<string>file_sorter:i_command()</string>
		<string>file_sorter:i_command()</string>
		<string>file_sorter:i_reply()</string>
		<string>file_sorter:i_reply()</string>
		<string>file_sorter:i_reply()</string>
		<string>file_sorter:infun()</string>
		<string>file_sorter:infun()</string>
		<string>file_sorter:infun()</string>
		<string>file_sorter:input()</string>
		<string>file_sorter:input()</string>
		<string>file_sorter:input()</string>
		<string>file_sorter:input_reply()</string>
		<string>file_sorter:input_reply()</string>
		<string>file_sorter:input_reply()</string>
		<string>file_sorter:key_pos()</string>
		<string>file_sorter:key_pos()</string>
		<string>file_sorter:key_pos()</string>
		<string>file_sorter:no_files()</string>
		<string>file_sorter:no_files()</string>
		<string>file_sorter:no_files()</string>
		<string>file_sorter:o_command()</string>
		<string>file_sorter:o_command()</string>
		<string>file_sorter:o_command()</string>
		<string>file_sorter:o_reply()</string>
		<string>file_sorter:o_reply()</string>
		<string>file_sorter:o_reply()</string>
		<string>file_sorter:object()</string>
		<string>file_sorter:object()</string>
		<string>file_sorter:object()</string>
		<string>file_sorter:option()</string>
		<string>file_sorter:option()</string>
		<string>file_sorter:option()</string>
		<string>file_sorter:options()</string>
		<string>file_sorter:options()</string>
		<string>file_sorter:options()</string>
		<string>file_sorter:order()</string>
		<string>file_sorter:order()</string>
		<string>file_sorter:order()</string>
		<string>file_sorter:order_fun()</string>
		<string>file_sorter:order_fun()</string>
		<string>file_sorter:order_fun()</string>
		<string>file_sorter:outfun()</string>
		<string>file_sorter:outfun()</string>
		<string>file_sorter:outfun()</string>
		<string>file_sorter:output()</string>
		<string>file_sorter:output()</string>
		<string>file_sorter:output()</string>
		<string>file_sorter:output_reply()</string>
		<string>file_sorter:output_reply()</string>
		<string>file_sorter:output_reply()</string>
		<string>file_sorter:reason()</string>
		<string>file_sorter:reason()</string>
		<string>file_sorter:reason()</string>
		<string>file_sorter:size()</string>
		<string>file_sorter:size()</string>
		<string>file_sorter:size()</string>
		<string>file_sorter:tmp_directory()</string>
		<string>file_sorter:tmp_directory()</string>
		<string>file_sorter:tmp_directory()</string>
		<string>file_sorter:value()</string>
		<string>file_sorter:value()</string>
		<string>file_sorter:value()</string>
		<string>filelib:dirname()</string>
		<string>filelib:dirname()</string>
		<string>filelib:dirname()</string>
		<string>filelib:dirname_all()</string>
		<string>filelib:dirname_all()</string>
		<string>filelib:dirname_all()</string>
		<string>filelib:filename()</string>
		<string>filelib:filename()</string>
		<string>filelib:filename()</string>
		<string>filelib:filename_all()</string>
		<string>filelib:filename_all()</string>
		<string>filelib:filename_all()</string>
		<string>gb_sets:iter()</string>
		<string>gb_sets:iter()</string>
		<string>gb_sets:iter()</string>
		<string>gb_sets:iter()</string>
		<string>gb_sets:iter(&lt;#Element#&gt;)</string>
		<string>gb_sets:iter(Element)</string>
		<string>gb_sets:set()</string>
		<string>gb_sets:set()</string>
		<string>gb_sets:set()</string>
		<string>gb_sets:set()</string>
		<string>gb_sets:set(&lt;#Element#&gt;)</string>
		<string>gb_sets:set(Element)</string>
		<string>gb_trees:iter()</string>
		<string>gb_trees:iter()</string>
		<string>gb_trees:iter()</string>
		<string>gb_trees:iter()</string>
		<string>gb_trees:iter(&lt;#Key#&gt;, &lt;#Value#&gt;)</string>
		<string>gb_trees:iter(Key, Value)</string>
		<string>gb_trees:tree()</string>
		<string>gb_trees:tree()</string>
		<string>gb_trees:tree()</string>
		<string>gb_trees:tree()</string>
		<string>gb_trees:tree(&lt;#Key#&gt;, &lt;#Value#&gt;)</string>
		<string>gb_trees:tree(Key, Value)</string>
		<string>gen_event:add_handler_ret()</string>
		<string>gen_event:add_handler_ret()</string>
		<string>gen_event:add_handler_ret()</string>
		<string>gen_event:del_handler_ret()</string>
		<string>gen_event:del_handler_ret()</string>
		<string>gen_event:del_handler_ret()</string>
		<string>gen_event:emgr_name()</string>
		<string>gen_event:emgr_name()</string>
		<string>gen_event:emgr_name()</string>
		<string>gen_event:emgr_ref()</string>
		<string>gen_event:emgr_ref()</string>
		<string>gen_event:emgr_ref()</string>
		<string>gen_event:handler()</string>
		<string>gen_event:handler()</string>
		<string>gen_event:handler()</string>
		<string>gen_event:handler_args()</string>
		<string>gen_event:handler_args()</string>
		<string>gen_event:handler_args()</string>
		<string>gen_event:start_ret()</string>
		<string>gen_event:start_ret()</string>
		<string>gen_event:start_ret()</string>
		<string>gen_sctp:assoc_id()</string>
		<string>gen_sctp:assoc_id()</string>
		<string>gen_sctp:assoc_id()</string>
		<string>gen_sctp:option()</string>
		<string>gen_sctp:option()</string>
		<string>gen_sctp:option()</string>
		<string>gen_sctp:option_name()</string>
		<string>gen_sctp:option_name()</string>
		<string>gen_sctp:option_name()</string>
		<string>gen_sctp:sctp_socket()</string>
		<string>gen_sctp:sctp_socket()</string>
		<string>gen_sctp:sctp_socket()</string>
		<string>gen_tcp:connect_option()</string>
		<string>gen_tcp:connect_option()</string>
		<string>gen_tcp:connect_option()</string>
		<string>gen_tcp:listen_option()</string>
		<string>gen_tcp:listen_option()</string>
		<string>gen_tcp:listen_option()</string>
		<string>gen_tcp:option()</string>
		<string>gen_tcp:option()</string>
		<string>gen_tcp:option()</string>
		<string>gen_tcp:option_name()</string>
		<string>gen_tcp:option_name()</string>
		<string>gen_tcp:option_name()</string>
		<string>gen_tcp:socket()</string>
		<string>gen_tcp:socket()</string>
		<string>gen_tcp:socket()</string>
		<string>gen_udp:option()</string>
		<string>gen_udp:option()</string>
		<string>gen_udp:option()</string>
		<string>gen_udp:option_name()</string>
		<string>gen_udp:option_name()</string>
		<string>gen_udp:option_name()</string>
		<string>gen_udp:socket()</string>
		<string>gen_udp:socket()</string>
		<string>gen_udp:socket()</string>
		<string>global:id()</string>
		<string>global:id()</string>
		<string>global:id()</string>
		<string>global:method()</string>
		<string>global:method()</string>
		<string>global:method()</string>
		<string>global:retries()</string>
		<string>global:retries()</string>
		<string>global:retries()</string>
		<string>global:state()</string>
		<string>global:state()</string>
		<string>global:state()</string>
		<string>global:trans_fun()</string>
		<string>global:trans_fun()</string>
		<string>global:trans_fun()</string>
		<string>global_group:group_name()</string>
		<string>global_group:group_name()</string>
		<string>global_group:group_name()</string>
		<string>global_group:group_tuple()</string>
		<string>global_group:group_tuple()</string>
		<string>global_group:group_tuple()</string>
		<string>global_group:info_item()</string>
		<string>global_group:info_item()</string>
		<string>global_group:info_item()</string>
		<string>global_group:name()</string>
		<string>global_group:name()</string>
		<string>global_group:name()</string>
		<string>global_group:publish_type()</string>
		<string>global_group:publish_type()</string>
		<string>global_group:publish_type()</string>
		<string>global_group:sync_state()</string>
		<string>global_group:sync_state()</string>
		<string>global_group:sync_state()</string>
		<string>global_group:where()</string>
		<string>global_group:where()</string>
		<string>global_group:where()</string>
		<string>inet:address_family()</string>
		<string>inet:address_family()</string>
		<string>inet:address_family()</string>
		<string>inet:ether_address()</string>
		<string>inet:ether_address()</string>
		<string>inet:ether_address()</string>
		<string>inet:hostent()</string>
		<string>inet:hostent()</string>
		<string>inet:hostent()</string>
		<string>inet:hostname()</string>
		<string>inet:hostname()</string>
		<string>inet:hostname()</string>
		<string>inet:if_getopt()</string>
		<string>inet:if_getopt()</string>
		<string>inet:if_getopt()</string>
		<string>inet:if_getopt_result()</string>
		<string>inet:if_getopt_result()</string>
		<string>inet:if_getopt_result()</string>
		<string>inet:if_setopt()</string>
		<string>inet:if_setopt()</string>
		<string>inet:if_setopt()</string>
		<string>inet:ip4_address()</string>
		<string>inet:ip4_address()</string>
		<string>inet:ip4_address()</string>
		<string>inet:ip6_address()</string>
		<string>inet:ip6_address()</string>
		<string>inet:ip6_address()</string>
		<string>inet:ip_address()</string>
		<string>inet:ip_address()</string>
		<string>inet:ip_address()</string>
		<string>inet:port_number()</string>
		<string>inet:port_number()</string>
		<string>inet:port_number()</string>
		<string>inet:posix()</string>
		<string>inet:posix()</string>
		<string>inet:posix()</string>
		<string>inet:socket()</string>
		<string>inet:socket()</string>
		<string>inet:socket()</string>
		<string>inet:socket_getopt()</string>
		<string>inet:socket_getopt()</string>
		<string>inet:socket_getopt()</string>
		<string>inet:socket_protocol()</string>
		<string>inet:socket_protocol()</string>
		<string>inet:socket_protocol()</string>
		<string>inet:socket_setopt()</string>
		<string>inet:socket_setopt()</string>
		<string>inet:socket_setopt()</string>
		<string>inet:socket_type()</string>
		<string>inet:socket_type()</string>
		<string>inet:socket_type()</string>
		<string>inet:stat_option()</string>
		<string>inet:stat_option()</string>
		<string>inet:stat_option()</string>
		<string>inet_res:dns_class()</string>
		<string>inet_res:dns_class()</string>
		<string>inet_res:dns_class()</string>
		<string>inet_res:dns_data()</string>
		<string>inet_res:dns_data()</string>
		<string>inet_res:dns_data()</string>
		<string>inet_res:dns_msg()</string>
		<string>inet_res:dns_msg()</string>
		<string>inet_res:dns_msg()</string>
		<string>inet_res:dns_name()</string>
		<string>inet_res:dns_name()</string>
		<string>inet_res:dns_name()</string>
		<string>inet_res:nameserver()</string>
		<string>inet_res:nameserver()</string>
		<string>inet_res:nameserver()</string>
		<string>inet_res:res_error()</string>
		<string>inet_res:res_error()</string>
		<string>inet_res:res_error()</string>
		<string>inet_res:res_option()</string>
		<string>inet_res:res_option()</string>
		<string>inet_res:res_option()</string>
		<string>inet_res:rr_type()</string>
		<string>inet_res:rr_type()</string>
		<string>inet_res:rr_type()</string>
		<string>init:internal_status()</string>
		<string>init:internal_status()</string>
		<string>init:internal_status()</string>
		<string>io:device()</string>
		<string>io:device()</string>
		<string>io:device()</string>
		<string>io:encoding()</string>
		<string>io:encoding()</string>
		<string>io:encoding()</string>
		<string>io:expand_fun()</string>
		<string>io:expand_fun()</string>
		<string>io:expand_fun()</string>
		<string>io:format()</string>
		<string>io:format()</string>
		<string>io:format()</string>
		<string>io:location()</string>
		<string>io:location()</string>
		<string>io:location()</string>
		<string>io:opt_pair()</string>
		<string>io:opt_pair()</string>
		<string>io:opt_pair()</string>
		<string>io:parse_form_ret()</string>
		<string>io:parse_form_ret()</string>
		<string>io:parse_form_ret()</string>
		<string>io:parse_ret()</string>
		<string>io:parse_ret()</string>
		<string>io:parse_ret()</string>
		<string>io:prompt()</string>
		<string>io:prompt()</string>
		<string>io:prompt()</string>
		<string>io:server_no_data()</string>
		<string>io:server_no_data()</string>
		<string>io:server_no_data()</string>
		<string>io:setopt()</string>
		<string>io:setopt()</string>
		<string>io:setopt()</string>
		<string>io_lib:chars()</string>
		<string>io_lib:chars()</string>
		<string>io_lib:chars()</string>
		<string>io_lib:continuation()</string>
		<string>io_lib:continuation()</string>
		<string>io_lib:continuation()</string>
		<string>io_lib:depth()</string>
		<string>io_lib:depth()</string>
		<string>io_lib:depth()</string>
		<string>io_lib:fread_error()</string>
		<string>io_lib:fread_error()</string>
		<string>io_lib:fread_error()</string>
		<string>io_lib:fread_item()</string>
		<string>io_lib:fread_item()</string>
		<string>io_lib:fread_item()</string>
		<string>io_lib:latin1_string()</string>
		<string>io_lib:latin1_string()</string>
		<string>io_lib:latin1_string()</string>
		<string>log_mf_h:args()</string>
		<string>log_mf_h:args()</string>
		<string>log_mf_h:args()</string>
		<string>log_mf_h:b()</string>
		<string>log_mf_h:b()</string>
		<string>log_mf_h:b()</string>
		<string>log_mf_h:f()</string>
		<string>log_mf_h:f()</string>
		<string>log_mf_h:f()</string>
		<string>log_mf_h:pred()</string>
		<string>log_mf_h:pred()</string>
		<string>log_mf_h:pred()</string>
		<string>net_adm:verbosity()</string>
		<string>net_adm:verbosity()</string>
		<string>net_adm:verbosity()</string>
		<string>orddict:orddict()</string>
		<string>orddict:orddict()</string>
		<string>orddict:orddict()</string>
		<string>ordsets:ordset()</string>
		<string>ordsets:ordset(&lt;#T#&gt;)</string>
		<string>ordsets:ordset(T)</string>
		<string>pg2:name()</string>
		<string>pg2:name()</string>
		<string>pg2:name()</string>
		<string>pg2:state()</string>
		<string>pg2:state()</string>
		<string>pg2:state()</string>
		<string>proc_lib:dict_or_pid()</string>
		<string>proc_lib:dict_or_pid()</string>
		<string>proc_lib:dict_or_pid()</string>
		<string>proc_lib:priority_level()</string>
		<string>proc_lib:priority_level()</string>
		<string>proc_lib:priority_level()</string>
		<string>proc_lib:spawn_option()</string>
		<string>proc_lib:spawn_option()</string>
		<string>proc_lib:spawn_option()</string>
		<string>proplists:property()</string>
		<string>proplists:property()</string>
		<string>proplists:property()</string>
		<string>proplists:proplist()</string>
		<string>proplists:proplist()</string>
		<string>proplists:proplist()</string>
		<string>qlc:abstract_expr()</string>
		<string>qlc:abstract_expr()</string>
		<string>qlc:abstract_expr()</string>
		<string>qlc:answer()</string>
		<string>qlc:answer()</string>
		<string>qlc:answer()</string>
		<string>qlc:answers()</string>
		<string>qlc:answers()</string>
		<string>qlc:answers()</string>
		<string>qlc:cache()</string>
		<string>qlc:cache()</string>
		<string>qlc:cache()</string>
		<string>qlc:key_pos()</string>
		<string>qlc:key_pos()</string>
		<string>qlc:key_pos()</string>
		<string>qlc:match_expression()</string>
		<string>qlc:match_expression()</string>
		<string>qlc:match_expression()</string>
		<string>qlc:max_list_size()</string>
		<string>qlc:max_list_size()</string>
		<string>qlc:max_list_size()</string>
		<string>qlc:no_files()</string>
		<string>qlc:no_files()</string>
		<string>qlc:no_files()</string>
		<string>qlc:order()</string>
		<string>qlc:order()</string>
		<string>qlc:order()</string>
		<string>qlc:order_fun()</string>
		<string>qlc:order_fun()</string>
		<string>qlc:order_fun()</string>
		<string>qlc:query_cursor()</string>
		<string>qlc:query_cursor()</string>
		<string>qlc:query_cursor()</string>
		<string>qlc:query_handle()</string>
		<string>qlc:query_handle()</string>
		<string>qlc:query_handle()</string>
		<string>qlc:query_handle_or_list()</string>
		<string>qlc:query_handle_or_list()</string>
		<string>qlc:query_handle_or_list()</string>
		<string>qlc:query_list_comprehension()</string>
		<string>qlc:query_list_comprehension()</string>
		<string>qlc:query_list_comprehension()</string>
		<string>qlc:sort_option()</string>
		<string>qlc:sort_option()</string>
		<string>qlc:sort_option()</string>
		<string>qlc:sort_options()</string>
		<string>qlc:sort_options()</string>
		<string>qlc:sort_options()</string>
		<string>qlc:spawn_options()</string>
		<string>qlc:spawn_options()</string>
		<string>qlc:spawn_options()</string>
		<string>qlc:tmp_directory()</string>
		<string>qlc:tmp_directory()</string>
		<string>qlc:tmp_directory()</string>
		<string>qlc:tmp_file_usage()</string>
		<string>qlc:tmp_file_usage()</string>
		<string>qlc:tmp_file_usage()</string>
		<string>queue:queue()</string>
		<string>queue:queue()</string>
		<string>queue:queue()</string>
		<string>queue:queue()</string>
		<string>queue:queue(&lt;#Item#&gt;)</string>
		<string>queue:queue(Item)</string>
		<string>random:ran()</string>
		<string>random:ran()</string>
		<string>random:ran()</string>
		<string>re:compile_option()</string>
		<string>re:compile_option()</string>
		<string>re:compile_option()</string>
		<string>re:mp()</string>
		<string>re:mp()</string>
		<string>re:mp()</string>
		<string>re:nl_spec()</string>
		<string>re:nl_spec()</string>
		<string>re:nl_spec()</string>
		<string>rpc:key()</string>
		<string>rpc:key()</string>
		<string>rpc:key()</string>
		<string>rpc:state()</string>
		<string>rpc:state()</string>
		<string>rpc:state()</string>
		<string>seq_trace:component()</string>
		<string>seq_trace:component()</string>
		<string>seq_trace:component()</string>
		<string>seq_trace:flag()</string>
		<string>seq_trace:flag()</string>
		<string>seq_trace:flag()</string>
		<string>seq_trace:token()</string>
		<string>seq_trace:token()</string>
		<string>seq_trace:token()</string>
		<string>seq_trace:tracer()</string>
		<string>seq_trace:tracer()</string>
		<string>seq_trace:tracer()</string>
		<string>seq_trace:value()</string>
		<string>seq_trace:value()</string>
		<string>seq_trace:value()</string>
		<string>sets:set()</string>
		<string>sets:set()</string>
		<string>sets:set()</string>
		<string>sets:set()</string>
		<string>sets:set(&lt;#Element#&gt;)</string>
		<string>sets:set(Element)</string>
		<string>sofs:a_function()</string>
		<string>sofs:a_function()</string>
		<string>sofs:a_function()</string>
		<string>sofs:a_set()</string>
		<string>sofs:a_set()</string>
		<string>sofs:a_set()</string>
		<string>sofs:anyset()</string>
		<string>sofs:anyset()</string>
		<string>sofs:anyset()</string>
		<string>sofs:binary_relation()</string>
		<string>sofs:binary_relation()</string>
		<string>sofs:binary_relation()</string>
		<string>sofs:external_set()</string>
		<string>sofs:external_set()</string>
		<string>sofs:external_set()</string>
		<string>sofs:family()</string>
		<string>sofs:family()</string>
		<string>sofs:family()</string>
		<string>sofs:ordset()</string>
		<string>sofs:ordset()</string>
		<string>sofs:ordset()</string>
		<string>sofs:relation()</string>
		<string>sofs:relation()</string>
		<string>sofs:relation()</string>
		<string>sofs:set_fun()</string>
		<string>sofs:set_fun()</string>
		<string>sofs:set_fun()</string>
		<string>sofs:set_of_sets()</string>
		<string>sofs:set_of_sets()</string>
		<string>sofs:set_of_sets()</string>
		<string>sofs:spec_fun()</string>
		<string>sofs:spec_fun()</string>
		<string>sofs:spec_fun()</string>
		<string>sofs:tuple_of()</string>
		<string>sofs:tuple_of(&lt;#_T#&gt;)</string>
		<string>sofs:tuple_of(_T)</string>
		<string>sofs:type()</string>
		<string>sofs:type()</string>
		<string>sofs:type()</string>
		<string>supervisor:call()</string>
		<string>supervisor:call()</string>
		<string>supervisor:call()</string>
		<string>supervisor:child()</string>
		<string>supervisor:child()</string>
		<string>supervisor:child()</string>
		<string>supervisor:child_id()</string>
		<string>supervisor:child_id()</string>
		<string>supervisor:child_id()</string>
		<string>supervisor:child_rec()</string>
		<string>supervisor:child_rec()</string>
		<string>supervisor:child_rec()</string>
		<string>supervisor:child_spec()</string>
		<string>supervisor:child_spec()</string>
		<string>supervisor:child_spec()</string>
		<string>supervisor:init_sup_name()</string>
		<string>supervisor:init_sup_name()</string>
		<string>supervisor:init_sup_name()</string>
		<string>supervisor:mfargs()</string>
		<string>supervisor:mfargs()</string>
		<string>supervisor:mfargs()</string>
		<string>supervisor:modules()</string>
		<string>supervisor:modules()</string>
		<string>supervisor:modules()</string>
		<string>supervisor:restart()</string>
		<string>supervisor:restart()</string>
		<string>supervisor:restart()</string>
		<string>supervisor:shutdown()</string>
		<string>supervisor:shutdown()</string>
		<string>supervisor:shutdown()</string>
		<string>supervisor:startchild_err()</string>
		<string>supervisor:startchild_err()</string>
		<string>supervisor:startchild_err()</string>
		<string>supervisor:startchild_ret()</string>
		<string>supervisor:startchild_ret()</string>
		<string>supervisor:startchild_ret()</string>
		<string>supervisor:startlink_err()</string>
		<string>supervisor:startlink_err()</string>
		<string>supervisor:startlink_err()</string>
		<string>supervisor:startlink_ret()</string>
		<string>supervisor:startlink_ret()</string>
		<string>supervisor:startlink_ret()</string>
		<string>supervisor:state()</string>
		<string>supervisor:state()</string>
		<string>supervisor:state()</string>
		<string>supervisor:stop_rsn()</string>
		<string>supervisor:stop_rsn()</string>
		<string>supervisor:stop_rsn()</string>
		<string>supervisor:strategy()</string>
		<string>supervisor:strategy()</string>
		<string>supervisor:strategy()</string>
		<string>supervisor:sup_name()</string>
		<string>supervisor:sup_name()</string>
		<string>supervisor:sup_name()</string>
		<string>supervisor:sup_ref()</string>
		<string>supervisor:sup_ref()</string>
		<string>supervisor:sup_ref()</string>
		<string>supervisor:worker()</string>
		<string>supervisor:worker()</string>
		<string>supervisor:worker()</string>
		<string>sys:dbg_fun()</string>
		<string>sys:dbg_fun()</string>
		<string>sys:dbg_fun()</string>
		<string>sys:dbg_opt()</string>
		<string>sys:dbg_opt()</string>
		<string>sys:dbg_opt()</string>
		<string>sys:format_fun()</string>
		<string>sys:format_fun()</string>
		<string>sys:format_fun()</string>
		<string>sys:name()</string>
		<string>sys:name()</string>
		<string>sys:name()</string>
		<string>sys:system_event()</string>
		<string>sys:system_event()</string>
		<string>sys:system_event()</string>
		<string>timer:time()</string>
		<string>timer:time()</string>
		<string>timer:time()</string>
		<string>timer:timers()</string>
		<string>timer:timers()</string>
		<string>timer:timers()</string>
		<string>timer:tref()</string>
		<string>timer:tref()</string>
		<string>timer:tref()</string>
		<string>unicode:chardata()</string>
		<string>unicode:chardata()</string>
		<string>unicode:chardata()</string>
		<string>unicode:charlist()</string>
		<string>unicode:charlist()</string>
		<string>unicode:charlist()</string>
		<string>unicode:encoding()</string>
		<string>unicode:encoding()</string>
		<string>unicode:encoding()</string>
		<string>unicode:endian()</string>
		<string>unicode:endian()</string>
		<string>unicode:endian()</string>
		<string>unicode:external_chardata()</string>
		<string>unicode:external_chardata()</string>
		<string>unicode:external_chardata()</string>
		<string>unicode:external_charlist()</string>
		<string>unicode:external_charlist()</string>
		<string>unicode:external_charlist()</string>
		<string>unicode:external_unicode_binary()</string>
		<string>unicode:external_unicode_binary()</string>
		<string>unicode:external_unicode_binary()</string>
		<string>unicode:latin1_binary()</string>
		<string>unicode:latin1_binary()</string>
		<string>unicode:latin1_binary()</string>
		<string>unicode:latin1_char()</string>
		<string>unicode:latin1_char()</string>
		<string>unicode:latin1_char()</string>
		<string>unicode:latin1_chardata()</string>
		<string>unicode:latin1_chardata()</string>
		<string>unicode:latin1_chardata()</string>
		<string>unicode:latin1_charlist()</string>
		<string>unicode:latin1_charlist()</string>
		<string>unicode:latin1_charlist()</string>
		<string>unicode:unicode_binary()</string>
		<string>unicode:unicode_binary()</string>
		<string>unicode:unicode_binary()</string>
		<string>win32reg:name()</string>
		<string>win32reg:name()</string>
		<string>win32reg:name()</string>
		<string>win32reg:reg_handle()</string>
		<string>win32reg:reg_handle()</string>
		<string>win32reg:reg_handle()</string>
		<string>win32reg:value()</string>
		<string>win32reg:value()</string>
		<string>win32reg:value()</string>
		<string>wrap_log_reader:chunk_ret()</string>
		<string>wrap_log_reader:chunk_ret()</string>
		<string>wrap_log_reader:chunk_ret()</string>
		<string>wrap_log_reader:continuation()</string>
		<string>wrap_log_reader:continuation()</string>
		<string>wrap_log_reader:continuation()</string>
		<string>wrap_log_reader:open_ret()</string>
		<string>wrap_log_reader:open_ret()</string>
		<string>wrap_log_reader:open_ret()</string>
		<string>zip:create_option()</string>
		<string>zip:create_option()</string>
		<string>zip:create_option()</string>
		<string>zip:extension()</string>
		<string>zip:extension()</string>
		<string>zip:extension()</string>
		<string>zip:extension_spec()</string>
		<string>zip:extension_spec()</string>
		<string>zip:extension_spec()</string>
		<string>zip:filename()</string>
		<string>zip:filename()</string>
		<string>zip:filename()</string>
		<string>zip:zip_comment()</string>
		<string>zip:zip_comment()</string>
		<string>zip:zip_comment()</string>
		<string>zip:zip_file()</string>
		<string>zip:zip_file()</string>
		<string>zip:zip_file()</string>
		<string>zlib:zlevel()</string>
		<string>zlib:zlevel()</string>
		<string>zlib:zlevel()</string>
		<string>zlib:zmemlevel()</string>
		<string>zlib:zmemlevel()</string>
		<string>zlib:zmemlevel()</string>
		<string>zlib:zmethod()</string>
		<string>zlib:zmethod()</string>
		<string>zlib:zmethod()</string>
		<string>zlib:zstrategy()</string>
		<string>zlib:zstrategy()</string>
		<string>zlib:zstrategy()</string>
		<string>zlib:zstream()</string>
		<string>zlib:zstream()</string>
		<string>zlib:zstream()</string>
		<string>zlib:zwindowbits()</string>
		<string>zlib:zwindowbits()</string>
		<string>zlib:zwindowbits()</string>
	</array>
</dict>
</plist>
